/*
 * ilibglobal.js - define the ilib name space
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @namespace The global namespace that contains all ilib functions and classes.
 */
var ilib = ilib || {};

/**
 * Return the current version of ilib.
 * 
 * @return {string} a version string for this instance of ilib
 */
ilib.getVersion = function () {
    // increment this for each release
    return "5.0"
    ;
};

/**
 * Place where resources and such are eventually assigned.
 * @dict
 */
ilib.data = {
    norm: {
        nfc: {},
        nfd: {},
        nfkd: {},
        ccc: {}
    }
};

if (typeof(window) !== 'undefined') {
	window["ilib"] = ilib;
}

// export ilib for use as a module in nodejs
if (typeof(exports) !== 'undefined') {
	exports.ilib = ilib;
}

/**
 * @private
 * @static
 * Return the name of the platform
 * @return {string} string naming the platform
 */
ilib._getPlatform = function () {
	if (!ilib._platform) {
		if (typeof(environment) !== 'undefined') {
			ilib._platform = "rhino";
		} else if (typeof(process) !== 'undefined' || typeof(require) !== 'undefined') {
			ilib._platform = "nodejs";
		} else if (typeof(window) !== 'undefined') {
			ilib._platform = (typeof(PalmSystem) !== 'undefined') ? "webos" : "browser";
		} else {
			ilib._platform = "unknown";
		}
	}	
	return ilib._platform;
};

/**
 * @private
 * @static
 * Return true if the global variable is defined on this platform.
 * @return {boolean} true if the global variable is defined on this platform, false otherwise
 */
ilib._isGlobal = function(name) {
	switch (ilib._getPlatform()) {
		case "rhino":
			var top = (function() {
			  return (typeof global === 'object') ? global : this;
			})();
			return typeof(top[name]) !== undefined;
		case "nodejs":
			var root = typeof(global) !== 'undefined' ? global : this;
			return root && typeof(root[name]) !== undefined;
			
		default:
			return typeof(window[name]) !== undefined;
	}
};

/**
 * @static
 * Sets the default locale for all of ilib. This locale will be used
 * when no explicit locale is passed to any ilib class. If the default
 * locale is not set, ilib will attempt to use the locale of the
 * environment it is running in, if it can find that. If not, it will
 * default to the locale "en-US".<p>
 * 
 * Depends directive: !depends ilibglobal.js
 * 
 * @param {string} spec the locale specifier for the default locale
 */
ilib.setLocale = function (spec) {
	if (typeof(spec) === 'string') {
		ilib.locale = spec;
	}
    // else ignore other data types, as we don't have the dependencies
	// to look into them to find a locale
};

/**
 * @static
 * Return the default locale for all of ilib if one has been set. This 
 * locale will be used when no explicit locale is passed to any ilib 
 * class. If the default
 * locale is not set, ilib will attempt to use the locale of the
 * environment it is running in, if it can find that. If not, it will
 * default to the locale "en-US".<p>
 * 
 * Depends directive: !depends ilibglobal.js 
 * 
 * @return {string} the locale specifier for the default locale
 */
ilib.getLocale = function () {
	if (typeof(ilib.locale) !== 'string') {
		if (typeof(navigator) !== 'undefined' && typeof(navigator.language) !== 'undefined') {
			// running in a browser
			ilib.locale = navigator.language;  // FF/Opera/Chrome/Webkit
			if (!ilib.locale) {
				// IE on Windows
				var lang = typeof(navigator.browserLanguage) !== 'undefined' ? 
					navigator.browserLanguage : 
					(typeof(navigator.userLanguage) !== 'undefined' ? 
						navigator.userLanguage : 
						(typeof(navigator.systemLanguage) !== 'undefined' ?
							navigator.systemLanguage :
							undefined));
				if (typeof(lang) !== 'undefined' && lang) {
					// for some reason, MS uses lower case region tags
					ilib.locale = lang.substring(0,3) + lang.substring(3,5).toUpperCase();
				}
			}
		} else if (typeof(PalmSystem) !== 'undefined' && typeof(PalmSystem.locales) !== 'undefined') {
			// webOS
			if (typeof(PalmSystem.locales.UI) != 'undefined' && PalmSystem.locales.UI.length > 0) {
				ilib.locale = PalmSystem.locales.UI;
			}
		} else if (typeof(environment) !== 'undefined' && typeof(environment.user) !== 'undefined') {
			// running under rhino
			if (typeof(environment.user.language) === 'string' && environment.user.language.length > 0) {
				ilib.locale = environment.user.language;
				if (typeof(environment.user.country) === 'string' && environment.user.country.length > 0) {
					ilib.locale += '-' + environment.user.country;
				}
			}
		} else if (typeof(process) !== 'undefined' && typeof(process.env) !== 'undefined') {
			// running under nodejs
			var lang = process.env.LANG || process.env.LC_ALL;
			// the LANG variable on unix is in the form "lang_REGION.CHARSET"
			// where language and region are the correct ISO codes separated by
			// an underscore. This translate it back to the BCP-47 form.
			if (lang && lang !== 'undefined') {
				ilib.locale = lang.substring(0,2).toLowerCase() + '-' + lang.substring(3,5).toUpperCase();
			}
		}
			 
		ilib.locale = typeof(ilib.locale) === 'string' ? ilib.locale : 'en-US';
	}
    return ilib.locale;
};

/**
 * @static
 * Sets the default time zone for all of ilib. This time zone will be used when
 * no explicit time zone is passed to any ilib class. If the default time zone
 * is not set, ilib will attempt to use the time zone of the
 * environment it is running in, if it can find that. If not, it will
 * default to the the UTC zone "Etc/UTC".<p>
 * 
 * Depends directive: !depends ilibglobal.js
 * 
 * @param {string} tz the name of the time zone to set as the default time zone
 */
ilib.setTimeZone = function (tz) {
    ilib.tz = tz || ilib.tz;
};

/**
 * @static
 * Return the default time zone for all of ilib if one has been set. This 
 * time zone will be used when no explicit time zone is passed to any ilib 
 * class. If the default time zone
 * is not set, ilib will attempt to use the locale of the
 * environment it is running in, if it can find that. If not, it will
 * default to the the zone "local".<p>
 * 
 * Depends directive: !depends ilibglobal.js
 * 
 * @return {string} the default time zone for ilib
 */
ilib.getTimeZone = function() {
	if (typeof(ilib.tz) === 'undefined') {
		if (typeof(navigator) !== 'undefined' && typeof(navigator.timezone) !== 'undefined') {
			// running in a browser
			if (navigator.timezone.length > 0) {
				ilib.tz = navigator.timezone;
			}
		} else if (typeof(PalmSystem) !== 'undefined' && typeof(PalmSystem.timezone) !== 'undefined') {
			// running in webkit on webOS
			if (PalmSystem.timezone.length > 0) {
				ilib.tz = PalmSystem.timezone;
			}
		} else if (typeof(environment) !== 'undefined' && typeof(environment.user) !== 'undefined') {
			// running under rhino
			if (typeof(environment.user.timezone) !== 'undefined' && environment.user.timezone.length > 0) {
				ilib.tz = environment.user.timezone;
			}
		} else if (typeof(process) !== 'undefined' && typeof(process.env) !== 'undefined') {
			// running in nodejs
			if (process.env.TZ && process.env.TZ !== "undefined") {
				ilib.tz = process.env.TZ;
			}
		}
		
		ilib.tz = ilib.tz || "local"; 
	}

    return ilib.tz;
};

/**
 * @static
 * Define a callback function for loading missing locale data or resources.
 * If this copy of ilib is assembled without including the required locale data
 * or resources, then that data can be lazy loaded dynamically when it is 
 * needed by calling this callback function. Each ilib class will first
 * check for the existence of data under ilib.data, and if it is not there, 
 * it will attempt to load it by calling this loader function, and then place
 * it there.<p>
 * 
 * Suggested implementations of the callback function might be to load files 
 * directly from disk under nodejs or rhino, or within web pages, to load 
 * files from the server with XHR calls.<p>
 * 
 * The expected API for the call back is:
 * 
 * <pre>
 * function(paths, sync, params, callback) {}
 * </pre>
 * 
 * The first parameter to the callback
 * function, paths, is an array of relative paths within the ilib dir structure for the 
 * requested data. These paths will already have the locale spec integrated 
 * into them, so no further tweaking needs to happen to load the data. Simply
 * load the named files. The second
 * parameter tells the loader whether to load the files synchronously or asynchronously.
 * If the sync parameters is false, then the onLoad function must also be specified.
 * The third parameter gives extra parameters to the loader passed from the calling
 * code. This may contain any property/value pairs.  The last parameter, callback,
 * is a callback function to call when all of the data is finishing loading. Make
 * sure to call the callback with the context of "this" so that the caller has their 
 * context back again.<p>
 * 
 * The loader function must be able to operate either synchronously or asychronously. 
 * If the loader function is called with an undefined callback function, it is
 * expected to load the data synchronously, convert it to javascript
 * objects, and return the array of json objects as the return value of the 
 * function. If the loader 
 * function is called with a callback function, it may load the data 
 * synchronously or asynchronously (doesn't matter which) as long as it calls
 * the callback function with the data converted to a javascript objects
 * when it becomes available. If a particular file could not be loaded, the 
 * loader function should put undefined into the corresponding entry in the
 * results array. 
 * Note that it is important that all the data is loaded before the callback
 * is called.<p>
 * 
 * An example implementation for nodejs might be:
 * 
 * <pre>
 * function loadFiles(context, paths, results, callback) {
 *    if (paths.length > 0) {
 *        var file = paths.shift();
 *        fs.readFile(file, "utf-8", function(err, json) {
 *            results.push(err ? undefined : JSON.parse(json));
 *            if (paths.length > 0) {
 *                loadFiles(context, paths, results, callback);
 *            } else {
 *                callback.call(context, results);
 *            }
 *        });
 *     }
 * }
 * // bind to "this" so that "this" is relative to your own instance
 * ilib.setLoaderCallback(ilib.bind(this, function(paths, sync, params, callback) {
 *    if (sync) {
 *        var ret = [];
 *        // synchronous
 *        paths.forEach(function (path) {
 *            var json = fs.readFileSync(path, "utf-8");
 *            ret.push(json ? JSON.parse(json) : undefined);
 *        });
 *        
 *        return ret;
 *    }
 *
 *    // asynchronous
 *    var results = [];
 *    loadFiles(this, paths, results, callback);
 * }));
 * </pre>
 * 
 * @param {function(Array.<string>,Boolean,Object,function(Object))} loader function to call to 
 * load the requested data.
 * @return {boolean} true if the loader was installed correctly, or false
 * if not
 */
ilib.setLoaderCallback = function(loader) {
    // only a basic check
    if (typeof(loader) === 'function' || typeof(loader) === 'undefined') {
    	// console.log("setting callback loader to " + (loader ? loader.name : "undefined"));
        ilib._load = loader;
        return true;
    }
    return false;
};

/*
 * locale.js - Locale specifier definition
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * @class
 * Create a new locale instance. Locales are specified either with a specifier string 
 * that follows the BCP-47 convention (roughly: "language-region-script-variant") or 
 * with 4 parameters that specify the language, region, variant, and script individually.<p>
 * 
 * The language is given as an ISO 639-1 two-letter, lower-case language code. You
 * can find a full list of these codes at 
 * <a href="http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</a><p>
 * 
 * The region is given as an ISO 3166-1 two-letter, upper-case region code. You can
 * find a full list of these codes at 
 * <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</a>.<p>
 * 
 * The variant is any string that does not contain a dash which further differentiates
 * locales from each other.<p>
 * 
 * The script is given as the ISO 15924 four-letter script code. In some locales,
 * text may be validly written in more than one script. For example, Serbian is often
 * written in both Latin and Cyrillic, though not usually mixed together. You can find a
 * full list of these codes at 
 * <a href="http://en.wikipedia.org/wiki/ISO_15924#List_of_codes">http://en.wikipedia.org/wiki/ISO_15924#List_of_codes</a>.<p>
 * 
 * As an example in ilib, the script can be used in the date formatter. Dates formatted 
 * in Serbian could have day-of-week names or month names written in the Latin
 * or Cyrillic script. Often one script is default such that sr-SR-Latn is the same
 * as sr-SR so the script code "Latn" can be left off of the locale spec.<p> 
 * 
 * Each part is optional, and an empty string in the specifier before or after a 
 * dash or as a parameter to the constructor denotes an unspecified value. In this
 * case, many of the ilib functions will treat the locale as generic. For example
 * the locale "en-" is equivalent to "en" and to "en--" and denotes a locale
 * of "English" with an unspecified region and variant, which typically matches
 * any region or variant.<p>
 * 
 * Without any arguments to the constructor, this function returns the locale of
 * the host Javascript engine.<p>
 * 
 * Depends directive: !depends locale.js
 * 
 * @constructor
 * @param {?string|ilib.Locale=} language the ISO 639 2-letter code for the language, or a full 
 * locale spec in BCP-47 format, or another ilib.Locale instance to copy from
 * @param {string=} region the ISO 3166 2-letter code for the region
 * @param {string=} variant the name of the variant of this locale, if any
 * @param {string=} script the ISO 15924 code of the script for this locale, if any
 */
ilib.Locale = function(language, region, variant, script) {
	if (typeof(region) === 'undefined') {
		var spec = language || ilib.getLocale();
		if (typeof(spec) === 'string') {
			var parts = spec.split('-');
	        for ( var i = 0; i < parts.length; i++ ) {
	        	if (ilib.Locale._isLanguageCode(parts[i])) {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.language = parts[i];
	        	} else if (ilib.Locale._isRegionCode(parts[i])) {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.region = parts[i];
	        	} else if (ilib.Locale._isScriptCode(parts[i])) {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.script = parts[i];
	        	} else {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.variant = parts[i];
	        	}
	        }
	        this.language = this.language || undefined;
	        this.region = this.region || undefined;
	        this.script = this.script || undefined;
	        this.variant = this.variant || undefined;
		} else if (typeof(spec) === 'object') {
	        this.language = spec.language || undefined;
	        this.region = spec.region || undefined;
	        this.script = spec.script || undefined;
	        this.variant = spec.variant || undefined;
		}
	} else {
		if (language) {
			language = language.trim();
			this.language = language.length > 0 ? language.toLowerCase() : undefined;
		} else {
			this.language = undefined;
		}
		if (region) {
			region = region.trim();
			this.region = region.length > 0 ? region.toUpperCase() : undefined;
		} else {
			this.region = undefined;
		}
		if (variant) {
			variant = variant.trim();
			this.variant = variant.length > 0 ? variant : undefined;
		} else {
			this.variant = undefined;
		}
		if (script) {
			script = script.trim();
			this.script = script.length > 0 ? script : undefined;
		} else {
			this.script = undefined;
		}
	}
	this.spec = this.language || "";
	
	if (this.script) {
		if (this.spec.length > 0) {
			this.spec += "-";
		}
		this.spec += this.script;
	}
	
	if (this.region) {
		if (this.spec.length > 0) {
			this.spec += "-";
		}
		this.spec += this.region;
	}
	
	if (this.variant) {
		if (this.spec.length > 0) {
			this.spec += "-";
		}
		this.spec += this.variant;
	}
};

// from http://en.wikipedia.org/wiki/ISO_3166-1
ilib.Locale.a2toa3regmap = {
	"AF": "AFG",
	"AX": "ALA",
	"AL": "ALB",
	"DZ": "DZA",
	"AS": "ASM",
	"AD": "AND",
	"AO": "AGO",
	"AI": "AIA",
	"AQ": "ATA",
	"AG": "ATG",
	"AR": "ARG",
	"AM": "ARM",
	"AW": "ABW",
	"AU": "AUS",
	"AT": "AUT",
	"AZ": "AZE",
	"BS": "BHS",
	"BH": "BHR",
	"BD": "BGD",
	"BB": "BRB",
	"BY": "BLR",
	"BE": "BEL",
	"BZ": "BLZ",
	"BJ": "BEN",
	"BM": "BMU",
	"BT": "BTN",
	"BO": "BOL",
	"BQ": "BES",
	"BA": "BIH",
	"BW": "BWA",
	"BV": "BVT",
	"BR": "BRA",
	"IO": "IOT",
	"BN": "BRN",
	"BG": "BGR",
	"BF": "BFA",
	"BI": "BDI",
	"KH": "KHM",
	"CM": "CMR",
	"CA": "CAN",
	"CV": "CPV",
	"KY": "CYM",
	"CF": "CAF",
	"TD": "TCD",
	"CL": "CHL",
	"CN": "CHN",
	"CX": "CXR",
	"CC": "CCK",
	"CO": "COL",
	"KM": "COM",
	"CG": "COG",
	"CD": "COD",
	"CK": "COK",
	"CR": "CRI",
	"CI": "CIV",
	"HR": "HRV",
	"CU": "CUB",
	"CW": "CUW",
	"CY": "CYP",
	"CZ": "CZE",
	"DK": "DNK",
	"DJ": "DJI",
	"DM": "DMA",
	"DO": "DOM",
	"EC": "ECU",
	"EG": "EGY",
	"SV": "SLV",
	"GQ": "GNQ",
	"ER": "ERI",
	"EE": "EST",
	"ET": "ETH",
	"FK": "FLK",
	"FO": "FRO",
	"FJ": "FJI",
	"FI": "FIN",
	"FR": "FRA",
	"GF": "GUF",
	"PF": "PYF",
	"TF": "ATF",
	"GA": "GAB",
	"GM": "GMB",
	"GE": "GEO",
	"DE": "DEU",
	"GH": "GHA",
	"GI": "GIB",
	"GR": "GRC",
	"GL": "GRL",
	"GD": "GRD",
	"GP": "GLP",
	"GU": "GUM",
	"GT": "GTM",
	"GG": "GGY",
	"GN": "GIN",
	"GW": "GNB",
	"GY": "GUY",
	"HT": "HTI",
	"HM": "HMD",
	"VA": "VAT",
	"HN": "HND",
	"HK": "HKG",
	"HU": "HUN",
	"IS": "ISL",
	"IN": "IND",
	"ID": "IDN",
	"IR": "IRN",
	"IQ": "IRQ",
	"IE": "IRL",
	"IM": "IMN",
	"IL": "ISR",
	"IT": "ITA",
	"JM": "JAM",
	"JP": "JPN",
	"JE": "JEY",
	"JO": "JOR",
	"KZ": "KAZ",
	"KE": "KEN",
	"KI": "KIR",
	"KP": "PRK",
	"KR": "KOR",
	"KW": "KWT",
	"KG": "KGZ",
	"LA": "LAO",
	"LV": "LVA",
	"LB": "LBN",
	"LS": "LSO",
	"LR": "LBR",
	"LY": "LBY",
	"LI": "LIE",
	"LT": "LTU",
	"LU": "LUX",
	"MO": "MAC",
	"MK": "MKD",
	"MG": "MDG",
	"MW": "MWI",
	"MY": "MYS",
	"MV": "MDV",
	"ML": "MLI",
	"MT": "MLT",
	"MH": "MHL",
	"MQ": "MTQ",
	"MR": "MRT",
	"MU": "MUS",
	"YT": "MYT",
	"MX": "MEX",
	"FM": "FSM",
	"MD": "MDA",
	"MC": "MCO",
	"MN": "MNG",
	"ME": "MNE",
	"MS": "MSR",
	"MA": "MAR",
	"MZ": "MOZ",
	"MM": "MMR",
	"NA": "NAM",
	"NR": "NRU",
	"NP": "NPL",
	"NL": "NLD",
	"NC": "NCL",
	"NZ": "NZL",
	"NI": "NIC",
	"NE": "NER",
	"NG": "NGA",
	"NU": "NIU",
	"NF": "NFK",
	"MP": "MNP",
	"NO": "NOR",
	"OM": "OMN",
	"PK": "PAK",
	"PW": "PLW",
	"PS": "PSE",
	"PA": "PAN",
	"PG": "PNG",
	"PY": "PRY",
	"PE": "PER",
	"PH": "PHL",
	"PN": "PCN",
	"PL": "POL",
	"PT": "PRT",
	"PR": "PRI",
	"QA": "QAT",
	"RE": "REU",
	"RO": "ROU",
	"RU": "RUS",
	"RW": "RWA",
	"BL": "BLM",
	"SH": "SHN",
	"KN": "KNA",
	"LC": "LCA",
	"MF": "MAF",
	"PM": "SPM",
	"VC": "VCT",
	"WS": "WSM",
	"SM": "SMR",
	"ST": "STP",
	"SA": "SAU",
	"SN": "SEN",
	"RS": "SRB",
	"SC": "SYC",
	"SL": "SLE",
	"SG": "SGP",
	"SX": "SXM",
	"SK": "SVK",
	"SI": "SVN",
	"SB": "SLB",
	"SO": "SOM",
	"ZA": "ZAF",
	"GS": "SGS",
	"SS": "SSD",
	"ES": "ESP",
	"LK": "LKA",
	"SD": "SDN",
	"SR": "SUR",
	"SJ": "SJM",
	"SZ": "SWZ",
	"SE": "SWE",
	"CH": "CHE",
	"SY": "SYR",
	"TW": "TWN",
	"TJ": "TJK",
	"TZ": "TZA",
	"TH": "THA",
	"TL": "TLS",
	"TG": "TGO",
	"TK": "TKL",
	"TO": "TON",
	"TT": "TTO",
	"TN": "TUN",
	"TR": "TUR",
	"TM": "TKM",
	"TC": "TCA",
	"TV": "TUV",
	"UG": "UGA",
	"UA": "UKR",
	"AE": "ARE",
	"GB": "GBR",
	"US": "USA",
	"UM": "UMI",
	"UY": "URY",
	"UZ": "UZB",
	"VU": "VUT",
	"VE": "VEN",
	"VN": "VNM",
	"VG": "VGB",
	"VI": "VIR",
	"WF": "WLF",
	"EH": "ESH",
	"YE": "YEM",
	"ZM": "ZMB",
	"ZW": "ZWE"
};


ilib.Locale.a1toa3langmap = {
	"ab": "abk",
	"aa": "aar",
	"af": "afr",
	"ak": "aka",
	"sq": "sqi",
	"am": "amh",
	"ar": "ara",
	"an": "arg",
	"hy": "hye",
	"as": "asm",
	"av": "ava",
	"ae": "ave",
	"ay": "aym",
	"az": "aze",
	"bm": "bam",
	"ba": "bak",
	"eu": "eus",
	"be": "bel",
	"bn": "ben",
	"bh": "bih",
	"bi": "bis",
	"bs": "bos",
	"br": "bre",
	"bg": "bul",
	"my": "mya",
	"ca": "cat",
	"ch": "cha",
	"ce": "che",
	"ny": "nya",
	"zh": "zho",
	"cv": "chv",
	"kw": "cor",
	"co": "cos",
	"cr": "cre",
	"hr": "hrv",
	"cs": "ces",
	"da": "dan",
	"dv": "div",
	"nl": "nld",
	"dz": "dzo",
	"en": "eng",
	"eo": "epo",
	"et": "est",
	"ee": "ewe",
	"fo": "fao",
	"fj": "fij",
	"fi": "fin",
	"fr": "fra",
	"ff": "ful",
	"gl": "glg",
	"ka": "kat",
	"de": "deu",
	"el": "ell",
	"gn": "grn",
	"gu": "guj",
	"ht": "hat",
	"ha": "hau",
	"he": "heb",
	"hz": "her",
	"hi": "hin",
	"ho": "hmo",
	"hu": "hun",
	"ia": "ina",
	"id": "ind",
	"ie": "ile",
	"ga": "gle",
	"ig": "ibo",
	"ik": "ipk",
	"io": "ido",
	"is": "isl",
	"it": "ita",
	"iu": "iku",
	"ja": "jpn",
	"jv": "jav",
	"kl": "kal",
	"kn": "kan",
	"kr": "kau",
	"ks": "kas",
	"kk": "kaz",
	"km": "khm",
	"ki": "kik",
	"rw": "kin",
	"ky": "kir",
	"kv": "kom",
	"kg": "kon",
	"ko": "kor",
	"ku": "kur",
	"kj": "kua",
	"la": "lat",
	"lb": "ltz",
	"lg": "lug",
	"li": "lim",
	"ln": "lin",
	"lo": "lao",
	"lt": "lit",
	"lu": "lub",
	"lv": "lav",
	"gv": "glv",
	"mk": "mkd",
	"mg": "mlg",
	"ms": "msa",
	"ml": "mal",
	"mt": "mlt",
	"mi": "mri",
	"mr": "mar",
	"mh": "mah",
	"mn": "mon",
	"na": "nau",
	"nv": "nav",
	"nb": "nob",
	"nd": "nde",
	"ne": "nep",
	"ng": "ndo",
	"nn": "nno",
	"no": "nor",
	"ii": "iii",
	"nr": "nbl",
	"oc": "oci",
	"oj": "oji",
	"cu": "chu",
	"om": "orm",
	"or": "ori",
	"os": "oss",
	"pa": "pan",
	"pi": "pli",
	"fa": "fas",
	"pl": "pol",
	"ps": "pus",
	"pt": "por",
	"qu": "que",
	"rm": "roh",
	"rn": "run",
	"ro": "ron",
	"ru": "rus",
	"sa": "san",
	"sc": "srd",
	"sd": "snd",
	"se": "sme",
	"sm": "smo",
	"sg": "sag",
	"sr": "srp",
	"gd": "gla",
	"sn": "sna",
	"si": "sin",
	"sk": "slk",
	"sl": "slv",
	"so": "som",
	"st": "sot",
	"az": "azb",
	"es": "spa",
	"su": "sun",
	"sw": "swa",
	"ss": "ssw",
	"sv": "swe",
	"ta": "tam",
	"te": "tel",
	"tg": "tgk",
	"th": "tha",
	"ti": "tir",
	"bo": "bod",
	"tk": "tuk",
	"tl": "tgl",
	"tn": "tsn",
	"to": "ton",
	"tr": "tur",
	"ts": "tso",
	"tt": "tat",
	"tw": "twi",
	"ty": "tah",
	"ug": "uig",
	"uk": "ukr",
	"ur": "urd",
	"uz": "uzb",
	"ve": "ven",
	"vi": "vie",
	"vo": "vol",
	"wa": "wln",
	"cy": "cym",
	"wo": "wol",
	"fy": "fry",
	"xh": "xho",
	"yi": "yid",
	"yo": "yor",
	"za": "zha",
	"zu": "zul"
};

/**
 * @private
 * Tell whether or not the str does not start with a lower case ASCII char.
 * @param {string} str the char to check
 * @return {boolean} true if the char is not a lower case ASCII char
 */
ilib.Locale._notLower = function(str) {
	// do this with ASCII only so we don't have to depend on the CType functions
	var ch = str.charCodeAt(0);
	return ch < 97 || ch > 122;
};

/**
 * @private
 * Tell whether or not the str does not start with an upper case ASCII char.
 * @param {string} str the char to check
 * @return {boolean} true if the char is a not an upper case ASCII char
 */
ilib.Locale._notUpper = function(str) {
	// do this with ASCII only so we don't have to depend on the CType functions
	var ch = str.charCodeAt(0);
	return ch < 65 || ch > 90;
};

/**
 * @private
 * Tell whether or not the str does not start with a digit char.
 * @param {string} str the char to check
 * @return {boolean} true if the char is a not an upper case ASCII char
 */
ilib.Locale._notDigit = function(str) {
	// do this with ASCII only so we don't have to depend on the CType functions
	var ch = str.charCodeAt(0);
	return ch < 48 || ch > 57;
};

/**
 * @private
 * Tell whether or not the given string has the correct syntax to be 
 * an ISO 639 language code.
 * 
 * @param {string} str the string to parse
 * @return {boolean} true if the string could syntactically be a language code.
 */
ilib.Locale._isLanguageCode = function(str) {
	if (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {
		return false;
	}

	for (var i = 0; i < str.length; i++) {
		if (ilib.Locale._notLower(str.charAt(i))) {
			return false;
		}
	}
	
	return true;
};

/**
 * @private
 * Tell whether or not the given string has the correct syntax to be 
 * an ISO 3166 2-letter region code or M.49 3-digit region code.
 * 
 * @param {string} str the string to parse
 * @return {boolean} true if the string could syntactically be a language code.
 */
ilib.Locale._isRegionCode = function (str) {
	if (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {
		return false;
	}
	
	if (str.length === 2) {
		for (var i = 0; i < str.length; i++) {
			if (ilib.Locale._notUpper(str.charAt(i))) {
				return false;
			}
		}
	} else {
		for (var i = 0; i < str.length; i++) {
			if (ilib.Locale._notDigit(str.charAt(i))) {
				return false;
			}
		}
	}
	
	return true;
};

/**
 * @private
 * Tell whether or not the given string has the correct syntax to be 
 * an ISO 639 language code.
 * 
 * @param {string} str the string to parse
 * @return {boolean} true if the string could syntactically be a language code.
 */
ilib.Locale._isScriptCode = function(str)
{
	if (typeof(str) === 'undefined' || str.length !== 4 || ilib.Locale._notUpper(str.charAt(0))) {
		return false;
	}
	
	for (var i = 1; i < 4; i++) {
		if (ilib.Locale._notLower(str.charAt(i))) {
			return false;
		}
	}
	
	return true;
};

/**
 * @static
 * Return the ISO-3166 alpha3 equivalent region code for the given ISO 3166 alpha2
 * region code. If the given alpha2 code is not found, this function returns its
 * argument unchanged.
 * @param {string|undefined} alpha2 the alpha2 code to map
 * @return {string|undefined} the alpha3 equivalent of the given alpha2 code, or the alpha2
 * parameter if the alpha2 value is not found
 */
ilib.Locale.regionAlpha2ToAlpha3 = function(alpha2) {
	return ilib.Locale.a2toa3regmap[alpha2] || alpha2;
};

/**
 * @static
 * Return the ISO-639 alpha3 equivalent language code for the given ISO 639 alpha1
 * language code. If the given alpha1 code is not found, this function returns its
 * argument unchanged.
 * @param {string|undefined} alpha1 the alpha1 code to map
 * @return {string|undefined} the alpha3 equivalent of the given alpha1 code, or the alpha1
 * parameter if the alpha1 value is not found
 */
ilib.Locale.languageAlpha1ToAlpha3 = function(alpha1) {
	return ilib.Locale.a1toa3langmap[alpha1] || alpha1;
};

ilib.Locale.prototype = {
	/**
	 * Return the ISO 639 language code for this locale. 
	 * @return {string|undefined} the language code for this locale 
	 */
	getLanguage: function() {
		return this.language;
	},
	
	/**
	 * Return the language of this locale as an ISO-639-alpha3 language code
	 * @return {string|undefined} the alpha3 language code of this locale
	 */
	getLanguageAlpha3: function() {
		return ilib.Locale.languageAlpha1ToAlpha3(this.language);
	},
	
	/**
	 * Return the ISO 3166 region code for this locale.
	 * @return {string|undefined} the region code of this locale
	 */
	getRegion: function() {
		return this.region;
	},
	
	/**
	 * Return the region of this locale as an ISO-3166-alpha3 region code
	 * @return {string|undefined} the alpha3 region code of this locale
	 */
	getRegionAlpha3: function() {
		return ilib.Locale.regionAlpha2ToAlpha3(this.region);
	},
	
	/**
	 * Return the ISO 15924 script code for this locale
	 * @return {string|undefined} the script code of this locale
	 */
	getScript: function () {
		return this.script;
	},
	
	/**
	 * Return the variant code for this locale
	 * @return {string|undefined} the variant code of this locale, if any
	 */
	getVariant: function() {
		return this.variant;
	},
	
	/**
	 * Return the whole locale specifier as a string.
	 * @return {string} the locale specifier
	 */
	getSpec: function() {
		return this.spec;
	},
	
	/**
	 * Express this locale object as a string. Currently, this simply calls the getSpec
	 * function to represent the locale as its specifier.
	 * 
	 * @return {string} the locale specifier
	 */
	toString: function() {
		return this.getSpec();
	},
	
	/**
	 * Return true if the the other locale is exactly equal to the current one.
	 * @return {boolean} whether or not the other locale is equal to the current one 
	 */
	equals: function(other) {
		return this.language === other.language &&
			this.region === other.region &&
			this.script === other.script &&
			this.variant === other.variant;
	},

	/**
	 * Return true if the current locale is the special pseudo locale.
	 * @return {boolean} true if the current locale is the special pseudo locale
	 */
	isPseudo: function () {
		return (this.language === 'zxx' && this.region === 'XX');
	}
};

// static functions
/**
 * @private
 */
ilib.Locale.locales = [
	"en-AU","en-CA","en-GB","en-IN","en-NG","en-PH","en-PK","en-US","en-ZA","de-DE","fr-CA","fr-FR","es-AR","es-ES","es-MX","id-ID","it-IT","ja-JP","ko-KR","pt-BR","ru-RU","tr-TR","vi-VN","zxx-XX","zh-CN","zh-HK","zh-TW","zh-SG"
];

/**
 * Return the list of available locales that this iLib file was assembled
 * with. The list that this file was assembled with may be much smaller
 * than the list of all available locales in the iLib repository. The
 * assembly tool will automatically fill in the list.
 * 
 * @return {Array.<string>} this is an array of locale specs for which 
 * this iLib file has locale data for
 */
ilib.Locale.getAvailableLocales = function () {
	return ilib.Locale.locales;
};
ilib.data.localeinfo = {"calendar":"gregorian","clock":"24","currency":"USD","delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"firstDayOfWeek":1,"numfmt":{"script":"Latn","decimalChar":",","groupChar":".","prigroupSize":3,"pctFmt":"{n}%","pctChar":"%","roundingMode":"halfdown","exponential":"e","currencyFormats":{"common":"{s}{n}","commonNegative":"{s}-{n}"}},"timezone":"Etc/UTC","units":"metric"};
ilib.data.localeinfo_en = {"clock":"12","language.name":"English","numfmt":{"decimalChar":".","groupChar":",","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn","Dsrt","Shaw"],"locale":"en"};
ilib.data.localeinfo_AU = {"currency":"AUD","firstDayOfWeek":0,"region.name":"Australia","timezone":"Australia/Sydney","locale":"AU"};
ilib.data.localeinfo_CA = {"currency":"CAD","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"Canada","timezone":"America/Toronto","locale":"CA"};
ilib.data.localeinfo_en_GB = {"clock":"24","locale":"en-GB"};
ilib.data.localeinfo_GB = {"currency":"GBP","firstDayOfWeek":1,"paperSizes":{"regular":"A4","photo":"24x16"},"region.name":"United Kingdom","timezone":"Europe/London","units":"imperial","locale":"GB"};
ilib.data.localeinfo_en_IN = {"numfmt":{"secgroupSize":2,"currencyFormats":{"common":"{s}Â {n}"}},"locale":"en-IN"};
ilib.data.localeinfo_IN = {"currency":"INR","firstDayOfWeek":0,"region.name":"India","timezone":"Asia/Kolkata","locale":"IN"};
ilib.data.localeinfo_NG = {"currency":"NGN","region.name":"Nigeria","timezone":"Africa/Lagos","locale":"NG"};
ilib.data.localeinfo_PH = {"currency":"PHP","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"Philippines","timezone":"Asia/Manila","locale":"PH"};
ilib.data.localeinfo_PK = {"currency":"PKR","firstDayOfWeek":0,"region.name":"Pakistan","timezone":"Asia/Karachi","locale":"PK"};
ilib.data.localeinfo_US = {"currency":"USD","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"United States","timezone":"America/New_York","units":"uscustomary","locale":"US"};
ilib.data.localeinfo_en_ZA = {"numfmt":{"decimalChar":",","groupChar":"Â "},"locale":"en-ZA"};
ilib.data.localeinfo_ZA = {"currency":"ZAR","firstDayOfWeek":0,"region.name":"South Africa","timezone":"Africa/Johannesburg","locale":"ZA"};
ilib.data.localeinfo_de = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"German","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"paperSizes":{"regular":"A4","photo":"4x6"},"scripts":["Latn","Runr"],"locale":"de"};
ilib.data.localeinfo_DE = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Germany","timezone":"Europe/Berlin","locale":"DE"};
ilib.data.localeinfo_fr = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"Â«","alternateQuotationEnd":"Â»"},"language.name":"French","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}","commonNegative":"({n}Â {s})"},"pctFmt":"{n}Â %"},"paperSizes":{"regular":"A4","photo":"4x6"},"scripts":["Latn"],"locale":"fr"};
ilib.data.localeinfo_fr_CA = {"delimiter":{"alternateQuotationStart":"â¹","alternateQuotationEnd":"âº"},"paperSizes":{"regular":"8x11","photo":"3x5"},"locale":"fr-CA"};
ilib.data.localeinfo_FR = {"currency":"EUR","firstDayOfWeek":1,"region.name":"France","timezone":"Europe/Paris","locale":"FR"};
ilib.data.localeinfo_es = {"delimiter":{"alternateQuotationStart":"Â«","alternateQuotationEnd":"Â»"},"language.name":"Spanish","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"paperSizes":{"regular":"A4","photo":"4x6"},"scripts":["Latn"],"locale":"es"};
ilib.data.localeinfo_es_AR = {"numfmt":{"currencyFormats":{"common":"{s}{n}"}},"locale":"es-AR"};
ilib.data.localeinfo_AR = {"currency":"ARS","firstDayOfWeek":0,"region.name":"Argentina","timezone":"America/Argentina/Buenos_Aires","locale":"AR"};
ilib.data.localeinfo_ES = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Spain","timezone":"Europe/Madrid","locale":"ES"};
ilib.data.localeinfo_es_MX = {"numfmt":{"decimalChar":".","groupChar":",","currencyFormats":{"common":"{s}{n}"}},"locale":"es-MX"};
ilib.data.localeinfo_MX = {"currency":"MXN","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"Mexico","timezone":"America/Mexico_City","locale":"MX"};
ilib.data.localeinfo_id = {"language.name":"Indonesian","numfmt":{"exponential":"E"},"scripts":["Latn","Arab"],"locale":"id"};
ilib.data.localeinfo_ID = {"currency":"IDR","firstDayOfWeek":0,"region.name":"Indonesia","timezone":"Asia/Jakarta","locale":"ID"};
ilib.data.localeinfo_it = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Italian","numfmt":{"exponential":"E","currencyFormats":{"common":"{s}Â {n}"}},"paperSizes":{"regular":"A4","photo":"4x6"},"scripts":["Latn"],"locale":"it"};
ilib.data.localeinfo_IT = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Italy","timezone":"Europe/Rome","locale":"IT"};
ilib.data.localeinfo_ja = {"delimiter":{"quotationStart":"ã","quotationEnd":"ã","alternateQuotationStart":"ã","alternateQuotationEnd":"ã"},"language.name":"Japanese","numfmt":{"decimalChar":".","groupChar":",","exponential":"E"},"paperSizes":{"regular":"A4","photo":"L"},"scripts":["Jpan"],"locale":"ja"};
ilib.data.localeinfo_JP = {"currency":"JPY","firstDayOfWeek":0,"region.name":"Japan","timezone":"Asia/Tokyo","locale":"JP"};
ilib.data.localeinfo_ko = {"clock":"12","language.name":"Korean","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"paperSizes":{"regular":"A4","photo":"3R"},"scripts":["Kore"],"locale":"ko"};
ilib.data.localeinfo_KR = {"currency":"KRW","firstDayOfWeek":0,"region.name":"South Korea","timezone":"Asia/Seoul","locale":"KR"};
ilib.data.localeinfo_pt = {"language.name":"Portuguese","numfmt":{"exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn"],"locale":"pt"};
ilib.data.localeinfo_BR = {"currency":"BRL","firstDayOfWeek":0,"region.name":"Brazil","timezone":"America/Sao_Paulo","locale":"BR"};
ilib.data.localeinfo_ru = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Russian","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"scripts":["Cyrl"],"locale":"ru"};
ilib.data.localeinfo_RU = {"currency":"RUB","firstDayOfWeek":1,"region.name":"Russia","timezone":"Europe/Moscow","locale":"RU"};
ilib.data.localeinfo_tr = {"language.name":"Turkish","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}","commonNegative":"({n}Â {s})"},"pctFmt":"%{n}"},"scripts":["Latn","Arab"],"locale":"tr"};
ilib.data.localeinfo_TR = {"currency":"TRY","firstDayOfWeek":1,"region.name":"Turkey","timezone":"Europe/Istanbul","locale":"TR"};
ilib.data.localeinfo_vi = {"language.name":"Vietnamese","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Latn","Hani"],"locale":"vi"};
ilib.data.localeinfo_VN = {"currency":"VND","firstDayOfWeek":1,"region.name":"Vietnam","timezone":"Asia/Ho_Chi_Minh","locale":"VN"};
ilib.data.localeinfo_zxx = {"currency":"USD","language.name":"No linguistic content","paperSizes":{"regular":"8x11","photo":"3x5"},"scripts":["Latn"],"locale":"zxx"};
ilib.data.localeinfo_XX = {"region.name":"Unknown","locale":"XX"};
ilib.data.localeinfo_zh = {"clock":"12","language.name":"Chinese","native_numfmt":{"script":"Hani","decimalChar":".","groupChar":",","pctChar":"%","exponential":"E","prigroupSize":3,"currencyFormats":{"common":"{s}{n}","commonNegative":"({s}{n})"},"pctFmt":"{n}%","roundingMode":"halfdown","useNative":true,"digits":"ãä¸äºä¸åäºå­ä¸å«ä¹"},"numfmt":{"decimalChar":".","groupChar":",","exponential":"E","useNative":false,"currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Hans","Hant","Bopo","Phag"],"locale":"zh"};
ilib.data.localeinfo_CN = {"currency":"CNY","firstDayOfWeek":0,"region.name":"China","timezone":"Asia/Shanghai","locale":"CN"};
ilib.data.localeinfo_HK = {"currency":"HKD","firstDayOfWeek":0,"region.name":"Hong Kong SAR China","timezone":"Asia/Hong_Kong","locale":"HK"};
ilib.data.localeinfo_TW = {"currency":"TWD","firstDayOfWeek":0,"region.name":"Taiwan","timezone":"Asia/Taipei","locale":"TW"};
ilib.data.localeinfo_SG = {"currency":"SGD","firstDayOfWeek":0,"region.name":"Singapore","timezone":"Asia/Singapore","locale":"SG"};
/*
 * localeinfo.js - Encode locale-specific defaults
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js

// !data localeinfo

/**
 * @class
 * Create a new locale info instance. Locale info instances give information about
 * the default settings for a particular locale. These settings may be overridden
 * by various parts of the code, and should be used as a fall-back setting of last
 * resort. <p>
 * 
 * The optional options object holds extra parameters if they are necessary. The
 * current list of supported options are:
 * 
 * <ul>
 * <li><i>onLoad</i> - a callback function to call when the locale info object is fully 
 * loaded. When the onLoad option is given, the localeinfo object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * If this copy of ilib is pre-assembled and all the data is already available, 
 * or if the data was already previously loaded, then this constructor will call
 * the onLoad callback immediately when the initialization is done. 
 * If the onLoad option is not given, this class will only attempt to load any
 * missing locale data synchronously.
 * 
 * Depends directive: !depends localeinfo.js
 * 
 * @constructor
 * @see {ilib.setLoaderCallback} for information about registering a loader callback
 * function
 * @param {ilib.Locale|string=} locale the locale for which the info is sought, or undefined for
 * @param {Object=} options the locale for which the info is sought, or undefined for
 * the current locale
 */
ilib.LocaleInfo = function(locale, options) {
	var sync = true,
	    loadParams = undefined;
	
	/* these are all the defaults. Essentially, en-US */
	/** @type {{
		scripts:Array.<string>,
		timezone:string,
		units:string,
		calendar:string,
		clock:string,
		currency:string,
		firstDayOfWeek:number,
		numfmt:Object.<{
			currencyFormats:Object.<{common:string,commonNegative:string,iso:string,isoNegative:string}>,
			script:string,
			decimalChar:string,
			groupChar:string,
			prigroupSize:number,
			secgroupSize:number,
			negativenumFmt:string,
			pctFmt:string,
			negativepctFmt:string,
			pctChar:string,
			roundingMode:string,
			exponential:string,
			digits:string
		}>
	}}*/
	this.info = ilib.LocaleInfo.defaultInfo;
	
	switch (typeof(locale)) {
		case "string":
			this.locale = new ilib.Locale(locale);
			break;
		default:
		case "undefined":
			this.locale = new ilib.Locale();
			break;
		case "object":
			this.locale = locale;
			break;
	}
	
	if (options) {
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			loadParams = options.loadParams;
		}
	}

	if (!ilib.LocaleInfo.cache) {
		ilib.LocaleInfo.cache = {};
	}

	ilib.loadData({
		object: ilib.LocaleInfo, 
		locale: this.locale, 
		name: "localeinfo.json", 
		sync: sync, 
		loadParams: loadParams, 
		callback: ilib.bind(this, function (info) {
			if (!info) {
				info = ilib.LocaleInfo.defaultInfo;
				var spec = this.locale.getSpec().replace(/-/g, "_");
				ilib.LocaleInfo.cache[spec] = info;
			}
			this.info = info;
			if (options && typeof(options.onLoad) === 'function') {
				options.onLoad(this);
			}
		})
	});
};

ilib.LocaleInfo.defaultInfo = /** @type {{
	scripts:Array.<string>,
	timezone:string,
	units:string,
	calendar:string,
	clock:string,
	currency:string,
	firstDayOfWeek:number,
	numfmt:Object.<{
		currencyFormats:Object.<{
			common:string,
			commonNegative:string,
			iso:string,
			isoNegative:string
		}>,
		script:string,
		decimalChar:string,
		groupChar:string,
		prigroupSize:number,
		secgroupSize:number,
		negativenumFmt:string,
		pctFmt:string,
		negativepctFmt:string,
		pctChar:string,
		roundingMode:string,
		exponential:string,
		digits:string
	}>
}}*/ ilib.data.localeinfo;
ilib.LocaleInfo.defaultInfo = ilib.LocaleInfo.defaultInfo || {
	"scripts": ["Latn"],
    "timezone": "Etc/UTC",
    "units": "metric",
    "calendar": "gregorian",
    "clock": "24",
    "currency": "USD",
    "firstDayOfWeek": 1,
    "numfmt": {
        "currencyFormats": {
            "common": "{s}{n}",
            "commonNegative": "{s}-{n}",
            "iso": "{s}{n}",
            "isoNegative": "{s}-{n}"
        },
        "script": "Latn",
        "decimalChar": ",",
        "groupChar": ".",
        "prigroupSize": 3,
        "secgroupSize": 0,
        "pctFmt": "{n}%",
        "negativepctFmt": "-{n}%",
        "pctChar": "%",
        "roundingMode": "halfdown",
        "exponential": "e",
        "digits": ""
    }
};

ilib.LocaleInfo.prototype = {
    /**
     * Return the name of the locale's language in English.
     * @returns {string} the name of the locale's language in English
     */
    getLanguageName: function () {
    	return this.info["language.name"];	
    },
    
    /**
     * Return the name of the locale's region in English. If the locale
     * has no region, this returns undefined.
     * 
     * @returns {string|undefined} the name of the locale's region in English
     */
    getRegionName: function () {
    	return this.info["region.name"];	
    },

    /**
	 * Return whether this locale commonly uses the 12- or the 24-hour clock.
	 *  
	 * @returns {string} "12" if the locale commonly uses a 12-hour clock, or "24"
	 * if the locale commonly uses a 24-hour clock. 
	 */
	getClock: function() {
		return this.info.clock;
	},

	/**
	 * Return the locale that this info object was created with.
	 * @returns {ilib.Locale} The locale spec of the locale used to construct this info instance
	 */
	getLocale: function () {
		return this.locale;
	},
	
	/**
	 * Return the name of the measuring system that is commonly used in the given locale.
	 * Valid values are "uscustomary", "imperial", and "metric".
	 * 
	 * @returns {string} The name of the measuring system commonly used in the locale
	 */
	getUnits: function () {
		return this.info.units;
	},
	
	/**
	 * Return the name of the calendar that is commonly used in the given locale.
	 * 
	 * @returns {string} The name of the calendar commonly used in the locale
	 */
	getCalendar: function () {
		return this.info.calendar;
	},
	
	/**
	 * Return the day of week that starts weeks in the current locale. Days are still
	 * numbered the standard way with 0 for Sunday through 6 for Saturday, but calendars 
	 * should be displayed and weeks calculated with the day of week returned from this 
	 * function as the first day of the week.
	 * 
	 * @returns {number} the day of the week that starts weeks in the current locale.
	 */
	getFirstDayOfWeek: function () {
		return this.info.firstDayOfWeek;
	},
	
	/**
	 * Return the default time zone for this locale. Many locales span across multiple
	 * time zones. In this case, the time zone with the largest population is chosen
	 * to represent the locale. This is obviously not that accurate, but then again,
	 * this method's return value should only be used as a default anyways.
	 * @returns {string} the default time zone for this locale.
	 */
	getTimeZone: function () {
		return this.info.timezone;
	},
	
	/**
	 * Return the decimal separator for formatted numbers in this locale.
	 * @returns {string} the decimal separator char
	 */
	getDecimalSeparator: function () {
		return this.info.numfmt.decimalChar;
	},
	
	/**
	 * Return the decimal separator for formatted numbers in this locale for native script.
	 * @returns {string} the decimal separator char
	 */
	getNativeDecimalSeparator: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.decimalChar) || this.info.numfmt.decimalChar;
	},
	
	/**
	 * Return the separator character used to separate groups of digits on the 
	 * integer side of the decimal character.
	 * @returns {string} the grouping separator char
	 */
	getGroupingSeparator: function () {
		return this.info.numfmt.groupChar;
	},

	/**
	 * Return the separator character used to separate groups of digits on the 
	 * integer side of the decimal character for the native script if present other than the default script.
	 * @returns {string} the grouping separator char
	 */
	getNativeGroupingSeparator: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.groupChar) || this.info.numfmt.groupChar;
	},
	
	/**
	 * Return the minimum number of digits grouped together on the integer side 
	 * for the first (primary) group. 
	 * In western European cultures, groupings are in 1000s, so the number of digits
	 * is 3. 
	 * @returns {number} the number of digits in a primary grouping, or 0 for no grouping
	 */
	getPrimaryGroupingDigits: function () {
		return (typeof(this.info.numfmt.prigroupSize) !== 'undefined' && this.info.numfmt.prigroupSize) || 0;
	},

	/**
	 * Return the minimum number of digits grouped together on the integer side
	 * for the second or more (secondary) group.<p>
	 *   
	 * In western European cultures, all groupings are by 1000s, so the secondary
	 * size should be 0 because there is no secondary size. In general, if this 
	 * method returns 0, then all groupings are of the primary size.<p> 
	 * 
	 * For some other cultures, the first grouping (primary)
	 * is 3 and any subsequent groupings (secondary) are two. So, 100000 would be
	 * written as: "1,00,000".
	 * 
	 * @returns {number} the number of digits in a secondary grouping, or 0 for no 
	 * secondary grouping. 
	 */
	getSecondaryGroupingDigits: function () {
		return this.info.numfmt.secgroupSize || 0;
	},

	/**
	 * Return the format template used to format percentages in this locale.
	 * @returns {string} the format template for formatting percentages
	 */
	getPercentageFormat: function () {
		return this.info.numfmt.pctFmt;
	},

	/**
	 * Return the format template used to format percentages in this locale
	 * with negative amounts.
	 * @returns {string} the format template for formatting percentages
	 */
	getNegativePercentageFormat: function () {
		return this.info.numfmt.negativepctFmt;
	},

	/**
	 * Return the symbol used for percentages in this locale.
	 * @returns {string} the symbol used for percentages in this locale
	 */
	getPercentageSymbol: function () {
		return this.info.numfmt.pctChar || "%";
	},

	/**
	 * Return the symbol used for exponential in this locale.
	 * @returns {string} the symbol used for exponential in this locale
	 */
	getExponential: function () {
		return this.info.numfmt.exponential;
	},

	/**
	 * Return the symbol used for exponential in this locale for native script.
	 * @returns {string} the symbol used for exponential in this locale for native script
	 */
	getNativeExponential: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.exponential) || this.info.numfmt.exponential;
	},

	/**
	 * Return the symbol used for percentages in this locale for native script.
	 * @returns {string} the symbol used for percentages in this locale for native script
	 */
	getNativePercentageSymbol: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.pctChar) || this.info.numfmt.pctChar || "%";
	
	},
	/**
	 * Return the format template used to format negative numbers in this locale.
	 * @returns {string} the format template for formatting negative numbers
	 */
	getNegativeNumberFormat: function () { 
		return this.info.numfmt.negativenumFmt;
	},
	
	/**
	 * Return an object containing the format templates for formatting currencies
	 * in this locale. The object has a number of properties in it that each are
	 * a particular style of format. Normally, this contains a "common" and an "iso"
	 * style, but may contain others in the future.
	 * @returns {Object} an object containing the format templates for currencies
	 */
	getCurrencyFormats: function () {
		return this.info.numfmt.currencyFormats;
	},
	
	/**
	 * Return the currency that is legal in the locale, or which is most commonly 
	 * used in regular commerce.
	 * @returns {string} the ISO 4217 code for the currency of this locale
	 */
	getCurrency: function () {
		return this.info.currency;
	},
	
	/**
	 * Return a string that describes the style of digits used by this locale.
	 * Possible return values are:
	 * <ul>
	 * <li><i>western</i> - uses the regular western 10-based digits 0 through 9
	 * <li><i>optional</i> - native 10-based digits exist, but in modern usage,
	 * this locale most often uses western digits
	 * <li><i>native</i> - native 10-based native digits exist and are used
	 * regularly by this locale
	 * <li><i>custom</i> - uses native digits by default that are not 10-based
	 * </ul>
	 * @returns {string} string that describes the style of digits used in this locale
	 */
	getDigitsStyle: function () {
		if (this.info.numfmt.useNative) {
			return "native";
		}
		if (typeof(this.info.native_numfmt) !== 'undefined') {
			return "optional";
		}
		return "western";
	},
	
	/**
	 * Return the digits of the default script if they are defined.
	 * If not defined, the default should be the regular "Arabic numerals"
	 * used in the Latin script. (0-9)
	 * @returns {string|undefined} the digits used in the default script 
	 */
	getDigits: function () {
		return this.info.numfmt.digits;
	},
	
	/**
	 * Return the digits of the native script if they are defined. 
	 * @returns {string|undefined} the digits used in the default script 
	 */
	getNativeDigits: function () {
		return (this.info.numfmt.useNative && this.info.numfmt.digits) || (this.info.native_numfmt && this.info.native_numfmt.digits);
	},
	
	/**
	 * If this locale typically uses a different type of rounding for numeric
	 * formatting other than halfdown, especially for currency, then it can be 
	 * specified in the localeinfo. If the locale uses the default, then this 
	 * method returns undefined. The locale's rounding method overrides the 
	 * rounding method for the currency itself, which can sometimes shared 
	 * between various locales so it is less specific.
	 * @returns {string} the name of the rounding mode typically used in this
	 * locale, or "halfdown" if the locale does not override the default
	 */
	getRoundingMode: function () {
		return this.info.numfmt.roundingMode;
	},
	
	/**
	 * Return the default script used to write text in the language of this 
	 * locale. Text for most languages is written in only one script, but there
	 * are some languages where the text can be written in a number of scripts,
	 * depending on a variety of things such as the region, ethnicity, religion, 
	 * etc. of the author. This method returns the default script for the
	 * locale, in which the language is most commonly written.<p> 
	 * 
	 * The script is returned as an ISO 15924 4-letter code.
	 * 
	 * @returns {string} the ISO 15924 code for the default script used to write
	 * text in this locale 
	 */
	getDefaultScript: function() {
		return (this.info.scripts) ? this.info.scripts[0] : "Latn";
	},
	
	/**
	 * Return the script used for the current locale. If the current locale
	 * explicitly defines a script, then this script is returned. If not, then 
	 * the default script for the locale is returned.
	 * 
	 * @see ilib.LocaleInfo.getDefaultScript
	 * @returns {string} the ISO 15924 code for the script used to write
	 * text in this locale
	 */
	getScript: function() {
		return this.locale.getScript() || this.getDefaultScript(); 
	},
	
	/**
	 * Return an array of script codes which are used to write text in the current
	 * language. Text for most languages is written in only one script, but there
	 * are some languages where the text can be written in a number of scripts,
	 * depending on a variety of things such as the region, ethnicity, religion, 
	 * etc. of the author. This method returns an array of script codes in which 
	 * the language is commonly written.
	 * 
	 * @returns {Array.<string>} an array of ISO 15924 codes for the scripts used 
	 * to write text in this language
	 */
	getAllScripts: function() {
		return this.info.scripts || ["Latn"];
	}
};

/*
 * date.js - Represent a date in any calendar. This class is subclassed for each calendar.
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends ilibglobal.js localeinfo.js */

/**
 * @class
 * Construct a new date object. Each parameter is a numeric value, but its 
 * accepted range can vary depending on the subclass of this date. For example,
 * Gregorian months can be from 1 to 12, whereas months in the Hebrew calendar
 * can be from 1 to 13.<p>
 * 
 * Depends directive: !depends date.js
 * 
 * @constructor
 * @param {Object=} options The date components to initialize this date with
 */
ilib.Date = function(options) {
	this.year = options && options.year || 0;
	this.month = options && options.month || 1;
	this.day = options && options.day || 1;
	this.hour = options && options.hour || 0;
	this.minute = options && options.minute || 0;
	this.second = options && options.second || 0;
	this.millisecond = options && options.millisecond || 0;
};

/**
 * Factory method to create a new instance of a date subclass.<p>
 * 
 * The options parameter can be an object that contains the following
 * properties:
 * 
 * <ul>
 * <li><i>type</i> - specify the type of the date desired. The
 * list of valid values changes depending on which calendars are 
 * defined. When assembling your iliball.js, include those date type 
 * you wish to use in your program or web page, and they will register 
 * themselves with this factory method. The "gregorian",
 * and "julian" calendars are all included by default, as they are the
 * standard calendars for much of the world.
 * </ul>
 * 
 * The options object is also passed down to the date constructor, and 
 * thus can contain the same properties as the date object being instantiated.
 *  
 * @param {Object=} options options controlling the construction of this instance, or
 * undefined to use the default options
 * @return {ilib.Date} an instance of a calendar object of the appropriate type 
 */
ilib.Date.newInstance = function(options) {
	var locale = options && options.locale,
		type = options && options.type,
		cons;

	if (!locale) {
		locale = new ilib.Locale();	// default locale
	}
	
	if (!type) {
		var info = new ilib.LocaleInfo(locale);
		type = info.getCalendar();
	}

	cons = ilib.Date._constructors[type];
	
	// pass the same options through to the constructor so the subclass
	// has the ability to do something with if it needs to
	return cons && new cons(options);
};

/**
 * @static
 * 
 * Convert JavaScript Date objects and other types into native ilib Dates. This accepts any
 * string or number that can be translated by the JavaScript Date class,
 * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)
 * any JavaScript Date classed object, any ilib.Date subclass, an ilib.JulianDay object, an object
 * containing the normal options to initialize an ilib.Date instance, or null (will 
 * return null or undefined if input is null or undefined). Normal output is 
 * a standard native subclass of the ilib Date object as appropriate for the locale.
 * 
 * @param  {ilib.Date|ilib.JulianDay|Date|String|Number=} inDate The input date object, string or Number.
 * @return {ilib.Date|null|undefined}
 */
ilib.Date._dateToIlib = function(inDate) {
	if (typeof(inDate) === 'undefined' || inDate === null) {
		return inDate;
	}
	if (inDate instanceof ilib.Date) {
		return inDate;
	}
	if (inDate instanceof Date) {
		return ilib.Date.newInstance({unixtime: inDate.getTime()});
	}
	if (inDate instanceof ilib.JulianDay) {
		return ilib.Date.newInstance({jd: inDate});
	}
	if (typeof(inDate) === 'number') {
		return ilib.Date.newInstance({unixtime: inDate});
	}
	if (typeof(inDate) === 'object') {
		return ilib.Date.newInstance(inDate);
	}
	if (typeof(inDate) === 'string') {
		inDate = new Date(inDate);
	}
	return ilib.Date.newInstance({unixtime: inDate.getTime()});
};

/* place for the subclasses to put their constructors so that the factory method
 * can find them. Do this to add your date after it's defined: 
 * ilib.Date._constructors["mytype"] = ilib.Date.MyTypeConstructor;
 */
ilib.Date._constructors = {};

ilib.Date.prototype = {
	getType: function() {
		return "ilib.Date";
	},
	
	getDays: function() {
		return this.day;
	},
	getMonths: function() {
		return this.month;
	},
	getYears: function() {
		return this.year;
	},
	
	getHours: function() {
		return this.hour;
	},
	getMinutes: function() {
		return this.minute;
	},
	getSeconds: function() {
		return this.second;
	},
	getMilliseconds: function() {
		return this.millisecond;
	},

	setDays: function(day) {
		this.day = day;
	},
	setMonths: function(month) {
		this.month = month;
	},
	setYears: function(year) {
		this.year = year;
	},
	
	setHours: function(hour) {
		this.hour = hour;
	},
	setMinutes: function(minute) {
		this.minute = minute;
	},
	setSeconds: function(second) {
		this.second = second;
	},
	setMilliseconds: function(milli) {
		this.millisecond = milli;
	}
};

/*
 * util/utils.js - Core utility routines
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * If Function.prototype.bind does not exist in this JS engine, this
 * function reimplements it in terms of older JS functions.
 * bind() doesn't exist in many older browsers.
 * 
 * @param {Object} scope object that the method should operate on
 * @param {function(...)} method method to call
 * @return {function(...)|undefined} function that calls the given method 
 * in the given scope with all of its arguments properly attached, or
 * undefined if there was a problem with the arguments
 */
ilib.bind = function(scope, method/*, bound arguments*/){
	if (!scope || !method) {
		return undefined;
	}
	
	/** @protected 
	 * @param {Arguments} inArrayLike
	 * @param {number=} inOffset
	 */
	function cloneArray(inArrayLike, inOffset) {
		var arr = [];
		for(var i = inOffset || 0, l = inArrayLike.length; i<l; i++){
			arr.push(inArrayLike[i]);
		}
		return arr;
	}

	if (typeof(method) === 'function') {
		var func, args = cloneArray(arguments, 2);
		if (typeof(method.bind) === 'function') {
			func = method.bind.apply(method, [scope].concat(args));
		} else {
			func = function() {
				var nargs = cloneArray(arguments);
				// invoke with collected args
				return method.apply(scope, args.concat(nargs));
			};
		}
		return func;
	}
	return undefined;
};

/**
 * Do a proper modulo function. The Javascript % operator will give the truncated
 * division algorithm, but for calendrical calculations, we need the Euclidean
 * division algorithm where the remainder of any division, whether the dividend
 * is negative or not, is always a positive number between 0 and the modulus.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {number} dividend the number being divided
 * @param {number} modulus the number dividing the dividend. This should always be a positive number.
 * @return the remainder of dividing the dividend by the modulus.  
 */
ilib.mod = function (dividend, modulus) {
	if (modulus == 0) {
		return 0;
	}
	var x = dividend % modulus;
	return (x < 0) ? x + modulus : x;
};

/**
 * Merge the properties of object2 into object1 in a deep manner and return a merged
 * object. If the property exists in both objects, the value in object2 will overwrite 
 * the value in object1. If a property exists in object1, but not in object2, its value
 * will not be touched. If a property exists in object2, but not in object1, it will be 
 * added to the merged result.<p>
 * 
 * Name1 and name2 are for creating debug output only. They are not necessary.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {*} object1 the object to merge into
 * @param {*} object2 the object to merge
 * @param {string=} name1 name of the object being merged into
 * @param {string=} name2 name of the object being merged in
 * @return {Object} the merged object
 */
ilib.merge = function (object1, object2, name1, name2) {
	var prop = undefined,
		newObj = {};
	for (prop in object1) {
		if (prop && typeof(object1[prop]) !== 'undefined') {
			newObj[prop] = object1[prop];
		}
	}
	for (prop in object2) {
		if (prop && typeof(object2[prop]) !== 'undefined') {
			if (object1[prop] instanceof Array && object2[prop] instanceof Array) {
				newObj[prop] = new Array();
				newObj[prop] = newObj[prop].concat(object1[prop]);
				newObj[prop] = newObj[prop].concat(object2[prop]);
			} else if (typeof(object1[prop]) === 'object' && typeof(object2[prop]) === 'object') {
				newObj[prop] = ilib.merge(object1[prop], object2[prop]);
			} else {
				// for debugging. Used to determine whether or not json files are overriding their parents unnecessarily
				if (name1 && name2 && newObj[prop] == object2[prop]) {
					console.log("Property " + prop + " in " + name1 + " is being overridden by the same value in " + name2);
				}
				newObj[prop] = object2[prop];
			}
		}
	}
	return newObj;
};

/**
 * Find and merge all the locale data for a particular prefix in the given locale
 * and return it as a single javascript object. This merges the data in the 
 * correct order:
 * 
 * <ol>
 * <li>shared data (usually English)
 * <li>data for language
 * <li>data for language + region
 * <li>data for language + region + script
 * <li>data for language + region + script + variant
 * </ol>
 * 
 * It is okay for any of the above to be missing. This function will just skip the 
 * missing data. However, if everything except the shared data is missing, this 
 * function returns undefined, allowing the caller to go and dynamically load the
 * data instead.
 *  
 * @param {string} prefix prefix under ilib.data of the data to merge
 * @param {ilib.Locale} locale locale of the data being sought
 * @return {Object?} the merged locale data
 */
ilib.mergeLocData = function (prefix, locale) {
	var data = undefined;
	var loc = locale || new ilib.Locale();
	var foundLocaleData = false;
	var property = prefix;
	data = ilib.data[prefix] || {};
	
	if (loc.getLanguage()) {
		property = prefix + '_' + loc.getLanguage();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property]);
		}
	}
	
	if (loc.getRegion()) {
		property = prefix + '_' + loc.getRegion();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property]);
		}
	}
	
	if (loc.getLanguage()) {
		property = prefix + '_' + loc.getLanguage();
		
		if (loc.getScript()) {
			property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = ilib.merge(data, ilib.data[property]);
			}
		}
		
		if (loc.getRegion()) {
			property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = ilib.merge(data, ilib.data[property]);
			}
		}
		
	}
	
	if (loc.getRegion() && loc.getVariant()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getVariant();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property]);
		}
	}

	if (loc.getLanguage() && loc.getScript() && loc.getRegion()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property]);
		}
	}

	if (loc.getLanguage() && loc.getRegion() && loc.getVariant()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion() + '_' + loc.getVariant();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property]);
		}
	}

	if (loc.getLanguage() && loc.getScript() && loc.getRegion() && loc.getVariant()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion() + '_' + loc.getVariant();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property]);
		}
	}

	return foundLocaleData ? data : undefined;
};

/**
 * Return an array of relative path names for the
 * files that represent the data for the given locale.<p>
 * 
 * Note that to prevent the situation where a directory for
 * a language exists next to the directory for a region where
 * the language code and region code differ only by case, the 
 * plain region directories are located under the special 
 * "undefined" language directory which has the ISO code "und".
 * The reason is that some platforms have case-insensitive 
 * file systems, and you cannot have 2 directories with the 
 * same name which only differ by case. For example, "es" is
 * the ISO 639 code for the language "Spanish" and "ES" is
 * the ISO 3166 code for the region "Spain", so both the
 * directories cannot exist underneath "locale". The region
 * therefore will be loaded from "und/ES" instead.<p>  
 * 
 * <h4>Variations</h4>
 * 
 * With only language and region specified, the following
 * sequence of paths will be generated:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/region
 * </pre>
 * 
 * With only language and script specified:<p>
 * 
 * <pre>
 * language
 * language/script
 * </pre>
 * 
 * With only script and region specified:<p>
 * 
 * <pre>
 * und/region  
 * </pre>
 * 
 * With only region and variant specified:<p>
 * 
 * <pre>
 * und/region
 * region/variant
 * </pre>
 * 
 * With only language, script, and region specified:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/script
 * language/region
 * language/script/region
 * </pre>
 * 
 * With only language, region, and variant specified:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/region
 * region/variant
 * language/region/variant
 * </pre>
 * 
 * With all parts specified:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/script
 * language/region
 * region/variant
 * language/script/region
 * language/region/variant
 * language/script/region/variant
 * </pre>
 * 
 * @param {ilib.Locale} locale load the files for this locale
 * @param {string?} name the file name of each file to load without
 * any path
 * @return {Array.<string>} An array of relative path names
 * for the files that contain the locale data
 */
ilib.getLocFiles = function(locale, name) {
	var dir = "";
	var files = [];
	var filename = name || "resources.json";
	var loc = locale || new ilib.Locale();
	
	var language = loc.getLanguage();
	var region = loc.getRegion();
	var script = loc.getScript();
	var variant = loc.getVariant();
	
	files.push(filename); // generic shared file
	
	if (language) {
		dir = language + "/";
		files.push(dir + filename);
	}
	
	if (region) {
		dir = "und/" + region + "/";
		files.push(dir + filename);
	}
	
	if (language) {
		if (script) {
			dir = language + "/" + script + "/";
			files.push(dir + filename);
		}
		if (region) {
			dir = language + "/" + region + "/";
			files.push(dir + filename);
		}
	}
	
	if (region && variant) {
		dir = "und/" + region + "/" + variant + "/";
		files.push(dir + filename);
	}

	if (language && script && region) {
		dir = language + "/" + script + "/" + region + "/";
		files.push(dir + filename);
	}

	if (language && region && variant) {
		dir = language + "/" + region + "/" + variant + "/";
		files.push(dir + filename);
	}

	if (language && script && region && variant) {
		dir = language + "/" + script + "/" + region + "/" + variant + "/";
		files.push(dir + filename);
	}
	
	return files;
};

/**
 * Return true if the given object has no properties.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {Object} obj the object to check
 * @return {boolean} true if the given object has no properties, false otherwise
 */
ilib.isEmpty = function (obj) {
	var prop = undefined;
	
	if (!obj) {
		return true;
	}
	
	for (prop in obj) {
		if (prop && typeof(obj[prop]) !== 'undefined') {
			return false;
		}
	}
	return true;
};


ilib.hashCode = function(obj) {
	var hash = 0;
	
	function addHash(hash, newValue) {
		// co-prime numbers creates a nicely distributed hash
		hash *= 65543;
		hash += newValue;
		hash %= 2147483647; 
		return hash;
	}
	
	function stringHash(str) {
		var hash = 0;
		for (var i = 0; i < str.length; i++) {
			hash = addHash(hash, str.charCodeAt(i));
		}
		return hash;
	}
	
	switch (typeof(obj)) {
		case 'undefined':
			hash = 0;
			break;
		case 'string':
			hash = stringHash(obj);
			break;
		case 'function':
		case 'number':
		case 'xml':
			hash = stringHash(String(obj));
			break;
		case 'boolean':
			hash = obj ? 1 : 0;
			break;
		case 'object':
			var props = [];
			for (var p in obj) {
				if (obj.hasOwnProperty(p)) {
					props.push(p);
				}
			}
			// make sure the order of the properties doesn't matter
			props.sort();
			for (var i = 0; i < props.length; i++) {
				hash = addHash(hash, stringHash(props[i]));
				hash = addHash(hash, ilib.hashCode(obj[props[i]]));
			}
			break;
	}
	
	return hash;
};

/**
 * Find locale data or load it in. If the data with the given name is preassembled, it will
 * find the data in ilib.data. If the data is not preassembled but there is a loader function,
 * this function will call it to load the data. Otherwise, the callback will be called with
 * undefined as the data. This function will create a cache under the given class object.
 * If data was successfully loaded, it will be set into the cache so that future access to 
 * the same data for the same locale is much quicker.<p>
 * 
 * The parameters can specify any of the following properties:<p>
 * 
 * <ul>
 * <li><i>name</i> - String. The name of the file being loaded. Default: resources.json
 * <li><i>object</i> - Object. The class attempting to load data. The cache is stored inside of here.
 * <li><i>locale</i> - ilib.Locale. The locale for which data is loaded. Default is the current locale.
 * <li><i>type</i> - String. Type of file to load. This can be "json" or "other" type. Default: "json" 
 * <li><i>loadParams</i> - Object. An object with parameters to pass to the loader function
 * <li><i>sync</i> - boolean. Whether or not to load the data synchronously
 * <li><i>callback</i> - function(?)=. callback Call back function to call when the data is available.
 * Data is not returned from this method, so a callback function is mandatory.
 * </ul>
 * 
 * @param {Object} params Parameters configuring how to load the files (see above)
 */
ilib.loadData = function(params) {
	var name = "resources.json",
		object = undefined, 
		locale = new ilib.Locale(ilib.getLocale()), 
		sync = false, 
		type,
		loadParams = {},
		callback = undefined;
	
	if (!params || typeof(params.callback) !== 'function') {
		return;
	}

	if (params.name) {
		name = params.name;
	}
	if (params.object) {
		object = params.object;
	}
	if (params.locale) {
		locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
	}			
	if (params.type) {
		type = params.type;
	}
	if (params.loadParams) {
		loadParams = params.loadParams;
	}
	if (params.sync) {
		sync = params.sync;
	}
	
	callback = params.callback;
	
	if (object && !object.cache) {
		object.cache = {};
	}
	
	if (!type) {
		var dot = name.lastIndexOf(".");
		type = (dot !== -1) ? name.substring(dot+1) : "text";
	}

	var spec = (locale.getSpec().replace(/-/g, '_') || "root") + "," + name + "," + String(ilib.hashCode(loadParams));
	if (!object || typeof(object.cache[spec]) === 'undefined') {
		var data;
		
		if (type === "json") {
			var basename = name.substring(0, name.lastIndexOf("."));
			data = ilib.mergeLocData(basename, locale);
			if (data) {
				if (object) {
					object.cache[spec] = data;
				}
				callback(data);
				return;
			}
		}
		
		if (typeof(ilib._load) === 'function') {
			// the data is not preassembled, so attempt to load it dynamically
			var files = ilib.getLocFiles(locale, name);
			if (type !== "json") {
				loadParams.returnOne = true;
			}
			
			ilib._load(files, sync, loadParams, ilib.bind(this, function(arr) {
				if (type === "json") {
					data = ilib.data[basename] || {};
					for (var i = 0; i < arr.length; i++) {
						if (typeof(arr[i]) !== 'undefined') {
							data = ilib.merge(data, arr[i]);
						}
					}
					
					if (object) {
						object.cache[spec] = data;
					}
					callback(data);
				} else {
					var i = arr.length-1; 
					while (i > -1 && !arr[i]) {
						i--;
					}
					if (i > -1) {
						if (object) {
							object.cache[spec] = arr[i];
						}
						callback(arr[i]);
					} else {
						callback(undefined);
					}
				}
			}));
		} else {
			// no data other than the generic shared data
			if (object && data) {
				object.cache[spec] = data;
			}
			callback(data);
		}
	} else {
		callback(object.cache[spec]);
	}
};

ilib.data.plurals_en = {"one":{"is":["n",1]}};
ilib.data.plurals_de = {"one":{"is":["n",1]}};
ilib.data.plurals_fr = {"one":{"and":[{"within":["n",[[0,2]]]},{"isnot":["n",2]}]}};
ilib.data.plurals_es = {"one":{"is":["n",1]}};
ilib.data.plurals_it = {"one":{"is":["n",1]}};
ilib.data.plurals_pt = {"one":{"is":["n",1]}};
ilib.data.plurals_ru = {"few":{"and":[{"inrange":[{"mod":["n",10]},[[2,4]]]},{"notin":[{"mod":["n",100]},[[12,14]]]}]},"many":{"or":[{"or":[{"is":[{"mod":["n",10]},0]},{"inrange":[{"mod":["n",10]},[[5,9]]]}]},{"inrange":[{"mod":["n",100]},[[11,14]]]}]},"one":{"and":[{"is":[{"mod":["n",10]},1]},{"isnot":[{"mod":["n",100]},11]}]}};
/*
 * strings.js - ilib string subclass definition
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js util/utils.js locale.js

// !data plurals

/**
 * @class
 * Create a new string instance. This string inherits from the Javascript
 * String class, and adds two more methods, fmt and fmtChoice. It can be
 * used anywhere that a normal Javascript string is used. The formatting
 * methods are of course most useful when localizing strings in an app
 * or web site in combination with the ilib.ResBundle class.<p>
 * 
 * Depends directive: !depends strings.js
 * 
 * @constructor
 * @param {string|ilib.String=} string initialize this instance with this string 
 */
ilib.String = function (string) {
	if (typeof(string) === 'object') {
		this.str = string.str;
	} else if (typeof(string) === 'string') {
		this.str = new String(string);
	} else {
		this.str = "";
	}
	this.length = this.str.length;
	this.cpLength = -1;
	this.localeSpec = ilib.getLocale();
};

/**
 * @private
 * @static
 * 
 * Return true if the given character is a Unicode surrogate character,
 * either high or low.
 * 
 * @param {string} ch character to check
 * @return {boolean} true if the character is a surrogate
 */
ilib.String._isSurrogate = function (ch) {
	var n = ch.charCodeAt(0);
	return ((n >= 0xDC00 && n <= 0xDFFF) || (n >= 0xD800 && n <= 0xDBFF));
};

/**
 * @static
 * Convert a UCS-4 code point to a Javascript string. The codepoint can be any valid 
 * UCS-4 Unicode character, including supplementary characters. Standard Javascript
 * only supports supplementary characters using the UTF-16 encoding, which has 
 * values in the range 0x0000-0xFFFF. String.fromCharCode() will only
 * give you a string containing 16-bit characters, and will not properly convert 
 * the code point for a supplementary character (which has a value > 0xFFFF) into 
 * two UTF-16 surrogate characters. Instead, it will just just give you whatever
 * single character happens to be the same as your code point modulo 0x10000, which
 * is almost never what you want.<p> 
 * 
 * Similarly, that means if you use String.charCodeAt()
 * you will only retrieve a 16-bit value, which may possibly be a single
 * surrogate character that is part of a surrogate pair representing a character
 * in the supplementary plane. It will not give you a code point. Use 
 * ilib.String.codePointAt() to access code points in a string, or use 
 * an iterator to walk through the code points in a string. 
 * 
 * @param {number} codepoint UCS-4 code point to convert to a character
 * @return {string} a string containing the character represented by the codepoint
 */
ilib.String.fromCodePoint = function (codepoint) {
	if (codepoint < 0x10000) {
		return String.fromCharCode(codepoint);
	} else {
		var high = Math.floor(codepoint / 0x10000) - 1;
		var low = codepoint & 0xFFFF;
		
		return String.fromCharCode(0xD800 | ((high & 0x000F) << 6) |  ((low & 0xFC00) >> 10)) +
			String.fromCharCode(0xDC00 | (low & 0x3FF));
	}
};

/**
 * Load the plural the definitions of plurals for the locale.
 * @param {ilib.Locale|string} locale
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.String.loadPlurals = function (sync, locale, loadParams, onLoad) {
	var loc;
	if (locale) {
		loc = (typeof(locale) === 'string') ? new ilib.Locale(locale) : locale;
	} else {
		loc = new ilib.Locale(ilib.getLocale());
	}
	var spec = loc.getLanguage();
	if (!ilib.data["plurals_" + spec]) {
		ilib.loadData({
			name: "plurals.json",
			object: ilib.String,
			locale: loc,
			sync: sync,
			loadParams: loadParams,
			callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(plurals) {
				if (!plurals) {
					ilib.String.cache[spec] = {};
				}
				ilib.data["plurals_" + spec] = plurals || {};
				if (onLoad && typeof(onLoad) === 'function') {
					onLoad(ilib.data["plurals_" + spec]);
				}
			})
		});
	} else {
		if (onLoad && typeof(onLoad) === 'function') {
			onLoad(ilib.data["plurals_" + spec]);
		}
	}
};

/**
 * @private
 * @static
 */
ilib.String._fncs = {
	/**
	 * @private
	 * @param {Object} obj
	 * @return {string|undefined}
	 */
	firstProp: function (obj) {
		for (var p in obj) {
			if (p && obj[p]) {
				return p;
			}
		}
		return undefined; // should never get here
	},
	
	/**
	 * @private
	 * @param {Object} obj
	 * @param {number} n
	 * @return {?}
	 */
	getValue: function (obj, n) {
		if (typeof(obj) === 'object') {
			var subrule = ilib.String._fncs.firstProp(obj);
			return ilib.String._fncs[subrule](obj[subrule], n);
		} else if (typeof(obj) === 'string') {
			return n;
		} else {
			return obj;
		}
	},
	
	/**
	 * @private
	 * @param {number} n
	 * @param {Array.<number|Array.<number>>} range
	 * @return {boolean}
	 */
	matchRangeContinuous: function(n, range) {
		for (var num in range) {
			if (typeof(num) !== 'undefined' && typeof(range[num]) !== 'undefined') {
				var obj = /** @type {Object|null|undefined} */ range[num];
				if (typeof(obj) === 'number') {
					if (n === range[num]) {
						return true;
					}
				} else if (Object.prototype.toString.call(obj) === '[object Array]') {
					if (n >= obj[0] && n <= obj[1]) {
						return true;
					}
				}
			}
		}
		return false;
	},

	/**
	 * @private
	 * @param {number} n
	 * @param {Array.<number|Array.<number>>} range
	 * @return {boolean}
	 */
	matchRange: function(n, range) {
		if (Math.floor(n) !== n) {
			return false;
		}
		return ilib.String._fncs.matchRangeContinuous(n, range);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	is: function(rule, n) {
		var left = ilib.String._fncs.getValue(rule[0], n);
		var right = ilib.String._fncs.getValue(rule[1], n);
		return left == right;
		// return ilib.String._fncs.getValue(rule[0]) == ilib.String._fncs.getValue(rule[1]);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	isnot: function(rule, n) {
		return ilib.String._fncs.getValue(rule[0], n) != ilib.String._fncs.getValue(rule[1], n);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	inrange: function(rule, n) {
		return ilib.String._fncs.matchRange(ilib.String._fncs.getValue(rule[0], n), rule[1]);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	notin: function(rule, n) {
		return !ilib.String._fncs.matchRange(ilib.String._fncs.getValue(rule[0], n), rule[1]);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	within: function(rule, n) {
		return ilib.String._fncs.matchRangeContinuous(ilib.String._fncs.getValue(rule[0], n), rule[1]);		
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {number}
	 */
	mod: function(rule, n) {
		return ilib.mod(ilib.String._fncs.getValue(rule[0], n), ilib.String._fncs.getValue(rule[1], n));
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {number}
	 */
	n: function(rule, n) {
		return n;
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	or: function(rule, n) {
		return ilib.String._fncs.getValue(rule[0], n) || ilib.String._fncs.getValue(rule[1], n);
	},
	
	/**
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	and: function(rule, n) {
		return ilib.String._fncs.getValue(rule[0], n) && ilib.String._fncs.getValue(rule[1], n);
	}
};

ilib.String.prototype = {
	/**
	 * @private
	 * Return the length of this string in characters. This function defers to the regular
	 * Javascript string class in order to perform the length function. Please note that this
	 * method is a real method, whereas the length property of Javascript strings is 
	 * implemented by native code and appears as a property.<p>
	 * 
	 * Example:
	 * 
	 * <pre>
	 * var str = new ilib.String("this is a string");
	 * console.log("String is " + str._length() + " characters long.");
	 * </pre>
	 */
	_length: function () {
		return this.str.length;
	},
	
	/**
	 * Format this string instance as a message, replacing the parameters with 
	 * the given values.<p>
	 * 
	 * The string can contain any text that a regular Javascript string can
	 * contain. Replacement parameters have the syntax:
	 * 
	 * <pre>
	 * {name}
	 * </pre>
	 * 
	 * Where "name" can be any string surrounded by curly brackets. The value of 
	 * "name" is taken from the parameters argument.<p>
	 * 
	 * Example:
	 * 
	 * <pre>
	 * var str = new ilib.String("There are {num} objects.");
	 * console.log(str.format({
	 *   num: 12
	 * });
	 * </pre>
	 * 
	 * Would give the output:
	 * 
	 * <pre>
	 * There are 12 objects.
	 * </pre>
	 * 
	 * If a property is missing from the parameter block, the replacement
	 * parameter substring is left untouched in the string, and a different
	 * set of parameters may be applied a second time. This way, different
	 * parts of the code may format different parts of the message that they
	 * happen to know about.<p>
	 * 
	 * Example:
	 * 
	 * <pre>
	 * var str = new ilib.String("There are {num} objects in the {container}.");
	 * console.log(str.format({
	 *   num: 12
	 * });
	 * </pre>
	 * 
	 * Would give the output:<p>
	 * 
	 * <pre>
	 * There are 12 objects in the {container}.
	 * </pre>
	 * 
	 * The result can then be formatted again with a different parameter block that
	 * specifies a value for the container property.
	 * 
	 * @param params a Javascript object containing values for the replacement 
	 * parameters in the current string
	 * @return a new ilib.String instance with as many replacement parameters filled
	 * out as possible with real values.
	 */
	format: function (params) {
		var formatted = this.str;
		if (params) {
			var regex;
			for (var p in params) {
				if (typeof(params[p]) !== 'undefined') {
					regex = new RegExp("\{"+p+"\}", "g");
					formatted = formatted.replace(regex, params[p]);
				}
			}
		}
		return formatted.toString();
	},
	
	/**
	 * Format a string as one of a choice of strings dependent on the value of
	 * a particular argument index.<p>
	 * 
	 * The syntax of the choice string is as follows. The string contains a
	 * series of choices separated by a vertical bar character "|". Each choice
	 * has a value or range of values to match followed by a hash character "#"
	 * followed by the string to use if the variable matches the criteria.<p>
	 * 
	 * Example string:
	 * 
	 * <pre>
	 * var num = 2;
	 * var str = new ilib.String("0#There are no objects.|1#There is one object.|2#There are {number} objects.");
	 * console.log(str.formatChoice(num, {
	 *   number: num
	 * }));
	 * </pre>
	 * 
	 * Gives the output:
	 * 
	 * <pre>
	 * "There are 2 objects."
	 * </pre>
	 * 
	 * The strings to format may contain replacement variables that will be formatted
	 * using the format() method above and the params argument as a source of values
	 * to use while formatting those variables.<p>
	 * 
	 * If the criterion for a particular choice is empty, that choice will be used
	 * as the default one for use when none of the other choice's criteria match.<p>
	 * 
	 * Example string:
	 * 
	 * <pre>
	 * var num = 22;
	 * var str = new ilib.String("0#There are no objects.|1#There is one object.|#There are {number} objects.");
	 * console.log(str.formatChoice(num, {
	 *   number: num
	 * }));
	 * </pre>
	 * 
	 * Gives the output:
	 * 
	 * <pre>
	 * "There are 22 objects."
	 * </pre>
	 * 
	 * If multiple choice patterns can match a given argument index, the first one 
	 * encountered in the string will be used. If no choice patterns match the 
	 * argument index, then the default choice will be used. If there is no default
	 * choice defined, then this method will return an empty string.<p>
	 * 
	 * <b>Special Syntax</b><p>
	 * 
	 * For any choice format string, all of the patterns in the string should be
	 * of a single type: numeric, boolean, or string/regexp. The type of the 
	 * patterns is determined by the type of the argument index parameter.<p>
	 * 
	 * If the argument index is numeric, then some special syntax can be used 
	 * in the patterns to match numeric ranges.<p>
	 * 
	 * <ul>
	 * <li><i>&gt;x</i> - match any number that is greater than x 
	 * <li><i>&gt;=x</i> - match any number that is greater than or equal to x
	 * <li><i>&lt;x</i> - match any number that is less than x
	 * <li><i>&lt;=x</i> - match any number that is less than or equal to x
	 * <li><i>start-end</i> - match any number in the range [start,end)
	 * <li><i>zero</i> - match any number in the class "zero". (See below for
	 * a description of number classes.)
	 * <li><i>one</i> - match any number in the class "one"
	 * <li><i>two</i> - match any number in the class "two"
	 * <li><i>few</i> - match any number in the class "few"
	 * <li><i>many</i> - match any number in the class "many"
	 * </ul>
	 * 
	 * A number class defines a set of numbers that receive a particular syntax
	 * in the strings. For example, in Slovenian, integers ending in the digit
	 * "1" are in the "one" class, including 1, 21, 31, ... 101, 111, etc.
	 * Similarly, integers ending in the digit "2" are in the "two" class. 
	 * Integers ending in the digits "3" or "4" are in the "few" class, and
	 * every other integer is handled by the default string.<p>
	 * 
	 * The definition of what numbers are included in a class is locale-dependent.
	 * They are defined in the data file plurals.json. If your string is in a
	 * different locale than the default for ilib, you should call the setLocale()
	 * method of the string instance before calling this method.<p> 
	 * 
	 * <b>Other Pattern Types</b><p>
	 * 
	 * If the argument index is a boolean, the string values "true" and "false" 
	 * may appear as the choice patterns.<p>
	 * 
	 * If the argument index is of type string, then the choice patterns may contain
	 * regular expressions, or static strings as degenerate regexps.
	 * 
	 * @param {*} argIndex The index into the choice array of the current parameter
	 * @param {Object} params The hash of parameter values that replace the replacement 
	 * variables in the string
	 * @throws "syntax error in choice format pattern: " if there is a syntax error
	 * @return {string} the formatted string
	 */
	formatChoice: function(argIndex, params) {
		var choices = this.str.split("|");
		var type = typeof(argIndex);
		var limits = [];
		var strings = [];
		var i;
		var parts;
		var limit;
		var arg;
		var result = undefined;
		var defaultCase = "";
	
		if (this.str.length === 0) {
			// nothing to do
			return "";
		}
		
		// first parse all the choices
		for (i = 0; i < choices.length; i++) {		
			parts = choices[i].split("#");		
			if (parts.length > 2) {
				limits[i] = parts[0];
				parts = parts.shift();			
				strings[i] = parts.join("#");
			} else if (parts.length === 2) {
				limits[i] = parts[0];
				strings[i] = parts[1];
			} else {
				// syntax error
				throw "syntax error in choice format pattern: " + choices[i];
			}		
		}
		
		// then apply the argument index
		for (i = 0; i < limits.length; i++) {
			if (limits[i].length === 0) {
				// this is default case
				defaultCase = new ilib.String(strings[i]);			
			} else {
				switch (type) {
					case 'number':
						arg = parseInt(argIndex, 10);
											
						if (limits[i].substring(0,2) === "<=") {						
							limit = parseFloat(limits[i].substring(2));
							if (arg <= limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else if (limits[i].substring(0,2) === ">=") {						
							limit = parseFloat(limits[i].substring(2));
							if (arg >= limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else if (limits[i].charAt(0) === "<") {						
							limit = parseFloat(limits[i].substring(1));
							if (arg < limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else if (limits[i].charAt(0) === ">") {						
							limit = parseFloat(limits[i].substring(1));
							if (arg > limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else {
							this.locale = this.locale || new ilib.Locale(this.localeSpec);
							switch (limits[i]) {
								case "zero":
								case "one":
								case "two":
								case "few":
								case "many":
									// CLDR locale-dependent number classes
									var ruleset = ilib.data["plurals_" + this.locale.getLanguage()];
									if (ruleset) {
										var rule = ruleset[limits[i]];
										if (ilib.String._fncs.getValue(rule, arg)) {
											result = new ilib.String(strings[i]);
											i = limits.length;
										}
									}
									break;
								default:
									var dash = limits[i].indexOf("-");
									if (dash !== -1) {							
										// range
										var start = limits[i].substring(0, dash);
										var end = limits[i].substring(dash+1);							
										if (arg >= parseInt(start, 10) && arg <= parseInt(end, 10)) {								
											result = new ilib.String(strings[i]);
											i = limits.length;
										}
									} else if (arg === parseInt(limits[i], 10)) {							
										// exact amount
										result = new ilib.String(strings[i]);
										i = limits.length;
									}
									break;
							}
						}
						break;
					case 'boolean':					
						if (limits[i] === "true" && argIndex === true) {						
							result = new ilib.String(strings[i]);
							i = limits.length;
						} else if (limits[i] === "false" && argIndex === false) {						
							result = new ilib.String(strings[i]);
							i = limits.length;
						}
						break;
					case 'string':					
						var regexp = new RegExp(limits[i], "i");
						if (regexp.test(argIndex)) {
							result = new ilib.String(strings[i]);
							i = limits.length;
						}
						break;
					case 'object':
						throw "syntax error: fmtChoice parameter for the argument index cannot be an object";
				}
			}
		}
		
		if (!result) {		
			result = defaultCase || new ilib.String("");
		}
		
		result = result.format(params);
		
		return result.toString();
	},
	
	// delegates
	/**
	 * Same as String.toString()
	 * @return {string} this instance as regular Javascript string
	 */
	toString: function () {
		return this.str.toString();
	},
	
	/**
	 * Same as String.valueOf()
	 * @return {string} this instance as a regular Javascript string
	 */
	valueOf: function () {
		return this.str.valueOf();
	},
	
	/**
	 * Same as String.charAt()
	 * @param {number} index the index of the character being sought
	 * @return {ilib.String} the character at the given index
	 */
	charAt: function(index) {
		return new ilib.String(this.str.charAt(index));
	},
	
	/**
	 * Same as String.charCodeAt(). This only reports on 
	 * 2-byte UCS-2 Unicode values, and does not take into
	 * account supplementary characters encoded in UTF-16.
	 * If you would like to take account of those characters,
	 * use codePointAt() instead.
	 * @param {number} index the index of the character being sought
	 * @return {number} the character code of the character at the 
	 * given index in the string 
	 */
	charCodeAt: function(index) {
		return this.str.charCodeAt(index);
	},
	
	/**
	 * Same as String.concat()
	 * @param {string} strings strings to concatenate to the current one
	 * @return {ilib.String} a concatenation of the given strings
	 */
	concat: function(strings) {
		return new ilib.String(this.str.concat(strings));
	},
	
	/**
	 * Same as String.indexOf()
	 * @param {string} searchValue string to search for
	 * @param {number} start index into the string to start searching, or
	 * undefined to search the entire string
	 * @return {number} index into the string of the string being sought,
	 * or -1 if the string is not found 
	 */
	indexOf: function(searchValue, start) {
		return this.str.indexOf(searchValue, start);
	},
	
	/**
	 * Same as String.lastIndexOf()
	 * @param {string} searchValue string to search for
	 * @param {number} start index into the string to start searching, or
	 * undefined to search the entire string
	 * @return {number} index into the string of the string being sought,
	 * or -1 if the string is not found 
	 */
	lastIndexOf: function(searchValue, start) {
		return this.str.lastIndexOf(searchValue, start);
	},
	
	/**
	 * Same as String.match()
	 * @param {string} regexp the regular expression to match
	 * @return {Array.<string>} an array of matches
	 */
	match: function(regexp) {
		return this.str.match(regexp);
	},
	
	/**
	 * Same as String.replace()
	 * @param {string} searchValue a regular expression to search for
	 * @param {string} newValue the string to replace the matches with
	 * @return {ilib.String} a new string with all the matches replaced
	 * with the new value
	 */
	replace: function(searchValue, newValue) {
		return new ilib.String(this.str.replace(searchValue, newValue));
	},
	
	/**
	 * Same as String.search()
	 * @param {string} regexp the regular expression to search for
	 * @return {number} position of the match, or -1 for no match
	 */
	search: function(regexp) {
		return this.str.search(regexp);
	},
	
	/**
	 * Same as String.slice()
	 * @param {number} start first character to include in the string
	 * @param {number} end include all characters up to, but not including
	 * the end character
	 * @return {ilib.String} a slice of the current string
	 */
	slice: function(start, end) {
		return new ilib.String(this.str.slice(start, end));
	},
	
	/**
	 * Same as String.split()
	 * @param {string} separator regular expression to match to find
	 * separations between the parts of the text
	 * @param {number} limit maximum number of items in the final 
	 * output array. Any items beyond that limit will be ignored.
	 * @return {Array.<string>} the parts of the current string split 
	 * by the separator
	 */
	split: function(separator, limit) {
		return this.str.split(separator, limit);
	},
	
	/**
	 * Same as String.substr()
	 * @param {number} start the index of the character that should 
	 * begin the returned substring
	 * @param {number} length the number of characters to return after
	 * the start character.
	 * @return {ilib.String} the requested substring 
	 */
	substr: function(start, length) {
		return new ilib.String(this.str.substr(start, length));
	},
	
	/**
	 * Same as String.substring()
	 * @param {number} from the index of the character that should 
	 * begin the returned substring
	 * @param {number} to the index where to stop the extraction. If
	 * omitted, extracts the rest of the string
	 * @return {ilib.String} the requested substring 
	 */
	substring: function(from, to) {
		return this.str.substring(from, to);
	},
	
	/**
	 * Same as String.toLowerCase(). Note that this method is
	 * not locale-sensitive. 
	 * @return {ilib.String} a string with the first character
	 * lower-cased
	 */
	toLowerCase: function() {
		return this.str.toLowerCase();
	},
	
	/**
	 * Same as String.toUpperCase(). Note that this method is
	 * not locale-sensitive. Use toLocaleUpperCase() instead
	 * to get locale-sensitive behaviour. 
	 * @return {ilib.String} a string with the first character
	 * upper-cased
	 */
	toUpperCase: function() {
		return this.str.toUpperCase();
	},
	
	/**
	 * @private
	 * Convert the character or the surrogate pair at the given
	 * index into the string to a Unicode UCS-4 code point.
	 * @param {number} index index into the string
	 * @return {number} code point of the character at the
	 * given index into the string
	 */
	_toCodePoint: function (index) {
		if (this.str.length === 0) {
			return -1;
		}
		var code = -1, high = this.str.charCodeAt(index);
		if (high >= 0xD800 && high <= 0xDBFF) {
			if (this.str.length > index+1) {
				var low = this.str.charCodeAt(index+1);
				if (low >= 0xDC00 && low <= 0xDFFF) {
					code = (((high & 0x3C0) >> 6) + 1) << 16 |
						(((high & 0x3F) << 10) | (low & 0x3FF));
				}
			}
		} else {
			code = high;
		}
		
		return code;
	},
	
	/**
	 * Return an iterator that will step through all of the characters
	 * in the string one at a time and return their code points, taking 
	 * care to step through the surrogate pairs in UTF-16 encoding 
	 * properly.<p>
	 * 
	 * The standard Javascript String's charCodeAt() method only
	 * returns information about a particular 16-bit character in the 
	 * UTF-16 encoding scheme.
	 * If the index is pointing to a low- or high-surrogate character,
	 * it will return a code point of the surrogate character rather 
	 * than the code point of the character 
	 * in the supplementary planes that the two surrogates together 
	 * encode.<p>
	 * 
	 * The iterator instance returned has two methods, hasNext() which
	 * returns true if the iterator has more code points to iterate through,
	 * and next() which returns the next code point as a number.<p>
	 * 
	 * @return {Object} an iterator 
	 * that iterates through all the code points in the string
	 */
	iterator: function() {
		/**
		 * @constructor
		 */
		function _iterator (istring) {
			this.index = 0;
			this.hasNext = function () {
				return (this.index < istring.str.length);
			};
			this.next = function () {
				if (this.index < istring.str.length) {
					var num = istring._toCodePoint(this.index);
					this.index += ((num > 0xFFFF) ? 2 : 1);
				} else {
					num = -1;
				}
				return num;
			};
		};
		return new _iterator(this);
	},

	/**
	 * Return an iterator that will step through all of the characters
	 * in the string one at a time, taking 
	 * care to step through the surrogate pairs in UTF-16 encoding 
	 * properly.<p>
	 * 
	 * The standard Javascript String's charAt() method only
	 * returns information about a particular 16-bit character in the 
	 * UTF-16 encoding scheme.
	 * If the index is pointing to a low- or high-surrogate character,
	 * it will return that surrogate character rather 
	 * than the surrogate pair which represents a character 
	 * in the supplementary planes.<p>
	 * 
	 * The iterator instance returned has two methods, hasNext() which
	 * returns true if the iterator has more characters to iterate through,
	 * and next() which returns the next character.<p>
	 * 
	 * @return {Object} an iterator 
	 * that iterates through all the characters in the string
	 */
	charIterator: function() {
		/**
		 * @constructor
		 */
		function _chiterator (istring) {
			this.index = 0;
			this.hasNext = function () {
				return (this.index < istring.str.length);
			};
			this.next = function () {
				var ch;
				if (this.index < istring.str.length) {
					ch = istring.str.charAt(this.index);
					if (ilib.String._isSurrogate(ch) && 
							this.index+1 < istring.str.length && 
							ilib.String._isSurrogate(istring.str.charAt(this.index+1))) {
						this.index++;
						ch += istring.str.charAt(this.index);
					}
					this.index++;
				}
				return ch;
			};
		};
		return new _chiterator(this);
	},
	
	/**
	 * Return the code point at the given index when the string is viewed 
	 * as an array of code points. If the index is beyond the end of the
	 * array of code points or if the index is negative, -1 is returned.
	 * @param {number} index index of the code point 
	 * @return {number} code point of the character at the given index into
	 * the string
	 */
	codePointAt: function (index) {
		if (index < 0) {
			return -1;
		}
		var count,
			it = this.iterator(),
			ch;
		for (count = index; count >= 0 && it.hasNext(); count--) {
			ch = it.next();
		}
		return (count < 0) ? ch : -1;
	},
	
	/**
	 * Set the locale to use when processing choice formats. The locale
	 * affects how number classes are interpretted. In some cultures,
	 * the limit "few" maps to "any integer that ends in the digits 2 to 9" and
	 * in yet others, "few" maps to "any integer that ends in the digits
	 * 3 or 4".
	 * @param {ilib.Locale|string} locale locale to use when processing choice
	 * formats with this string
	 * @param {boolean} sync [optional] whether to load the locale data synchronously 
	 * or not
	 * @param {Object} loadParams [optional] parameters to pass to the loader function
	 * @param {function(*)=} onLoad [optional] function to call when the loading is done
	 */
	setLocale: function (locale, sync, loadParams, onLoad) {
		if (typeof(locale) === 'object') {
			this.locale = locale;
		} else {
			this.localeSpec = locale;
			this.locale = new ilib.Locale(locale);
		}
		
		ilib.String.loadPlurals(typeof(sync) !== 'undefined' ? sync : true, this.locale, loadParams, onLoad);
	},

	/**
	 * Return the locale to use when processing choice formats. The locale
	 * affects how number classes are interpretted. In some cultures,
	 * the limit "few" maps to "any integer that ends in the digits 2 to 9" and
	 * in yet others, "few" maps to "any integer that ends in the digits
	 * 3 or 4".
	 * @return {string} localespec to use when processing choice
	 * formats with this string
	 */
	getLocale: function () {
		return (this.locale ? this.locale.getSpec() : this.localeSpec) || ilib.getLocale();
	},

	/**
	 * Return the number of code points in this string. This may be different
	 * than the number of characters, as the UTF-16 encoding that Javascript
	 * uses for its basis returns surrogate pairs separately. Two 2-byte 
	 * surrogate characters together make up one character/code point in 
	 * the supplementary character planes. If your string contains no
	 * characters in the supplementary planes, this method will return the
	 * same thing as the length() method.
	 * @return {number} the number of code points in this string
	 */
	codePointLength: function () {
		if (this.cpLength === -1) {
			var it = this.iterator();
			this.cpLength = 0;
			while (it.hasNext()) { 
				this.cpLength++;
				it.next();
			};
		}
		return this.cpLength;	
	}
};
/*
 * calendar.js - Represent a calendar object.
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends
ilibglobal.js
locale.js
localeinfo.js
*/

/**
 * Interface that all calendars must implement.
 * 
 * Depends directive: !depends calendar.js
 * 
 * @interface
 * @protected
 */
ilib.Cal = function() {
};

/**
 * Factory method to create a new instance of a calendar subclass.<p>
 * 
 * The options parameter can be an object that contains the following
 * properties:
 * 
 * <ul>
 * <li><i>type</i> - specify the type of the calendar desired. The
 * list of valid values changes depending on which calendars are 
 * defined. When assembling your iliball.js, include those calendars 
 * you wish to use in your program or web page, and they will register 
 * themselves with this factory method. The "official", "gregorian",
 * and "julian" calendars are all included by default, as they are the
 * standard calendars for much of the world.
 * <li><i>locale</i> - some calendars vary depending on the locale.
 * For example, the "official" calendar transitions from a Julian-style
 * calendar to a Gregorian-style calendar on a different date for
 * each country, as the governments of those countries decided to
 * adopt the Gregorian calendar at different times. 
 * </ul>
 * 
 * If a locale is specified, but no type, then the calendar that is default for
 * the locale will be instantiated and returned. If neither the type nor
 * the locale are specified, then the calendar for the default locale will
 * be used. 
 * 
 * @param {Object=} options options controlling the construction of this instance, or
 * undefined to use the default options
 * @return {ilib.Cal} an instance of a calendar object of the appropriate type
 */
ilib.Cal.newInstance = function (options) {
	var locale = options && options.locale,
	type = options && options.type,
	cons;

	if (!locale) {
		locale = new ilib.Locale();	// default locale
	}
	
	if (!type) {
		var info = new ilib.LocaleInfo(locale);
		type = info.getCalendar();
	}
	
	cons = ilib.Cal._constructors[type];
	
	// pass the same options through to the constructor so the subclass
	// has the ability to do something with if it needs to
	return cons && new cons(options);
};

/* place for the subclasses to put their constructors so that the factory method
 * can find them. Do this to add your calendar after it's defined: 
 * ilib.Cal._constructors["mytype"] = ilib.Cal.MyTypeConstructor;
 */
ilib.Cal._constructors = {};

/**
 * Return an array of known calendar types that the factory method can instantiate.
 * 
 * @return {Array.<string>} an array of calendar types
 */
ilib.Cal.getCalendars = function () {
	var arr = [],
		c;
	
	for (c in ilib.Cal._constructors) {
		if (c && ilib.Cal._constructors[c]) {
			arr.push(c); // code like a pirate
		}
	}
	
	return arr;
};

ilib.Cal.prototype = {
	/**
	 * Return the type of this calendar.
	 * 
	 * @return {string} the name of the type of this calendar 
	 */
	getType: function() {
		throw "Cannot call methods of abstract class ilib.Cal";
	},
	
	/**
	 * Return the number of months in the given year. The number of months in a year varies
	 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
	 * days in a year to an entire solar year. The month is represented as a 1-based number
	 * where 1=first month, 2=second month, etc.
	 * 
	 * @param {number} year a year for which the number of months is sought
	 * @return {number} The number of months in the given year
	 */
	getNumMonths: function(year) {
		throw "Cannot call methods of abstract class ilib.Cal";
	},
	
	/**
	 * Return the number of days in a particular month in a particular year. This function
	 * can return a different number for a month depending on the year because of things
	 * like leap years.
	 * 
	 * @param {number} month the month for which the length is sought
	 * @param {number} year the year within which that month can be found
	 * @return {number} the number of days within the given month in the given year
	 */
	getMonLength: function(month, year) {
		throw "Cannot call methods of abstract class ilib.Cal";
	},
	
	/**
	 * Return true if the given year is a leap year in this calendar.
	 * The year parameter may be given as a number.
	 * 
	 * @param {number} year the year for which the leap year information is being sought
	 * @return {boolean} true if the given year is a leap year
	 */
	isLeapYear: function(year) {
		throw "Cannot call methods of abstract class ilib.Cal";
	}
};

/*
 * util/math.js - Misc math utility routines
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * Return the sign of the given number. If the sign is negative, this function
 * returns -1. If the sign is positive or zero, this function returns 1.
 * @param {number} num the number to test
 * @return {number} -1 if the number is negative, and 1 otherwise
 */
ilib.signum = function (num) {
	var n = num;
	if (typeof(num) === 'string') {
		n = parseInt(num, 10);
	} else if (typeof(num) !== 'number') {
		return 1;
	}
	return (n < 0) ? -1 : 1;
};


/**
 * @private
 */
ilib._roundFnc = {
	/**
	 * @private
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	floor: function (num) {
		return Math.floor(num);
	},
	
	/**
	 * @private
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	ceiling: function (num) {
		return Math.ceil(num);
	},
	
	/**
	 * @private
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	down: function (num) {
		return (num < 0) ? Math.ceil(num) : Math.floor(num);
	},
	
	/**
	 * @private
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	up: function (num) {
		return (num < 0) ? Math.floor(num) : Math.ceil(num);
	},
	
	/**
	 * @private
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfup: function (num) {
		return (num < 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	},
	
	/**
	 * @private
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfdown: function (num) {
		return (num < 0) ? Math.floor(num + 0.5) : Math.ceil(num - 0.5);
	},
	
	/**
	 * @private
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfeven: function (num) {
		return (Math.floor(num) % 2 === 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	},
	
	/**
	 * @private
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfodd: function (num) {
		return (Math.floor(num) % 2 !== 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	}
};


/*
 * julianday.js - A Julian date object.
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends locale.js */

/**
 * @class
 * A Julian Day class. A Julian Day is a date based on the Julian Day count
 * of time invented by Joseph Scaliger in 1583 for use with astronomical calculations. 
 * Do not confuse it with a date in the Julian calendar, which it has very
 * little in common with. The naming is unfortunately close, and comes from history.<p>
 * 
 * Depends directive: !depends julianday.js
 * 
 * @constructor
 * @param {number} num the Julian Day expressed as a floating point number 
 */
ilib.JulianDay = function(num) {
	this.jd = num;
	this.days = Math.floor(this.jd);
	this.frac = num - this.days;
};

ilib.JulianDay.prototype = {
	/**
	 * Return the integral portion of this Julian Day instance. This corresponds to
	 * the number of days since the beginning of the epoch.
	 * 
	 * @return {number} the integral portion of this Julian Day
	 */
	getDays: function() {
		return this.days;
	},
	
	/**
	 * Set the date of this Julian Day instance.
	 * 
	 * @param {number} days the julian date expressed as a floating point number
	 */
	setDays: function(days) {
		this.days = Math.floor(days);
		this.jd = this.days + this.frac;
	},
	
	/**
	 * Return the fractional portion of this Julian Day instance. This portion 
	 * corresponds to the time of day for the instance.
	 */
	getDayFraction: function() {
		return this.frac;
	},
	
	/**
	 * Set the fractional part of the Julian Day. The fractional part represents
	 * the portion of a fully day. Julian dates start at noon, and proceed until
	 * noon of the next day. That would mean midnight is represented as a fractional
	 * part of 0.5.
	 * 
	 * @param {number} fraction The fractional part of the Julian date
	 */
	setDayFraction: function(fraction) {
		var t = Math.floor(fraction);
		this.frac = fraction - t;
		this.jd = this.days + this.frac;
	},
	
	/** 
	 * Return the Julian Day expressed as a floating point number.
	 * @return {number} the Julian Day as a number
	 */
	getDate: function () {
		return this.jd;
	},
	
	/**
	 * Set the date of this Julian Day instance.
	 * 
	 * @param {number} num the numeric Julian Day to set into this instance
	 */
	setDate: function (num) {
		this.jd = num;
	},
	
	/**
	 * Add an offset to the current date instance. The offset should be expressed in
	 * terms of Julian days. That is, each integral unit represents one day of time, and
	 * fractional part represents a fraction of a regular 24-hour day.
	 * 
	 * @param {number} offset an amount to add (or subtract) to the current result instance.
	 */
	addDate: function(offset) {
		if (typeof(offset) === 'number') {
			this.jd += offset;
			this.days = Math.floor(this.jd);
			this.frac = this.jd - this.days;
		}
	}
};

/*
 * gregorian.js - Represent a Gregorian calendar object.
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js util/utils.js */

/**
 * @class
 * Construct a new Gregorian calendar object. This class encodes information about
 * a Gregorian calendar.<p>
 * 
 * Depends directive: !depends gregorian.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.Gregorian = function() {
	this.type = "gregorian";
};

/**
 * @private
 * @const
 * @type Array.<number> 
 * the lengths of each month 
 */
ilib.Cal.Gregorian.monthLengths = [
	31,  /* Jan */
	28,  /* Feb */
	31,  /* Mar */
	30,  /* Apr */
	31,  /* May */
	30,  /* Jun */
	31,  /* Jul */
	31,  /* Aug */
	30,  /* Sep */
	31,  /* Oct */
	30,  /* Nov */
	31   /* Dec */
];

/**
 * Return the number of months in the given year. The number of months in a year varies
 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=first month, 2=second month, etc.
 * 
 * @param {number} year a year for which the number of months is sought
 * @return {number} The number of months in the given year
 */
ilib.Cal.Gregorian.prototype.getNumMonths = function(year) {
	return 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of things
 * like leap years.
 * 
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @return {number} the number of days within the given month in the given year
 */
ilib.Cal.Gregorian.prototype.getMonLength = function(month, year) {
	if (month !== 2 || !this.isLeapYear(year)) {
		return ilib.Cal.Gregorian.monthLengths[month-1];
	} else {
		return 29;
	}
};

/**
 * Return true if the given year is a leap year in the Gregorian calendar.
 * The year parameter may be given as a number, or as a GregDate object.
 * @param {number|ilib.Date.GregDate} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.Gregorian.prototype.isLeapYear = function(year) {
	var y = (typeof(year) === 'number' ? year : year.getYears());
	var centuries = ilib.mod(y, 400);
	return (ilib.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);
};

/**
 * Return the type of this calendar.
 * 
 * @return {string} the name of the type of this calendar 
 */
ilib.Cal.Gregorian.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.Gregorian.prototype.newDateInstance = function (options) {
	return new ilib.Date.GregDate(options);
};

/* register this calendar for the factory method */
ilib.Cal._constructors["gregorian"] = ilib.Cal.Gregorian;

/*
 * util/search.js - Misc search utility routines
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * Binary search a sorted array for a particular target value.
 * If the exact value is not found, it returns the index of the smallest 
 * entry that is greater than the given target value.<p> 
 * 
 * The comparator
 * parameter is a function that knows how to compare elements of the 
 * array and the target. The function should return a value greater than 0
 * if the array element is greater than the target, a value less than 0 if
 * the array element is less than the target, and 0 if the array element 
 * and the target are equivalent.<p>
 * 
 * If the comparator function is not specified, this function assumes
 * the array and the target are numeric values and should be compared 
 * as such.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * 
 * @param {*} target element being sought 
 * @param {Array} arr the array being searched
 * @param {?function(*,*)=} comparator a comparator that is appropriate for comparing two entries
 * in the array  
 * @return the index of the array into which the value would fit if 
 * inserted, or -1 if given array is not an array or the target is not 
 * a number
 */
ilib.bsearch = function(target, arr, comparator) {
	if (typeof(arr) === 'undefined' || !arr || typeof(target) === 'undefined') {
		return -1;
	}
	
	var high = arr.length - 1,
		low = 0,
		mid = 0,
		value,
		cmp = comparator || ilib.bsearch.numbers;
	
	while (low <= high) {
		mid = Math.floor((high+low)/2);
		value = cmp(arr[mid], target);
		if (value > 0) {
			high = mid - 1;
		} else if (value < 0) {
			low = mid + 1;
		} else {
			return mid;
		}
	}
	
	return low;
};

/**
 * @private
 * Returns whether or not the given element is greater than, less than,
 * or equal to the given target.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {number} element the element being tested
 * @param {number} target the target being sought
 */
ilib.bsearch.numbers = function(element, target) {
	return element - target;
};

/*
 * gregratadie.js - Represent the RD date number in the Gregorian calendar
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/gregorian.js 
util/utils.js
util/search.js 
julianday.js 
*/

/**
 * @class
 * 
 * Construct a new Gregorian RD date number object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Gregorian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above are present, then the RD is calculate based on 
 * the current date at the time of instantiation. <p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends gregratadie.js
 * 
 * @constructor
 * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian RD date
 */
ilib.Date.GregRataDie = function(params) {
	this.cal = new ilib.Cal.Gregorian();

	if (params) {
		if (typeof(params.date) !== 'undefined') {
			// accept JS Date classes or strings
			var date = params.date;
			if (!(date instanceof Date)) {
				date = new Date(date); // maybe a string initializer?
			}
			this._setTime(date.getTime());
		} else if (typeof(params.unixtime) !== 'undefined') {
			this._setTime(parseInt(params.unixtime, 10));
		} else if (typeof(params.julianday) !== 'undefined') {
			// JD time is defined to be UTC
			this._setJulianDay(parseFloat(params.julianday));
		} else if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond ) {
			this._setDateComponents(params);
		} else if (typeof(params.rd) !== 'undefined') {
			this.rd = (typeof(params.rd) === 'object' && params.rd instanceof ilib.DateFmt.GregRataDie) ? params.rd.rd : params.rd;
		}
	}
	
	if (typeof(this.rd) === 'undefined') {
		var now = new Date();
		this._setTime(now.getTime());
	}
};

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month, for a non-leap year 
 */
ilib.Date.GregRataDie.cumMonthLengths = [
    0,   /* Jan */
	31,  /* Feb */
	59,  /* Mar */
	90,  /* Apr */
	120, /* May */
	151, /* Jun */
	181, /* Jul */
	212, /* Aug */
	243, /* Sep */
	273, /* Oct */
	304, /* Nov */
	334, /* Dec */
	365
];

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month, for a leap year 
 */
ilib.Date.GregRataDie.cumMonthLengthsLeap = [
	0,   /* Jan */
	31,  /* Feb */
	60,  /* Mar */
	91,  /* Apr */
	121, /* May */
	152, /* Jun */
	182, /* Jul */
	213, /* Aug */
	244, /* Sep */
	274, /* Oct */
	305, /* Nov */
	335, /* Dec */
	366
];

/**
 * @private
 * @const
 * @type number
 * the difference between a zero Julian day and the zero Gregorian date. 
 */
ilib.Date.GregRataDie.epoch = 1721424.5;

/**
 * @private
 * Set the RD of this instance according to the given unix time. Unix time is
 * the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * @param {number} millis the unix time to set this date to in milliseconds 
 */
ilib.Date.GregRataDie.prototype._setTime = function(millis) {
	this.rd = 719163 + millis / 86400000;
};

/**
 * @private
 * Set the date of this instance using a Julian Day.
 * @param {number} date the Julian Day to use to set this date
 */
ilib.Date.GregRataDie.prototype._setJulianDay = function (date) {
	var jd = (typeof(date) === 'number') ? new ilib.JulianDay(date) : date;
	
	this.rd = jd.getDate() - ilib.Date.GregRataDie.epoch; 	// Julian Days start at noon
};


/**
 * @private
 * Calculate the Rata Die (fixed day) number of the given date.
 * 
 * @param {Object} date the date components to calculate the RD from
 */
ilib.Date.GregRataDie.prototype._setDateComponents = function(date) {
	var year = parseInt(date.year, 10) || 0;
	var month = parseInt(date.month, 10) || 1;
	var day = parseInt(date.day, 10) || 1;
	var hour = parseInt(date.hour, 10) || 0;
	var minute = parseInt(date.minute, 10) || 0;
	var second = parseInt(date.second, 10) || 0;
	var millisecond = parseInt(date.millisecond, 10) || 0;

	var years = 365 * (year - 1) +
		Math.floor((year-1)/4) -
		Math.floor((year-1)/100) +
		Math.floor((year-1)/400);
	
	var dayInYear = (month > 1 ? ilib.Date.GregRataDie.cumMonthLengths[month-1] : 0) +
		day +
		(this.cal.isLeapYear(year) && month > 2 ? 1 : 0);
	var rdtime = (hour * 3600000 +
		minute * 60000 +
		second * 1000 +
		millisecond) / 
		86400000; 
	/*
	debug("getRataDie: converting " +  JSON.stringify(this));
	debug("getRataDie: year is " +  years);
	debug("getRataDie: day in year is " +  dayInYear);
	debug("getRataDie: rdtime is " +  rdtime);
	debug("getRataDie: rd is " +  (years + dayInYear + rdtime));
	*/
	this.rd = years + dayInYear + rdtime;
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.GregRataDie.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.rd);
	return ilib.mod(rd, 7);
};

/**
 * @private
 * Return the rd number of the particular day of the week on or before the 
 * given rd. eg. The Sunday on or before the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the current date
 * @return {number} the rd of the day of the week
 */
ilib.Date.GregRataDie.prototype._onOrBeforeRd = function(rd, dayOfWeek) {
	return rd - ilib.mod(Math.floor(rd) - dayOfWeek, 7);
};

/**
 * Return the rd number of the particular day of the week on or before the current rd.
 * eg. The Sunday on or before the current rd.
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the current date
 * @return {number} the rd of the day of the week
 */
ilib.Date.GregRataDie.prototype.onOrBeforeRd = function(dayOfWeek) {
	return this._onOrBeforeRd(this.rd, dayOfWeek);
};

/**
 * Return the rd number of the particular day of the week on or before the current rd.
 * eg. The Sunday on or before the current rd.
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 * @return {number} the day of the week
 */
ilib.Date.GregRataDie.prototype.onOrAfterRd = function(dayOfWeek) {
	return this._onOrBeforeRd(this.rd+6, dayOfWeek);
};

/**
 * Return the rd number of the particular day of the week before the current rd.
 * eg. The Sunday before the current rd.
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 * @return {number} the day of the week
 */
ilib.Date.GregRataDie.prototype.beforeRd = function(dayOfWeek) {
	return this._onOrBeforeRd(this.rd-1, dayOfWeek);
};

/**
 * Return the rd number of the particular day of the week after the current rd.
 * eg. The Sunday after the current rd.
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 * @return {number} the day of the week
 */
ilib.Date.GregRataDie.prototype.afterRd = function(dayOfWeek) {
	return this._onOrBeforeRd(this.rd+7, dayOfWeek);
};

/**
 * Return the unix time equivalent to this Gregorian date instance. Unix time is
 * the number of milliseconds since midnight on Jan 1, 1970. This method only
 * returns a valid number for dates between midnight, Jan 1, 1970 and  
 * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance 
 * encodes a date outside of that range, this method will return -1. This method
 * returns the time in the local time zone, not in UTC.
 * 
 * @return {number} a number giving the unix time, or -1 if the date is outside the
 * valid unix time range
 */
ilib.Date.GregRataDie.prototype.getTime = function() {
	// earlier than Jan 1, 1970
	// or later than Jan 19, 2038 at 3:14:07am
	if (this.rd < 719163 || this.rd > 744018.134803241) { 
		return -1;
	}

	// avoid the rounding errors in the floating point math by only using
	// the whole days from the rd, and then calculating the milliseconds directly
	return Math.round((this.rd - 719163) * 86400000);
};

/**
 * Return the Julian Day equivalent to this calendar date as a number.
 * This returns the julian day in the local time zone.
 * 
 * @return {number} the julian date equivalent of this date
 */
ilib.Date.GregRataDie.prototype.getJulianDay = function() {
	return this.rd + ilib.Date.GregRataDie.epoch;
};

/**
 * Return the Rata Die (fixed day) number of this RD date.
 * 
 * @return {number} the rd date as a number
 */
ilib.Date.GregRataDie.prototype.getRataDie = function() {
	return this.rd;
};

ilib.data.timezones = {"Africa/Abidjan":{"f":"GMT","o":"0:0","c":"CI","n":"Greenwich {c} Time"},"Africa/Accra":{"f":"S","o":"0:0","c":"GH","n":"Greenwich {c} Time"},"Africa/Addis_Ababa":{"f":"EAT","o":"3:0","c":"ET","n":"E. Africa {c} Time"},"Africa/Algiers":{"f":"CET","o":"1:0","c":"DZ","n":"W. Central Africa {c} Time"},"Africa/Asmara":{"f":"EAT","o":"3:0","c":"ER","n":"E. Africa {c} Time"},"Africa/Bamako":{"f":"GMT","o":"0:0","c":"ML","n":"Greenwich {c} Time"},"Africa/Bangui":{"f":"WAT","o":"1:0","c":"CF","n":"W. Central Africa {c} Time"},"Africa/Banjul":{"f":"GMT","o":"0:0","c":"GM","n":"Greenwich {c} Time"},"Africa/Bissau":{"f":"GMT","o":"0:0","c":"GW","n":"Greenwich {c} Time"},"Africa/Blantyre":{"f":"CAT","o":"2:0","c":"MW","n":"South Africa {c} Time"},"Africa/Brazzaville":{"f":"WAT","o":"1:0","c":"CG","n":"W. Central Africa {c} Time"},"Africa/Bujumbura":{"f":"CAT","o":"2:0","c":"BI","n":"South Africa {c} Time"},"Africa/Cairo":{"f":"EEST","o":"2:0","c":"EG","n":"Egypt {c} Time"},"Africa/Casablanca":{"e":{"m":6,"r":"29","t":"3:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":7,"r":"29","t":"2:0","v":"1:0"},"c":"MA","n":"Morocco {c} Time"},"Africa/Ceuta":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"ES","n":"Romance {c} Time"},"Africa/Conakry":{"f":"GMT","o":"0:0","c":"GN","n":"Greenwich {c} Time"},"Africa/Dakar":{"f":"GMT","o":"0:0","c":"SN","n":"Greenwich {c} Time"},"Africa/Dar_es_Salaam":{"f":"EAT","o":"3:0","c":"TZ","n":"E. Africa {c} Time"},"Africa/Djibouti":{"f":"EAT","o":"3:0","c":"DJ","n":"E. Africa {c} Time"},"Africa/Douala":{"f":"WAT","o":"1:0","c":"CM","n":"W. Central Africa {c} Time"},"Africa/El_Aaiun":{"e":{"m":6,"r":"29","t":"3:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":7,"r":"29","t":"2:0","v":"1:0"},"c":"EH","n":"Greenwich {c} Time"},"Africa/Freetown":{"f":"S","o":"0:0","c":"SL","n":"Greenwich {c} Time"},"Africa/Gaborone":{"f":"CAT","o":"2:0","c":"BW","n":"South Africa {c} Time"},"Africa/Harare":{"f":"CAT","o":"2:0","c":"ZW","n":"South Africa {c} Time"},"Africa/Johannesburg":{"f":"SAST","o":"2:0","c":"ZA","n":"South Africa {c} Time"},"Africa/Juba":{"f":"EAT","o":"3:0","c":"SS","n":"E. Africa {c} Time"},"Africa/Kampala":{"f":"EAT","o":"3:0","c":"UG","n":"E. Africa {c} Time"},"Africa/Khartoum":{"f":"EAT","o":"3:0","c":"SD","n":"E. Africa {c} Time"},"Africa/Kigali":{"f":"CAT","o":"2:0","c":"RW","n":"South Africa {c} Time"},"Africa/Kinshasa":{"f":"WAT","o":"1:0","c":"CD","n":"W. Central Africa {c} Time"},"Africa/Lagos":{"f":"WAT","o":"1:0","c":"NG","n":"W. Central Africa {c} Time"},"Africa/Libreville":{"f":"WAT","o":"1:0","c":"GA","n":"W. Central Africa {c} Time"},"Africa/Lome":{"f":"GMT","o":"0:0","c":"TG","n":"Greenwich {c} Time"},"Africa/Luanda":{"f":"WAT","o":"1:0","c":"AO","n":"W. Central Africa {c} Time"},"Africa/Lubumbashi":{"f":"CAT","o":"2:0","c":"CD","n":"South Africa {c} Time"},"Africa/Lusaka":{"f":"CAT","o":"2:0","c":"ZM","n":"South Africa {c} Time"},"Africa/Malabo":{"f":"WAT","o":"1:0","c":"GQ","n":"W. Central Africa {c} Time"},"Africa/Maputo":{"f":"CAT","o":"2:0","c":"MZ","n":"South Africa {c} Time"},"Africa/Maseru":{"f":"SAST","o":"2:0","c":"LS","n":"South Africa {c} Time"},"Africa/Mbabane":{"f":"SAST","o":"2:0","c":"SZ","n":"South Africa {c} Time"},"Africa/Mogadishu":{"f":"EAT","o":"3:0","c":"SO","n":"E. Africa {c} Time"},"Africa/Monrovia":{"f":"GMT","o":"0:0","c":"LR","n":"Greenwich {c} Time"},"Africa/Nairobi":{"f":"EAT","o":"3:0","c":"KE","n":"E. Africa {c} Time"},"Africa/Ndjamena":{"f":"WAT","o":"1:0","c":"TD","n":"W. Central Africa {c} Time"},"Africa/Niamey":{"f":"WAT","o":"1:0","c":"NE","n":"W. Central Africa {c} Time"},"Africa/Nouakchott":{"f":"GMT","o":"0:0","c":"MR","n":"Greenwich {c} Time"},"Africa/Ouagadougou":{"f":"GMT","o":"0:0","c":"BF","n":"Greenwich {c} Time"},"Africa/Porto-Novo":{"f":"WAT","o":"1:0","c":"BJ","n":"W. Central Africa {c} Time"},"Africa/Sao_Tome":{"f":"GMT","o":"0:0","c":"ST","n":"Greenwich {c} Time"},"Africa/Tripoli":{"f":"EET","o":"2:0","c":"LY","n":"South Africa {c} Time"},"Africa/Tunis":{"f":"CEST","o":"1:0","c":"TN","n":"W. Central Africa {c} Time"},"Africa/Windhoek":{"e":{"m":4,"r":"0>1","t":"2:0"},"f":"WA{c}T","o":"1:0","s":{"c":"S","m":9,"r":"0>1","t":"2:0","v":"1:0"},"c":"NA","n":"Namibia {c} Time"},"America/Adak":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"HA{c}T","o":"-10:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US"},"America/Anchorage":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"AK{c}T","o":"-9:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Alaskan {c} Time"},"America/Anguilla":{"f":"AST","o":"-4:0","c":"AI","n":"SA Western {c} Time"},"America/Antigua":{"f":"AST","o":"-4:0","c":"AG","n":"SA Western {c} Time"},"America/Araguaina":{"f":"BRT","o":"-3:0","c":"BR","n":"SA Eastern {c} Time"},"America/Argentina/Buenos_Aires":{"f":"ARST","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Argentina/Catamarca":{"f":"ART","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Argentina/Cordoba":{"f":"ARST","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Argentina/Jujuy":{"f":"ART","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Argentina/La_Rioja":{"f":"ART","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Argentina/Mendoza":{"f":"ART","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Argentina/Rio_Gallegos":{"f":"ART","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Argentina/Salta":{"f":"ART","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Argentina/San_Juan":{"f":"ART","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Argentina/San_Luis":{"f":"ART","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Argentina/Tucuman":{"f":"ARST","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Argentina/Ushuaia":{"f":"ART","o":"-3:0","c":"AR","n":"Argentina {c} Time"},"America/Asuncion":{"e":{"m":3,"r":"0>22","t":"0:0"},"f":"PY{c}T","o":"-4:0","s":{"c":"S","m":10,"r":"0>1","t":"0:0","v":"1:0"},"c":"PY","n":"Paraguay {c} Time"},"America/Atikokan":{"f":"EST","o":"-5:0","c":"CA","n":"SA Pacific {c} Time"},"America/Bahia":{"f":"BRT","o":"-3:0","c":"BR","n":"Bahia {c} Time"},"America/Bahia_Banderas":{"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time (Mexico)"},"America/Barbados":{"f":"AST","o":"-4:0","c":"BB","n":"SA Western {c} Time"},"America/Belem":{"f":"BRT","o":"-3:0","c":"BR","n":"SA Eastern {c} Time"},"America/Belize":{"f":"CST","o":"-6:0","c":"BZ","n":"Central America {c} Time"},"America/Blanc-Sablon":{"f":"AST","o":"-4:0","c":"CA","n":"SA Western {c} Time"},"America/Boa_Vista":{"f":"AMT","o":"-4:0","c":"BR","n":"SA Western {c} Time"},"America/Bogota":{"f":"COST","o":"-5:0","c":"CO","n":"SA Pacific {c} Time"},"America/Boise":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Mountain {c} Time"},"America/Cambridge_Bay":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Mountain {c} Time"},"America/Campo_Grande":{"e":{"m":2,"r":"0>15","t":"0:0"},"f":"AM{c}T","o":"-4:0","s":{"c":"S","m":10,"r":"0>15","t":"0:0","v":"1:0"},"c":"BR","n":"Central Brazilian {c} Time"},"America/Cancun":{"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time (Mexico)"},"America/Caracas":{"f":"VET","o":"-4:30","c":"VE","n":"Venezuela {c} Time"},"America/Cayenne":{"f":"GFT","o":"-3:0","c":"GF","n":"SA Eastern {c} Time"},"America/Cayman":{"f":"EST","o":"-5:0","c":"KY","n":"SA Pacific {c} Time"},"America/Chicago":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Central {c} Time"},"America/Chihuahua":{"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Mountain {c} Time (Mexico)"},"America/Costa_Rica":{"f":"CST","o":"-6:0","c":"CR","n":"Central America {c} Time"},"America/Creston":{"f":"MST","o":"-7:0","c":"CA","n":"US Mountain {c} Time"},"America/Cuiaba":{"e":{"m":2,"r":"0>15","t":"0:0"},"f":"AM{c}T","o":"-4:0","s":{"c":"S","m":10,"r":"0>15","t":"0:0","v":"1:0"},"c":"BR","n":"Central Brazilian {c} Time"},"America/Curacao":{"f":"AST","o":"-4:0","c":"CW","n":"SA Western {c} Time"},"America/Danmarkshavn":{"f":"GMT","o":"0:0","c":"GL","n":"UTC"},"America/Dawson":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Pacific {c} Time"},"America/Dawson_Creek":{"f":"MST","o":"-7:0","c":"CA","n":"US Mountain {c} Time"},"America/Denver":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Mountain {c} Time"},"America/Detroit":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Eastern {c} Time"},"America/Dominica":{"f":"AST","o":"-4:0","c":"DM","n":"SA Western {c} Time"},"America/Edmonton":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Mountain {c} Time"},"America/Eirunepe":{"f":"ACT","o":"-5:0","c":"BR","n":"SA Western {c} Time"},"America/El_Salvador":{"f":"CST","o":"-6:0","c":"SV","n":"Central America {c} Time"},"America/Fortaleza":{"f":"BRT","o":"-3:0","c":"BR","n":"SA Eastern {c} Time"},"America/Glace_Bay":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"A{c}T","o":"-4:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Atlantic {c} Time"},"America/Godthab":{"e":{"m":10,"r":"l6","t":"23:0"},"f":"WG{c}T","o":"-3:0","s":{"c":"S","m":3,"r":"l6","t":"22:0","v":"1:0"},"c":"GL","n":"Greenland {c} Time"},"America/Goose_Bay":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"A{c}T","o":"-4:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Atlantic {c} Time"},"America/Grand_Turk":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"TC","n":"Eastern {c} Time"},"America/Grenada":{"f":"AST","o":"-4:0","c":"GD","n":"SA Western {c} Time"},"America/Guadeloupe":{"f":"AST","o":"-4:0","c":"GP","n":"SA Western {c} Time"},"America/Guatemala":{"f":"CST","o":"-6:0","c":"GT","n":"Central America {c} Time"},"America/Guayaquil":{"f":"ECT","o":"-5:0","c":"EC","n":"SA Pacific {c} Time"},"America/Guyana":{"f":"GYT","o":"-4:0","c":"GY","n":"SA Western {c} Time"},"America/Halifax":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"A{c}T","o":"-4:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Atlantic {c} Time"},"America/Havana":{"e":{"c":"S","m":11,"r":"0>1","t":"1:0"},"f":"C{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"0:0","v":"1:0"},"c":"CU"},"America/Hermosillo":{"f":"MST","o":"-7:0","c":"MX","n":"US Mountain {c} Time"},"America/Indiana/Indianapolis":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"US Eastern {c} Time"},"America/Indiana/Knox":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Central {c} Time"},"America/Indiana/Marengo":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"US Eastern {c} Time"},"America/Indiana/Petersburg":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Eastern {c} Time"},"America/Indiana/Tell_City":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Central {c} Time"},"America/Indiana/Vevay":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"US Eastern {c} Time"},"America/Indiana/Vincennes":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Eastern {c} Time"},"America/Indiana/Winamac":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Eastern {c} Time"},"America/Inuvik":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Mountain {c} Time"},"America/Iqaluit":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Eastern {c} Time"},"America/Jamaica":{"f":"EST","o":"-5:0","c":"JM","n":"SA Pacific {c} Time"},"America/Juneau":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"AK{c}T","o":"-9:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Alaskan {c} Time"},"America/Kentucky/Louisville":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Eastern {c} Time"},"America/Kentucky/Monticello":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Eastern {c} Time"},"America/Kralendijk":{"f":"AST","o":"-4:0","c":"BQ","n":"SA Western {c} Time"},"America/La_Paz":{"f":"BOT","o":"-4:0","c":"BO","n":"SA Western {c} Time"},"America/Lima":{"f":"PEST","o":"-5:0","c":"PE","n":"SA Pacific {c} Time"},"America/Los_Angeles":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Pacific {c} Time"},"America/Lower_Princes":{"f":"AST","o":"-4:0","c":"SX","n":"SA Western {c} Time"},"America/Maceio":{"f":"BRT","o":"-3:0","c":"BR","n":"SA Eastern {c} Time"},"America/Managua":{"f":"CST","o":"-6:0","c":"NI","n":"Central America {c} Time"},"America/Manaus":{"f":"AMT","o":"-4:0","c":"BR","n":"SA Western {c} Time"},"America/Marigot":{"f":"AST","o":"-4:0","c":"MF","n":"SA Western {c} Time"},"America/Martinique":{"f":"AST","o":"-4:0","c":"MQ","n":"SA Western {c} Time"},"America/Matamoros":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time"},"America/Mazatlan":{"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Mountain {c} Time (Mexico)"},"America/Menominee":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Central {c} Time"},"America/Merida":{"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time (Mexico)"},"America/Metlakatla":{"f":"MeST","o":"-8:0","c":"US"},"America/Mexico_City":{"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time (Mexico)"},"America/Miquelon":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"PM{c}T","o":"-3:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"PM"},"America/Moncton":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"A{c}T","o":"-4:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Atlantic {c} Time"},"America/Monterrey":{"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time (Mexico)"},"America/Montevideo":{"e":{"m":3,"r":"0>8","t":"2:0"},"f":"UY{c}T","o":"-3:0","s":{"c":"S","m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"UY","n":"Montevideo {c} Time"},"America/Montreal":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"n":"Eastern {c} Time"},"America/Montserrat":{"f":"AST","o":"-4:0","c":"MS","n":"SA Western {c} Time"},"America/Nassau":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"BS","n":"Eastern {c} Time"},"America/New_York":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Eastern {c} Time"},"America/Nipigon":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Eastern {c} Time"},"America/Nome":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"AK{c}T","o":"-9:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Alaskan {c} Time"},"America/Noronha":{"f":"FNT","o":"-2:0","c":"BR","n":"UTC-02"},"America/North_Dakota/Beulah":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Central {c} Time"},"America/North_Dakota/Center":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Central {c} Time"},"America/North_Dakota/New_Salem":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Central {c} Time"},"America/Ojinaga":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"MX","n":"Mountain {c} Time"},"America/Panama":{"f":"EST","o":"-5:0","c":"PA","n":"SA Pacific {c} Time"},"America/Pangnirtung":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Eastern {c} Time"},"America/Paramaribo":{"f":"SRT","o":"-3:0","c":"SR","n":"SA Eastern {c} Time"},"America/Phoenix":{"f":"MST","o":"-7:0","c":"US","n":"US Mountain {c} Time"},"America/Port-au-Prince":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"HT","n":"SA Pacific {c} Time"},"America/Port_of_Spain":{"f":"AST","o":"-4:0","c":"TT","n":"SA Western {c} Time"},"America/Porto_Velho":{"f":"AMT","o":"-4:0","c":"BR","n":"SA Western {c} Time"},"America/Puerto_Rico":{"f":"AST","o":"-4:0","c":"PR","n":"SA Western {c} Time"},"America/Rainy_River":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Central {c} Time"},"America/Rankin_Inlet":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Central {c} Time"},"America/Recife":{"f":"BRT","o":"-3:0","c":"BR","n":"SA Eastern {c} Time"},"America/Regina":{"f":"CST","o":"-6:0","c":"CA","n":"Canada Central {c} Time"},"America/Resolute":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Central {c} Time"},"America/Rio_Branco":{"f":"ACT","o":"-5:0","c":"BR","n":"SA Western {c} Time"},"America/Santa_Isabel":{"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Pacific {c} Time (Mexico)"},"America/Santarem":{"f":"BRT","o":"-3:0","c":"BR","n":"SA Eastern {c} Time"},"America/Santiago":{"e":{"m":4,"r":"0>23","t":"0:0"},"f":"CL{c}T","o":"-4:0","s":{"c":"S","m":9,"r":"0>2","t":"0:0","v":"1:0"},"c":"CL","n":"Pacific SA {c} Time"},"America/Santo_Domingo":{"f":"AST","o":"-4:0","c":"DO","n":"SA Western {c} Time"},"America/Sao_Paulo":{"e":{"m":2,"r":"0>15","t":"0:0"},"f":"BR{c}T","o":"-3:0","s":{"c":"S","m":10,"r":"0>15","t":"0:0","v":"1:0"},"c":"BR","n":"E. South America {c} Time"},"America/Scoresbysund":{"e":{"m":10,"r":"l0","t":"1:0"},"f":"EG{c}T","o":"-1:0","s":{"c":"S","m":3,"r":"l0","t":"0:0","v":"1:0"},"c":"GL","n":"Azores {c} Time"},"America/Sitka":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"AK{c}T","o":"-9:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Alaskan {c} Time"},"America/St_Barthelemy":{"f":"AST","o":"-4:0","c":"BL","n":"SA Western {c} Time"},"America/St_Johns":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"N{c}T","o":"-3:30","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Newfoundland {c} Time"},"America/St_Kitts":{"f":"AST","o":"-4:0","c":"KN","n":"SA Western {c} Time"},"America/St_Lucia":{"f":"AST","o":"-4:0","c":"LC","n":"SA Western {c} Time"},"America/St_Thomas":{"f":"AST","o":"-4:0","c":"VI","n":"SA Western {c} Time"},"America/St_Vincent":{"f":"AST","o":"-4:0","c":"VC","n":"SA Western {c} Time"},"America/Swift_Current":{"f":"CST","o":"-6:0","c":"CA","n":"Canada Central {c} Time"},"America/Tegucigalpa":{"f":"CST","o":"-6:0","c":"HN","n":"Central America {c} Time"},"America/Thule":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"A{c}T","o":"-4:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"GL","n":"Atlantic {c} Time"},"America/Thunder_Bay":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Eastern {c} Time"},"America/Tijuana":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"MX","n":"Pacific {c} Time"},"America/Toronto":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Eastern {c} Time"},"America/Tortola":{"f":"AST","o":"-4:0","c":"VG","n":"SA Western {c} Time"},"America/Vancouver":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Pacific {c} Time"},"America/Whitehorse":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Pacific {c} Time"},"America/Winnipeg":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Central {c} Time"},"America/Yakutat":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"AK{c}T","o":"-9:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Alaskan {c} Time"},"America/Yellowknife":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Mountain {c} Time"},"Antarctica/Casey":{"f":"WST","o":"8:0","c":"AQ","n":"W. Australia {c} Time"},"Antarctica/Davis":{"f":"DAVT","o":"7:0","c":"AQ","n":"SE Asia {c} Time"},"Antarctica/DumontDUrville":{"f":"DDUT","o":"10:0","c":"AQ","n":"West Pacific {c} Time"},"Antarctica/Macquarie":{"f":"MIST","o":"11:0","c":"AU","n":"Central Pacific {c} Time"},"Antarctica/Mawson":{"f":"MAWT","o":"5:0","c":"AQ","n":"West Asia {c} Time"},"Antarctica/McMurdo":{"e":{"c":"S","m":4,"r":"0>1","t":"3:0"},"f":"NZ{c}T","o":"12:0","s":{"c":"D","m":9,"r":"l0","t":"2:0","v":"1:0"},"c":"AQ","n":"New Zealand {c} Time"},"Antarctica/Palmer":{"e":{"m":4,"r":"0>23","t":"0:0"},"f":"CL{c}T","o":"-4:0","s":{"c":"S","m":9,"r":"0>2","t":"0:0","v":"1:0"},"c":"AQ","n":"Pacific SA {c} Time"},"Antarctica/Rothera":{"f":"ROTT","o":"-3:0","c":"AQ","n":"SA Eastern {c} Time"},"Antarctica/Syowa":{"f":"SYOT","o":"3:0","c":"AQ","n":"E. Africa {c} Time"},"Antarctica/Vostok":{"f":"VOST","o":"6:0","c":"AQ","n":"Central Asia {c} Time"},"Arctic/Longyearbyen":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"SJ","n":"W. Europe {c} Time"},"Asia/Aden":{"f":"AST","o":"3:0","c":"YE","n":"Arab {c} Time"},"Asia/Almaty":{"f":"ALMT","o":"6:0","c":"KZ","n":"Central Asia {c} Time"},"Asia/Amman":{"e":{"m":10,"r":"l5","t":"1:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l5","t":"0:0","v":"1:0"},"c":"JO","n":"Jordan {c} Time"},"Asia/Anadyr":{"f":"ANAT","o":"12:0","c":"RU","n":"Magadan {c} Time"},"Asia/Aqtau":{"f":"AQTT","o":"5:0","c":"KZ","n":"West Asia {c} Time"},"Asia/Aqtobe":{"f":"AQTT","o":"5:0","c":"KZ","n":"West Asia {c} Time"},"Asia/Ashgabat":{"f":"TMT","o":"5:0","c":"TM","n":"West Asia {c} Time"},"Asia/Baghdad":{"f":"AST","o":"3:0","c":"IQ","n":"Arabic {c} Time"},"Asia/Bahrain":{"f":"AST","o":"3:0","c":"BH","n":"Arab {c} Time"},"Asia/Baku":{"e":{"m":10,"r":"l0","t":"5:0"},"f":"AZ{c}T","o":"4:0","s":{"c":"S","m":3,"r":"l0","t":"4:0","v":"1:0"},"c":"AZ","n":"Azerbaijan {c} Time"},"Asia/Bangkok":{"f":"ICT","o":"7:0","c":"TH","n":"SE Asia {c} Time"},"Asia/Beirut":{"e":{"m":10,"r":"l0","t":"0:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"0:0","v":"1:0"},"c":"LB","n":"Middle East {c} Time"},"Asia/Bishkek":{"f":"KGT","o":"6:0","c":"KG","n":"Central Asia {c} Time"},"Asia/Brunei":{"f":"BNT","o":"8:0","c":"BN","n":"Singapore {c} Time"},"Asia/Choibalsan":{"f":"CHOST","o":"8:0","c":"MN","n":"Ulaanbaatar {c} Time"},"Asia/Chongqing":{"f":"CST","o":"8:0","c":"CN","n":"China {c} Time"},"Asia/Colombo":{"f":"IST","o":"5:30","c":"LK","n":"Sri Lanka {c} Time"},"Asia/Damascus":{"e":{"m":10,"r":"l5","t":"0:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l5","t":"0:0","v":"1:0"},"c":"SY","n":"Syria {c} Time"},"Asia/Dhaka":{"f":"BDST","o":"6:0","c":"BD","n":"Bangladesh {c} Time"},"Asia/Dili":{"f":"TLT","o":"9:0","c":"TL","n":"Tokyo {c} Time"},"Asia/Dubai":{"f":"GST","o":"4:0","c":"AE","n":"Arabian {c} Time"},"Asia/Dushanbe":{"f":"TJT","o":"5:0","c":"TJ","n":"West Asia {c} Time"},"Asia/Gaza":{"e":{"m":9,"r":"5>21","t":"0:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l5","t":"0:0","v":"1:0"},"c":"PS","n":"Egypt {c} Time"},"Asia/Harbin":{"f":"CST","o":"8:0","c":"CN","n":"China {c} Time"},"Asia/Hebron":{"e":{"m":9,"r":"5>21","t":"0:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l5","t":"0:0","v":"1:0"},"c":"PS","n":"Egypt {c} Time"},"Asia/Ho_Chi_Minh":{"f":"ICT","o":"7:0","c":"VN","n":"SE Asia {c} Time"},"Asia/Hong_Kong":{"f":"HKST","o":"8:0","c":"HK","n":"China {c} Time"},"Asia/Hovd":{"f":"HOVST","o":"7:0","c":"MN","n":"SE Asia {c} Time"},"Asia/Irkutsk":{"f":"IRKT","o":"9:0","c":"RU","n":"North Asia East {c} Time"},"Asia/Istanbul":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"}},"Asia/Jakarta":{"f":"WIB","o":"7:0","c":"ID","n":"SE Asia {c} Time"},"Asia/Jayapura":{"f":"WIT","o":"9:0","c":"ID","n":"Tokyo {c} Time"},"Asia/Jerusalem":{"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"I{c}T","o":"2:0","s":{"c":"D","m":3,"r":"5>23","t":"2:0","v":"1:0"},"c":"IL","n":"Israel {c} Time"},"Asia/Kabul":{"f":"AFT","o":"4:30","c":"AF","n":"Afghanistan {c} Time"},"Asia/Kamchatka":{"f":"PETT","o":"12:0","c":"RU","n":"Magadan {c} Time"},"Asia/Karachi":{"f":"PKST","o":"5:0","c":"PK","n":"Pakistan {c} Time"},"Asia/Kashgar":{"f":"CST","o":"8:0","c":"CN","n":"China {c} Time"},"Asia/Kathmandu":{"f":"NPT","o":"5:45","c":"NP","n":"Nepal {c} Time"},"Asia/Khandyga":{"f":"YAKT","o":"10:0","c":"RU"},"Asia/Kolkata":{"f":"IST","o":"5:30","c":"IN","n":"India {c} Time"},"Asia/Krasnoyarsk":{"f":"KRAT","o":"8:0","c":"RU","n":"North Asia {c} Time"},"Asia/Kuala_Lumpur":{"f":"MYT","o":"8:0","c":"MY","n":"Singapore {c} Time"},"Asia/Kuching":{"f":"MYT","o":"8:0","c":"MY","n":"Singapore {c} Time"},"Asia/Kuwait":{"f":"AST","o":"3:0","c":"KW","n":"Arab {c} Time"},"Asia/Macau":{"f":"CST","o":"8:0","c":"MO","n":"China {c} Time"},"Asia/Magadan":{"f":"MAGT","o":"12:0","c":"RU","n":"Magadan {c} Time"},"Asia/Makassar":{"f":"WITA","o":"8:0","c":"ID","n":"Singapore {c} Time"},"Asia/Manila":{"f":"PHST","o":"8:0","c":"PH","n":"Singapore {c} Time"},"Asia/Muscat":{"f":"GST","o":"4:0","c":"OM","n":"Arabian {c} Time"},"Asia/Nicosia":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"CY","n":"E. Europe {c} Time"},"Asia/Novokuznetsk":{"f":"NOVT","o":"7:0","c":"RU","n":"N. Central Asia {c} Time"},"Asia/Novosibirsk":{"f":"NOVT","o":"7:0","c":"RU","n":"N. Central Asia {c} Time"},"Asia/Omsk":{"f":"OMST","o":"7:0","c":"RU","n":"N. Central Asia {c} Time"},"Asia/Oral":{"f":"ORAT","o":"5:0","c":"KZ","n":"West Asia {c} Time"},"Asia/Phnom_Penh":{"f":"ICT","o":"7:0","c":"KH","n":"SE Asia {c} Time"},"Asia/Pontianak":{"f":"WIB","o":"7:0","c":"ID","n":"SE Asia {c} Time"},"Asia/Pyongyang":{"f":"KST","o":"9:0","c":"KP","n":"Korea {c} Time"},"Asia/Qatar":{"f":"AST","o":"3:0","c":"QA","n":"Arab {c} Time"},"Asia/Qyzylorda":{"f":"QYZT","o":"6:0","c":"KZ","n":"Central Asia {c} Time"},"Asia/Rangoon":{"f":"MMT","o":"6:30","c":"MM","n":"Myanmar {c} Time"},"Asia/Riyadh":{"f":"AST","o":"3:0","c":"SA","n":"Arab {c} Time"},"Asia/Sakhalin":{"f":"SAKT","o":"11:0","c":"RU","n":"Vladivostok {c} Time"},"Asia/Samarkand":{"f":"UZT","o":"5:0","c":"UZ","n":"West Asia {c} Time"},"Asia/Seoul":{"f":"KST","o":"9:0","c":"KR","n":"Korea {c} Time"},"Asia/Shanghai":{"f":"CST","o":"8:0","c":"CN","n":"China {c} Time"},"Asia/Singapore":{"f":"SGT","o":"8:0","c":"SG","n":"Singapore {c} Time"},"Asia/Taipei":{"f":"CST","o":"8:0","c":"TW","n":"Taipei {c} Time"},"Asia/Tashkent":{"f":"UZT","o":"5:0","c":"UZ","n":"West Asia {c} Time"},"Asia/Tbilisi":{"f":"GET","o":"4:0","c":"GE","n":"Georgian {c} Time"},"Asia/Tehran":{"e":{"c":"S","m":9,"r":"22","t":"0:0"},"f":"IR{c}T","o":"3:30","s":{"c":"D","m":3,"r":"22","t":"0:0","v":"1:0"},"c":"IR","n":"Iran {c} Time"},"Asia/Thimphu":{"f":"BTT","o":"6:0","c":"BT","n":"Bangladesh {c} Time"},"Asia/Tokyo":{"f":"JST","o":"9:0","c":"JP","n":"Tokyo {c} Time"},"Asia/Ulaanbaatar":{"f":"ULAST","o":"8:0","c":"MN","n":"Ulaanbaatar {c} Time"},"Asia/Urumqi":{"f":"CST","o":"8:0","c":"CN","n":"China {c} Time"},"Asia/Ust-Nera":{"f":"VLAT","o":"11:0","c":"RU"},"Asia/Vientiane":{"f":"ICT","o":"7:0","c":"LA","n":"SE Asia {c} Time"},"Asia/Vladivostok":{"f":"VLAT","o":"11:0","c":"RU","n":"Vladivostok {c} Time"},"Asia/Yakutsk":{"f":"YAKT","o":"10:0","c":"RU","n":"Yakutsk {c} Time"},"Asia/Yekaterinburg":{"f":"YEKT","o":"6:0","c":"RU","n":"Ekaterinburg {c} Time"},"Asia/Yerevan":{"f":"AMT","o":"4:0","c":"AM","n":"Caucasus {c} Time"},"Atlantic/Azores":{"e":{"m":10,"r":"l0","t":"1:0"},"f":"AZO{c}T","o":"-1:0","s":{"c":"S","m":3,"r":"l0","t":"0:0","v":"1:0"},"c":"PT","n":"Azores {c} Time"},"Atlantic/Bermuda":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"A{c}T","o":"-4:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"BM","n":"Atlantic {c} Time"},"Atlantic/Canary":{"e":{"m":10,"r":"l0","t":"2:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"ES","n":"GMT {c} Time"},"Atlantic/Cape_Verde":{"f":"CVT","o":"-1:0","c":"CV","n":"Cape Verde {c} Time"},"Atlantic/Faroe":{"e":{"m":10,"r":"l0","t":"2:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"FO","n":"GMT {c} Time"},"Atlantic/Madeira":{"e":{"m":10,"r":"l0","t":"2:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"PT","n":"GMT {c} Time"},"Atlantic/Reykjavik":{"f":"GMT","o":"0:0","c":"IS","n":"Greenwich {c} Time"},"Atlantic/South_Georgia":{"f":"GST","o":"-2:0","c":"GS","n":"UTC-02"},"Atlantic/St_Helena":{"f":"GMT","o":"0:0","c":"SH","n":"Greenwich {c} Time"},"Atlantic/Stanley":{"f":"FKST","o":"-3:0","c":"FK","n":"SA Eastern {c} Time"},"Australia/Adelaide":{"e":{"m":4,"r":"0>1","t":"3:0"},"f":"CST","o":"9:30","s":{"m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"Cen. Australia {c} Time"},"Australia/Brisbane":{"f":"EST","o":"10:0","c":"AU","n":"E. Australia {c} Time"},"Australia/Broken_Hill":{"e":{"m":4,"r":"0>1","t":"3:0"},"f":"CST","o":"9:30","s":{"m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"Cen. Australia {c} Time"},"Australia/Currie":{"e":{"m":4,"r":"0>1","t":"3:0"},"f":"EST","o":"10:0","s":{"m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"Tasmania {c} Time"},"Australia/Darwin":{"f":"CST","o":"9:30","c":"AU","n":"AUS Central {c} Time"},"Australia/Eucla":{"f":"CWST","o":"8:45","c":"AU"},"Australia/Hobart":{"e":{"m":4,"r":"0>1","t":"3:0"},"f":"EST","o":"10:0","s":{"m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"Tasmania {c} Time"},"Australia/Lindeman":{"f":"EST","o":"10:0","c":"AU","n":"E. Australia {c} Time"},"Australia/Lord_Howe":{"e":{"m":4,"r":"0>1","t":"2:0"},"f":"LHST","o":"10:30","s":{"m":10,"r":"0>1","t":"2:0","v":"0:30"},"c":"AU"},"Australia/Melbourne":{"e":{"m":4,"r":"0>1","t":"3:0"},"f":"EST","o":"10:0","s":{"m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"AUS Eastern {c} Time"},"Australia/Perth":{"f":"WST","o":"8:0","c":"AU","n":"W. Australia {c} Time"},"Australia/Sydney":{"e":{"m":4,"r":"0>1","t":"3:0"},"f":"EST","o":"10:0","s":{"m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"AUS Eastern {c} Time"},"CET":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"}},"CST6CDT":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"n":"Central {c} Time"},"EET":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"}},"EST":{"f":"EST","o":"-5:0"},"EST5EDT":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"n":"Eastern {c} Time"},"Etc/GMT":{"f":"GMT","o":"0:0","n":"UTC"},"Etc/GMT+1":{"f":"GMT+1","o":"-1:0","n":"Cape Verde {c} Time"},"Etc/GMT+10":{"f":"GMT+10","o":"-10:0","n":"Hawaiian {c} Time"},"Etc/GMT+11":{"f":"GMT+11","o":"-11:0","n":"UTC-11"},"Etc/GMT+12":{"f":"GMT+12","o":"-12:0","n":"Dateline {c} Time"},"Etc/GMT+2":{"f":"GMT+2","o":"-2:0","n":"UTC-02"},"Etc/GMT+3":{"f":"GMT+3","o":"-3:0","n":"SA Eastern {c} Time"},"Etc/GMT+4":{"f":"GMT+4","o":"-4:0","n":"SA Western {c} Time"},"Etc/GMT+5":{"f":"GMT+5","o":"-5:0","n":"SA Pacific {c} Time"},"Etc/GMT+6":{"f":"GMT+6","o":"-6:0","n":"Central America {c} Time"},"Etc/GMT+7":{"f":"GMT+7","o":"-7:0","n":"US Mountain {c} Time"},"Etc/GMT+8":{"f":"GMT+8","o":"-8:0"},"Etc/GMT+9":{"f":"GMT+9","o":"-9:0"},"Etc/GMT-1":{"f":"GMT-1","o":"1:0","n":"W. Central Africa {c} Time"},"Etc/GMT-10":{"f":"GMT-10","o":"10:0","n":"West Pacific {c} Time"},"Etc/GMT-11":{"f":"GMT-11","o":"11:0","n":"Central Pacific {c} Time"},"Etc/GMT-12":{"f":"GMT-12","o":"12:0","n":"UTC+12"},"Etc/GMT-13":{"f":"GMT-13","o":"13:0","n":"Tonga {c} Time"},"Etc/GMT-14":{"f":"GMT-14","o":"14:0"},"Etc/GMT-2":{"f":"GMT-2","o":"2:0","n":"South Africa {c} Time"},"Etc/GMT-3":{"f":"GMT-3","o":"3:0","n":"E. Africa {c} Time"},"Etc/GMT-4":{"f":"GMT-4","o":"4:0","n":"Arabian {c} Time"},"Etc/GMT-5":{"f":"GMT-5","o":"5:0","n":"West Asia {c} Time"},"Etc/GMT-6":{"f":"GMT-6","o":"6:0","n":"Central Asia {c} Time"},"Etc/GMT-7":{"f":"GMT-7","o":"7:0","n":"SE Asia {c} Time"},"Etc/GMT-8":{"f":"GMT-8","o":"8:0","n":"Singapore {c} Time"},"Etc/GMT-9":{"f":"GMT-9","o":"9:0","n":"Tokyo {c} Time"},"Etc/UCT":{"f":"UCT","o":"0:0"},"Etc/UTC":{"f":"UTC","o":"0:0"},"Europe/Amsterdam":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"NL","n":"W. Europe {c} Time"},"Europe/Andorra":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"AD","n":"W. Europe {c} Time"},"Europe/Athens":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"GR","n":"GTB {c} Time"},"Europe/Belgrade":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"RS","n":"Central Europe {c} Time"},"Europe/Berlin":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"DE","n":"W. Europe {c} Time"},"Europe/Bratislava":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"SK","n":"Central Europe {c} Time"},"Europe/Brussels":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"BE","n":"Romance {c} Time"},"Europe/Bucharest":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"RO","n":"GTB {c} Time"},"Europe/Budapest":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"HU","n":"Central Europe {c} Time"},"Europe/Chisinau":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"MD","n":"GTB {c} Time"},"Europe/Copenhagen":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"DK","n":"Romance {c} Time"},"Europe/Dublin":{"e":{"m":10,"r":"l0","t":"2:0"},"f":"GMT/IST","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"IE","n":"GMT {c} Time"},"Europe/Gibraltar":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"GI","n":"W. Europe {c} Time"},"Europe/Guernsey":{"e":{"m":10,"r":"l0","t":"2:0"},"f":"GMT/BST","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"GG","n":"GMT {c} Time"},"Europe/Helsinki":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"FI","n":"FLE {c} Time"},"Europe/Isle_of_Man":{"e":{"m":10,"r":"l0","t":"2:0"},"f":"GMT/BST","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"IM","n":"GMT {c} Time"},"Europe/Istanbul":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"TR","n":"Turkey {c} Time"},"Europe/Jersey":{"e":{"m":10,"r":"l0","t":"2:0"},"f":"GMT/BST","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"JE","n":"GMT {c} Time"},"Europe/Kaliningrad":{"f":"FET","o":"3:0","c":"RU","n":"Kaliningrad {c} Time"},"Europe/Kiev":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"UA","n":"FLE {c} Time"},"Europe/Lisbon":{"e":{"m":10,"r":"l0","t":"2:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"PT","n":"GMT {c} Time"},"Europe/Ljubljana":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"SI","n":"Central Europe {c} Time"},"Europe/London":{"e":{"m":10,"r":"l0","t":"2:0"},"f":"GMT/BST","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"GB","n":"GMT {c} Time"},"Europe/Luxembourg":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"LU","n":"W. Europe {c} Time"},"Europe/Madrid":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"ES","n":"Romance {c} Time"},"Europe/Malta":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"MT","n":"W. Europe {c} Time"},"Europe/Mariehamn":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"AX","n":"FLE {c} Time"},"Europe/Minsk":{"f":"FET","o":"3:0","c":"BY","n":"Kaliningrad {c} Time"},"Europe/Monaco":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"MC","n":"W. Europe {c} Time"},"Europe/Moscow":{"f":"MSK","o":"4:0","c":"RU","n":"Russian {c} Time"},"Europe/Nicosia":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"}},"Europe/Oslo":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"NO","n":"W. Europe {c} Time"},"Europe/Paris":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"FR","n":"Romance {c} Time"},"Europe/Podgorica":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"ME","n":"Central Europe {c} Time"},"Europe/Prague":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"CZ","n":"Central Europe {c} Time"},"Europe/Riga":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"LV","n":"FLE {c} Time"},"Europe/Rome":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"IT","n":"W. Europe {c} Time"},"Europe/Samara":{"f":"SAMT","o":"4:0","c":"RU","n":"Russian {c} Time"},"Europe/San_Marino":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"SM","n":"W. Europe {c} Time"},"Europe/Sarajevo":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"BA","n":"Central European {c} Time"},"Europe/Simferopol":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"UA","n":"FLE {c} Time"},"Europe/Skopje":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"MK","n":"Central European {c} Time"},"Europe/Sofia":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"BG","n":"FLE {c} Time"},"Europe/Stockholm":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"SE","n":"W. Europe {c} Time"},"Europe/Tallinn":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"EE","n":"FLE {c} Time"},"Europe/Tirane":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"AL","n":"Central Europe {c} Time"},"Europe/Uzhgorod":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"UA","n":"FLE {c} Time"},"Europe/Vatican":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"VA","n":"W. Europe {c} Time"},"Europe/Vienna":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"AT","n":"W. Europe {c} Time"},"Europe/Vilnius":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"LT","n":"FLE {c} Time"},"Europe/Volgograd":{"f":"VOLT","o":"4:0","c":"RU","n":"Russian {c} Time"},"Europe/Warsaw":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"PL","n":"Central European {c} Time"},"Europe/Zagreb":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"HR","n":"Central European {c} Time"},"Europe/Zaporozhye":{"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"UA","n":"FLE {c} Time"},"Europe/Zurich":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"CH","n":"W. Europe {c} Time"},"Factory":{"f":"\"Local","o":"0:0"},"HST":{"f":"HST","o":"-10:0"},"Indian/Antananarivo":{"f":"EAT","o":"3:0","c":"MG","n":"E. Africa {c} Time"},"Indian/Chagos":{"f":"IOT","o":"6:0","c":"IO","n":"Central Asia {c} Time"},"Indian/Christmas":{"f":"CXT","o":"7:0","c":"CX","n":"SE Asia {c} Time"},"Indian/Cocos":{"f":"CCT","o":"6:30","c":"CC","n":"Myanmar {c} Time"},"Indian/Comoro":{"f":"EAT","o":"3:0","c":"KM","n":"E. Africa {c} Time"},"Indian/Kerguelen":{"f":"TFT","o":"5:0","c":"TF","n":"West Asia {c} Time"},"Indian/Mahe":{"f":"SCT","o":"4:0","c":"SC","n":"Mauritius {c} Time"},"Indian/Maldives":{"f":"MVT","o":"5:0","c":"MV","n":"West Asia {c} Time"},"Indian/Mauritius":{"f":"MUST","o":"4:0","c":"MU","n":"Mauritius {c} Time"},"Indian/Mayotte":{"f":"EAT","o":"3:0","c":"YT","n":"E. Africa {c} Time"},"Indian/Reunion":{"f":"RET","o":"4:0","c":"RE","n":"Mauritius {c} Time"},"MET":{"e":{"m":10,"r":"l0","t":"3:0"},"f":"ME{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"}},"MST":{"f":"MST","o":"-7:0"},"MST7MDT":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"n":"Mountain {c} Time"},"PST8PDT":{"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"n":"Pacific {c} Time"},"Pacific/Apia":{"e":{"m":4,"r":"0>1","t":"4:0"},"f":"WS{c}T","o":"13:0","s":{"c":"D","m":9,"r":"l0","t":"3:0","v":"1:00"},"c":"WS","n":"Samoa {c} Time"},"Pacific/Auckland":{"e":{"c":"S","m":4,"r":"0>1","t":"3:0"},"f":"NZ{c}T","o":"12:0","s":{"c":"D","m":9,"r":"l0","t":"2:0","v":"1:0"},"c":"NZ","n":"New Zealand {c} Time"},"Pacific/Chatham":{"e":{"c":"S","m":4,"r":"0>1","t":"3:45"},"f":"CHA{c}T","o":"12:45","s":{"c":"D","m":9,"r":"l0","t":"2:45","v":"1:0"},"c":"NZ"},"Pacific/Chuuk":{"f":"CHUT","o":"10:0","c":"FM","n":"West Pacific {c} Time"},"Pacific/Easter":{"e":{"m":4,"r":"0>22","t":"22:0"},"f":"EAS{c}T","o":"-6:0","s":{"c":"S","m":9,"r":"0>1","t":"22:0","v":"1:0"},"c":"CL"},"Pacific/Efate":{"f":"VUST","o":"11:0","c":"VU","n":"Central Pacific {c} Time"},"Pacific/Enderbury":{"f":"PHOT","o":"13:0","c":"KI","n":"Tonga {c} Time"},"Pacific/Fakaofo":{"f":"TKT","o":"13:0","c":"TK","n":"Tonga {c} Time"},"Pacific/Fiji":{"e":{"m":1,"r":"0>18","t":"2:0"},"f":"FJ{c}T","o":"12:0","s":{"c":"S","m":10,"r":"0>21","t":"2:0","v":"1:0"},"c":"FJ","n":"Fiji {c} Time"},"Pacific/Funafuti":{"f":"TVT","o":"12:0","c":"TV","n":"UTC+12"},"Pacific/Galapagos":{"f":"GALT","o":"-6:0","c":"EC","n":"Central America {c} Time"},"Pacific/Gambier":{"f":"GAMT","o":"-9:0","c":"PF"},"Pacific/Guadalcanal":{"f":"SBT","o":"11:0","c":"SB","n":"Central Pacific {c} Time"},"Pacific/Guam":{"f":"ChST","o":"10:0","c":"GU","n":"West Pacific {c} Time"},"Pacific/Honolulu":{"f":"HST","o":"-10:0","c":"US","n":"Hawaiian {c} Time"},"Pacific/Johnston":{"f":"HST","o":"-10:0","c":"UM","n":"Hawaiian {c} Time"},"Pacific/Kiritimati":{"f":"LINT","o":"14:0","c":"KI"},"Pacific/Kosrae":{"f":"KOST","o":"11:0","c":"FM","n":"Central Pacific {c} Time"},"Pacific/Kwajalein":{"f":"MHT","o":"12:0","c":"MH","n":"UTC+12"},"Pacific/Majuro":{"f":"MHT","o":"12:0","c":"MH","n":"UTC+12"},"Pacific/Marquesas":{"f":"MART","o":"-9:30","c":"PF"},"Pacific/Midway":{"f":"SST","o":"-11:0","c":"UM","n":"UTC-11"},"Pacific/Nauru":{"f":"NRT","o":"12:0","c":"NR","n":"UTC+12"},"Pacific/Niue":{"f":"NUT","o":"-11:0","c":"NU","n":"UTC-11"},"Pacific/Norfolk":{"f":"NFT","o":"11:30","c":"NF"},"Pacific/Noumea":{"f":"NCST","o":"11:0","c":"NC","n":"Central Pacific {c} Time"},"Pacific/Pago_Pago":{"f":"SST","o":"-11:0","c":"AS","n":"UTC-11"},"Pacific/Palau":{"f":"PWT","o":"9:0","c":"PW","n":"Tokyo {c} Time"},"Pacific/Pitcairn":{"f":"PST","o":"-8:0","c":"PN"},"Pacific/Pohnpei":{"f":"PONT","o":"11:0","c":"FM","n":"Central Pacific {c} Time"},"Pacific/Port_Moresby":{"f":"PGT","o":"10:0","c":"PG","n":"West Pacific {c} Time"},"Pacific/Rarotonga":{"f":"CKST","o":"-10:0","c":"CK","n":"Hawaiian {c} Time"},"Pacific/Saipan":{"f":"ChST","o":"10:0","c":"MP","n":"West Pacific {c} Time"},"Pacific/Tahiti":{"f":"TAHT","o":"-10:0","c":"PF","n":"Hawaiian {c} Time"},"Pacific/Tarawa":{"f":"GILT","o":"12:0","c":"KI","n":"UTC+12"},"Pacific/Tongatapu":{"f":"TOST","o":"13:0","c":"TO","n":"Tonga {c} Time"},"Pacific/Wake":{"f":"WAKT","o":"12:0","c":"UM","n":"UTC+12"},"Pacific/Wallis":{"f":"WFT","o":"12:0","c":"WF","n":"UTC+12"},"WET":{"e":{"m":10,"r":"l0","t":"2:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"}}};
/*
 * timezone.js - Definition of a time zone class
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js
localeinfo.js
util/utils.js
util/math.js
calendar/gregratadie.js
*/

// !data localeinfo timezones

/**
 * @class Create a time zone instance. 
 * 
 * This class reports and transforms
 * information about particular time zones.<p>
 * 
 * The options parameter may contain any of the following properties:
 * 
 * <ul>
 * <li><i>id</i> - The id of the requested time zone such as "Europe/London" or 
 * "America/Los_Angeles". These are taken from the IANA time zone database. (See
 * http://www.iana.org/time-zones for more information.) <p>
 * 
 * There is one special 
 * time zone that is not taken from the IANA database called simply "local". In
 * this case, this class will attempt to discover the current time zone and
 * daylight savings time settings by calling standard Javascript classes to 
 * determine the offsets from UTC. 
 * 
 * <li><i>locale</i> - The locale for this time zone.
 * 
 * <li><i>offset</i> - Choose the time zone based on the offset from UTC given in
 * number of minutes (negative is west, positive is east).
 * 
 * <li><i>onLoad</i> - a callback function to call when the data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the data is loaded, the onLoad function is called with the current 
 * instance as a parameter. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * There is currently no way in the ECMAscript
 * standard to tell which exact time zone is currently in use. Choosing the
 * id "locale" or specifying an explicit offset will not give a specific time zone, 
 * as it is impossible to tell with certainty which zone the offsets 
 * match.<p>
 * 
 * When the id "local" is given or the offset option is specified, this class will
 * have the following behaviours:
 * <ul>
 * <li>The display name will always be given as the RFC822 style, no matter what
 * style is requested
 * <li>The id will also be returned as the RFC822 style display name
 * <li>When the offset is explicitly given, this class will assume the time zone 
 * does not support daylight savings time, and the offsets will be calculated 
 * the same way year round.
 * <li>When the offset is explicitly given, the inDaylightSavings() method will 
 * always return false.
 * <li>When the id "local" is given, this class will attempt to determine the 
 * daylight savings time settings by examining the offset from UTC on Jan 1
 * and June 1 of the current year. If they are different, this class assumes
 * that the local time zone uses DST. When the offset for a particular date is
 * requested, it will use the built-in Javascript support to determine the 
 * offset for that date.
 * </ul> 
 * 
 * If a more specific time zone is 
 * needed with display names and known start/stop times for DST, use the "id" 
 * property instead to specify the time zone exactly. You can perhaps ask the
 * user which time zone they prefer so that your app does not need to guess.<p>
 * 
 * If the id and the offset are both not given, the default time zone for the 
 * locale is retrieved from
 * the locale info. If the locale is not specified, the default locale for the
 * library is used.<p>
 * 
 * Because this class was designed for use in web sites, and the vast majority
 * of dates and times being formatted are recent date/times, this class is simplified
 * by not implementing historical time zones. That is, when governments change the 
 * time zone rules for a particular zone, only the latest such rule is implemented 
 * in this class. That means that determining the offset for a date that is prior 
 * to the last change may give the wrong result. Historical time zone calculations
 * may be implemented in a later version of iLib if there is enough demand for it,
 * but it would entail a much larger set of time zone data that would have to be
 * loaded.  
 * 
 * Depends directive: !depends timezone.js
 * 
 * @constructor
 * @param {Object} options Options guiding the construction of this time zone instance
 */
ilib.TimeZone = function(options) {
	this.sync = true;
	this.locale = new ilib.Locale();
	this.isLocal = false;
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.id) {
			if (options.id === 'local') {
				this.isLocal = true;
				
				// use standard Javascript Date to figure out the time zone offsets
				var now = new Date(), 
					jan1 = new Date(now.getFullYear(), 0, 1),  // months in std JS Date object are 0-based
					jun1 = new Date(now.getFullYear(), 5, 1);
				
				// Javascript's method returns the offset backwards, so we have to
				// take the negative to get the correct offset
				this.offsetJan1 = -jan1.getTimezoneOffset();
				this.offsetJun1 = -jun1.getTimezoneOffset();
				// the offset of the standard time for the time zone is always the one that is largest of 
				// the two, no matter whether you are in the northern or southern hemisphere
				this.offset = Math.max(this.offsetJan1, this.offsetJun1);
			}
			this.id = options.id;
		} else if (options.offset) {
			this.offset = (typeof(options.offset) === 'string') ? parseInt(options.offset, 10) : options.offset;
			this.id = this.getDisplayName(undefined, undefined);
		}
		
		if (typeof(options.sync) !== 'undefined') {
			this.sync = options.sync;
		}
		
		this.loadParams = options.loadParams;
		this.onLoad = options.onLoad;
	}

	//console.log("timezone: locale is " + this.locale);
	
	if (!this.id) {
		new ilib.LocaleInfo(this.locale, {
			sync: this.sync,
			onLoad: ilib.bind(this, function (li) {
				this.id = li.getTimeZone() || "Etc/UTC";
				this._loadtzdata();
			})
		});
	} else {
		this._loadtzdata();
	}

	//console.log("localeinfo is: " + JSON.stringify(this.locinfo));
	//console.log("id is: " + JSON.stringify(this.id));
};

/*
 * Explanation of the compressed time zone info properties.
 * {
 *     "o": "8:0",      // Offset from UTC
 *     "f": "W{c}T",      // 
 *     "e": {           // info about the end of DST
 *         "m": 3,      // month that it ends
 *         "r": "l0",   // rule for the day it ends "l" = "last", numbers are Sun=0 through Sat=6. Other syntax is "0>7". 
 *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=
 *         "t": "2:0",  // time of day that the DST turns off, hours:minutes
 *         "z": "s",    // ???
 *         "c": "S"     // character to replace into the abbreviation for standard time 
 *     },
 *     "s": {           // info about the start of DST
 *         "m": 10,     // month that it starts
 *         "r": "l0",   // rule for the day it starts "l" = "last", numbers are Sun=0 through Sat=6. Other syntax is "0>7".
 *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=
 *         "t": "2:0",  // time of day that the DST turns on, hours:minutes
 *         "z": "s",    // ???
 *         "v": "1:0",  // amount of time saved in hours:minutes
 *         "c": "D"     // character to replace into the abbreviation for daylight time
 *     },
 *     "c": "AU",       // ISO code for the country that contains this time zone
 *     "n": "W. Australia {c} Time"
 *                      // long English name of the zone. The {c} replacement is for the word "Standard" or "Daylight" as appropriate
 * }
 */
ilib.data.defaultZones = {
	"Etc/UTC":{"o":"0:0","f":"UTC"}
};

ilib.TimeZone.prototype._loadtzdata = function () {
	if (!ilib.data.timezones) {
		ilib.loadData({
			object: ilib.TimeZone, 
			locale: "-",	// locale independent 
			name: "timezones.json", 
			sync: this.sync, 
			loadParams: this.loadParams, 
			callback: ilib.bind(this, function (tzdata) {
				ilib.data.timezones = tzdata || ilib.data.defaultZones;
				this._initZone();
			})
		});
	} else {
		this._initZone();
	}
};

ilib.TimeZone.prototype._initZone = function() {
	/** 
	 * @private
	 * @type {{o:string,f:string,e:Object.<{m:number,r:string,t:string,z:string}>,s:Object.<{m:number,r:string,t:string,z:string,v:string,c:string}>,c:string,n:string}} 
	 */
	this.zone = ilib.data.timezones[this.id];
	if (!this.zone && typeof(this.offset) === 'undefined') {
		this.id = "Etc/UTC";
		this.zone = ilib.data.timezones[this.id];
	}
	
	this._calcDSTSavings();
	
	if (typeof(this.offset) === 'undefined' && this.zone.o) {
		var offsetParts = this._offsetStringToObj(this.zone.o);
		/**
		 * @private
		 * @type {number} raw offset from UTC without DST, in minutes
		 */
		this.offset = (Math.abs(offsetParts.h || 0) * 60 + (offsetParts.m || 0)) * ilib.signum(offsetParts.h || 0);
	}
	
	if (this.onLoad && typeof(this.onLoad) === 'function') {
		this.onLoad(this);
	}
};

/**
 * Return an array of available zone ids that the constructor knows about.
 * The country parameter is optional. If it is not given, all time zones will
 * be returned. If it specifies a country code, then only time zones for that
 * country will be returned.
 * 
 * @param {string} country country code for which time zones are being sought
 * @return {Array.<string>} an array of zone id strings
 */
ilib.TimeZone.getAvailableIds = function (country) {
	var tz, ids = [];
	
	if (!country) {
		// special zone meaning "the local time zone according to the JS engine we are running upon"
		ids.push("local");
	}
	
	for (tz in ilib.data.timezones) {
		if (tz && (!country || ilib.data.timezones[tz].c === country)) {
			ids.push(tz);
		}
	}
	
	return ids;
};

/**
 * Return the id used to uniquely identify this time zone.
 * @return {string} a unique id for this time zone
 */
ilib.TimeZone.prototype.getId = function () {
	return this.id;
};

/**
 * Return the abbreviation that is used for the current time zone on the given date.
 * The date may be in DST or during standard time, and many zone names have different
 * abbreviations depending on whether or not the date is falls within DST.<p>
 * 
 * There are two styles that are supported:
 * 
 * <ol>
 * <li>standard - returns the 3 to 5 letter abbreviation of the time zone name such 
 * as "CET" for "Central European Time" or "PDT" for "Pacific Daylight Time"
 * <li>rfc822 - returns an RFC 822 style time zone specifier, which specifies more
 * explicitly what the offset is from UTC
 * <li>long - returns the long name of the zone in English
 * </ol>
 *  
 * @param {ilib.Date=} date a date to determine if it is in daylight time or standard time
 * @param {string=} style one of "standard" or "rfc822". Default if not specified is "standard"
 * @return {string} the name of the time zone, abbreviated according to the style 
 */
ilib.TimeZone.prototype.getDisplayName = function (date, style) {
	style = (this.isLocal || typeof(this.zone) === 'undefined') ? "rfc822" : (style || "standard");
	switch (style) {
		default:
		case 'standard':
			if (this.zone.f && this.zone.f !== "zzz") {
				if (this.zone.f.indexOf("{c}") !== -1) {
					var letter = "";
					letter = this.inDaylightTime(date) ? this.zone.s && this.zone.s.c : this.zone.e && this.zone.e.c; 
					var temp = new ilib.String(this.zone.f);
					return temp.format({c: letter || ""});
				}
				return this.zone.f;
			} 
			var temp = "GMT" + this.zone.o;
			if (this.inDaylightTime(date)) {
				temp += "+" + this.zone.s.v;
			}
			return temp;
			break;
		case 'rfc822':
			var offset = this.getOffset(date), // includes the DST if applicable
				ret = "UTC",
				hour = offset.h || 0,
				minute = offset.m || 0;
			
			if (hour !== 0) {
				ret += (hour > 0) ? "+" : "-";
				if (Math.abs(hour) < 10) {
					ret += "0";
				}
				ret += (hour < 0) ? -hour : hour;
				if (minute < 10) {
					ret += "0";
				}
				ret += minute;
			}
			return ret; 
		case 'long':
			if (this.zone.n) {
				if (this.zone.n.indexOf("{c}") !== -1) {
					var str = this.inDaylightTime(date) ? "Daylight" : "Standard"; 
					var temp = new ilib.String(this.zone.n);
					return temp.format({c: str || ""});
				}
				return this.zone.n;
			}
			var temp = "GMT" + this.zone.o;
			if (this.inDaylightTime(date)) {
				temp += "+" + this.zone.s.v;
			}
			return temp;
			break;
	}
};

/**
 * @private
 * Convert the offset string to an object with an h, m, and possibly s property
 * to indicate the hours, minutes, and seconds.
 * 
 * @param {string} str the offset string to convert to an object
 * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset for the zone at 
 * the given date/time, in hours, minutes, and seconds
 */
ilib.TimeZone.prototype._offsetStringToObj = function (str) {
	var offsetParts = (typeof(str) === 'string') ? str.split(":") : [],
		ret = {h:0},
		temp;
	
	if (offsetParts.length > 0) {
		ret.h = parseInt(offsetParts[0], 10);
		if (offsetParts.length > 1) {
			temp = parseInt(offsetParts[1], 10);
			if (temp) {
				ret.m = temp;
			}
			if (offsetParts.length > 2) {
				temp = parseInt(offsetParts[2], 10);
				if (temp) {
					ret.s = temp;
				}
			}
		}
	}

	return ret;
};

/**
 * Returns the offset of this time zone from UTC at the given date/time. If daylight saving 
 * time is in effect at the given date/time, this method will return the offset value 
 * adjusted by the amount of daylight saving.
 * @param {ilib.Date=} date the date for which the offset is needed
 * @return {Object.<{h:number,m:number}>} an object giving the offset for the zone at 
 * the given date/time, in hours, minutes, and seconds  
 */
ilib.TimeZone.prototype.getOffset = function (date) {
	var offset = this.getOffsetMillis(date)/60000;
	
	var hours = ilib._roundFnc.down(offset/60),
		minutes = Math.abs(offset) - Math.abs(hours)*60;

	var ret = {
		h: hours
	};
	if (minutes != 0) {
		ret.m = minutes;
	}
	return ret;
};

/**
 * Returns the offset of this time zone from UTC at the given date/time expressed in 
 * milliseconds. If daylight saving 
 * time is in effect at the given date/time, this method will return the offset value 
 * adjusted by the amount of daylight saving. Negative numbers indicate offsets west
 * of UTC and conversely, positive numbers indicate offset east of UTC.
 *  
 * @param {ilib.Date=} date the date for which the offset is needed, or null for the
 * present date
 * @return {number} the number of milliseconds of offset from UTC that the given date is
 */
ilib.TimeZone.prototype.getOffsetMillis = function (date) {
	var ret;
	
	// check if the dst property is defined -- the intrinsic JS Date object doesn't work so
	// well if we are in the overlap time at the end of DST
	if (this.isLocal && typeof(date.dst) === 'undefined') {
		var d = (!date) ? new Date() : new Date(date.getTime());
		return -d.getTimezoneOffset() * 60000;
	} 
	
	ret = this.offset;
	
	if (date && this.inDaylightTime(date)) {
		ret += this.dstSavings;
	}
	
	return ret * 60000;
};

/**
 * @private
 * Return the offset in milliseconds when the date has an RD number in wall
 * time rather than in UTC time.
 * @param date the date to check in wall time
 * @returns {number} the number of milliseconds of offset from UTC that the given date is
 */
ilib.TimeZone.prototype._getOffsetMillisWallTime = function (date) {
	var ret;
	
	ret = this.offset;
	
	if (date && this.inDaylightTime(date, true)) {
		ret += this.dstSavings;
	}
	
	return ret * 60000;
};

/**
 * Returns the offset of this time zone from UTC at the given date/time. If daylight saving 
 * time is in effect at the given date/time, this method will return the offset value 
 * adjusted by the amount of daylight saving.
 * @param {ilib.Date=} date the date for which the offset is needed
 * @return {string} the offset for the zone at the given date/time as a string in the 
 * format "h:m:s" 
 */
ilib.TimeZone.prototype.getOffsetStr = function (date) {
	var offset = this.getOffset(date),
		ret;
	
	ret = offset.h;
	if (typeof(offset.m) !== 'undefined') {
		ret += ":" + offset.m;
		if (typeof(offset.s) !== 'undefined') {
			ret += ":" + offset.s;
		}
	} else {
		ret += ":0";
	}
	
	return ret;
};

/**
 * Gets the offset from UTC for this time zone.
 * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset from 
 * UTC for this time zone, in hours, minutes, and seconds 
 */
ilib.TimeZone.prototype.getRawOffset = function () {
	var hours = ilib._roundFnc.down(this.offset/60),
		minutes = Math.abs(this.offset) - Math.abs(hours)*60;
	
	var ret = {
		h: hours
	};
	if (minutes != 0) {
		ret.m = minutes;
	}
	return ret;
};

/**
 * Gets the offset from UTC for this time zone expressed in milliseconds. Negative numbers
 * indicate zones west of UTC, and positive numbers indicate zones east of UTC.
 * 
 * @return {number} an number giving the offset from 
 * UTC for this time zone in milliseconds 
 */
ilib.TimeZone.prototype.getRawOffsetMillis = function () {
	return this.offset * 60000;
};

/**
 * Gets the offset from UTC for this time zone without DST savings.
 * @return {string} the offset from UTC for this time zone, in the format "h:m:s" 
 */
ilib.TimeZone.prototype.getRawOffsetStr = function () {
	var off = this.getRawOffset();
	return off.h + ":" + (off.m || "0");
};

/**
 * Return the amount of time in hours:minutes that the clock is advanced during
 * daylight savings time.
 * @return {Object.<{h:number,m:number,s:number}>} the amount of time that the 
 * clock advances for DST in hours, minutes, and seconds 
 */
ilib.TimeZone.prototype.getDSTSavings = function () {
	if (this.isLocal) {
		// take the absolute because the difference in the offsets may be positive or
		// negative, depending on the hemisphere
		var savings = Math.abs(this.offsetJan1 - this.offsetJun1);
		var hours = ilib._roundFnc.down(savings/60),
			minutes = savings - hours*60;
		return {
			h: hours,
			m: minutes
		};
	} else if (this.zone && this.zone.s) {
		return this._offsetStringToObj(this.zone.s.v);	// this.zone.start.savings
	}
	return {h:0};
};

/**
 * Return the amount of time in hours:minutes that the clock is advanced during
 * daylight savings time.
 * @return {string} the amount of time that the clock advances for DST in the
 * format "h:m:s"
 */
ilib.TimeZone.prototype.getDSTSavingsStr = function () {
	if (this.isLocal) {
		var savings = this.getDSTSavings();
		return savings.h + ":" + savings.m;
	} else if (typeof(this.offset) !== 'undefined' && this.zone && this.zone.s) {
		return this.zone.s.v;	// this.zone.start.savings
	}
	return "0:0";
};

/**
 * @private
 * return the rd of the start of DST transition for the given year
 * @param {Object} rule set of rules
 * @param {number} year year to check
 * @return {number} the rd of the start of DST for the year
 */
ilib.TimeZone.prototype._calcRuleStart = function (rule, year) {
	var type, 
		weekday = 0, 
		day, 
		refDay, 
		cal, 
		hour = 0, 
		minute = 0, 
		second = 0,
		time,
		i;
	
	if (rule.r.charAt(0) == 'l' || rule.r.charAt(0) == 'f') {
		cal = ilib.Cal.newInstance({type: "gregorian"});
		type = rule.r.charAt(0);
		weekday = parseInt(rule.r.substring(1), 10);
		day = (type === 'l') ? cal.getMonLength(rule.m, year) : 1;
		//console.log("_calcRuleStart: Calculating the " + 
		//		(rule.r.charAt(0) == 'f' ? "first " : "last ") + weekday + 
		//		" of month " + rule.m);
	} else {
		type = "=";
		
		i = rule.r.indexOf('<');
		if (i == -1) {
			i = rule.r.indexOf('>');
		}
		
		if (i != -1) {
			type = rule.r.charAt(i);
			weekday = parseInt(rule.r.substring(0, i), 10);
			day = parseInt(rule.r.substring(i+1), 10); 
			//console.log("_calcRuleStart: Calculating the " + weekday + 
			//		type + day + " of month " + rule.m);
		} else {
			day = parseInt(rule.r, 10);
			//console.log("_calcRuleStart: Calculating the " + day + " of month " + rule.m);
		}
	}

	if (rule.t) {
		time = rule.t.split(":");
		hour = parseInt(time[0], 10);
		if (time.length > 1) {
			minute = parseInt(time[1], 10);
			if (time.length > 2) {
				second = parseInt(time[2], 10);
			}
		}
	}
	//console.log("calculating rd of " + year + "/" + rule.m + "/" + day);
	refDay = new ilib.Date.GregRataDie({
		year: year, 
		month: rule.m, 
		day: day, 
		hour: hour, 
		minute: minute, 
		second: second
	});
	//console.log("refDay is " + JSON.stringify(refDay));
	var d = refDay.getRataDie();
	
	switch (type) {
		case 'l':
		case '<':
			//console.log("returning " + refDay.onOrBeforeRd(rd, weekday));
			d = refDay.onOrBeforeRd(weekday); 
			break;
		case 'f':
		case '>':
			//console.log("returning " + refDay.onOrAfterRd(rd, weekday));
			d = refDay.onOrAfterRd(weekday); 
			break;
	}
	return d;
};

/**
 * @private
 */
ilib.TimeZone.prototype._calcDSTSavings = function () {
	var saveParts = this.getDSTSavings();
	
	/**
	 * @private
	 * @type {number} savings in minutes when DST is in effect 
	 */
	this.dstSavings = (Math.abs(saveParts.h || 0) * 60 + (saveParts.m || 0)) * ilib.signum(saveParts.h || 0);
};

/**
 * @private
 */
ilib.TimeZone.prototype._getDSTStartRule = function (year) {
	// TODO: update this when historic/future zones are supported
	return this.zone.s;
};

/**
 * @private
 */
ilib.TimeZone.prototype._getDSTEndRule = function (year) {
	// TODO: update this when historic/future zones are supported
	return this.zone.e;
};

/**
 * Returns whether or not the given date is in daylight saving time for the current
 * zone. Note that daylight savings time is observed for the summer. Because
 * the seasons are reversed, daylight savings time in the southern hemisphere usually
 * runs from the end of the year through New Years into the first few months of the
 * next year. This method will correctly calculate the start and end of DST for any
 * location.
 * 
 * @param {ilib.Date=} date a date for which the info about daylight time is being sought,
 * or undefined to tell whether we are currently in daylight savings time
 * @param {boolean=} wallTime if true, then the given date is in wall time. If false or
 * undefined, it is in the usual UTC time.
 * @return {boolean} true if the given date is in DST for the current zone, and false
 * otherwise.
 */
ilib.TimeZone.prototype.inDaylightTime = function (date, wallTime) {
	var rd, startRd, endRd;

	if (this.isLocal) {
		// check if the dst property is defined -- the intrinsic JS Date object doesn't work so
		// well if we are in the overlap time at the end of DST, so we have to work around that
		// problem by adding in the savings ourselves
		var offset = 0;
		if (typeof(date.dst) !== 'undefined' && !date.dst) {
			offset = this.dstSavings * 60000;
		}
		
		var d = new Date(date ? date.getTime() + offset: undefined);
		// the DST offset is always the one that is closest to negative infinity, no matter 
		// if you are in the northern or southern hemisphere
		var dst = Math.min(this.offsetJan1, this.offsetJun1);
		return (-d.getTimezoneOffset() === dst);
	}
	
	if (!date) {
		date = new ilib.Date.GregDate(); // right now
	} else if (!(date instanceof ilib.Date.GregDate)) {
		// convert to Gregorian so that we can tell if it is in DST or not
		date = new ilib.Date.GregDate({
			julianday: date.getJulianDay(),
			timezone: date.getTimeZone()
		});
	}
	
	// if we aren't using daylight time in this zone, then where are never in daylight
	// time, no matter what the date is
	if (!this.useDaylightTime(date.year)) {
		return false;
	}
	
	// this should be a Gregorian RD number now, in UTC
	rd = date.getRataDie();
	
	// these calculate the start/end in local wall time
	var startrule = this._getDSTStartRule(date.year);
	var endrule = this._getDSTEndRule(date.year);
	startRd = this._calcRuleStart(startrule, date.year);
	endRd = this._calcRuleStart(endrule, date.year);
	
	if (wallTime) {
		// rd is in wall time, so we have to make sure to skip the missing time
		// at the start of DST when standard time ends and daylight time begins
		startRd += this.dstSavings/1440;
	} else {
		// rd is in UTC, so we have to convert the start/end to UTC time so 
		// that they can be compared directly to the UTC rd number of the date
		
		// when DST starts, time is standard time already, so we only have
		// to subtract the offset to get to UTC and not worry about the DST savings
		startRd -= this.offset/1440;  
		
		// when DST ends, time is in daylight time already, so we have to
		// subtract the DST savings to get back to standard time, then the
		// offset to get to UTC
		endRd -= (this.offset + this.dstSavings)/1440;
	}
	
	// In the northern hemisphere, the start comes first some time in spring (Feb-Apr), 
	// then the end some time in the fall (Sept-Nov). In the southern
	// hemisphere, it is the other way around because the seasons are reversed. Standard
	// time is still in the winter, but the winter months are May-Aug, and daylight 
	// savings time usually starts Aug-Oct of one year and runs through Mar-May of the 
	// next year.
	if (rd < endRd && endRd - rd <= this.dstSavings/1440 && typeof(date.dst) === 'boolean') {
		// take care of the magic overlap time at the end of DST
		return date.dst;
	}
	if (startRd < endRd) {
		// northern hemisphere
		return (rd >= startRd && rd < endRd) ? true : false;
	} 
	// southern hemisphere
	return (rd >= startRd || rd < endRd) ? true : false;
};

/**
 * Returns true if this time zone switches to daylight savings time at some point
 * in the year, and false otherwise.
 * @param {number} year Whether or not the time zone uses daylight time in the given year. If
 * this parameter is not given, the current year is assumed.
 * @return {boolean} true if the time zone uses daylight savings time
 */
ilib.TimeZone.prototype.useDaylightTime = function (year) {
	
	// this zone uses daylight savings time iff there is a rule defining when to start
	// and when to stop the DST
	return (this.isLocal && this.offsetJan1 !== this.offsetJun1) ||
		(typeof(this.zone) !== 'undefined' && 
		typeof(this.zone.s) !== 'undefined' && 
		typeof(this.zone.e) !== 'undefined');
};

/**
 * Returns the ISO 3166 code of the country for which this time zone is defined.
 * @return {string} the ISO 3166 code of the country for this zone
 */
ilib.TimeZone.prototype.getCountry = function () {
	return this.zone.c;
};
ilib.data.pseudomap = {"a":"Ã ","c":"Ã§","d":"Ã°","e":"Ã«","g":"Ä","h":"Ä¥","i":"Ã­","j":"Äµ","k":"Ä·","l":"Ä¾","n":"Ã±","o":"Ãµ","p":"Ã¾","r":"Å","s":"Å¡","t":"Å£","u":"Ã¼","w":"Åµ","y":"Ã¿","z":"Å¾","A":"Ã","B":"Ã","C":"Ã","D":"Ã","E":"Ã","G":"Ä","H":"Ä¦","I":"Ã","J":"Ä´","K":"Ä¸","L":"Ä½","N":"Å","O":"Ã","R":"Å","S":"Å ","T":"Å¤","U":"Ã","W":"Å´","Y":"Å¶","Z":"Å»"};
/*
 * resources.js - Resource bundle definition
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js localeinfo.js strings.js util/utils.js

// !data pseudomap

/**
 * @class
 * Create a new resource bundle instance. The resource bundle loads strings
 * appropriate for a particular locale and provides them via the getString 
 * method.<p>
 * 
 * The options object may contain any (or none) of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - The locale of the strings to load. If not specified, the default
 * locale is the the default for the web page or app in which the bundle is 
 * being loaded.
 * 
 * <li><i>name</i> - Base name of the resource bundle to load. If not specified the default
 * base name is "resources".
 * 
 * <li><i>type</i> - Name the type of strings this bundle contains. Valid values are 
 * "xml", "html", "text", or "raw". The default is "text". If the type is "xml" or "html",
 * then XML/HTML entities and tags are not pseudo-translated. During a real translation, 
 * HTML character entities are translated to their corresponding characters in a source
 * string before looking that string up in the translations. Also, the characters "<", ">",
 * and "&" are converted to entities again in the output, but characters are left as they
 * are. If the type is "xml", "html", or "text" types, then the replacement parameter names
 * are not pseudo-translated as well so that the output can be used for formatting with 
 * the ilib.String class. If the type is raw, all characters are pseudo-translated, 
 * including replacement parameters as well as XML/HTML tags and entities.
 * 
 * <li><i>lengthen</i> - when pseudo-translating the string, tell whether or not to 
 * automatically lengthen the string to simulate "long" languages such as German
 * or French. This is a boolean value. Default is false.
 * 
 * <li><i>missing</i> - what to do when a resource is missing. The choices are:
 * <ul>
 *   <li><i>source</i> - return the source string unchanged
 *   <li><i>pseudo</i> - return the pseudo-translated source string, translated to the
 *   script of the locale if the mapping is available, or just the default Latin 
 *   pseudo-translation if not
 *   <li><i>empty</i> - return the empty string 
 * </ul>
 * The default behaviour is the same as before, which is to return the source string
 * unchanged.
 * 
 * <li><i>onLoad</i> - a callback function to call when the resources are fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * The locale option may be given as a locale spec string or as an 
 * ilib.Locale object. If the locale option is not specified, then strings for
 * the default locale will be loaded.<p> 
 * 
 * The name option can be used to put groups of strings together in a
 * single bundle. The strings will then appear together in a JS object in
 * a JS file that can be included before the ilib.<p>
 * 
 * A resource bundle with a particular name is actually a set of bundles
 * that are each specific to a language, a language plus a region, etc. 
 * All bundles with the same base name should
 * contain the same set of source strings, but with different translations for 
 * the given locale. The user of the bundle does not need to be aware of 
 * the locale of the bundle, as long as it contains values for the strings 
 * it needs.<p>
 * 
 * Strings in bundles for a particular locale are inherited from parent bundles
 * that are more generic. In general, the hierarchy is as follows (from 
 * least locale-specific to most locale-specific):
 * 
 * <ol>
 * <li> language
 * <li> region
 * <li> language_script
 * <li> language_region
 * <li> region_variant
 * <li> language_script_region
 * <li> language_region_variant
 * <li> language_script_region_variant
 * </ol>
 * 
 * That is, if the translation for a string does not exist in the current
 * locale, the more-generic parent locale is searched for the string. In the
 * worst case scenario, the string is not found in the base locale's strings. 
 * In this case, the missing option guides this class on what to do. If
 * the missing option is "source", then the original source is returned as 
 * the translation. If it is "empty", the empty string is returned. If it
 * is "pseudo", then the pseudo-translated string that is appropriate for
 * the default script of the locale is returned.<p> 
 * 
 * This allows developers to create code with new or changed strings in it and check in that
 * code without waiting for the translations to be done first. The translated
 * version of the app or web site will still function properly, but will show 
 * a spurious untranslated string here and there until the translations are 
 * done and also checked in.<p>   
 *  
 * The base is whatever language your developers use to code in. For
 * a German web site, strings in the source code may be written in German 
 * for example. Often this base is English, as many web sites are coded in
 * English, but that is not required.<p>
 * 
 * The strings can be extracted with the ilib localization tool (which will be
 * shipped at some future time.) Once the strings
 * have been translated, the set of translated files can be generated with the
 * same tool. The output from the tool can be used as input to the ResBundle
 * object. It is up to the web page or app to make sure the JS file that defines
 * the bundle is included before creating the ResBundle instance.<p>
 * 
 * A special locale "zxx-XX" is used as the pseudo-translation locale because
 * zxx means "no linguistic information" in the ISO 639 standard, and the region 
 * code XX is defined to be user-defined in the ISO 3166 standard. 
 * Pseudo-translation is a locale where the translations are generated on
 * the fly based on the contents of the source string. Characters in the source 
 * string are replaced with other characters and returned. 
 * 
 * Example. If the source string is:
 * 
 * <pre>
 * "This is a string"
 * </pre>
 * 
 * then the pseudo-translated version might look something like this: 
 * 
 * <pre>
 * "Å¢Ä§Ã¯Å Ã¯Å Ã¡ ÅÅ£ÅÃ¯Ã±Ä"
 * </pre>
 * <p>
 * 
 * Pseudo-translation can be used to test that your app or web site is translatable
 * before an actual translation has happened. These bugs can then be fixed 
 * before the translation starts, avoiding an explosion of bugs later when
 * each language's tester registers the same bug complaining that the same 
 * string is not translated. When pseudo-localizing with
 * the Latin script, this allows the strings to be readable in the UI in the 
 * source language (if somewhat funky-looking), 
 * so that a tester can easily verify that the string is properly externalized 
 * and loaded from a resource bundle without the need to be able to read a
 * foreign language.<p> 
 * 
 * If one of a list of script tags is given in the pseudo-locale specifier, then the
 * pseudo-localization can map characters to very rough transliterations of
 * characters in the given script. For example, zxx-Hebr-XX maps strings to
 * Hebrew characters, which can be used to test your UI in a right-to-left
 * language to catch bidi bugs before a translation is done. Currently, the
 * list of target scripts includes Hebrew (Hebr), Chinese Simplified Han (Hans),
 * and Cyrillic (Cyrl) with more to be added later. If no script is explicitly
 * specified in the locale spec, or if the script is not supported,
 * then the default mapping maps Latin base characters to accented versions of
 * those Latin characters as in the example above.
 *  
 * When the "lengthen" property is set to true in the options, the 
 * pseudotranslation code will add digits to the end of the string to simulate
 * the lengthening that occurs when translating to other languages. The above 
 * example will come out like this:
 * 
 * <pre>
 * "Å¢Ä§Ã¯Å Ã¯Å Ã¡ ÅÅ£ÅÃ¯Ã±Ä76543210"
 * </pre>
 * 
 * The string is lengthened according to the length of the source string. If
 * the source string is less than 20 characters long, the string is lengthened 
 * by 50%. If the source string is 20-40 
 * characters long, the string is lengthened by 33%. If te string is greater
 * than 40 characters long, the string is lengthened by 20%.<p>
 * 
 * The pseudotranslation always ends a string with the digit "0". If you do
 * not see the digit "0" in the UI for your app, you know that truncation
 * has occurred, and the number you see at the end of the string tells you 
 * how many characters were truncated.<p>
 * 
 * Depends directive: !depends resources.js
 * 
 * @constructor
 * @param {?Object} options Options controlling how the bundle is created
 */
ilib.ResBundle = function (options) {
	var lookupLocale, spec;
	
	this.locale = new ilib.Locale();	// use the default locale
	this.baseName = "strings";
	this.type = "text";
	this.loadParams = {};
	this.missing = "source";
	this.sync = true;
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? 
					new ilib.Locale(options.locale) :
					options.locale;
		}
		if (options.name) {
			this.baseName = options.name;
		}
		if (options.type) {
			this.type = options.type;
		}
		this.lengthen = options.lengthen || false;
		
		if (typeof(options.sync) !== 'undefined') {
			this.sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			this.loadParams = options.loadParams;
		}
		if (typeof(options.missing) !== 'undefined') {
			if (options.missing === "pseudo" || options.missing === "empty") {
				this.missing = options.missing;
			}
		}
	}
	
	this.map = {};

	if (!ilib.ResBundle[this.baseName]) {
		ilib.ResBundle[this.baseName] = {};
	}

	lookupLocale = this.locale.isPseudo() ? new ilib.Locale("en-US") : this.locale;

	ilib.loadData({
		object: ilib.ResBundle[this.baseName], 
		locale: lookupLocale, 
		name: this.baseName + ".json", 
		sync: this.sync, 
		loadParams: this.loadParams, 
		callback: ilib.bind(this, function (map) {
			if (!map) {
				map = ilib.data[this.baseName] || {};
				spec = lookupLocale.getSpec().replace(/-/g, '_');
				ilib.ResBundle[this.baseName].cache[spec] = map;
			}
			this.map = map;
			if (this.locale.isPseudo()) {
				if (!ilib.ResBundle.pseudomap) {
					ilib.ResBundle.pseudomap = {};
				}
	
				this._loadPseudo(this.locale, options.onLoad);
			} else if (this.missing === "pseudo") {
				if (!ilib.ResBundle.pseudomap) {
					ilib.ResBundle.pseudomap = {};
				}
	
				new ilib.LocaleInfo(this.locale, {
					sync: this.sync,
					loadParams: this.loadParams,
					onLoad: ilib.bind(this, function (li) {
						var pseudoLocale = new ilib.Locale("zxx", "XX", undefined, li.getDefaultScript());
						this._loadPseudo(pseudoLocale, options.onLoad);
					})
				});
			} else {
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			}
		})
	});

	// console.log("Merged resources " + this.locale.toString() + " are: " + JSON.stringify(this.map));
	//if (!this.locale.isPseudo() && ilib.isEmpty(this.map)) {
	//	console.log("Resources for bundle " + this.baseName + " locale " + this.locale.toString() + " are not available.");
	//}
};

ilib.ResBundle.defaultPseudo = ilib.data.pseudomap || {
	"a": "Ã ",
	"e": "Ã«",
	"i": "Ã­",
	"o": "Ãµ",
	"u": "Ã¼",
	"y": "Ã¿",
	"A": "Ã",
	"E": "Ã",
	"I": "Ã",
	"O": "Ã",
	"U": "Ã",
	"Y": "Å¶"
};

ilib.ResBundle.prototype = {
    /**
     * @protected
     */
    _loadPseudo: function (pseudoLocale, onLoad) {
		ilib.loadData({
			object: ilib.ResBundle.pseudomap, 
			locale: pseudoLocale, 
			name: "pseudomap.json", 
			sync: this.sync, 
			loadParams: this.loadParams, 
			callback: ilib.bind(this, function (map) {
				if (!map || ilib.isEmpty(map)) {
					map = ilib.ResBundle.defaultPseudo;
					var spec = pseudoLocale.getSpec().replace(/-/g, '_');
					ilib.ResBundle.pseudomap.cache[spec] = map;
				}
				this.pseudomap = map;
				if (typeof(onLoad) === 'function') {
					onLoad(this);
				}	
			})
		});
    },
    
	/**
	 * Return the locale of this resource bundle.
	 * @return {ilib.Locale} the locale of this resource bundle object 
	 */
	getLocale: function () {
		return this.locale;
	},
	
	/**
	 * Return the name of this resource bundle. This corresponds to the name option
	 * given to the constructor.
	 * @return {string} name of the the current instance
	 */
	getName: function () {
		return this.baseName;
	},
	
	/**
	 * Return the type of this resource bundle. This corresponds to the type option
	 * given to the constructor.
	 * @return {string} type of the the current instance
	 */
	getType: function () {
		return this.type;
	},

	/*
	 * @private
	 * Pseudo-translate a string
	 */
	pseudo: function (str) {
		if (!str) {
			return undefined;
		}
		var ret = "", i;
		for (i = 0; i < str.length; i++) {
			if (this.type !== "raw") {
				if (this.type === "html" || this.type === "xml") {
					if (str.charAt(i) === '<') {
						ret += str.charAt(i++);
						while (i < str.length && str.charAt(i) !== '>') {
							ret += str.charAt(i++);
						}
						if (i < str.length) {
							ret += str.charAt(i++);
						}
					} else if (str.charAt(i) === '&') {
						ret += str.charAt(i++);
						while (i < str.length && str.charAt(i) !== ';' && str.charAt(i) !== ' ') {
							ret += str.charAt(i++);
						}
						if (i < str.length) {
							ret += str.charAt(i++);
						}
					}
				}
				if (i < str.length) { 
					if (str.charAt(i) === '{') {
						ret += str.charAt(i++);
						while (i < str.length && str.charAt(i) !== '}') {
							ret += str.charAt(i++);
						}
						if (i < str.length) {
							ret += str.charAt(i);
						}
					} else {
						ret += this.pseudomap[str.charAt(i)] || str.charAt(i);
					}
				}
			} else {
				ret += this.pseudomap[str.charAt(i)] || str.charAt(i);
			}
		}
		if (this.lengthen) {
			var add;
			if (ret.length <= 20) {
				add = Math.round(ret.length / 2);
			} else if (ret.length > 20 && ret.length <= 40) {
				add = Math.round(ret.length / 3);
			} else {
				add = Math.round(ret.length / 5);
			}
			for (i = add-1; i >= 0; i--) {
				ret += (i % 10);
			}
		}
		if (this.locale.getScript() === "Hans" || this.locale.getScript() === "Hant" ||
				this.locale.getScript() === "Hani" ||
				this.locale.getScript() === "Hrkt" || this.locale.getScript() === "Jpan" ||
				this.locale.getScript() === "Hira" || this.locale.getScript() === "Kana" ) {
			// simulate Asian languages by getting rid of all the spaces
			ret = ret.replace(/ /g, "");
		}
		return ret;
	},
	
	/*
	 * @private
	 * Escape html characters in the output.
	 */
	escapeXml: function (str) {
		str = str.replace(/&/g, '&amp;');
		str = str.replace(/</g, '&lt;');
		str = str.replace(/>/g, '&gt;');
		return str;
	},

	/*
	 * @private
	 * @param {string} str the string to unescape
	 */
	unescapeXml: function (str) {
		str = str.replace(/&amp;/g, '&');
		str = str.replace(/&lt;/g, '<');
		str = str.replace(/&gt;/g, '>');
		return str;
	},
	
	/*
	 * @private
	 * Create a key name out of a source string. All this does so far is 
	 * compress sequences of white space into a single space on the assumption
	 * that this doesn't really change the meaning of the string, and therefore
	 * all such strings that compress to the same thing should share the same
	 * translation.
	 * @param {string} source the source string to make a key out of
	 */
	makeKey: function (source) {
		var key = source.replace(/\s+/gm, ' ');
		return (this.type === "xml" || this.type === "html") ? this.unescapeXml(key) : key;
	},
	
	/**
	 * Return a localized string. If the string is not found in the loaded set of
	 * resources, the original source string is returned. If the key is not given,
	 * then the source string itself is used as the key. In the case where the 
	 * source string is used as the key, the whitespace is compressed down to 1 space
	 * each, and the whitespace at the beginning and end of the string is trimmed.<p>
	 * 
	 * The escape mode specifies what type of output you are escaping the returned
	 * string for. Modes are similar to the types: 
	 * 
	 * <ul>
	 * <li>"html" -- prevents HTML injection by escaping the characters &lt &gt; and &amp;
	 * <li>"xml" -- currently same as "html" mode
	 * <li>"js" -- prevents breaking Javascript syntax by backslash escaping all quote and 
	 * double-quote characters
	 * <li>"attribute" -- meant for HTML attribute values. Currently this is the same as
	 * "js" escape mode.
	 * <li>"default" -- use the type parameter from the constructor as the escape mode as well
	 * <li>"none" or undefined -- no escaping at all.
	 * </ul>
	 * 
	 * The type parameter of the constructor specifies what type of strings this bundle
	 * is operating upon. This allows pseudo-translation and automatic key generation
	 * to happen properly by telling this class how to parse the string. The escape mode 
	 * for this method is different in that it specifies how this string will be used in 
	 * the calling code and therefore how to escape it properly.<p> 
	 * 
	 * For example, a section of Javascript code may be constructing an HTML snippet in a 
	 * string to add to the web page. In this case, the type parameter in the constructor should
	 * be "html" so that the source string can be parsed properly, but the escape mode should
	 * be "js" so that the output string can be used in Javascript without causing syntax
	 * errors.
	 * 
	 * @param {?string=} source the source string to translate
	 * @param {?string=} key optional name of the key, if any
	 * @param {?string=} escapeMode escape mode, if any
	 * @return {ilib.String|undefined} the translation of the given source/key or undefined 
	 * if the translation is not found and the source is undefined 
	 */
	getString: function (source, key, escapeMode) {
		if (!source && !key) return new ilib.String("");

		var trans;
		if (this.locale.isPseudo()) {
			var str = source ? source : this.map[key];
			trans = this.pseudo(str || key);
		} else {
			var keyName = key || this.makeKey(source);
			if (typeof(this.map[keyName]) !== 'undefined') {
				trans = this.map[keyName];
			} else if (this.missing === "pseudo") {
				trans = this.pseudo(source || key);
			} else if (this.missing === "empty") {
				trans = "";
			} else {
				trans = source;
			}
		}

		if (escapeMode && escapeMode !== "none") {
			if (escapeMode == "default") {
				escapeMode = this.type;
			}
			if (escapeMode === "xml" || escapeMode === "html") {
				trans = this.escapeXml(trans);
			} else if (escapeMode == "js" || escapeMode === "attribute") {
				trans = trans.replace(/'/g, "\\\'").replace(/"/g, "\\\"");
			}
		}
		if (trans === undefined) {
			return undefined;
		} else {
			var ret = new ilib.String(trans);
			ret.setLocale(this.locale.getSpec(), true, this.loadParams); // no callback
			return ret;
		}
	},
	
	/**
	 * Return true if the current bundle contains a translation for the given key and
	 * source. The
	 * getString method will always return a string for any given key and source 
	 * combination, so it cannot be used to tell if a translation exists. Either one
	 * or both of the source and key must be specified. If both are not specified,
	 * this method will return false.
	 * 
	 * @param {?string=} source source string to look up
	 * @param {?string=} key key to look up
	 * @return {boolean} true if this bundle contains a translation for the key, and 
	 * false otherwise
	 */
	containsKey: function(source, key) {
		if (typeof(source) === 'undefined' && typeof(key) === 'undefined') {
			return false;
		}
		
		var keyName = key || this.makeKey(source);
		return typeof(this.map[keyName]) !== 'undefined';
	},
	
	/**
	 * Return the merged resources as an entire object. When loading resources for a
	 * locale that are not just a set of translated strings, but instead an entire 
	 * structured javascript object, you can gain access to that object via this call. This method
	 * will ensure that all the of the parts of the object are correct for the locale.<p>
	 * 
	 * For pre-assembled data, it starts by loading <i>ilib.data[name]</i>, where 
	 * <i>name</i> is the base name for this set of resources. Then, it successively 
	 * merges objects in the base data using progressively more locale-specific data. 
	 * It loads it in this order from <i>ilib.data</i>:
	 * 
	 * <ol>
	 * <li> language
	 * <li> region
	 * <li> language_script
	 * <li> language_region
	 * <li> region_variant
	 * <li> language_script_region
	 * <li> language_region_variant
	 * <li> language_script_region_variant
	 * </ol>
	 * 
	 * For dynamically loaded data, the code attempts to load the same sequence as
	 * above, but with slash path separators instead of underscores.<p>
	 *  
	 * Loading the resources this way allows the program to share resources between all
	 * locales that share a common language, region, or script. As a 
	 * general rule-of-thumb, resources should be as generic as possible in order to
	 * cover as many locales as possible.
	 * 
	 * @return {Object} returns the object that is the basis for this resources instance
	 */
	getResObj: function () {
		return this.map;
	}
};

/*
 * util/jsutils.js - Misc utilities to work around Javascript engine differences
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * Perform a shallow copy of the source object to the target object. This only 
 * copies the assignments of the source properties to the target properties, 
 * but not recursively from there.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {Object} source the source object to copy properties from
 * @param {Object} target the target object to copy properties into
 */
ilib.shallowCopy = function (source, target) {
	var prop = undefined;
	if (source && target) {
		for (prop in source) {
			if (prop !== undefined && typeof(source[prop]) !== 'undefined') {
				target[prop] = source[prop];
			}
		}
	}
};

/**
 * @static
 * 
 * Map a string to the given set of alternate characters. If the target set
 * does not contain a particular character in the input string, then that
 * character will be copied to the output unmapped.
 * 
 * @param {string} str a string to map to an alternate set of characters
 * @param {Array.<string>|Object} map a mapping to alternate characters
 * @return {string} the source string where each character is mapped to alternate characters
 */
ilib.mapString = function (str, map) {
	var mapped = "";
	if (map && str) {
		for (var i = 0; i < str.length; i++) {
			var c = str.charAt(i); // TODO use a char iterator?
			mapped += map[c] || c; 
		}
	} else {
		mapped = str;
	}
	return mapped;
};

/**
 * @static
 * 
 * Check if an object is a memory of the given array. This works in older
 * browsers as well.
 * 
 * @param {Array.<Object>} array array to search
 * @param {Object} obj object to search for
 * @return {number} index of the object in the array, or -1 if it is not in the array
 */
ilib.indexOf = function(array, obj) {
	if (!array || !obj) {
		return -1;
	}
	if (typeof(array.indexOf) === 'function') {
		return array.indexOf(obj);
	} else {
		for (var i = 0; i < array.length; i++) {
	        if (array[i] === obj) {
	            return i;
	        }
	    }
	    return -1;
	}
};
ilib.data.dateformats = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"EE d/M/yy","m":"EEE d/MM/yyyy","l":"EEE d MMM yyyy","f":"EEEE d MMMM yyyy"},"dmy":{"s":"d/M/yy","m":"d/MM/yyyy","l":"d MMM yyyy","f":"d MMMM yyyy"},"dmw":{"s":"EE d/M","m":"EE d/MM","l":"EEE d MMM","f":"EEEE d MMMM"},"dm":{"s":"d/M","m":"d/MM","l":"d MMM","f":"d MMMM"},"my":{"s":"M/yy","m":"MM/yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"dw":{"s":"EE d","m":"EE d","l":"EEE d","f":"EEEE d"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"},"w":{"s":"E","m":"EE","l":"EEE","f":"EEEE"}},"time":{"12":{"ahmsz":"h:mm:ssa z","ahms":"h:mm:ssa","hmsz":"h:mm:ss z","hms":"h:mm:ss","ahmz":"h:mma z","ahm":"h:mma","hmz":"h:mm z","ah":"ha","hm":"h:mm","ms":"mm:ss","h":"h","m":"mm","s":"ss"},"24":{"ahmsz":"H:mm:ss z","ahms":"H:mm:ss","hmsz":"H:mm:ss z","hms":"H:mm:ss","ahmz":"H:mm z","ahm":"H:mm","hmz":"H:mm z","ah":"H","hm":"H:mm","ms":"mm:ss","h":"H","m":"mm","s":"ss"}},"range":{"c00":{"s":"{st} - {et} {sd}/{sm}/{sy}","m":"{st} - {et}, {sd}/{sm}/{sy}","l":"{st} - {et}, {sd} {sm} {sy}","f":"{st} - {et}, {sd} {sm} {sy}"},"c01":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}","l":"{sd} {st} - {ed} {et}, {sm} {sy}","f":"{sd} {st} - {ed} {et}, {sm} {sy}"},"c02":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}","l":"{sd} {sm} {st} - {ed} {em} {et}, {sy}","f":"{sd} {sm} {st} - {ed} {em} {et}, {sy}"},"c03":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c10":{"s":"{sd}-{ed}/{sm}/{sy}","m":"{sd}-{ed}/{sm}/{sy}","l":"{sd}-{ed} {sm} {sy}","f":"{sd}-{ed} {sm} {sy}"},"c11":{"s":"{sd}/{sm}-{ed}/{em} {sy}","m":"{sd}/{sm} - {ed}/{em} {sy}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}/{sm}/{sy}-{ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy}-{em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}},"islamic":"gregorian","hebrew":"gregorian","julian":"gregorian","thaisolar":"gregorian"};
ilib.data.dateformats_en_CA = {"gregorian":{"date":{"dmwy":{"l":"EEE d MMM, yyyy","f":"EEEE d MMMM, yyyy"},"dmy":{"l":"d MMM, yyyy","f":"d MMMM, yyyy"}},"range":{"c00":{"l":"{st} - {et}, {sd} {sm}, {sy}","f":"{st} - {et}, {sd} {sm}, {sy}"},"c01":{"l":"{sd} {st} - {ed} {et} {sm}, {sy}","f":"{sd} {st} - {ed} {et} {sm}, {sy}"},"c10":{"l":"{sd}-{ed} {sm}, {sy}","f":"{sd}-{ed} {sm}, {sy}"},"c11":{"l":"{sd} {sm} - {ed} {em}, {sy}","f":"{sd} {sm} - {ed} {em}, {sy}"},"c12":{"l":"{sd} {sm}, {sy} - {ed} {em}, {ey}","f":"{sd} {sm}, {sy} - {ed} {em}, {ey}"},"c20":{"l":"{sm}, {sy} - {em}, {ey}","f":"{sm}, {sy} - {em}, {ey}"}}}};
ilib.data.dateformats_en_US = {"gregorian":{"date":{"dmwy":{"s":"EE M/d/yy","m":"EEE M/dd/yyyy","l":"EEE MMM d, yyyy","f":"EEEE MMMM d, yyyy"},"dmy":{"s":"M/d/yy","m":"M/d/yyyy","l":"MMM d, yyyy","f":"MMMM d, yyyy"},"dmw":{"s":"EE M/d","m":"EE M/d","l":"EEE MMM d","f":"EEEE MMMM d"},"dm":{"s":"M/d","m":"M/d","l":"MMM d","f":"MMMM d"}},"range":{"c00":{"s":"{st} - {et} {sm}/{sd}/{sy}","m":"{st} - {et}, {sm}/{sd}/{sy}","l":"{st} - {et}, {sm} {sd}, {sy}","f":"{st} - {et}, {sm} {sd}, {sy}"},"c01":{"s":"{sm}/{sd}/{sy} {st} - {em}/{ed}/{ey} {et}","m":"{sm}/{sd}/{sy} {st} - {em}/{ed}/{ey} {et}","l":"{sm} {sd} {st} - {ed} {et}, {sy}","f":"{sm} {sd} {st} - {ed} {et}, {sy}"},"c02":{"s":"{sm}/{sd}/{sy} {st} - {em}/{ed}/{ey} {et}","m":"{sm}/{sd} {st} - {em}/{ed} {et}, {sy}","l":"{sm} {sd} {st} - {em} {ed} {et}, {sy}","f":"{sm} {sd} {st} - {em} {ed} {et}, {sy}"},"c03":{"s":"{sm}/{sd}/{sy} {st} - {em}/{ed}/{ey} {et}","m":"{sm}/{sd}/{sy} {st} - {em}/{ed}/{ey} {et}","l":"{sm} {sd}, {sy} {st} - {em} {ed}, {ey} {et}","f":"{sm} {sd}, {sy} {st} - {em} {ed}, {ey} {et}"},"c10":{"s":"{sm}/{sd}/{sy} - {em}/{ed}/{ey}","m":"{sm}/{sd}/{sy} - {em}/{ed}/{ey}","l":"{sm} {sd}-{ed}, {sy}","f":"{sm} {sd}-{ed}, {sy}"},"c11":{"s":"{sm}/{sd}/{sy} - {em}/{ed}/{ey}","m":"{sm}/{sd} - {em}/{ed}, {sy}","l":"{sm} {sd} - {em} {ed}, {sy}","f":"{sm} {sd} - {em} {ed}, {sy}"},"c12":{"s":"{sm}/{sd}/{sy} - {em}/{ed}/{ey}","m":"{sm}/{sd}/{sy} - {em}/{ed}/{ey}","l":"{sm} {sd}, {sy} - {em} {ed}, {ey}","f":"{sm} {sd}, {sy} - {em} {ed}, {ey}"},"c20":{"s":"{sm}/{sy} - {em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_en_ZA = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"E yy/MM/dd","m":"EE yyyy/MM/dd","l":"EEE dd MMM yy","f":"EEEE dd MMMM yyyy"},"dmy":{"s":"yy/MM/dd","m":"yyyy/MM/dd","l":"dd MMM yy","f":"dd MMMM yyyy"},"dmw":{"s":"E MM/dd","m":"EE MM/dd","l":"EEE dd MMM","f":"EEEE dd MMMM"},"dm":{"s":"MM/dd","m":"MM/dd","l":"dd MMM","f":"dd MMMM"},"my":{"s":"yy/MM","m":"yyyy/MM","l":"MMM yy","f":"MMMM yyyy"},"d":{"s":"dd","m":"dd","l":"dd","f":"dd"},"m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"h:mm:ss a Z","ahms":"h:mm:ss a ","hmsz":"h:mm:ss Z","ahmz":"h:mm a Z","ahm":"h:mm a","hmz":"h:mm Z","ah":"h a"},"24":{"ahmsz":"H:mm:ss Z","hmsz":"H:mm:ss Z","ahmz":"H:mm Z","hmz":"H:mm Z","h":"H"}},"range":{"c00":{"s":"{sy}/{sm}/{sd}, {st} - {et}","m":"{sy}/{sm}/{sd}, {st} - {et}","l":"{sd} {sm} {sy}, {st} - {et}","f":"{sd} {sm} {sy}, {st} - {et}"},"c01":{"s":"{sy}/{sm}/{sd} {st} â {ed} {et}","m":"{sy}/{sm}/{sd} {st} â {ed} {et}","l":"{sd} {sm} {sy} {st} â {ed} {em} {et}","f":"{sd} {sm} {sy} {st} â {ed} {em} {et}"},"c02":{"s":"{sm}/{sd} {st} - {em}/{ed} {et}, {sy}","m":"{sm}/{sd} {st} - {em}/{ed} {et}, {sy}","l":"{sd} {sm} {st} - {ed} {em} {et}, {sy}","f":"{sd} {sm} {st} - {ed} {em} {et}, {sy}"},"c03":{"s":"{sy}/{sm}/{sd} {st} - {ey}/{em}/{ed} {et}","m":"{sy}/{sm}/{sd} {st} - {ey}/{em}/{ed} {et}","l":"{sd} {sm} {sy}, {st} - {ed} {em} {ey}, {et}","f":"{sd} {sm} {sy}, {st} - {ed} {em} {ey}, {et}"},"c10":{"s":"{sy}/{sm}/{sd} â {ed}","m":"{sy}/{sm}/{sd} â {ed}","l":"{sd} â {ed} {sm} {sy}","f":"{sd} â {ed} {sm} {sy}"},"c11":{"s":"{sy}/{sm}/{sd} â {em}/{ed}","m":"{sy}/{sm}/{sd} â {em}/{ed}","l":"{sd} {sm} â {ed} {em} {sy}","f":"{sd} {sm} â {ed} {em} {sy}"},"c12":{"s":"{sy}/{sm}/{sd} â {ey}/{em}/{ed}","m":"{sy}/{sm}/{sd} â {ey}/{em}/{ed}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sy}/{sm} â {ey}/{em}","m":"{sy}/{sm} â {ey}/{em}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}}};
ilib.data.dateformats_de = {"gregorian":{"order":"{time} {date}","date":{"dmwy":{"s":"EE dd.MM.yy","m":"EE dd.MM.yyyy","l":"EEE dd. MMM yyyy","f":"EEEE dd. MMMM yyyy"},"dmy":{"s":"dd.MM.yy","m":"dd.MM.yyyy","l":"dd. MMM yyyy","f":"dd. MMMM yyyy"},"dmw":{"s":"EE dd.MM","m":"EE dd.MM","l":"EEE dd. MMM","f":"EEEE dd. MMMM"},"dm":{"s":"dd.MM","m":"dd.MM","l":"dd. MMM","f":"dd. MMMM"},"my":{"s":"MM.yy","m":"MM.yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"dw":{"s":"EE dd","m":"EEE dd","l":"EEE dd","f":"EEEE dd"},"d":"dd.","m":{"s":"MM","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","ahms":"hh:mm:ss a","hmsz":"hh:mm:ss z","hms":"hh:mm:ss","ahmz":"hh:mm a z","ahm":"hh:mm a","hmz":"hh:mm z","ah":"hh a","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","hms":"HH:mm:ss","ahmz":"HH:mm z","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{st} - {et} {sd}{sm}.{sy}","m":"{st} - {et} {sd}{sm}.{sy}","l":"{st} - {et} {sd} {sm} {sy}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}{sm}.{sy} - {et} {ed}{em}.{ey}","m":"{st} {sd}{sm} - {et} {ed}{em} {sy}","l":"{st} {sd} {sm} - {et} {ed} {em} {sy}","f":"{st} {sd} {sm} - {et} {ed} {em} {sy}"},"c02":{"s":"{st} {sd}{sm}.{sy} - {et} {ed}{em}.{ey}","m":"{st} {sd}{sm} - {et} {ed}{em} {sy}","l":"{st} {sd} {sm} - {et} {ed} {em} {sy}","f":"{st} {sd} {sm} - {et} {ed} {em} {sy}"},"c03":{"s":"{st} {sd}{sm}.{sy} - {et} {ed}{em}.{ey}","m":"{st} {sd}{sm}.{sy} - {et} {ed}{em}.{ey}","l":"{st} {sd} {sm} {sy} - {et} {ed} {em} {ey}","f":"{st} {sd} {sm} {sy} - {et} {ed} {em} {ey}"},"c10":{"s":"{sd}{sm}.{sy} - {ed}{em}.{ey}","m":"{sd}{sm}.{sy} - {ed}{em}.{ey}","l":"{sd}-{ed} {sm} {sy}","f":"{sd}-{ed} {sm} {sy}"},"c11":{"s":"{sd}{sm}.{sy} - {ed}{em}.{ey}","m":"{sd}{sm} - {ed}{em} {sy}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}{sm}.{sy} - {ed}{em}.{ey}","m":"{sd}{sm}.{sy} - {ed}{em}.{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_fr = {"gregorian":{"order":"{time} {date}","date":{"dmwy":{"s":"EE d/MM/yy","m":"EE d/MM/yyyy","l":"EEE d MMM yyyy","f":"EEEE d MMMM yyyy"},"dmy":{"s":"d/MM/yy","m":"d/MM/yyyy","l":"d MMM yyyy","f":"d MMMM yyyy"},"dmw":{"s":"EE d/MM","m":"EE d/MM","l":"EEE d MMM","f":"EEEE d MMMM"},"dm":{"s":"d/MM","m":"d/MM","l":"d MMM","f":"d MMMM"},"my":{"s":"MM/yy","m":"MM/yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"d":"dd","m":{"s":"MM","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","ahms":"hh:mm:ss a","hmsz":"hh:mm:ss z","hms":"hh:mm:ss","ahmz":"hh:mm a z","ahm":"hh:mm a","hmz":"hh:mm z","ah":"hh a","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","hms":"HH:mm:ss","ahmz":"HH:mm z","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{st} - {et} {sd}/{sm}/{sy}","m":"{st} - {et} {sd}/{sm}/{sy}","l":"{st} - {et} {sd} {sm} {sy}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}/{sm} - {et} {ed}/{em}/{ey}","m":"{st} {sd}/{sm} - {et} {ed}/{em}/{sy}","l":"{st} {sd} {sm} - {et} {ed} {em} {sy}","f":"{st} {sd} {sm} - {et} {ed} {em} {sy}"},"c02":{"s":"{st} {sd}/{sm} - {et} {ed}/{em}/{ey}","m":"{st} {sd}/{sm} - {et} {ed}/{em}/{sy}","l":"{st} {sd} {sm} - {et} {ed} {em} {sy}","f":"{st} {sd} {sm} - {et} {ed} {em} {sy}"},"c03":{"s":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","m":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} {sy} - {et} {ed} {em} {ey}","f":"{st} {sd} {sm} {sy} - {et} {ed} {em} {ey}"},"c10":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd}-{ed} {sm} {sy}","f":"{sd}-{ed} {sm} {sy}"},"c11":{"s":"{sd}/{sm} - {ed}/{em}/{ey}","m":"{sd}/{sm} - {ed}/{em}/{sy}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} - {em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_es = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"EE dd/MM/yy","m":"EEE dd/MM/yyyy","l":"EEE dd 'de' MMM yyyy","f":"EEEE dd 'de' MMMM yyyy"},"dmy":{"s":"dd/MM/yy","m":"dd/MM/yyyy","l":"dd 'de' MMM yyyy","f":"dd 'de' MMMM yyyy"},"dmw":{"s":"EE dd/MM","m":"EE dd/MM","l":"EEE dd 'de' MMM","f":"EEEE dd 'de' MMMM"},"dm":{"s":"dd/MM","m":"dd/MM","l":"dd 'de' MMM","f":"dd 'de' MMMM"},"my":{"s":"MM/yy","m":"MM/yyyy","l":"MMM yy","f":"MMMM yyyy"},"dw":{"s":"EE dd","m":"EEE dd","l":"EEE dd","f":"EEEE dd"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yy","l":"yyyy","f":"yyyy G"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh:mm:ssa z","ahms":"hh:mm:ssa","hmsz":"hh:mm:ss z","hms":"hh:mm:ss","ahmz":"hh:mma z","ahm":"hh:mma","hmz":"hh:mm z","ah":"hha","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","hms":"HH:mm:ss","ahmz":"HH:mm z","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}}}};
ilib.data.dateformats_es_AR = {"gregorian":{"time":{"12":{"ahmsz":"hh'h'mm:ss a Z","ahms":"hh'h'mm:ss a","hmsz":"hh'h'mm:ss Z","ahmz":"hh'h'mm a Z","hms":"hh'h'mm:ss","ahm":"hh'h'mm a","hmz":"hh'h'mm Z","ah":"hh a","hm":"hh'h'mm"},"24":{"ahmsz":"HH'h'mm:ss Z","ahms":"HH'h'mm:ss","hmsz":"HH'h'mm:ss Z","ahmz":"HH'h'mm Z","hms":"HH'h'mm:ss","ahm":"HH'h'mm","hmz":"HH'h'mm Z","hm":"HH'h'mm"}}}};
ilib.data.dateformats_id = {"gregorian":{"date":{"dmwy":{"s":"E d/M/yy","m":"EE, d/M/yyyy","l":"EEE, d MMM yyyy","f":"EEEE, d MMMM yyyy"},"dmy":{"s":"d/M/yy","m":"d/M/yyyy","l":"d MMM yyyy","f":"d MMMM yyyy"},"dmw":{"s":"E d/M","m":"EE, d/M","l":"EEE, d MMM","f":"EEEE, d MMMM"},"dm":{"s":"d/M","m":"d/M","l":"d MMM","f":"d MMMM"},"my":{"s":"M/yy","m":"M/yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"dw":{"s":"E d","m":"EE, d","l":"EEE, d","f":"EEEE, d"},"d":{"s":"d","m":"d","l":"d","f":"d"},"m":{"s":"M","m":"M","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"N","l":"MMM","f":"MMMM"}},"range":{"c00":{"s":"{sd}/{sm}/{sy} {st} â {et}","m":"{sd}/{sm}/{sy} {st} â {et}","l":"{sd} {sm} {sy} {st} â {et}","f":"{sd} {sm} {sy} {st} â {et} "},"c01":{"s":"{sd}/{sm}/{sy} {st} â {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} â {ed}/{em} {et}, {sy}","l":"{sd} {st} â {ed} {et}, {sm} {sy}","f":"{sd} {st} â {ed} {et}, {sm} {sy}"},"c02":{"s":"{sd}/{sm}/{sy} {st} â {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} â {ed}/{em} {et}, {sy}","l":"{sd} {sm} {st} â {ed} {em} {et}, {sy}","f":"{sd} {sm} {st} â {ed} {em} {et}, {sy}"},"c03":{"s":"{sd}/{sm}/{sy} {st} â {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} â {ed}/{em}/{ey} {et}","l":"{sd} {sm} {sy} {st} â {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} â {ed} {em} {ey} {et}"},"c10":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd}â{ed} {sm} {sy}","f":"{sd}â{ed} {sm} {sy}"},"c11":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em} {sy}","f":"{sd} {sm} â {ed} {em} {sy}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy}â{ey}"}}};
ilib.data.dateformats_it = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"EE dd/MM/yy","m":"EEE dd/MM/yyyy","l":"EEE dd MMM yyyy","f":"EEEE dd MMMM yyyy"},"dmy":{"s":"dd/MM/yy","m":"dd/MM/yyyy","l":"dd MMM yyyy","f":"dd MMMM yyyy"},"dmw":{"s":"EE dd/MM","m":"EE dd/MM","l":"EEE dd MMM","f":"EEEE dd MMMM"},"dm":{"s":"dd/MM","m":"dd/MM","l":"dd MMM","f":"dd MMMM"},"my":{"s":"MM/yy","m":"MM/yyyy","l":"MMM yy","f":"MMMM yyyy"},"dw":{"s":"EE dd","m":"EEE dd","l":"EEE dd","f":"EEEE dd"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yy","l":"yyyy","f":"yyyy G"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh.mm.ss a z","ahms":"hh.mm.ss a","hmsz":"hh.mm.ss z","hms":"hh.mm.ss","ahmz":"hh.mm a z","ahm":"hh.mm a","hmz":"hh.mm z","ah":"hh a","hm":"hh.mm","ms":"mm.ss","h":"hh"},"24":{"ahmsz":"HH.mm.ss z","ahms":"HH.mm.ss","hmsz":"HH.mm.ss z","hms":"HH.mm.ss","ahmz":"HH.mm z","ahm":"HH.mm","hmz":"HH.mm z","ah":"HH","hm":"HH.mm","ms":"mm.ss","h":"HH"}},"range":{"c00":{"s":"{st} - {et} {sd}/{sm}/{sy}","m":"{st} - {et} {sd}/{sm}/{sy}","l":"{st} - {et} {sd} {sm} {sy}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et} {sy}","l":"{sd} {st} - {ed} {et} {sm} {sy}","f":"{sd} {st} - {ed} {et} {sm} {sy}"},"c02":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et} {sy}","l":"{sd} {sm} {st} - {ed} {em} {et} {sy}","f":"{sd} {sm} {st} - {ed} {em} {et} {sy}"},"c03":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c10":{"s":"{sd}-{ed}/{sm}/{sy}","m":"{sd}-{ed}/{sm}/{sy}","l":"{sd}-{ed} {sm} {sy}","f":"{sd}-{ed} {sm} {sy}"},"c11":{"s":"{sd}/{sm}-{ed}/{em} {sy}","m":"{sd}/{sm} - {ed}/{em} {sy}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}/{sm}/{sy}-{ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy}-{em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_ja = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"Eyy/MM/d","m":"EEyyyy/MM/d","l":"EEEyyyyå¹´MMMædæ¥","f":"yyyyå¹´MMMMædæ¥ï¼EEEEï¼"},"dmy":{"s":"yy/MM/d","m":"yyyy/MM/d","l":"yyyyå¹´MMMædæ¥","f":"yyyyå¹´MMMMædæ¥"},"dmw":{"s":"EMM/d","m":"EEMM/d","l":"EEEMMMædæ¥","f":"MMMMædæ¥ï¼EEEEï¼"},"dm":{"s":"MM/d","m":"MM/d","l":"MMMædæ¥","f":"MMMMædæ¥"},"my":{"s":"yy/MM","m":"yyyy/MM","l":"yyyyå¹´MMMæ","f":"yyyyå¹´MMMMæ"},"dw":{"s":"EEd","m":"EEd","l":"EEEd","f":"EEEEd"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"ahh:mm:ss z","ahms":"ahh:mm:ss","hmsz":"hh:mm:ss z","hms":"hh:mm:ss","ahmz":"ahh:mm z","ahm":"ahh:mm","hmz":"hh:mm z","ah":"ahh","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","hms":"HH:mm:ss","ahmz":"HH:mm z","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{sy}/{sm}/{sd} {st}-{et}","m":"{sy}/{sm}/{sd} {st}-{et}","l":"{sy}å¹´{sm}æ{sd}æ¥{st}-{et}","f":"{sy}å¹´{sm}æ{sd}æ¥{st}-{et}"},"c01":{"s":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","m":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","l":"{sy}å¹´{sm}æ{sd}æ¥{st}-{ed}æ¥{et}","f":"{sy}å¹´{sm}æ{sd}æ¥{st}-{ed}æ¥{et}"},"c02":{"s":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","m":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","l":"{sy}å¹´{sm}æ{sd}æ¥{st}-{em}æ{ed}æ¥{et}","f":"{sy}å¹´{sm}æ{sd}æ¥{st}-{em}æ{ed}æ¥{et}"},"c03":{"s":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","m":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","l":"{sy}å¹´{sm}æ{sd}æ¥{st}-{ey}å¹´{em}æ{ed}æ¥{et}","f":"{sy}å¹´{sm}æ{sd}æ¥{st}-{ey}å¹´{em}æ{ed}æ¥{et}"},"c10":{"s":"{sy}/{sm}/{sd}-{ed}","m":"{sy}/{sm}/{sd}-{ed}","l":"{sy}å¹´{sm}æ{sd}-{ed}æ¥","f":"{sy}å¹´{sm}æ{sd}-{ed}æ¥"},"c11":{"s":"{sy}/{sm}/{sd}-{ey}/{em}/{ed}","m":"{sy}/{sm}/{sd}-{ey}/{em}/{ed}","l":"{sy}å¹´{sm}æ{sd}æ¥-{em}æ{ed}æ¥","f":"{sy}å¹´{sm}æ{sd}æ¥-{em}æ{ed}æ¥"},"c12":{"s":"{sy}/{sm}/{sd}-{ey}/{em}/{ed}","m":"{sy}/{sm}/{sd}-{ey}/{em}/{ed}","l":"{sy}å¹´{sm}æ{sd}æ¥-{ey}å¹´{em}æ{ed}æ¥","f":"{sy}å¹´{sm}æ{sd}æ¥-{ey}å¹´{em}æ{ed}æ¥"},"c20":{"s":"{sy}/{sm}-{ey}/{em}","m":"{sy}/{sm}-{ey}/{em}","l":"{sy}å¹´{sm}æ-{ey}å¹´{em}æ","f":"{sy}å¹´{sm}æ-{ey}å¹´{em}æ"},"c30":"{sy}-{ey}"}}};
ilib.data.dateformats_ko = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"E, yy. MM. dd","m":"EE, yyyy. MM. dd","l":"EEE, yyyyë MMMì dì¼","f":"yyyyë MMMì dì¼ (EEEE)"},"dmy":{"s":"yy. MM. dd","m":"yyyy. MM. dd","l":"yyyyë MMMì dì¼","f":"yyyyë MMMì dì¼"},"dmw":{"s":"E, MM. dd","m":"EE, MM. dd","l":"EEE, MMMì dì¼","f":"MMMì dì¼ (EEEE)"},"dm":{"s":"MM. dd","m":"MM. dd","l":"MMMì dì¼","f":"MMMì dì¼"},"my":{"s":"yy. MM.","m":"yyyy. MM.","l":"yyyyë MMMì","f":"yyyyë MMMì"},"dw":{"s":"EE, dd","m":"EE, dd","l":"EEE, dì¼","f":"dì¼(EEEE)"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"a h:mm:ss z","ahms":"a h:mm:ss","ahmz":"a h:mm z","ahm":"a h:mm","ah":"a h"}},"range":{"c00":{"s":"{sy}. {sm}. {sd} {st}ìì {et}ê¹ì§","m":"{sy}. {sm}. {sd} {st}ìì {et}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {et}ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {et}ê¹ì§"},"c01":{"s":"{sy}. {sm}. {sd} {st}ìì {ed} {et}ê¹ì§","m":"{sy}. {sm}. {sd} {st}ìì {ed} {et}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {ed}ì¼ {et}ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {ed}ì¼ {et}ê¹ì§"},"c02":{"s":"{sy}. {sm}. {sd} {st}ìì {em}. {ed} {et}ê¹ì§","m":"{sy}. {sm}. {sd} {st}ìì {em}. {ed} {et}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {em}ì {ed}ì¼ {et}ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {em}ì {ed}ì¼ {et}ê¹ì§"},"c03":{"s":"{sy}. {sm}. {sd} {st}ìì {ey}. {em}. {ed} {et}ê¹ì§","m":"{sy}. {sm}. {sd} {st}ìì {ey}. {em}. {ed} {et}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {ey}ë {em}ì {ed}ì¼ {et}ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {ey}ë {em}ì {ed}ì¼ {et}ê¹ì§"},"c10":{"s":"{sy}. {sm}. {sd}ìì {ed}ê¹ì§","m":"{sy}. {sm}. {sd}ìì {ed}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ìì {ed}ì¼ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ìì {ed}ì¼ê¹ì§"},"c11":{"s":"{sy}. {sm}. {sd}ìì {em}. {ed}ê¹ì§","m":"{sy}. {sm}. {sd}ìì {em}. {ed}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ìì {em}ì {ed}ì¼ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ìì {em}ì {ed}ì¼ê¹ì§"},"c12":{"s":"{sy}. {sm}. {sd}ìì {ey}. {em}. {ed}ê¹ì§","m":"{sy}. {sm}. {sd}ìì {ey}. {em}. {ed}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ìì {ey}ë {em}ì {ed}ì¼ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ìì {ey}ë {em}ì {ed}ì¼ê¹ì§"},"c20":{"s":"{sy}. {sm}.ìì {ey}. {em}.ê¹ì§","m":"{sy}. {sm}.ìì {ey}. {em}.ê¹ì§","l":"{sy}ë {sm}ììì {ey}ë {em}ìê¹ì§","f":"{sy}ë {sm}ììì {ey}ë {em}ìê¹ì§"},"c30":"{sy}ëìì {ey}ëê¹ì§"}}};
ilib.data.dateformats_pt = {"gregorian":{"date":{"dmwy":{"s":"E, dd/MM/yy","m":"EE, dd/MM/yyyy","l":"EEE, dd 'de' MMM 'de' yyyy","f":"EEEE, dd 'de' MMMM 'de' yyyy"},"dmy":{"s":"dd/MM/yy","m":"dd/MM/yyyy","l":"dd 'de' MMM 'de' yyyy","f":"dd 'de' MMMM 'de' yyyy"},"dmw":{"s":"E, dd/MM","m":"EE, dd/MM","l":"EEE, dd 'de' MMM","f":"EEEE, dd 'de' MMMM"},"dm":{"s":"dd/MM","m":"dd/MM","l":"dd 'de' MMM","f":"dd 'de' MMMM"},"my":{"s":"MM/yy","m":"MM/yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"dw":{"s":"EE, dd","m":"EE, dd","l":"EEE, dd","f":"EEEE, dd"},"d":{"s":"dd","m":"dd","l":"dd","f":"dd"},"m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh'h'mm'min'ss's' a z","ahms":"hh'h'mm'min'ss's' a","hmsz":"hh'h'mm'min'ss's' z","ahmz":"hh'h'mm'min' a z","hms":"hh'h'mm'min'ss's'","ahm":"hh'h'mm'min' a","hmz":"hh'h'mm'min' z","ah":"hh'h' a","hm":"hh'h'mm'min'","ms":"mm'min'ss's'","h":"hh"},"24":{"ahmsz":"HH'h'mm'min'ss's' z","ahms":"HH'h'mm'min'ss's'","hmsz":"HH'h'mm'min'ss's' z","ahmz":"HH'h'mm'min' z","hms":"HH'h'mm'min'ss's'","ahm":"HH'h'mm'min'","hmz":"HH'h'mm'min' z","ah":"HH'h'","hm":"HH'h'mm'min'","ms":"mm'min'ss's'","h":"HH"}},"range":{"c00":{"s":"{sd}/{sm}/{sy} {st} - {et}","m":"{sd}/{sm}/{sy} {st} - {et}","l":"{sd}/{sm}/{sy} {st} - {et}","f":"{sd} de {sm} de {sy} {st} - {et}"},"c01":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}","l":"{sd} {st} - {ed} {et}, {sm} {sy}","f":"{sd} {st} - {ed} {et},  de {sm} {sy}"},"c02":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}","l":"{sd} de {sm} {st} - {ed} de {em} {et}, {sy}","f":"{sd} de {sm} {st} - {ed} de {em} {et}, {sy}"},"c03":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"{sd} de {sm} de {sy} {st} - {ed} de {em} de {ey} {et}","f":"{sd} de {sm} de {sy} {st} - {ed} de {em} de {ey} {et}"},"c10":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd}-{ed} de {sm} de {sy}","f":"{sd}-{ed} de {sm} de {sy}"},"c11":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} de {sm} - {ed} de {em} de {sy}","f":"{sd} de {sm} - {ed} de {em} de {sy}"},"c12":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} de {sm} de {sy} - {ed} de {em} de {ey}","f":"{sd} de {sm} de {sy} - {ed} de {em} de {ey}"},"c20":{"s":"{sm}/{sy} - {em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} de {sy} - {em} de {ey}","f":"{sm} de {sy} - {em} de {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_ru = {"gregorian":{"date":{"dmwy":{"s":"E, dd.MM.yy","m":"EE, dd.MM.yyyy","l":"EEE, d MMM yyyy","f":"EEEE, d MMMM yyyyÂ 'Ð³.'"},"dmy":{"s":"dd.MM.yy","m":"dd.MM.yyyy","l":"d MMM yyyy","f":"d MMMM yyyyÂ 'Ð³.'"},"dmw":{"s":"E, dd.MM","m":"EE, dd.MM","l":"EEE, d MMM","f":"EEEE, d MMMM"},"dm":{"s":"dd.MM","m":"dd.MM","l":"d MMM","f":"d MMMM"},"my":{"s":"MM.yy","m":"MM.yyyy","l":"MMM yyyy","f":"MMMM yyyyÂ 'Ð³.'"},"dw":{"s":"EE, d","m":"EE, d","l":"EEE, d","f":"EEEE, d"},"d":{"s":"d","m":"d","l":"d","f":"d"},"m":{"s":"MM","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"h:mm:ss a z","ahms":"h:mm:ss a","ahmz":"h:mm a z","ahm":"h:mm a","ah":"h a"}},"range":{"c00":{"s":"{sd}.{sm}.{sy} {st}-{et}","m":"{sd}.{sm}.{sy} {st}-{et}","l":"{sd}.{sm}.{sy} {st}-{et}","f":"{sd} {sm} {sy}Â Ð³. {st}-{et}"},"c01":{"s":"{sd}.{sm} {st} - {ed}.{em} {et}, {sy}","m":"{sd}.{sm} {st} - {ed}.{em} {et}, {sy}","l":"{sd} {st} - {ed} {et}, {sm} {sy}","f":"{sd} {st} - {ed} {et}, {sm} {sy} Ð³."},"c02":{"s":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm} {st} - {ed}.{em} {et}, {sy}","l":"{sd} {sm} {st} - {ed} {em} {et}, {sy}","f":"{sd} {sm} {st} - {ed} {em} {et}, {sy} Ð³."},"c03":{"s":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy}Â Ð³. {st} - {ed} {em} {ey}Â Ð³. {et}"},"c10":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd}-{ed} {sm} {sy} Ð³.","f":"{sd}-{ed} {sm} {sy} Ð³."},"c11":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} - {ed} {em} {sy} Ð³.","f":"{sd} {sm} - {ed} {em} {sy} Ð³."},"c12":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey} Ð³.","f":"{sd} {sm} {sy} - {ed} {em} {ey} Ð³."},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}","l":"{sm} {sy} - {em} {ey} Ð³.","f":"{sm} {sy} - {em} {ey} Ð³."},"c30":"{sy}-{ey}"}}};
ilib.data.dateformats_tr = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"dd.MM.yyyy, E","m":"dd.MM.yyyy, EE","l":"dd MMM yyyy, EEE","f":"dd MMMM yyyy EEEE"},"dmy":{"s":"dd.MM.yyyy","m":"dd.MM.yyyy","l":"dd MMM yyyy","f":"dd MMMM yyyy"},"dmw":{"s":"dd.MM, E","m":"dd.MM, EE","l":"dd MMM, EEE","f":"dd MMMM, EEEE"},"dm":{"s":"dd.MM","m":"dd.MM","l":"dd MMM","f":"dd MMMM"},"my":{"s":"MM.yy","m":"MM.yyyy","l":"MMM yy","f":"MMMM yyyy"},"dw":{"s":"dd EE","m":"dd EE","l":"dd EEE","f":"dd EEEE"},"d":{"s":"dd","m":"dd","l":"dd","f":"dd"},"m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh:mm:ss a Z","ahms":"hh:mm:ss a","hmsz":"hh:mm:ss Z","ahmz":"hh:mm a Z","hms":"hh:mm:ss","ahm":"hh:mm a","hmz":"hh:mm Z","ah":"hh a","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss Z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss Z","ahmz":"HH:mm Z","hms":"HH:mm:ss","ahm":"HH:mm","hmz":"HH:mm Z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{sd}.{sm}.{sy} {st} - {et}","m":"{sd}.{sm}.{sy} {st} - {et}","l":"{sd} {sm} {sy} {st} - {et}","f":"{sd} {sm} {sy} {st} - {et}"},"c01":{"s":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","l":"{sd} {sm} {st} - {ed} {em} {et} {ey}","f":"{sd} {sm} {st} - {ed} {em} {et} {ey}"},"c02":{"s":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","l":"{sd} {sm} {st} - {ed} {em} {et}, {sy} ","f":"{sd} {sm} {st} - {ed} {em} {et}, {sy}"},"c03":{"s":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c10":{"s":"{sd} - {ed}.{sm}.{sy}","m":"{sd} - {ed}.{sm}.{sy}","l":"{sd} - {ed} {sm} {sy}","f":"{sd} - {ed} {sm} {sy}"},"c11":{"s":"{sd}.{sm} - {ed}.{em} {ey}","m":"{sd}.{sm} - {ed}.{em} {ey}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_vi = {"gregorian":{"order":"{time} {date}","date":{"dmwy":{"s":"E dd/MM/yy","m":"EE dd/MM/yyyy","l":"EEE dd MMM yyyy","f":"EEEE 'ngÃ y' dd MMMM 'nÄm' yyyy"},"dmy":{"s":"d/M/yy","m":"dd/MM/yyyy","l":"dd MMM yyyy","f":"'ngÃ y' dd MMMM 'nÄm' yyyy"},"dmw":{"s":"E d/M","m":"EE dd/MM","l":"EEE dd MMM","f":"EEEE 'ngÃ y' dd MMMM"},"dw":{"s":"E dd","m":"EE dd","l":"EEE dd","f":"EEEE 'ngÃ y' dd"},"dm":{"s":"d/M","m":"dd/MM","l":"dd MMM","f":"'ngÃ y' dd MMMM"},"my":{"s":"M/yy","m":"MM/yyyy","l":"MMM yyyy","f":"MMMM 'nÄm' yyyy"},"d":{"s":"dd","m":"dd","l":"dd","f":"'ngÃ y' dd"},"m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"'nÄm' yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh'h'mm:ss a Z","ahms":"hh'h'mm:ss a","hmsz":"hh'h'mm:ss Z","ahmz":"hh'h'mm a Z","hms":"hh'h'mm:ss","ahm":"hh'h'mm a","hmz":"hh'h'mm Z","ah":"hh a","hm":"hh'h'mm","h":"hh"},"24":{"ahmsz":"HH'h'mm:ss Z","ahms":"HH'h'mm:ss","hmsz":"HH'h'mm:ss Z","ahmz":"HH'h'mm Z","hms":"HH'h'mm:ss","ahm":"HH'h'mm","hmz":"HH'h'mm Z","ah":"HH","hm":"HH'h'mm","h":"HH"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd}/{sm}/{sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"vÃ o lÃºc {st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} â {et} {ed} {em} {ey}","f":"vÃ o lÃºc {st} {sd} â vÃ o lÃºc {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} {sy} â {et} {ed} {em} {ey}","f":"vÃ o lÃºc {st} {sd} {sm} â vÃ o lÃºc {et} {ed} {em} {ey}"},"c03":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"vÃ o lÃºc {st} {sd} {sm} {sy} â vÃ o lÃºc {et} {ed} {em} {ey}"},"c10":{"s":"{sd} â {ed}/{em}/{ey}","m":"{sd} â {ed}/{em}/{ey}","l":"{sd} â {ed} {sm} {sy}","f":"{sd} â {ed} {sm} {sy}"},"c11":{"s":"{sd}/{sm} â {ed}/{em}/{ey}","m":"{sd}/{sm} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em} {sy}","f":"{sd} {sm} â {ed} {em} {sy}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":{"s":"{sy} â {ey}","m":"{sy} â {ey}","l":"{sy} â {ey}","f":"{sy} â {ey}"}}}};
ilib.data.dateformats_zxx = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"EE d/MM/yy","m":"EEE d/MM/yyyy","l":"EEE d MMM, yyyy","f":"EEEE d MMMM, yyyy"},"dmy":{"s":"d/MM/yy","m":"d/MM/yyyy","l":"d MMM, yyyy","f":"d MMMM, yyyy"},"dmw":{"s":"EE d/M","m":"EE d/MM","l":"EEE d MMM","f":"EEEE d MMMM"},"dm":{"s":"d/M","m":"d/M","l":"d MMM","f":"d MMMM"},"my":{"s":"M/yy","m":"MM/yyyy","l":"MMM yy","f":"MMMM yyyy"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yy","l":"yyyy","f":"yyyy G"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}}},"julian":"gregorian"};
ilib.data.dateformats_zh = {"gregorian":{"order":{"s":"{date} {time}","m":"{date} {time}","l":"{date}{time}","f":"{date}{time}"},"date":{"dmwy":{"s":"yy-MM-dd(E)","m":"yyyy-MM-dd(EE)","l":"yyyyå¹´MMMædæ¥(EEE)","f":"yyyyå¹´MMMMædæ¥(EEEE)"},"dmy":{"s":"yy-MM-dd","m":"yyyy-MM-dd","l":"yyyyå¹´MMMædæ¥","f":"yyyyå¹´MMMMædæ¥"},"dmw":{"s":"MM-dd(E)","m":"MM-dd(EE)","l":"MMMædæ¥(EEE)","f":"MMMMædæ¥(EEEE)"},"dm":{"s":"MM-dd","m":"MM-dd","l":"MMMædæ¥","f":"MMMMædæ¥"},"my":{"s":"yy-MM","m":"yyyy-MM","l":"yyyyå¹´MMMæ","f":"yyyyå¹´MMMMæ"},"dw":{"s":"dæ¥(E)","m":"dæ¥(EE)","l":"dæ¥(EEE)","f":"dæ¥(EEEE)"},"d":{"s":"d","m":"dd","l":"dæ¥","f":"dæ¥"},"m":{"s":"M","m":"MM","l":"MMMæ","f":"MMMMæ"},"y":{"s":"yy","m":"yyyy","l":"yyyyå¹´","f":"yyyyå¹´"},"n":{"s":"N","m":"NN","l":"MMMæ","f":"MMMMæ"}},"time":{"12":{"ahmsz":"ahh:mm:ssz","ahms":"ahh:mm:ss","hmsz":"hh:mm:ssz","hms":"hh:mm:ss","ahmz":"ahh:mmz","ahm":"ahh:mm","hmz":"hh:mmz","ah":"ahh","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ssz","ahms":"HH:mm:ss","hmsz":"HH:mm:ssz","hms":"HH:mm:ss","ahmz":"HH:mmz","ahm":"HH:mm","hmz":"HH:mmz","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{sy}-{sm}-{sd}ï¼{st}è³{et}","m":"{sy}-{sm}-{sd}ï¼{st}è³{et}","l":"{sy}{sm}{sd}ï¼{st}è³{et}","f":"{sy}{sm}{sd}ï¼{st}è³{et}"},"c01":{"s":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","m":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","l":"{sy}{sm}{sd}{st}è³{ed}{et}","f":"{sy}{sm}{sd}{st}è³{ed}{et}"},"c02":{"s":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","m":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","l":"{sy}{sm}{sd}ï¼{st}è³{em}{ed}æ¥ï¼{et}","f":"{sy}{sm}{sd}ï¼{st}è³{em}{ed}æ¥ï¼{et}"},"c03":{"s":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","m":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","l":"{sy}{sm}{sd}ï¼{st}è³{ey}{em}{ed}ï¼{et}","f":"{sy}{sm}{sd}ï¼{st}è³{ey}{em}{ed}ï¼{et}"},"c10":{"s":"{sy}-{sm}-{sd}è³{ed}","m":"{sy}-{sm}-{sd}è³{ed}","l":"{sy}{sm}{sd}è³{ed}","f":"{sy}{sm}{sd}è³{ed}"},"c11":{"s":"{sy}-{sm}-{sd}è³{em}-{ed}","m":"{sy}-{sm}-{sd}è³{em}-{ed}","l":"{sy}{sm}{sd}è³{em}{ed}","f":"{sy}{sm}{sd}è³{em}{ed}"},"c12":{"s":"{sy}-{sm}-{sd}è³{ey}-{em}-{ed}","m":"{sy}-{sm}-{sd}è³{ey}-{em}-{ed}","l":"{sy}{sm}{sd}è³{ey}{em}{ed}","f":"{sy}{sm}{sd}è³{ey}{em}{ed}"},"c20":{"s":"{sy}-{sm}è³{ey}-{em}","m":"{sy}-{sm}è³{ey}-{em}","l":"{sy}{sm}è³{ey}{em}","f":"{sy}{sm}è³{ey}{em}"},"c30":"{sy}è³{ey}"}}};
ilib.data.dateformats_zh_HK = {"gregorian":{"date":{"dmwy":{"s":"dd.MM.yy(E)","m":"dd.MM.yyyy(EE)"},"dmy":{"s":"dd.MM.yy","m":"dd.MM.yyyy"},"dmw":{"s":"dd.MM(E)","m":"dd.MM(EE)"},"dm":{"s":"dd.MM","m":"dd.MM"},"my":{"s":"MM.yy","m":"MM.yyyy"}},"range":{"c00":{"s":"{sd}.{sm}.{sy} {st}è³{et}","m":"{sd}.{sm}.{sy} {st}è³{et}"},"c01":{"s":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}"},"c02":{"s":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}"},"c03":{"s":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}"},"c10":{"s":"{sd}è³{ed}.{sm}.{sy}","m":"{sd}è³{ed}.{sm}.{sy}"},"c11":{"s":"{sd}.{sm}è³{ed}.{em}.{sy}","m":"{sd}.{sm}è³{ed}.{em}.{sy}"},"c12":{"s":"{sd}.{sm}.{sy}è³{ed}.{em}.{ey}","m":"{sd}.{sm}.{sy}è³{ed}.{em}.{ey}"},"c20":{"s":"{sm}.{sy}è³{em}.{ey}","m":"{sm}.{sy}è³{em}.{ey}"}}}};
ilib.data.dateformats_zh_TW = {"gregorian":{"date":{"dmwy":{"s":"yyyy-MM-dd(E)","l":"yyyyå¹´MMMædæ¥(EEE)"},"dmy":{"s":"yyyy-MM-dd","l":"yyyyå¹´MMMædæ¥"},"my":{"s":"yyyy-MM","l":"yyyyå¹´MMMæ"},"y":{"s":"yyyy","l":"yyyyå¹´"}}}};
ilib.data.sysres = {"MMMM1":"January","MMM1":"Jan","NN1":"Ja","N1":"J","MMMM2":"February","MMM2":"Feb","NN2":"Fe","N2":"F","MMMM3":"March","MMM3":"Mar","NN3":"Ma","N3":"M","MMMM4":"April","MMM4":"Apr","NN4":"Ap","N4":"A","MMMM5":"May","MMM5":"May","NN5":"Ma","N5":"M","MMMM6":"June","MMM6":"Jun","NN6":"Ju","N6":"J","MMMM7":"July","MMM7":"Jul","NN7":"Ju","N7":"J","MMMM8":"August","MMM8":"Aug","NN8":"Au","N8":"A","MMMM9":"September","MMM9":"Sep","NN9":"Se","N9":"S","MMMM10":"October","MMM10":"Oct","NN10":"Oc","N10":"O","MMMM11":"November","MMM11":"Nov","NN11":"No","N11":"N","MMMM12":"December","MMM12":"Dec","NN12":"De","N12":"D","EEEE0":"Sunday","EEE0":"Sun","EE0":"Su","E0":"S","EEEE1":"Monday","EEE1":"Mon","EE1":"Mo","E1":"M","EEEE2":"Tuesday","EEE2":"Tue","EE2":"Tu","E2":"T","EEEE3":"Wednesday","EEE3":"Wed","EE3":"We","E3":"W","EEEE4":"Thursday","EEE4":"Thu","EE4":"Th","E4":"T","EEEE5":"Friday","EEE5":"Fri","EE5":"Fr","E5":"F","EEEE6":"Saturday","EEE6":"Sat","EE6":"Sa","E6":"S","ordinalChoice":"1#1st|2#2nd|3#3rd|21#21st|22#22nd|23#23rd|31#31st|#{num}th","a0":"AM","a1":"PM","G-1":"BCE","G1":"CE","separatorFull":", ","finalSeparatorFull":", and ","separatorShort":" ","separatorMedium":" ","separatorLong":", ","N1-hebrew":"N","N2-hebrew":"I","N3-hebrew":"S","N4-hebrew":"T","N5-hebrew":"A","N6-hebrew":"E","N7-hebrew":"T","N8-hebrew":"á¸¤","N9-hebrew":"K","N10-hebrew":"T","N11-hebrew":"S","N12-hebrew":"A","N13-hebrew":"A","NN1-hebrew":"Ni","NN2-hebrew":"Iy","NN3-hebrew":"Si","NN4-hebrew":"Ta","NN5-hebrew":"Av","NN6-hebrew":"El","NN7-hebrew":"Ti","NN8-hebrew":"á¸¤e","NN9-hebrew":"Ki","NN10-hebrew":"Te","NN11-hebrew":"Sh","NN12-hebrew":"Ad","NN13-hebrew":"A2","MMM1-hebrew":"Nis","MMM2-hebrew":"Iyy","MMM3-hebrew":"Siv","MMM4-hebrew":"Tam","MMM5-hebrew":"Av","MMM6-hebrew":"Elu","MMM7-hebrew":"Tis","MMM8-hebrew":"á¸¤es","MMM9-hebrew":"Kis","MMM10-hebrew":"Tev","MMM11-hebrew":"She","MMM12-hebrew":"Ada","MMM13-hebrew":"Ad2","MMMM1-hebrew":"Nisan","MMMM2-hebrew":"Iyyar","MMMM3-hebrew":"Sivan","MMMM4-hebrew":"Tammuz","MMMM5-hebrew":"Av","MMMM6-hebrew":"Elul","MMMM7-hebrew":"Tishri","MMMM8-hebrew":"á¸¤eshvan","MMMM9-hebrew":"Kislev","MMMM10-hebrew":"Teveth","MMMM11-hebrew":"Shevat","MMMM12-hebrew":"Adar","MMMM13-hebrew":"Adar II","E0-hebrew":"R","E1-hebrew":"S","E2-hebrew":"S","E3-hebrew":"R","E4-hebrew":"á¸¤","E5-hebrew":"S","E6-hebrew":"S","EE0-hebrew":"ri","EE1-hebrew":"se","EE2-hebrew":"sl","EE3-hebrew":"rv","EE4-hebrew":"á¸¥a","EE5-hebrew":"si","EE6-hebrew":"sa","EEE0-hebrew":"ris","EEE1-hebrew":"she","EEE2-hebrew":"shl","EEE3-hebrew":"rvi","EEE4-hebrew":"á¸¥am","EEE5-hebrew":"shi","EEE6-hebrew":"sha","EEEE0-hebrew":"yom rishon","EEEE1-hebrew":"yom sheni","EEEE2-hebrew":"yom shlishi","EEEE3-hebrew":"yom r'viâi","EEEE4-hebrew":"yom á¸¥amishi","EEEE5-hebrew":"yom shishi","EEEE6-hebrew":"yom shabbat","N1-islamic":"M","N2-islamic":"á¹¢","N3-islamic":"R","N4-islamic":"R","N5-islamic":"J","N6-islamic":"J","N7-islamic":"R","N8-islamic":"Å ","N9-islamic":"R","N10-islamic":"Å ","N11-islamic":"Q","N12-islamic":"á¸¤","NN1-islamic":"Mu","NN2-islamic":"á¹¢a","NN3-islamic":"Rb","NN4-islamic":"R2","NN5-islamic":"Ju","NN6-islamic":"J2","NN7-islamic":"Ra","NN8-islamic":"Å h","NN9-islamic":"Ra","NN10-islamic":"Å a","NN11-islamic":"Qa","NN12-islamic":"á¸¤i","MMM1-islamic":"Muá¸¥","MMM2-islamic":"á¹¢af","MMM3-islamic":"Rab","MMM4-islamic":"Ra2","MMM5-islamic":"Jum","MMM6-islamic":"Ju2","MMM7-islamic":"Raj","MMM8-islamic":"Å ha","MMM9-islamic":"Ram","MMM10-islamic":"Å aw","MMM11-islamic":"Qad","MMM12-islamic":"á¸¤ij","MMMM1-islamic":"Muá¸¥arram","MMMM2-islamic":"á¹¢afar","MMMM3-islamic":"RabÄ«â I","MMMM4-islamic":"RabÄ«â II","MMMM5-islamic":"JumÄdÄ I","MMMM6-islamic":"JumÄdÄ II","MMMM7-islamic":"Rajab","MMMM8-islamic":"Å ha'bÄn","MMMM9-islamic":"Ramaá¸Än","MMMM10-islamic":"Å awwÄl","MMMM11-islamic":"á¸u al-Qaâda","MMMM12-islamic":"á¸u al-á¸¤ijja","E0-islamic":"A","E1-islamic":"I","E2-islamic":"T","E3-islamic":"A","E4-islamic":"K","E5-islamic":"J","E6-islamic":"S","EE0-islamic":"ah","EE1-islamic":"it","EE2-islamic":"th","EE3-islamic":"ar","EE4-islamic":"kh","EE5-islamic":"ju","EE6-islamic":"sa","EEE0-islamic":"aha","EEE1-islamic":"ith","EEE2-islamic":"tha","EEE3-islamic":"arb","EEE4-islamic":"kha","EEE5-islamic":"jum","EEE6-islamic":"sab","EEEE0-islamic":"yawn al-ahad","EEEE1-islamic":"yawn al-ithnaya","EEEE2-islamic":"yawn uth-thalathaa","EEEE3-islamic":"yawn al-arbaâa","EEEE4-islamic":"yawn al-khamis","EEEE5-islamic":"yawn al-jumâa","EEEE6-islamic":"yawn as-sabt"};
ilib.data.sysres_en = {};
ilib.data.sysres_en_AU = {};
ilib.data.sysres_en_CA = {};
ilib.data.sysres_en_GB = {};
ilib.data.sysres_en_IN = {};
ilib.data.sysres_en_NG = {};
ilib.data.sysres_en_PH = {};
ilib.data.sysres_en_PK = {};
ilib.data.sysres_en_US = {"a0":"am","a1":"pm","G-1":"BC","G1":"AD","finalSeparatorFull":" and "};
ilib.data.sysres_en_ZA = {};
ilib.data.sysres_de = {"MMMM1":"Januar","MMM1":"Jan.","MMMM2":"Februar","MMM2":"Feb.","MMMM3":"MÃ¤rz","MMM3":"MÃ¤r.","NN3":"MÃ¤","MMM4":"Apr.","MMMM5":"Mai","MMM5":"Mai","MMMM6":"Juni","MMM6":"Jun.","MMMM7":"Juli","MMM7":"Jul.","MMM8":"Aug.","MMM9":"Sep.","MMMM10":"Oktober","MMM10":"Okt.","NN10":"Ok","MMM11":"Nov.","MMMM12":"Dezember","MMM12":"Dez.","EEEE0":"Sonntag","EEE0":"So.","EE0":"So","EEEE1":"Montag","EEE1":"Mo.","EEEE2":"Dienstag","EEE2":"Di.","EE2":"Di","E2":"D","EEEE3":"Mittwoch","EEE3":"Mi.","EE3":"Mi","E3":"M","EEEE4":"Donnerstag","EEE4":"Do.","EE4":"Do","E4":"D","EEEE5":"Freitag","EEE5":"Fr.","EEEE6":"Samstag","EEE6":"Sa.","ordinalChoice":"#{num}.","a0":"vorm.","a1":"nachm.","G-1":"v. Chr.","G1":"n. Chr.","durationShortMillis":"#{num}Ms","#{num}s":"#{num}S","durationShortMinutes":"#{num}M","#{num}h":"#{num}St","#{num}d":"#{num}T","#{num}w":"#{num}W","durationShortMonths":"#{num}Mo","#{num}y":"#{num}J","#{num} ms":"#{num} Ms.","1#1 se|#{num} sec":"#{num} Se.","1#1 mi|#{num} min":"#{num} Mi.","durationMediumHours":"#{num} St.","1#1 dy|#{num} dys":"#{num} Ta.","durationMediumWeeks":"#{num} Wo.","1#1 mo|#{num} mos":"#{num} Mo.","durationMediumYears":"#{num} Ja.","1#1 sec|#{num} sec":"#{num} Sek.","1#1 min|#{num} min":"#{num} Min.","1#1 hr|#{num} hrs":"#{num} Std.","durationLongDays":"1#{num} Tag|#{num} Tage","1#1 wk|#{num} wks":"#{num} Wch.","1#1 mon|#{num} mons":"#{num} Mon.","1#1 yr|#{num} yrs":"#{num} Jhr.","1#1 millisecond|#{num} milliseconds":"1#{num} Millisekunde|#{num} Millisekunden","1#1 second|#{num} seconds":"1#{num} Sekunde|#{num} Sekunden","1#1 minute|#{num} minutes":"1#{num} Minute|#{num} Minuten","1#1 hour|#{num} hours":"1#{num} Stunde|#{num} Stunden","1#1 day|#{num} days":"1#{num} Tag|#{num} Tage","1#1 week|#{num} weeks":"1#{num} Woche|#{num} Wochen","1#1 month|#{num} months":"1#{num} Monat|#{num} Monate","1#1 year|#{num} years":"1#{num} Jahr|#{num} Jahre","{duration} ago":"vor {duration}","in {duration}":"in {duration}","separatorShort":" ","separatorMedium":" ","separatorLong":", ","separatorFull":", ","finalSeparatorFull":" und "};
ilib.data.sysres_de_DE = {};
ilib.data.sysres_fr = {"MMMM1":"janvier","MMM1":"janv","NN1":"ja","MMMM2":"fÃ©vrier","MMM2":"fÃ©vr","NN2":"fÃ©","MMMM3":"mars","MMM3":"mars","NN3":"ma","MMMM4":"avril","MMM4":"avr","NN4":"av","MMMM5":"mai","MMM5":"mai","NN5":"ma","MMMM6":"juin","MMM6":"juin","NN6":"ju","MMMM7":"juillet","MMM7":"juil","NN7":"ju","MMMM8":"aoÃ»t","MMM8":"aoÃ»t","NN8":"ao","MMMM9":"septembre","MMM9":"sept","NN9":"se","MMMM10":"octobre","MMM10":"oct","NN10":"oc","MMMM11":"novembre","MMM11":"nov","NN11":"no","MMMM12":"dÃ©cembre","MMM12":"dÃ©c","NN12":"dÃ©","EEEE0":"dimanche","EEE0":"dim.","EE0":"di","E0":"D","EEEE1":"lundi","EEE1":"lun.","EE1":"lu","E1":"L","EEEE2":"mardi","EEE2":"mar.","EE2":"ma","E2":"M","EEEE3":"mercredi","EEE3":"mer.","EE3":"me","E3":"M","EEEE4":"jeudi","EEE4":"jeu.","EE4":"je","E4":"J","EEEE5":"vendredi","EEE5":"ven.","EE5":"ve","E5":"V","EEEE6":"samedi","EEE6":"sam.","EE6":"sa","ordinalChoice":"1#1er|#{num}e","a0":"matin","a1":"soir","G-1":"av. J.-C.","G1":"ap. J.-C.","durationShortMillis":"#{num}ms","#{num}s":"#{num}s","durationShortMinutes":"#{num}m","#{num}h":"#{num}h","#{num}d":"#{num}j","#{num}w":"#{num}sm","durationShortMonths":"#{num}mo","#{num}y":"#{num}a","#{num} ms":"#{num} Ms","1#1 se|#{num} sec":"1#{num} se|#{num} ses","1#1 mi|#{num} min":"1#{num} mn|#{num} mns","durationMediumHours":"1#{num} hr|#{num} hrs","1#1 dy|#{num} dys":"1#{num} jr|#{num} jrs","durationMediumWeeks":"1#{num} sm|#{num} sms","1#1 mo|#{num} mos":"1#{num} mo|#{num} mos","durationMediumYears":"1#{num} an|#{num} ans","1#1 sec|#{num} sec":"1#{num} sec|#{num} secs","1#1 min|#{num} min":"1#{num} min|#{num} mins","1#1 hr|#{num} hrs":"1#{num} hr|#{num} hrs","durationLongDays":"1#{num} jr|#{num} jrs","1#1 wk|#{num} wks":"1#{num} sem|#{num} sems","1#1 mon|#{num} mons":"1#{num} mois|#{num} mois","1#1 yr|#{num} yrs":"1#{num} an|#{num} ans","1#1 millisecond|#{num} milliseconds":"1#{num} milliseconde|#{num} millisecondes","1#1 second|#{num} seconds":"1#{num} seconde|#{num} secondes","1#1 minute|#{num} minutes":"1#{num} minute|#{num} minutes","1#1 hour|#{num} hours":"1#{num} heure|#{num} heures","1#1 day|#{num} days":"1#{num} jour|#{num} jours","1#1 week|#{num} weeks":"1#{num} semaine|#{num} semaines","1#1 month|#{num} months":"#{num} mois","1#1 year|#{num} years":"1#{num} an|#{num} ans","{duration} ago":"il y a {duration}","in {duration}":"dans {duration}","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" et "};
ilib.data.sysres_fr_CA = {};
ilib.data.sysres_fr_FR = {};
ilib.data.sysres_es = {"MMMM1":"enero","MMM1":"ene","NN1":"en","N1":"E","MMMM2":"febrero","MMM2":"feb","NN2":"fe","MMMM3":"marzo","MMM3":"mar","NN3":"ma","MMMM4":"abril","MMM4":"abr","NN4":"ab","MMMM5":"mayo","MMM5":"may","NN5":"ma","MMMM6":"junio","MMM6":"jun","NN6":"ju","MMMM7":"julio","MMM7":"jul","NN7":"ju","MMMM8":"agosto","MMM8":"ago","NN8":"ag","MMMM9":"septiembre","MMM9":"sep","NN9":"se","MMMM10":"octubre","MMM10":"oct","NN10":"oc","MMMM11":"noviembre","MMM11":"nov","NN11":"no","MMMM12":"diciembre","MMM12":"dic","NN12":"di","EEEE0":"domingo","EEE0":"dom","EE0":"do","E0":"D","EEEE1":"lunes","EEE1":"lun","EE1":"lu","E1":"L","EEEE2":"martes","EEE2":"mar","EE2":"ma","E2":"M","EEEE3":"miÃ©rcoles","EEE3":"miÃ©","EE3":"mi","E3":"M","EEEE4":"jueves","EEE4":"jue","EE4":"ju","E4":"J","EEEE5":"viernes","EEE5":"vie","EE5":"vi","E5":"V","EEEE6":"sÃ¡bado","EEE6":"sÃ¡b","EE6":"sÃ¡","ordinalChoice":"#{num} Âº","a0":"a.m.","a1":"p.m.","G-1":"a.C.","G1":"d.C.","durationShortMillis":"#{num}ms","#{num}s":"#{num}s","durationShortMinutes":"#{num}m","#{num}h":"#{num}h","#{num}d":"#{num}d","#{num}w":"#{num}sm","durationShortMonths":"#{num}me","#{num}y":"#{num}a","#{num} ms":"#{num} ms","1#1 se|#{num} sec":"1#{num} sg|#{num} sgs","1#1 mi|#{num} min":"1#{num} mn|#{num} mns","durationMediumHours":"1#{num} hr|#{num} hrs","1#1 dy|#{num} dys":"1#{num} dÃ­|#{num} dÃ­s","durationMediumWeeks":"1#{num} sm|#{num} sms","1#1 mo|#{num} mos":"1#{num} me|#{num} mss","durationMediumYears":"1#{num} aÃ±|#{num} aÃ±s","1#1 sec|#{num} sec":"1#{num} seg|#{num} segs","1#1 min|#{num} min":"1#{num} min|#{num} mins","1#1 hr|#{num} hrs":"1#{num} hor|#{num} hors","durationLongDays":"1#{num} dÃ­a|#{num} dÃ­as","1#1 wk|#{num} wks":"1#{num} sem|#{num} sems","1#1 mon|#{num} mons":"1#{num} mes|#{num} mss","1#1 yr|#{num} yrs":"1#{num} aÃ±o|#{num} aÃ±os","1#1 millisecond|#{num} milliseconds":"1#{num} millisegundo|#{num} millisegundos","1#1 second|#{num} seconds":"1#{num} segundo|#{num} segundos","1#1 minute|#{num} minutes":"1#{num} minuto|#{num} minutos","1#1 hour|#{num} hours":"1#{num} hora|#{num} horas","1#1 day|#{num} days":"1#{num} dÃ­a|#{num} dÃ­as","1#1 week|#{num} weeks":"1#{num} semana|#{num} semanas","1#1 month|#{num} months":"1#{num} mes|#{num} meses","1#1 year|#{num} years":"1#{num} aÃ±o|#{num} aÃ±os","{duration} ago":"hace {duration}","in {duration}":"en {duration}","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" y "};
ilib.data.sysres_es_AR = {};
ilib.data.sysres_es_ES = {"E3":"X","in {duration}":"dentro de {duration}"};
ilib.data.sysres_es_MX = {};
ilib.data.sysres_id = {"NN5":"Me","NN8":"Ag","NN10":"Ok","MMM5":"Mei","MMM8":"Agt","MMM10":"Okt","MMM12":"Des","MMMM1":"Januari","MMMM2":"Februari","MMMM3":"Maret","MMMM5":"Mei","MMMM6":"Juni","MMMM7":"Juli","MMMM8":"Agustus","MMMM10":"Oktober","MMMM12":"Desember","E0":"M","E1":"S","E2":"S","E3":"R","E4":"K","E5":"J","EE0":"Mi","EE1":"Se","EE2":"Se","EE3":"Ra","EE4":"Ka","EE5":"Ju","EEE0":"Min","EEE1":"Sen","EEE2":"Sel","EEE3":"Rab","EEE4":"Kam","EEE5":"Jum","EEE6":"Sab","EEEE0":"Minggu","EEEE1":"Senin","EEEE2":"Selasa","EEEE3":"Rabu","EEEE4":"Kamis","EEEE5":"Jumat","EEEE6":"Sabtu","a0":"AM","a1":"PM","G-1":"SM","G1":"M","in {duration}":"dalam {duration}","{duration} ago":"{duration} yang lalu","1#1 year|#{num} years":"#{num} tahun","1#1 month|#{num} months":"#{num} bulan","1#1 week|#{num} weeks":"#{num} minggu","1#1 day|#{num} days":"#{num} hari","1#1 hour|#{num} hours":"#{num} jam","1#1 minute|#{num} minutes":"#{num} menit","1#1 second|#{num} seconds":"#{num} detik","1#1 yr|#{num} yrs":"#{num} thn","1#1 mon|#{num} mons":"#{num} bln","1#1 wk|#{num} wks":"#{num} mggu","durationLongDays":"#{num} hari","1#1 hr|#{num} hrs":"#{num} jam","1#1 min|#{num} min":"#{num} mnt","1#1 sec|#{num} sec":"#{num} dtk","durationMediumYears":"#{num} th","1#1 mo|#{num} mos":"#{num} bl","durationMediumWeeks":"#{num} mg","1#1 dy|#{num} dys":"#{num} hr","durationMediumHours":"#{num} ja","1#1 mi|#{num} min":"#{num} mn","1#1 se|#{num} sec":"#{num} dt","#{num}y":"#{num}t","durationShortMonths":"#{num}b","#{num}w":"#{num}m","#{num}d":"#{num}h","#{num}h":"#{num}j","durationShortMinutes":"#{num}m","#{num}s":"#{num}d","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":", dan ","durationShortMillis":"#{num}m"};
ilib.data.sysres_id_ID = {};
ilib.data.sysres_it = {"MMMM1":"gennaio","MMM1":"gen","NN1":"ge","N1":"G","MMMM2":"febbraio","MMM2":"feb","NN2":"fe","MMMM3":"marzo","MMM3":"mar","NN3":"ma","MMMM4":"aprile","MMM4":"apr","NN4":"ap","MMMM5":"maggio","MMM5":"mag","NN5":"ma","MMMM6":"giugno","MMM6":"giu","NN6":"gi","N6":"G","MMMM7":"luglio","MMM7":"lug","NN7":"lu","N7":"L","MMMM8":"agosto","MMM8":"ago","NN8":"ag","MMMM9":"settembre","MMM9":"set","NN9":"se","MMMM10":"ottobre","MMM10":"ott","NN10":"ot","MMMM11":"novembre","MMM11":"nov","NN11":"no","MMMM12":"dicembre","MMM12":"dic","NN12":"di","EEEE0":"domenica","EEE0":"dom","EE0":"do","E0":"D","EEEE1":"lunedÃ¬","EEE1":"lun","EE1":"lu","E1":"L","EEEE2":"martedÃ¬","EEE2":"mar","EE2":"ma","E2":"M","EEEE3":"mercoledÃ¬","EEE3":"mer","EE3":"me","E3":"M","EEEE4":"giovedÃ¬","EEE4":"gio","EE4":"gi","E4":"G","EEEE5":"venerdÃ¬","EEE5":"ven","EE5":"ve","E5":"V","EEEE6":"sabato","EEE6":"sab","EE6":"sa","ordinalChoice":"#{num} Âº","a0":"AM","a1":"PM","G-1":"aC","G1":"dC","durationShortMillis":"#{num}ms","#{num}s":"#{num}s","durationShortMinutes":"#{num}m","#{num}h":"#{num}o","#{num}d":"#{num}g","#{num}w":"#{num}st","durationShortMonths":"#{num}me","#{num}y":"#{num}a","#{num} ms":"#{num} ms","1#1 se|#{num} sec":"#{num} se","1#1 mi|#{num} min":"#{num} mn","durationMediumHours":"#{num} h","1#1 dy|#{num} dys":"1#{num} g|#{num} gg","durationMediumWeeks":"#{num} set","1#1 mo|#{num} mos":"#{num} me","durationMediumYears":"#{num} an","1#1 sec|#{num} sec":"#{num} sec","1#1 min|#{num} min":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","durationLongDays":"1#{num} g|#{num} gg","1#1 wk|#{num} wks":"#{num} sett","1#1 mon|#{num} mons":"1#{num} mese|#{num} mesi","1#1 yr|#{num} yrs":"1#{num} anno|#{num} anni","1#1 millisecond|#{num} milliseconds":"1#{num} millisecondo|#{num} millisecondi","1#1 second|#{num} seconds":"1#{num} secondo|#{num} secondi","1#1 minute|#{num} minutes":"1#{num} minuto|#{num} minuti","1#1 hour|#{num} hours":"1#{num} ora|#{num} ore","1#1 day|#{num} days":"1#{num} giorno|#{num} giorni","1#1 week|#{num} weeks":"1#{num} settimana|#{num} settimane","1#1 month|#{num} months":"1#{num} mese|#{num} mesi","1#1 year|#{num} years":"1#{num} anno|#{num} anni","in {duration}":"tra {duration}","{duration} ago":"{duration} fa","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":", e "};
ilib.data.sysres_it_IT = {};
ilib.data.sysres_ja = {"MMMM1":"1","MMM1":"1","NN1":"1","N1":"ä¸","MMMM2":"2","MMM2":"2","NN2":"2","N2":"äº","MMMM3":"3","MMM3":"3","NN3":"3","N3":"ä¸","MMMM4":"4","MMM4":"4","NN4":"4","N4":"å","MMMM5":"5","MMM5":"5","NN5":"5","N5":"äº","MMMM6":"6","MMM6":"6","NN6":"6","N6":"å­","MMMM7":"7","MMM7":"7","NN7":"7","N7":"ä¸","MMMM8":"8","MMM8":"8","NN8":"8","N8":"å«","MMMM9":"9","MMM9":"9","NN9":"9","N9":"ä¹","MMMM10":"10","MMM10":"10","NN10":"10","N10":"å","MMMM11":"11","MMM11":"11","NN11":"11","N11":"åä¸","MMMM12":"12","MMM12":"12","NN12":"12","N12":"åäº","EEEE0":"æ¥ææ¥","EEE0":"æ¥ææ¥","EE0":"æ¥","E0":"æ¥","EEEE1":"æææ¥","EEE1":"æææ¥","EE1":"æ","E1":"æ","EEEE2":"ç«ææ¥","EEE2":"ç«ææ¥","EE2":"ç«","E2":"ç«","EEEE3":"æ°´ææ¥","EEE3":"æ°´ææ¥","EE3":"æ°´","E3":"æ°´","EEEE4":"æ¨ææ¥","EEE4":"æ¨ææ¥","EE4":"æ¨","E4":"æ¨","EEEE5":"éææ¥","EEE5":"éææ¥","EE5":"é","E5":"é","EEEE6":"åææ¥","EEE6":"åææ¥","EE6":"å","E6":"å","ordinalChoice":"#{num}","a0":"åå","a1":"åå¾","G-1":"ç´åå","G1":"ç´å","durationShortMillis":"#{num}ããªç§","#{num}s":"#{num}ç§","durationShortMinutes":"#{num}å","#{num}h":"#{num}æé","#{num}d":"#{num}æ¥","#{num}w":"#{num}é±é","durationShortMonths":"#{num}ã¶æ","#{num}y":"#{num}å¹´","#{num} ms":"#{num}ããªç§","1#1 se|#{num} sec":"#{num}ç§","1#1 mi|#{num} min":"#{num}å","durationMediumHours":"#{num}æé","1#1 dy|#{num} dys":"#{num}æ¥","durationMediumWeeks":"#{num}é±é","1#1 mo|#{num} mos":"#{num}ã¶æ","durationMediumYears":"#{num}å¹´","1#1 sec|#{num} sec":"#{num}ç§","1#1 min|#{num} min":"#{num}å","1#1 hr|#{num} hrs":"#{num}æé","durationLongDays":"#{num}æ¥","1#1 wk|#{num} wks":"#{num}é±é","1#1 mon|#{num} mons":"#{num}ã¶æ","1#1 yr|#{num} yrs":"#{num}å¹´","1#1 millisecond|#{num} milliseconds":"#{num}ããªç§","1#1 second|#{num} seconds":"#{num}ç§","1#1 minute|#{num} minutes":"#{num}å","1#1 hour|#{num} hours":"#{num}æé","1#1 day|#{num} days":"#{num}æ¥","1#1 week|#{num} weeks":"#{num}é±é","1#1 month|#{num} months":"#{num}ã¶æ","1#1 year|#{num} years":"#{num}å¹´","{duration} ago":"{duration}å","in {duration}":"{duration}ã§","separatorShort":"","separatorMedium":"","separatorLong":"ã","separatorFull":"ã","finalSeparatorFull":"ã"};
ilib.data.sysres_ja_JP = {};
ilib.data.sysres_ko = {"MMMM1":"ì¼","MMM1":"1","NN1":"1","N1":"1","MMMM2":"ì´","MMM2":"2","NN2":"2","N2":"2","MMMM3":"ì¼","MMM3":"3","NN3":"3","N3":"3","MMMM4":"ì¬","MMM4":"4","NN4":"4","N4":"4","MMMM5":"ì¤","MMM5":"5","NN5":"5","N5":"5","MMMM6":"ì ","MMM6":"6","NN6":"6","N6":"6","MMMM7":"ì¹ ","MMM7":"7","NN7":"7","N7":"7","MMMM8":"í","MMM8":"8","NN8":"8","N8":"8","MMMM9":"êµ¬","MMM9":"9","NN9":"9","N9":"9","MMMM10":"ì","MMM10":"10","NN10":"10","N10":"1O","MMMM11":"ì­ì¼","MMM11":"11","NN11":"11","N11":"11","MMMM12":"ì­ì´","MMM12":"12","NN12":"12","N12":"12","EEEE0":"ì¼ìì¼","EEE0":"ì¼ìì¼","EE0":"ì¼","E0":"ì¼","EEEE1":"ììì¼","EEE1":"ììì¼","EE1":"ì","E1":"ì","EEEE2":"íìì¼","EEE2":"íìì¼","EE2":"í","E2":"í","EEEE3":"ììì¼","EEE3":"ììì¼","EE3":"ì","E3":"ì","EEEE4":"ëª©ìì¼","EEE4":"ëª©ìì¼","EE4":"ëª©","E4":"ëª©","EEEE5":"ê¸ìì¼","EEE5":"ê¸ìì¼","EE5":"ê¸","E5":"ê¸","EEEE6":"í ìì¼","EEE6":"í ìì¼","EE6":"í ","E6":"í ","ordinalChoice":"#{num}","a0":"ì¤ì ","a1":"ì¤í","G-1":"ê¸°ìì ","G1":"ìê¸°","durationShortMillis":"#{num}ë¦¬ì´","#{num}s":"#{num}ì´","durationShortMinutes":"#{num}ë¶","#{num}h":"#{num}ì","#{num}d":"#{num}ì¼","#{num}w":"#{num}ì£¼","durationShortMonths":"#{num}ê°","#{num}y":"#{num}ë","#{num} ms":"#{num}ë¦¬ì´","1#1 se|#{num} sec":"#{num}ì´","1#1 mi|#{num} min":"#{num}ë¶","durationMediumHours":"#{num}ìê°","1#1 dy|#{num} dys":"#{num}ì¼","durationMediumWeeks":"#{num}ì£¼","1#1 mo|#{num} mos":"#{num}ê°ì","durationMediumYears":"#{num}ë","1#1 sec|#{num} sec":"#{num}ì´","1#1 min|#{num} min":"#{num}ë¶","1#1 hr|#{num} hrs":"#{num}ìê°","durationLongDays":"#{num}ì¼","1#1 wk|#{num} wks":"#{num}ì£¼","1#1 mon|#{num} mons":"#{num}ê°ì","1#1 yr|#{num} yrs":"#{num}ë","1#1 millisecond|#{num} milliseconds":"#{num}ë°ë¦¬ì´","1#1 second|#{num} seconds":"#{num}ì´","1#1 minute|#{num} minutes":"#{num}ë¶","1#1 hour|#{num} hours":"#{num}ìê°","1#1 day|#{num} days":"#{num}ì¼","1#1 week|#{num} weeks":"#{num}ì£¼","1#1 month|#{num} months":"#{num}ê°ì","1#1 year|#{num} years":"#{num}ë","{duration} ago":"{duration}ì ","in {duration}":"{duration}ì","separatorShort":" ","separatorMedium":" ","separatorLong":", ","separatorFull":", ","finalSeparatorFull":" ë° "};
ilib.data.sysres_ko_KR = {};
ilib.data.sysres_pt = {"MMMM1":"Janeiro","MMM1":"Jan","NN1":"Ja","MMMM2":"Fevereiro","MMM2":"Fev","NN2":"Fe","MMMM3":"MarÃ§o","MMM3":"Mar","NN3":"Ma","MMMM4":"Abril","MMM4":"Abr","NN4":"Ab","MMMM5":"Maio","MMM5":"Mai","NN5":"Ma","MMMM6":"Junho","MMM6":"Jun","NN6":"Ju","MMMM7":"Julho","MMM7":"Jul","NN7":"Ju","MMMM8":"Agosto","MMM8":"Ago","NN8":"Ag","MMMM9":"Setembro","MMM9":"Set","NN9":"Se","MMMM10":"Outubro","MMM10":"Out","NN10":"Ou","MMMM11":"Novembro","MMM11":"Nov","NN11":"No","MMMM12":"Dezembro","MMM12":"Dez","NN12":"De","EEEE0":"domingo","EEE0":"dom","EE0":"do","E0":"D","EEEE1":"segunda-feira","EEE1":"seg","EE1":"sg","E1":"S","EEEE2":"terÃ§a-feira","EEE2":"ter","EE2":"te","EEEE3":"quarta-feira","EEE3":"qua","EE3":"qu","E3":"Q","EEEE4":"quinta-feira","EEE4":"qui","EE4":"qi","E4":"Q","EEEE5":"sexta-feira","EEE5":"sex","EE5":"sx","E5":"S","EEEE6":"sÃ¡bado","EEE6":"sÃ¡b","EE6":"sb","ordinalChoice":"#{num}","a0":"AM","a1":"PM","G-1":"a.C.","G1":"d.C.","durationShortMillis":"#{num}ms","#{num}s":"#{num}s","durationShortMinutes":"#{num}m","#{num}h":"#{num}h","#{num}d":"#{num}d","#{num}w":"#{num}sm","durationShortMonths":"#{num}me","#{num}y":"#{num}a","#{num} ms":"#{num} ms","1#1 se|#{num} sec":"1#{num} sg|#{num} sgs","1#1 mi|#{num} min":"1#{num} mn|#{num} mns","durationMediumHours":"1#{num} hr|#{num} hrs","1#1 dy|#{num} dys":"1#{num} di|#{num} dis","durationMediumWeeks":"1#{num} sm|#{num} sms","1#1 mo|#{num} mos":"1#{num} mÃª|#{num} mes","durationMediumYears":"1#{num} an|#{num} ans","1#1 sec|#{num} sec":"1#{num} seg|#{num} segs","1#1 min|#{num} min":"1#{num} min|#{num} mins","1#1 hr|#{num} hrs":"1#{num} hor|#{num} hors","durationLongDays":"1#{num} dia|#{num} dias","1#1 wk|#{num} wks":"1#{num} sem|#{num} sems","1#1 mon|#{num} mons":"1#{num} mÃªs|#{num} mss","1#1 yr|#{num} yrs":"1#{num} ano|#{num} anos","1#1 millisecond|#{num} milliseconds":"1#{num} millisegundo|#{num} millisegundos","1#1 second|#{num} seconds":"1#{num} segundo|#{num} segundos","1#1 minute|#{num} minutes":"1#{num} minuto|#{num} minutos","1#1 hour|#{num} hours":"1#{num} hora|#{num} horas","1#1 day|#{num} days":"1#{num} dia|#{num} dias","1#1 week|#{num} weeks":"1#{num} semana|#{num} semanas","1#1 month|#{num} months":"1#{num} mÃªs|#{num} meses","1#1 year|#{num} years":"1#{num} ano|#{num} anos","{duration} ago":"hÃ¡ {duration}","in {duration}":"dentro de {duration}","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" e "};
ilib.data.sysres_pt_BR = {"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ab","NN5":"ma","NN6":"ju","NN7":"ju","NN8":"ag","NN9":"se","NN10":"ou","NN11":"no","NN12":"de","MMM1":"jan","MMM2":"fev","MMM3":"mar","MMM4":"abr","MMM5":"mai","MMM6":"jun","MMM7":"jul","MMM8":"ago","MMM9":"set","MMM10":"out","MMM11":"nov","MMM12":"dez","MMMM1":"janeiro","MMMM2":"fevereiro","MMMM3":"marÃ§o","MMMM4":"abril","MMMM5":"maio","MMMM6":"junho","MMMM7":"julho","MMMM8":"agosto","MMMM9":"setembro","MMMM10":"outubro","MMMM11":"novembro","MMMM12":"dezembro","EE1":"se","EE4":"qu","EE5":"se","EE6":"sÃ¡"};
ilib.data.sysres_ru = {"N1":"Ð¯","N2":"Ð¤","N3":"Ð","N4":"Ð","N5":"Ð","N6":"Ð","N7":"Ð","N8":"Ð","N9":"Ð¡","N10":"Ð","N11":"Ð","N12":"Ð","NN1":"ÑÐ½","NN2":"ÑÐµ","NN3":"Ð¼Ð°","NN4":"Ð°Ð¿","NN5":"Ð¼Ð°","NN6":"Ð¸Ñ","NN7":"Ð¸Ñ","NN8":"Ð°Ð²","NN9":"ÑÐµ","NN10":"Ð¾Ðº","NN11":"Ð½Ð¾","NN12":"Ð´Ðµ","MMM1":"ÑÐ½Ð².","MMM2":"ÑÐµÐ²Ñ.","MMM3":"Ð¼Ð°ÑÑÐ°","MMM4":"Ð°Ð¿Ñ.","MMM5":"Ð¼Ð°Ñ","MMM6":"Ð¸ÑÐ½Ñ","MMM7":"Ð¸ÑÐ»Ñ","MMM8":"Ð°Ð²Ð³.","MMM9":"ÑÐµÐ½Ñ.","MMM10":"Ð¾ÐºÑ.","MMM11":"Ð½Ð¾ÑÐ±.","MMM12":"Ð´ÐµÐº","MMMM1":"ÑÐ½Ð²Ð°ÑÑ","MMMM2":"ÑÐµÐ²ÑÐ°Ð»Ñ","MMMM3":"Ð¼Ð°ÑÑÐ°","MMMM4":"Ð°Ð¿ÑÐµÐ»Ñ","MMMM5":"Ð¼Ð°Ñ","MMMM6":"Ð¸ÑÐ½Ñ","MMMM7":"Ð¸ÑÐ»Ñ","MMMM8":"Ð°Ð²Ð³ÑÑÑÐ°","MMMM9":"ÑÐµÐ½ÑÑÐ±ÑÑ","MMMM10":"Ð¾ÐºÑÑÐ±ÑÑ","MMMM11":"Ð½Ð¾ÑÐ±ÑÑ","MMMM12":"Ð´ÐµÐºÐ°Ð±ÑÑ","E0":"Ð","E1":"Ð","E2":"Ð","E3":"Ð¡","E4":"Ð§","E5":"Ð","E6":"Ð¡","EE0":"Ð²Ñ","EE1":"Ð¿Ð½","EE2":"Ð²Ñ","EE3":"ÑÑ","EE4":"ÑÑ","EE5":"Ð¿Ñ","EE6":"ÑÐ±","EEE0":"Ð²Ñ","EEE1":"Ð¿Ð½","EEE2":"Ð²Ñ","EEE3":"ÑÑ","EEE4":"ÑÑ","EEE5":"Ð¿Ñ","EEE6":"ÑÐ±","EEEE0":"Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ","EEEE1":"Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº","EEEE2":"Ð²ÑÐ¾ÑÐ½Ð¸Ðº","EEEE3":"ÑÑÐµÐ´Ð°","EEEE4":"ÑÐµÑÐ²ÐµÑÐ³","EEEE5":"Ð¿ÑÑÐ½Ð¸ÑÐ°","EEEE6":"ÑÑÐ±Ð±Ð¾ÑÐ°","a0":"Ð´Ð¾ Ð¿Ð¾Ð»ÑÐ´Ð½Ñ","a1":"Ð¿Ð¾ÑÐ»Ðµ Ð¿Ð¾Ð»ÑÐ´Ð½Ñ","G-1":"Ð´Ð¾ Ð½.Ñ.","G1":"Ð½.Ñ.","in {duration}":"ÑÐµÑÐµÐ· {duration}","{duration} ago":"{duration} Ð½Ð°Ð·Ð°Ð´","1#1 year|#{num} years":"one#{num} Ð³Ð¾Ð´|many#{num} Ð»ÐµÑ|#{num} Ð³Ð¾Ð´Ð°","1#1 month|#{num} months":"one#{num} Ð¼ÐµÑÑÑ|many#{num} Ð¼ÐµÑÑÑÐµÐ²|#{num} Ð¼ÐµÑÑÑÐ°","1#1 week|#{num} weeks":"one#{num} Ð½ÐµÐ´ÐµÐ»Ñ|many#{num} Ð½ÐµÐ´ÐµÐ»Ñ|#{num} Ð½ÐµÐ´ÐµÐ»Ð¸","1#1 day|#{num} days":"one#{num} Ð´ÐµÐ½Ñ|many#{num} Ð´Ð½ÐµÐ¹|#{num} Ð´Ð½Ñ","1#1 hour|#{num} hours":"one#{num} ÑÐ°Ñ|many#{num} ÑÐ°ÑÐ¾Ð²|#{num} ÑÐ°ÑÐ°","1#1 minute|#{num} minutes":"one#{num} Ð¼Ð¸Ð½ÑÑÐ°|many#{num} Ð¼Ð¸Ð½ÑÑ|#{num} Ð¼Ð¸Ð½ÑÑÑ","1#1 second|#{num} seconds":"one#{num} ÑÐµÐºÑÐ½Ð´Ð°|many#{num} ÑÐµÐºÑÐ½Ð´|#{num} ÑÐµÐºÑÐ½Ð´Ñ","1#1 yr|#{num} yrs":"one#{num} Ð³Ð¾Ð´|many#{num} Ð»ÐµÑ|#{num} Ð³Ð¾Ð´Ð°","1#1 mon|#{num} mons":"#{num} Ð¼ÐµÑ","1#1 wk|#{num} wks":"#{num} Ð½ÐµÐ´","durationLongDays":"one#{num} Ð´ÐµÐ½Ñ|many#{num} Ð´Ð½ÐµÐ¹|#{num} Ð´Ð½Ñ","1#1 hr|#{num} hrs":"one#{num} ÑÐ°Ñ|many#{num} ÑÐ°Ñ|#{num} ÑÐ°ÑÐ°","1#1 min|#{num} min":"#{num} Ð¼Ð¸Ð½","1#1 sec|#{num} sec":"#{num} ÑÐµÐº","durationMediumYears":"#{num} Ð³","1#1 mo|#{num} mos":"#{num} Ð¼Ðµ","durationMediumWeeks":"#{num} Ð½Ðµ","1#1 dy|#{num} dys":"#{num} Ð´Ð½","durationMediumHours":"#{num} Ñ","1#1 mi|#{num} min":"#{num} Ð¼Ð¸","1#1 se|#{num} sec":"#{num} ÑÐµ","#{num}y":"#{num}Ð³","durationShortMonths":"#{num}Ð¼","#{num}w":"#{num}Ð½","#{num}d":"#{num}Ð´","#{num}h":"#{num}Ñ","durationShortMinutes":"#{num}Ð¼","#{num}s":"#{num}Ñ","durationShortMillis":"#{num}Ð¼Ñ","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" Ð¸ "};
ilib.data.sysres_ru_RU = {};
ilib.data.sysres_tr = {"N1":"O","N2":"Å","N4":"N","N6":"H","N7":"T","N9":"E","N10":"E","N11":"K","N12":"A","NN1":"oc","NN2":"Åu","NN3":"ma","NN4":"ni","NN5":"ma","NN6":"ha","NN7":"te","NN8":"aÄ","NN9":"ey","NN10":"ek","NN11":"ka","NN12":"ar","MMM1":"oca","MMM2":"Åub","MMM3":"mar","MMM4":"nis","MMM5":"may","MMM6":"haz","MMM7":"tem","MMM8":"aÄu","MMM9":"eyl","MMM10":"eki","MMM11":"kas","MMM12":"ara","MMMM1":"ocak","MMMM2":"Åubat","MMMM3":"mart","MMMM4":"nisan","MMMM5":"mayÄ±s","MMMM6":"haziran","MMMM7":"temmuz","MMMM8":"aÄustos","MMMM9":"eylÃ¼l","MMMM10":"ekim","MMMM11":"kasÄ±m","MMMM12":"aralÄ±k","E0":"P","E1":"P","E2":"S","E3":"Ã","E4":"P","E5":"C","E6":"C","EE0":"Pa","EE1":"Pt","EE2":"Sa","EE3":"Ãa","EE4":"Pe","EE5":"Cu","EE6":"Ct","EEE0":"Paz","EEE1":"Pzt","EEE2":"Sal","EEE3":"Ãar","EEE4":"Per","EEE5":"Cum","EEE6":"Cmt","EEEE0":"Pazar","EEEE1":"Pazartesi","EEEE2":"SalÄ±","EEEE3":"ÃarÅamba","EEEE4":"PerÅembe","EEEE5":"Cuma","EEEE6":"Cumartesi","a0":"ÃÃ","a1":"ÃS","G-1":"MÃ","G1":"MS","in {duration}":"{duration} sonra","{duration} ago":"{duration} Ã¶nce","1#1 year|#{num} years":"#{num} yÄ±l","1#1 month|#{num} months":"#{num} ay","1#1 week|#{num} weeks":"#{num} hafta","1#1 day|#{num} days":"#{num} gÃ¼n","1#1 hour|#{num} hours":"#{num} saat","1#1 minute|#{num} minutes":"#{num} dakika","1#1 second|#{num} seconds":"#{num} saniye","1#1 yr|#{num} yrs":"#{num} yÄ±l","1#1 mon|#{num} mons":"#{num} ay","1#1 wk|#{num} wks":"#{num} haf","durationLongDays":"#{num} gÃ¼n","1#1 hr|#{num} hrs":"#{num} saat","1#1 min|#{num} min":"#{num} dak","1#1 sec|#{num} sec":"#{num} san","durationMediumYears":"#{num} yÄ±l","1#1 mo|#{num} mos":"#{num} ay","durationMediumWeeks":"#{num} hf","1#1 dy|#{num} dys":"#{num} gÃ¼n","durationMediumHours":"#{num} sa","1#1 mi|#{num} min":"#{num} dk","1#1 se|#{num} sec":"#{num} sn","#{num}y":"#{num}y","durationShortMonths":"#{num}a","#{num}w":"#{num}h","#{num}d":"#{num}g","#{num}h":"#{num}s","durationShortMinutes":"#{num}d","#{num}s":"#{num}s","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" ve ","#{num} ms":"#{num} ms","1#1 millisecond|#{num} milliseconds":"#{num} milisaniye"};
ilib.data.sysres_tr_TR = {};
ilib.data.sysres_vi = {"N1":"1","N2":"2","N3":"3","N4":"4","N5":"5","N6":"6","N7":"7","N8":"8","N9":"9","N10":"10","N11":"11","N12":"12","NN1":"1","NN2":"2","NN3":"3","NN4":"4","NN5":"5","NN6":"6","NN7":"7","NN8":"8","NN9":"9","NN10":"10","NN11":"11","NN12":"12","MMM1":"th.1","MMM2":"th.2","MMM3":"th.3","MMM4":"th.4","MMM5":"th.5","MMM6":"th.6","MMM7":"th.7","MMM8":"th.8","MMM9":"th.9","MMM10":"th.10","MMM11":"th.11","MMM12":"th.12","MMMM1":"thÃ¡ng má»t","MMMM2":"thÃ¡ng hai","MMMM3":"thÃ¡ng ba","MMMM4":"thÃ¡ng tÆ°","MMMM5":"thÃ¡ng nÄm","MMMM6":"thÃ¡ng sÃ¡u","MMMM7":"thÃ¡ng báº£y","MMMM8":"thÃ¡ng tÃ¡m","MMMM9":"thÃ¡ng chÃ­n","MMMM10":"thÃ¡ng mÆ°á»i","MMMM11":"thÃ¡ng mÆ°á»i má»t","MMMM12":"thÃ¡ng mÆ°á»i hai","E0":"cn","E1":"t2","E2":"t3","E3":"t4","E4":"t5","E5":"t6","E6":"t7","EE0":"cn","EE1":"t2","EE2":"t3","EE3":"t4","EE4":"t5","EE5":"t6","EE6":"t7","EEE0":"cnh","EEE1":"hai","EEE2":"ba","EEE3":"tÆ°","EEE4":"nÄm","EEE5":"sÃ¡u","EEE6":"báº£y","EEEE0":"chá»§ nháº­t","EEEE1":"thá»© hai","EEEE2":"thá»© ba","EEEE3":"thá»© tÆ°","EEEE4":"thá»© nÄm","EEEE5":"thá»© sÃ¡u","EEEE6":"thá»© báº£y","a0":"SA","a1":"CH","G-1":"tr. CN","G1":"sau CN","in {duration}":"trong {duration}","{duration} ago":"{duration} trÆ°á»c","1#1 year|#{num} years":"#{num} nÄm","1#1 month|#{num} months":"#{num} thÃ¡ng","1#1 week|#{num} weeks":"#{num} tuáº§n","1#1 day|#{num} days":"#{num} ngÃ y","1#1 hour|#{num} hours":"#{num} giá»","1#1 minute|#{num} minutes":"#{num} phÃºt","1#1 second|#{num} seconds":"#{num} giÃ¢y","1#1 yr|#{num} yrs":"#{num} nÄm","1#1 mon|#{num} mons":"#{num} thÃ¡","1#1 wk|#{num} wks":"#{num} tuáº§n","durationLongDays":"#{num} ngÃ y","1#1 hr|#{num} hrs":"#{num} giá»","1#1 min|#{num} min":"#{num} phÃºt","1#1 sec|#{num} sec":"#{num} giÃ¢y","durationMediumYears":"#{num} nÄm","1#1 mo|#{num} mos":"#{num} th","durationMediumWeeks":"#{num} tu","1#1 dy|#{num} dys":"#{num} ng","durationMediumHours":"#{num} giá»","1#1 mi|#{num} min":"#{num} ph","1#1 se|#{num} sec":"#{num} gi","#{num}y":"#{num}n","durationShortMonths":"#{num}t","#{num}w":"#{num}t","#{num}d":"#{num}n","#{num}h":"#{num}g","durationShortMinutes":"#{num}p","#{num}s":"#{num}g","separatorShort":" ","separatorMedium":" ","separatorLong":", ","separatorFull":", ","finalSeparatorFull":" vÃ  "};
ilib.data.sysres_vi_VN = {};
ilib.data.sysres_zh = {"MMMM1":"1","MMM1":"1","NN1":"01","N1":"1","MMMM2":"2","MMM2":"2","NN2":"02","N2":"2","MMMM3":"3","MMM3":"3","NN3":"03","N3":"3","MMMM4":"4","MMM4":"4","NN4":"04","N4":"4","MMMM5":"5","MMM5":"5","NN5":"05","N5":"5","MMMM6":"6","MMM6":"6","NN6":"06","N6":"6","MMMM7":"7","MMM7":"7","NN7":"07","N7":"7","MMMM8":"8","MMM8":"8","NN8":"08","N8":"8","MMMM9":"9","MMM9":"9","NN9":"09","N9":"9","MMMM10":"10","MMM10":"10","NN10":"10","N10":"1O","MMMM11":"11","MMM11":"11","NN11":"11","N11":"11","MMMM12":"12","MMM12":"12","NN12":"12","N12":"12","EEEE0":"æææ¥","EEE0":"å¨æ¥","EE0":"å¨æ¥","E0":"æ¥","EEEE1":"ææä¸","EEE1":"å¨ä¸","EE1":"å¨ä¸","E1":"ä¸","EEEE2":"ææäº","EEE2":"å¨äº","EE2":"å¨äº","E2":"äº","EEEE3":"ææä¸","EEE3":"å¨ä¸","EE3":"å¨ä¸","E3":"ä¸","EEEE4":"ææå","EEE4":"å¨å","EE4":"å¨å","E4":"å","EEEE5":"ææäº","EEE5":"å¨äº","EE5":"å¨äº","E5":"äº","EEEE6":"ææå­","EEE6":"å¨å­","EE6":"å¨å­","E6":"å­","ordinalChoice":"#{num}å¤©","azh0":"åæ¨","azh1":"æ©ä¸","azh2":"ä¸å","azh3":"ä¸­å","azh4":"ä¸å","azh5":"åæ","azh6":"æä¸","G-1":"å¬åå","G1":"å¬å","durationShortMillis":"#{num}æ¯«ç§","#{num}s":"#{num}ç§","durationShortMinutes":"#{num}åé","#{num}h":"#{num}å°æ¶","#{num}d":"#{num}å¤©","#{num}w":"#{num}å¨","durationShortMonths":"#{num}ä¸ªæ","#{num}y":"#{num}å¹´","#{num} ms":"#{num}æ¯«ç§","1#1 se|#{num} sec":"#{num}ç§","1#1 mi|#{num} min":"#{num}åé","durationMediumHours":"#{num}å°æ¶","1#1 dy|#{num} dys":"#{num}å¤©","durationMediumWeeks":"#{num}å¨","1#1 mo|#{num} mos":"#{num}ä¸ªæ","durationMediumYears":"#{num}å¹´","1#1 sec|#{num} sec":"#{num}ç§","1#1 min|#{num} min":"#{num}åé","1#1 hr|#{num} hrs":"#{num}å°æ¶","durationLongDays":"#{num}å¤©","1#1 wk|#{num} wks":"#{num}å¨","1#1 mon|#{num} mons":"#{num}ä¸ªæ","1#1 yr|#{num} yrs":"#{num}å¹´","1#1 millisecond|#{num} milliseconds":"#{num}æ¯«ç§","1#1 second|#{num} seconds":"#{num}ç§","1#1 minute|#{num} minutes":"#{num}åé","1#1 hour|#{num} hours":"#{num}å°æ¶","1#1 day|#{num} days":"#{num}å¤©","1#1 week|#{num} weeks":"#{num}å¨","1#1 month|#{num} months":"#{num}ä¸ªæ","1#1 year|#{num} years":"#{num}å¹´","{duration} ago":"{duration}å","in {duration}":"{duration}å","separatorShort":"","separatorMedium":"","separatorLong":"ã","separatorFull":"ã","finalSeparatorFull":"å"};
ilib.data.sysres_zh_HK = {"EEE0":"é±æ¥","EE0":"é±æ¥","E0":"é±æ¥","EEE1":"é±ä¸","EE1":"é±ä¸","E1":"é±ä¸","EEE2":"é±äº","EE2":"é±äº","E2":"é±äº","EEE3":"é±ä¸","EE3":"é±ä¸","E3":"é±ä¸","EEE4":"é±å","EE4":"é±å","E4":"é±å","EEE5":"é±äº","EE5":"é±äº","E5":"é±äº","EEE6":"é±å­","EE6":"é±å­","E6":"é±å­","azh3":"æ­£å","durationShortMinutes":"#{num}åé","#{num}h":"#{num}å°æ","#{num}w":"#{num}é±","durationShortMonths":"#{num}åæ","1#1 mi|#{num} min":"#{num}åé","durationMediumHours":"#{num}å°æ","1#1 wk|#{num} wks":"#{num}é±","1#1 mo|#{num} mos":"#{num}åæ","1#1 min|#{num} min":"#{num}åé","1#1 hr|#{num} hrs":"#{num}å°æ","1#1 mon|#{num} mons":"#{num}åæ","1#1 minute|#{num} minutes":"#{num}åé","1#1 hour|#{num} hours":"#{num}å°æ","1#1 week|#{num} weeks":"#{num}é±","1#1 month|#{num} months":"#{num}åæ"};
ilib.data.sysres_zh_TW = {"EEE0":"é±æ¥","EE0":"é±æ¥","E0":"é±æ¥","EEE1":"é±ä¸","EE1":"é±ä¸","E1":"é±ä¸","EEE2":"é±äº","EE2":"é±äº","E2":"é±äº","EEE3":"é±ä¸","EE3":"é±ä¸","E3":"é±ä¸","EEE4":"é±å","EE4":"é±å","E4":"é±å","EEE5":"é±äº","EE5":"é±äº","E5":"é±äº","EEE6":"é±å­","EE6":"é±å­","E6":"é±å­","azh3":"æ­£å","durationShortMinutes":"#{num}åé","#{num}h":"#{num}å°æ","#{num}w":"#{num}é±","durationShortMonths":"#{num}åæ","1#1 mi|#{num} min":"#{num}åé","durationMediumHours":"#{num}å°æ","1#1 wk|#{num} wks":"#{num}é±","1#1 mo|#{num} mos":"#{num}åæ","1#1 min|#{num} min":"#{num}åé","1#1 hr|#{num} hrs":"#{num}å°æ","1#1 mon|#{num} mons":"#{num}åæ","1#1 minute|#{num} minutes":"#{num}åé","1#1 hour|#{num} hours":"#{num}å°æ","1#1 week|#{num} weeks":"#{num}é±","1#1 month|#{num} months":"#{num}åæ"};
/*
 * datefmt.js - Date formatter definition
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
date.js 
strings.js 
resources.js 
calendar.js
localeinfo.js
timezone.js
calendar/gregorian.js
util/jsutils.js
*/

// !data dateformats sysres

/**
 * @class
 * 
 * Create a new date formatter instance. The date formatter is immutable once
 * it is created, but can format as many different dates as needed with the same
 * options. Create different date formatter instances for different purposes
 * and then keep them cached for use later if you have more than one date to
 * format.<p>
 * 
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when formatting the date/time. If the locale is
 * not specified, then the default locale of the app or web page will be used.
 * 
 * <li><i>calendar</i> - the type of calendar to use for this format. The value should
 * be a sting containing the name of the calendar. Currently, the supported
 * types are "gregorian", "julian", "arabic", "hebrew", or "chinese". If the
 * calendar is not specified, then the default calendar for the locale is used. When the
 * calendar type is specified, then the format method must be called with an instance of
 * the appropriate date type. (eg. Gregorian calendar means that the format method must 
 * be called with a GregDate instance.)
 *  
 * <li><i>timezone</i> - time zone to use when formatting times. This may be a time zone
 * instance or a time zone specifier from the IANA list of time zone database names 
 * (eg. "America/Los_Angeles"), 
 * the string "local", or a string specifying the offset in RFC 822 format. The IANA
 * list of time zone names can be viewed at 
 * <a href="http://en.wikipedia.org/wiki/List_of_tz_database_time_zones">this page</a>.
 * If the time zone is given as "local", the offset from UTC as given by
 * the Javascript system is used. If the offset is given as an RFC 822 style offset
 * specifier, it will parse that string and use the resulting offset. If the time zone
 * is not specified, the
 * default time zone for the locale is used. If both the date object and this formatter
 * instance contain time zones and those time zones are different from each other, the 
 * formatter will calculate the offset between the time zones and subtract it from the 
 * date before formatting the result for the current time zone. The theory is that a date
 * object that contains a time zone specifies a specific instant in time that is valid
 * around the world, whereas a date object without one is a local time and can only be
 * used for doing things in the local time zone of the user.
 * 
 * <li><i>type</i> - Specify whether this formatter should format times only, dates only, or
 * both times and dates together. Valid values are "time", "date", and "datetime". Note that
 * in some locales, the standard format uses the order "time followed by date" and in others, 
 * the order is exactly opposite, so it is better to create a single "datetime" formatter 
 * than it is to create a time formatter and a date formatter separately and concatenate the 
 * results. A "datetime" formatter will get the order correct for the locale.<p>
 * 
 * The default type if none is specified in with the type option is "date".
 * 
 * <li><i>length</i> - Specify the length of the format to use. The length is the approximate size of the 
 * formatted string.
 * 
 * <ul>
 * <li><i>short</i> - use a short representation of the time. This is the most compact format possible for the locale.
 * <li><i>medium</i> - use a medium length representation of the time. This is a slightly longer format.
 * <li><i>long</i> - use a long representation of the time. This is a fully specified format, but some of the textual 
 * components may still be abbreviated
 * <li><i>full</i> - use a full representation of the time. This is a fully specified format where all the textual 
 * components are spelled out completely
 * </ul>
 * 
 * eg. The "short" format for an en_US date may be "MM/dd/yy", whereas the long format might be "d MMM, yyyy". In the long
 * format, the month name is textual instead of numeric and is longer, the year is 4 digits instead of 2, and the format 
 * contains slightly more spaces and formatting characters.<p>
 * 
 * Note that the length parameter does not specify which components are to be formatted. Use the "date" and the "time"
 * properties to specify the components. Also, very few of the components of a time format differ according to the length,
 * so this property has little to no affect on time formatting.
 * 
 * <li><i>date</i> - This property tells
 * which components of a date format to use. For example,
 * sometimes you may wish to format a date that only contains the month and date
 * without the year, such as when displaying a person's yearly birthday. The value
 * of this property allows you to specify only those components you want to see in the
 * final output, ordered correctly for the locale. <p>
 * 
 * Valid values are:
 * 
 * <ul>
 * <li><i>dmwy</i> - format all components, weekday, date, month, and year
 * <li><i>dmy</i> - format only date, month, and year
 * <li><i>dmw</i> - format only weekday, date, and month
 * <li><i>dm</i> - format only date and month
 * <li><i>my</i> - format only month and year
 * <li><i>dw</i> - format only the weekday and date
 * <li><i>d</i> - format only the date
 * <li><i>m</i> - format only the month, in numbers for shorter lengths, and letters for 
 * longer lengths
 * <li><i>n</i> - format only the month, in letters only for all lengths
 * <li><i>y</i> - format only the year
 * </ul>
 * Default components, if this property is not specified, is "dmy". This property may be specified
 * but has no affect if the current formatter is for times only.
 * 
 * <li><i>time</i> - This property gives which components of a time format to use. The time will be formatted 
 * correctly for the locale with only the time components requested. For example, a clock might only display 
 * the hour and minute and not need the seconds or the am/pm component. In this case, the time property should be set 
 * to "hm". <p>
 * 
 * Valid values for this property are:
 * 
 * <ul>
 * <li><i>ahmsz</i> - format the hours, minutes, seconds, am/pm (if using a 12 hour clock), and the time zone
 * <li><i>ahms</i> - format the hours, minutes, seconds, and am/pm (if using a 12 hour clock)
 * <li><i>hmsz</i> - format the hours, minutes, seconds, and the time zone
 * <li><i>hms</i> - format the hours, minutes, and seconds
 * <li><i>ahmz</i> - format the hours, minutes, am/pm (if using a 12 hour clock), and the time zone
 * <li><i>ahm</i> - format the hours, minutes, and am/pm (if using a 12 hour clock)
 * <li><i>hmz</i> - format the hours, minutes, and the time zone
 * <li><i>ah</i> - format only the hours and am/pm if using a 12 hour clock
 * <li><i>hm</i> - format only the hours and minutes
 * <li><i>ms</i> - format only the minutes and seconds
 * <li><i>h</i> - format only the hours
 * <li><i>m</i> - format only the minutes
 * <li><i>s</i> - format only the seconds
 * </ul>
 * 
 * If you want to format a length of time instead of a particular instant
 * in time, use the duration formatter object (ilib.DurFmt) instead because this
 * formatter is geared towards instants. A date formatter will make sure that each component of the 
 * time is within the normal range
 * for that component. That is, the minutes will always be between 0 and 59, no matter
 * what is specified in the date to format. A duration format will allow the number
 * of minutes to exceed 59 if, for example, you were displaying the length of
 * a movie of 198 minutes.<p>
 * 
 * Default value if this property is not specified is "hma".
 * 
 * <li><i>clock</i> - specify that the time formatter should use a 12 or 24 hour clock. 
 * Valid values are "12" and "24".<p>
 * 
 * In some locales, both clocks are used. For example, in en_US, the general populace uses
 * a 12 hour clock with am/pm, but in the US military or in nautical or aeronautical or 
 * scientific writing, it is more common to use a 24 hour clock. This property allows you to
 * construct a formatter that overrides the default for the locale.<p>
 * 
 * If this property is not specified, the default is to use the most widely used convention
 * for the locale.
 *  
 * <li><i>template</i> - use the given template string as a fixed format when formatting 
 * the date/time. Valid codes to use in a template string are as follows:
 * 
 * <ul>
 * <li><i>a</i> - am/pm marker
 * <li><i>d</i> - 1 or 2 digit date of month, not padded
 * <li><i>dd</i> - 1 or 2 digit date of month, 0 padded to 2 digits
 * <li><i>O</i> - ordinal representation of the date of month (eg. "1st", "2nd", etc.)
 * <li><i>D</i> - 1 to 3 digit day of year
 * <li><i>DD</i> - 1 to 3 digit day of year, 0 padded to 2 digits
 * <li><i>DDD</i> - 1 to 3 digit day of year, 0 padded to 3 digits
 * <li><i>M</i> - 1 or 2 digit month number, not padded
 * <li><i>MM</i> - 1 or 2 digit month number, 0 padded to 2 digits
 * <li><i>N</i> - 1 character month name abbreviation
 * <li><i>NN</i> - 2 character month name abbreviation
 * <li><i>MMM</i> - 3 character month month name abbreviation
 * <li><i>MMMM</i> - fully spelled out month name
 * <li><i>yy</i> - 2 digit year
 * <li><i>yyyy</i> - 4 digit year
 * <li><i>E</i> - day-of-week name, abbreviated to a single character
 * <li><i>EE</i> - day-of-week name, abbreviated to a max of 2 characters
 * <li><i>EEE</i> - day-of-week name, abbreviated to a max of 3 characters
 * <li><i>EEEE</i> - day-of-week name fully spelled out 
 * <li><i>G</i> - era designator
 * <li><i>w</i> - week number in year
 * <li><i>ww</i> - week number in year, 0 padded to 2 digits
 * <li><i>W</i> - week in month
 * <li><i>h</i> - hour (1 to 12)
 * <li><i>hh</i> - hour (1 to 12), 0 padded to 2 digits
 * <li><i>k</i> - hour (1 to 24)
 * <li><i>kk</i> - hour (1 to 24), 0 padded to 2 digits
 * <li><i>H</i> - hour (0 to 23)
 * <li><i>HH</i> - hour (0 to 23), 0 padded to 2 digits
 * <li><i>K</i> - hour (0 to 11)
 * <li><i>KK</i> - hour (0 to 11), 0 padded to 2 digits
 * <li><i>m</i> - minute in hour
 * <li><i>mm</i> - minute in hour, 0 padded to 2 digits
 * <li><i>s</i> - second in minute
 * <li><i>ss</i> - second in minute, 0 padded to 2 digits
 * <li><i>S</i> - millisecond (1 to 3 digits)
 * <li><i>SSS</i> - millisecond, 0 padded to 3 digits
 * <li><i>z</i> - general time zone
 * <li><i>Z</i> - RFC 822 time zone
 * </ul>
 * 
 *<li><i>useNative</i> - the flag used to determaine whether to use the native script settings 
 * for formatting the numbers .
 *
 * <li>onLoad - a callback function to call when the date format object is fully 
 * loaded. When the onLoad option is given, the DateFmt object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Any substring containing letters within single or double quotes will be used 
 * as-is in the final output and will not be interpretted for codes as above.<p>
 * 
 * Example: a date format in Spanish might be given as: "'El' d. 'de' MMMM", where
 * the 'El' and the 'de' are left as-is in the output because they are quoted. Typical 
 * output for this example template might be, "El 5. de Mayo".
 * 
 * The following options will be used when formatting a date/time with an explicit
 * template:
 * 
 * <ul>
 * <li>locale - the locale is only used for 
 * translations of things like month names or day-of-week names.
 * <li>calendar - used to translate a date instance into date/time component values 
 * that can be formatted into the template
 * <li>timezone - used to figure out the offset to add or subtract from the time to
 * get the final time component values
 * <li>clock - used to figure out whether to format times with a 12 or 24 hour clock.
 * If this option is specified, it will override the hours portion of a time format.
 * That is, "hh" is switched with "HH" and "kk" is switched with "KK" as appropriate. 
 * If this option is not specified, the 12/24 code in the template will dictate whether 
 * to use the 12 or 24 clock, and the 12/24 default in the locale will be ignored.
 * </ul>
 * 
 * All other options will be ignored and their corresponding getter methods will
 * return the empty string.<p>
 * 
 * Depends directive: !depends datefmt.js
 * 
 * @constructor
 * @param {Object} options options governing the way this date formatter instance works
 */
ilib.DateFmt = function(options) {
	var arr, i, bad, 
		sync = true, 
		loadParams = undefined;
	
	this.locale = new ilib.Locale();
	this.type = "date";
	this.length = "s";
	this.dateComponents = "dmy";
	this.timeComponents = "ahm";
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.type) {
			if (options.type === 'date' || options.type === 'time' || options.type === 'datetime') {
				this.type = options.type;
			}
		}
		
		if (options.calendar) {
			this.calName = options.calendar;
		}
		
		if (options.length) {
			if (options.length === 'short' ||
				options.length === 'medium' ||
				options.length === 'long' ||
				options.length === 'full') {
				// only use the first char to save space in the json files
				this.length = options.length.charAt(0);
			}
		}
		
		if (options.date) {
			arr = options.date.split("");
			arr.sort(function (left, right) {
				return (left < right) ? -1 : ((right < left) ? 1 : 0);
			});
			bad = false;
			for (i = 0; i < arr.length; i++) {
				if (arr[i] !== 'd' && arr[i] !== 'm' && arr[i] !== 'y' && arr[i] !== 'w' && arr[i] !== 'n') {
					bad = true;
					break;
				}
			}
			if (!bad) {
				this.dateComponents = arr.join("");
			}
		}

		if (options.time) {
			arr = options.time.split("");
			arr.sort(function (left, right) {
				return (left < right) ? -1 : ((right < left) ? 1 : 0);
			});
			this.badTime = false;
			for (i = 0; i < arr.length; i++) {
				if (arr[i] !== 'h' && arr[i] !== 'm' && arr[i] !== 's' && arr[i] !== 'a' && arr[i] !== 'z') {
					this.badTime = true;
					break;
				}
			}
			if (!this.badTime) {
				this.timeComponents = arr.join("");
			}
		}
		
		if (options.clock && (options.clock === '12' || options.clock === '24')) {
			this.clock = options.clock;
		}
		
		if (options.template) {
			// many options are not useful when specifying the template directly, so zero
			// them out.
			this.type = "";
			this.length = "";
			this.dateComponents = "";
			this.timeComponents = "";
			
			this.template = options.template;
		}
		
		if (options.timezone) {
			if (options.timezone instanceof ilib.TimeZone) {
				this.tz = options.timezone;
			} else {
				this.tz = new ilib.TimeZone({
					locale: this.locale, 
					id: options.timezone
				});
			}
		} else if (options.locale) {
			// if an explicit locale was given, then get the time zone for that locale
			this.tz = new ilib.TimeZone({
				locale: this.locale
			});
		} // else just assume time zone "local"
		
		if (typeof(options.useNative) === 'boolean') {
			this.useNative = options.useNative;
		}
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync === true);
		}
		
		loadParams = options.loadParams;
	}

	if (!ilib.DateFmt.cache) {
		ilib.DateFmt.cache = {};
	}

	new ilib.LocaleInfo(this.locale, {
		sync: sync,
		onLoad: ilib.bind(this, function (li) {
			this.locinfo = li;
			
			// get the default calendar name from the locale, and if the locale doesn't define
			// one, use the hard-coded gregorian as the last resort
			this.calName = this.calName || this.locinfo.getCalendar() || "gregorian";
			this.cal = ilib.Cal.newInstance({
				type: this.calName
			});
			if (!this.cal) {
				this.cal = new ilib.Cal.Gregorian();
			}

			/*
			if (this.timeComponents &&
					(this.clock === '24' || 
					(!this.clock && this.locinfo.getClock() === "24"))) {
				// make sure we don't have am/pm in 24 hour mode unless the user specifically
				// requested it in the time component option
				this.timeComponents = this.timeComponents.replace("a", "");
			}
			*/

			// load the strings used to translate the components
			new ilib.ResBundle({
				locale: this.locale,
				name: "sysres",
				sync: sync,
				onLoad: ilib.bind(this, function (rb) {
					this.sysres = rb;
					
					if (!this.template) {
						ilib.loadData({
							object: ilib.DateFmt, 
							locale: this.locale, 
							name: "dateformats.json", 
							sync: sync, 
							loadParams: loadParams, 
							callback: ilib.bind(this, function (formats) {
								if (!formats) {
									formats = ilib.DateFmt.defaultFmt;
									var spec = this.locale.getSpec().replace(/-/g, '_');
									ilib.DateFmt.cache[spec] = formats;
								}
								if (typeof(this.clock) === 'undefined') {
									// default to the locale instead
									this.clock = this.locinfo.getClock();
								}
								this._initTemplate(formats);
								this._massageTemplate();
								if (options && typeof(options.onLoad) === 'function') {
									options.onLoad(this);
								}
							})
						});
					} else {
						this._massageTemplate();
						if (options && typeof(options.onLoad) === 'function') {
							options.onLoad(this);
						}
					}
				})
			});	
		})
	});
};

// used in getLength
ilib.DateFmt.lenmap = {
	"s": "short",
	"m": "medium",
	"l": "long",
	"f": "full"
};

ilib.DateFmt.zeros = "0000";

ilib.DateFmt.defaultFmt = ilib.data.dateformats || {
	"gregorian": {
		"order": "{date} {time}",
		"date": {
			"dmwy": "EEE d/MM/yyyy",
			"dmy": "d/MM/yyyy",
			"dmw": "EEE d/MM",
			"dm": "d/MM",
			"my": "MM/yyyy",
			"dw": "EEE d",
			"d": "dd",
			"m": "MM",
			"y": "yyyy",
			"n": "NN",
			"w": "EEE"
		},
		"time": {
			"12": "h:mm:ssa",
			"24": "H:mm:ss"
		},
		"range": {
			"c00": "{st} - {et}, {sd}/{sm}/{sy}",
			"c01": "{sd}/{sm} {st} - {ed}/{em} {et}, {sy}",
			"c02": "{sd}/{sm} {st} - {ed}/{em} {et}, {sy}",
			"c03": "{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}",
			"c10": "{sd}-{ed}/{sm}/{sy}",
			"c11": "{sd}/{sm} - {ed}/{em} {sy}",
			"c12": "{sd}/{sm}/{sy} - {ed}/{em}/{ey}",
			"c20": "{sm}/{sy} - {em}/{ey}",
			"c30": "{sy} - {ey}"
		}
	},
	"islamic": "gregorian",
	"hebrew": "gregorian",
	"julian": "gregorian",
	"buddhist": "gregorian"
};

/**
* @static
* @private
*/
ilib.DateFmt.monthNameLenMap = {
	"short" : "N",
	"medium": "NN",
	"long":   "MMM",
	"full":   "MMMM"
};

/**
* @static
* @private
*/
ilib.DateFmt.weekDayLenMap = {
	"short" : "E",
	"medium": "EE",
	"long":   "EEE",
	"full":   "EEEE"
};

ilib.DateFmt.prototype = {
	/**
	 * @protected
	 */
	_initTemplate: function (formats) {
		if (formats[this.calName]) {
			/** 
			 * @private
			 * @type {{order:(string|{s:string,m:string,l:string,f:string}),date:Object.<string, (string|{s:string,m:string,l:string,f:string})>,time:Object.<string,(string|{s:string,m:string,l:string,f:string})>,range:Object.<string, (string|{s:string,m:string,l:string,f:string})>}}
			 */
			this.formats = formats[this.calName];
			if (typeof(this.formats) === "string") {
				// alias to another calendar type
				this.formats = formats[this.formats];
			}
			
			this.template = "";
			
			switch (this.type) {
				case "datetime":
					this.template = (this.formats && this._getLengthFormat(this.formats.order, this.length)) || "{date} {time}";
					this.template = this.template.replace("{date}", this._getFormat(this.formats.date, this.dateComponents, this.length) || "");
					this.template = this.template.replace("{time}", this._getFormat(this.formats.time[this.clock], this.timeComponents, this.length) || "");
					break;
				case "date":
					this.template = this._getFormat(this.formats.date, this.dateComponents, this.length);
					break;
				case "time":
					this.template = this._getFormat(this.formats.time[this.clock], this.timeComponents, this.length);
					break;
			}
		} else {
			throw "No formats available for calendar " + this.calName + " in locale " + this.locale.toString();
		}
	},
	
	/**
	 * @protected
	 */
	_massageTemplate: function () {
		var i;
		
		if (this.clock && this.template) {
			// explicitly set the hours to the requested type
			var temp = "";
			switch (this.clock) {
				case "24":
					for (i = 0; i < this.template.length; i++) {
						if (this.template.charAt(i) == "'") {
							temp += this.template.charAt(i++);
							while (i < this.template.length && this.template.charAt(i) !== "'") {
								temp += this.template.charAt(i++);
							}
							if (i < this.template.length) {
								temp += this.template.charAt(i);
							}
						} else if (this.template.charAt(i) == 'K') {
							temp += 'k';
						} else if (this.template.charAt(i) == 'h') {
							temp += 'H';
						} else {
							temp += this.template.charAt(i);
						}
					}
					this.template = temp;
					break;
				case "12":
					for (i = 0; i < this.template.length; i++) {
						if (this.template.charAt(i) == "'") {
							temp += this.template.charAt(i++);
							while (i < this.template.length && this.template.charAt(i) !== "'") {
								temp += this.template.charAt(i++);
							}
							if (i < this.template.length) {
								temp += this.template.charAt(i);
							}
						} else if (this.template.charAt(i) == 'k') {
							temp += 'K';
						} else if (this.template.charAt(i) == 'H') {
							temp += 'h';
						} else {
							temp += this.template.charAt(i);
						}
					}
					this.template = temp;
					break;
			}
		}
		
		// tokenize it now for easy formatting
		this.templateArr = this._tokenize(this.template);

		var digits;
		// set up the mapping to native or alternate digits if necessary
		if (typeof(this.useNative) === "boolean") {
			if (this.useNative) {
				digits = this.locinfo.getNativeDigits();
				if (digits) {
					this.digits = digits;
				}
			}
		} else if (this.locinfo.getDigitsStyle() === "native") {
			digits = this.locinfo.getNativeDigits();
			if (digits) {
				this.useNative = true;
				this.digits = digits;
			}
		}
	},
    
	/**
	 * @protected
	 * Convert the template into an array of date components separated by formatting chars.
	 * @param {string} template Format template to tokenize into components
	 * @return {Array.<string>} a tokenized array of date format components
	 */
	_tokenize: function (template) {
		var i = 0, start, ch, letter, arr = [];
		
		// console.log("_tokenize: tokenizing template " + template);
		if (template) {
			while (i < template.length) {
				ch = template.charAt(i);
				start = i;
				if (ch === "'") {
					// console.log("found quoted string");
					i++;
					// escaped string - push as-is, then dequote later
					while (i < template.length && template.charAt(i) !== "'") {
						i++;
					}
					if (i < template.length) {
						i++;	// grab the other quote too
					}
				} else if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {
					letter = template.charAt(i);
					// console.log("found letters " + letter);
					while (i < template.length && ch === letter) {
						ch = template.charAt(++i);
					}
				} else {
					// console.log("found other");
					while (i < template.length && ch !== "'" && (ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z')) {
						ch = template.charAt(++i);
					}
				}
				arr.push(template.substring(start,i));
				// console.log("start is " + start + " i is " + i + " and substr is " + template.substring(start,i));
			}
		}
		return arr;
	},
                          
	/**
	 * @protected
	 * @param {Object.<string, (string|{s:string,m:string,l:string,f:string})>} obj Object to search
	 * @param {string} components Format components to search
	 * @param {string} length Length of the requested format
	 * @return {string|undefined} the requested format
	 */
	_getFormat: function getFormat(obj, components, length) {
		if (typeof(components) !== 'undefined' && obj[components]) {
			return this._getLengthFormat(obj[components], length);
		}
		return undefined;
	},

	/**
	 * @protected
	 * @param {(string|{s:string,m:string,l:string,f:string})} obj Object to search
	 * @param {string} length Length of the requested format
	 * @return {(string|undefined)} the requested format
	 */
	_getLengthFormat: function getLengthFormat(obj, length) {
		if (typeof(obj) === 'string') {
			return obj;
		} else if (obj[length]) {
			return obj[length];
		}
		return undefined;
	},

	/**
	 * Return the locale used with this formatter instance.
	 * @return {ilib.Locale} the ilib.Locale instance for this formatter
	 */
	getLocale: function() {
		return this.locale;
	},
	
	/**
	 * Return the template string that is used to format date/times for this
	 * formatter instance. This will work, even when the template property is not explicitly 
	 * given in the options to the constructor. Without the template option, the constructor 
	 * will build the appropriate template according to the options and use that template
	 * in the format method. 
	 * 
	 * @return {string} the format template for this formatter
	 */
	getTemplate: function() {
		return this.template;
	},
	
	/**
	 * Return the type of this formatter. The type is a string that has one of the following
	 * values: "time", "date", "datetime".
	 * @return {string} the type of the formatter
	 */
	getType: function() {
		return this.type;
	},
	
	/**
	 * Return the name of the calendar used to format date/times for this
	 * formatter instance.
	 * @return {string} the name of the calendar used by this formatter
	 */
	getCalendar: function () {
		return this.cal.getType();
	},
	
	/**
	 * Return the length used to format date/times in this formatter. This is either the
	 * value of the length option to the constructor, or the default value.
	 * 
	 * @return {string} the length of formats this formatter returns
	 */
	getLength: function () {
		return ilib.DateFmt.lenmap[this.length] || "";
	},
	
	/**
	 * Return the date components that this formatter formats. This is either the 
	 * value of the date option to the constructor, or the default value. If this
	 * formatter is a time-only formatter, this method will return the empty 
	 * string. The date component letters may be specified in any order in the 
	 * constructor, but this method will reorder the given components to a standard 
	 * order.
	 * 
	 * @return {string} the date components that this formatter formats
	 */
	getDateComponents: function () {
		return this.dateComponents || "";
	},

	/**
	 * Return the time components that this formatter formats. This is either the 
	 * value of the time option to the constructor, or the default value. If this
	 * formatter is a date-only formatter, this method will return the empty 
	 * string. The time component letters may be specified in any order in the 
	 * constructor, but this method will reorder the given components to a standard 
	 * order.
	 * 
	 * @return {string} the time components that this formatter formats
	 */
	getTimeComponents: function () {
		return this.timeComponents || "";
	},

	/**
	 * Return the time zone used to format date/times for this formatter
	 * instance.
	 * @return a string naming the time zone
	 */
	getTimeZone: function () {
		// Lazy load the time zone. If it wasn't explicitly set up before, set 
		// it up now, but use the 
		// default TZ for the locale. This way, if the caller never uses the
		// time zone in their format, we never have to load up a TimeZone
		// instance into this formatter.
		if (!this.tz) {
			this.tz = new ilib.TimeZone({id: ilib.getTimeZone()});
		}
		return this.tz;
	},
	/**
	 * Return the clock option set in the constructor. If the clock option was
	 * not given, the default from the locale is returned instead.
	 * @return {string} "12" or "24" depending on whether this formatter uses
	 * the 12-hour or 24-hour clock
	 */
	getClock: function () {
		return this.clock || this.locinfo.getClock();
	},
	
	/**
	 * @private
	 */
	_getTemplate: function (prefix, calendar) {
		if (calendar !== "gregorian") {
			return prefix + "-" + calendar;
		}
		return prefix;
	},

	/**
	 * Returns an array of the months of the year, formatted to the optional length specified.
	 * i.e. ...getMonthsOfYear() OR ...getMonthsOfYear({length: "short"})
	 * <p>
	 * The options parameter may contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>length</i> - length of the names of the months being sought. This may be one of
	 * "short", "medium", "long", or "full"
	 * <li><i>date</i> - retrieve the names of the months in the date of the given date
	 * <li><i>year</i> - retrieve the names of the months in the given year. In some calendars,
	 * the months have different names depending if that year is a leap year or not.
	 * </ul>
	 * 
	 * @param  {Object=} options an object-literal that contains any of the above properties
	 * @return {Array} an array of the names of all of the months of the year in the current calendar
	 */
	getMonthsOfYear: function(options) {
		var length = (options && options.length) || this.getLength(),
			template = ilib.DateFmt.monthNameLenMap[length],
			months = [undefined],
			date,
			monthCount;
		
		if (options) {
			if (options.date) {
				date = ilib.Date._dateToIlib(options.date); 	
			}
			
			if (options.year) {
				date = ilib.Date.newInstance({year: options.year, month: 1, day: 1, type: this.cal.getType()});
			}
		}
		
		if (!date) {
			date = this.cal.newDateInstance();
		}

		monthCount = this.cal.getNumMonths(date.getYears());
		for (var i = 1; i <= monthCount; i++) {
			months[i] = this.sysres.getString(this._getTemplate(template + i, this.cal.getType())).toString();
		}
		return months;
	},

	/**
	 * Returns an array of the days of the week, formatted to the optional length specified.
	 * i.e. ...getDaysOfWeek() OR ...getDaysOfWeek({length: "short"})
	 * <p>
	 * The options parameter may contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>length</i> - length of the names of the months being sought. This may be one of
	 * "short", "medium", "long", or "full"
	 * </ul>
	 * @param  {Object=} options an object-literal that contains one key 
	 *                   "length" with the standard length strings
	 * @return {Array} an array of all of the months of the year for the current calendar
	 */
	getDaysOfWeek: function(options) {
		var length = (options && options.length) || this.getLength(),
			template = ilib.DateFmt.weekDayLenMap[length],
			days = [];
		for (var i = 0; i < 7; i++) {
			days[i] = this.sysres.getString(this._getTemplate(template + i, this.cal.getType())).toString();
		}
		return days;
	},

	
	/**
	 * Convert this formatter to a string representation by returning the
	 * format template. This method delegates to getTemplate.
	 * 
	 * @return {string} the format template
	 */
	toString: function() {
		return this.getTemplate();
	},
	
	/*
	 * @private
	 * Left pad the str to the given length of digits with zeros
	 * @param {string} str the string to pad
	 * @param {number} length the desired total length of the output string, padded 
	 */
	_pad: function (str, length) {
		if (typeof(str) !== 'string') {
			str = "" + str;
		}
		var start = 0;
		if (str.charAt(0) === '-') {
			start++;
		}
		return (str.length >= length+start) ? str : str.substring(0, start) + ilib.DateFmt.zeros.substring(0,length-str.length+start) + str.substring(start);
	},
	
	/*
	 * @private
	 * Format a date according to a sequence of components. 
	 * @param {ilib.Date} date a date/time object to format
	 * @param {Array.<string>} templateArr an array of components to format
	 * @return {string} the formatted date
	 */
	_formatTemplate: function (date, templateArr) {
		var i, key, temp, tz, str = "";
		for (i = 0; i < templateArr.length; i++) {
			switch (templateArr[i]) {
				case 'd':
					str += (date.day || 1);
					break;
				case 'dd':
					str += this._pad(date.day || "1", 2);
					break;
				case 'yy':
					temp = "" + ((date.year || 0) % 100);
					str += this._pad(temp, 2);
					break;
				case 'yyyy':
					str += this._pad(date.year || "0", 4);
					break;
				case 'M':
					str += (date.month || 1);
					break;
				case 'MM':
					str += this._pad(date.month || "1", 2);
					break;

				case 'h':
					temp = (date.hour || 0) % 12;
					if (temp == 0) {
						temp = "12";
					}
					str += temp; 
					break;
				case 'hh':
					temp = (date.hour || 0) % 12;
					if (temp == 0) {
						temp = "12";
					}
					str += this._pad(temp, 2);
					break;
				case 'K':
					temp = (date.hour || 0) % 12;
					str += temp; 
					break;
				case 'KK':
					temp = (date.hour || 0) % 12;
					str += this._pad(temp, 2);
					break;

				case 'H':
					str += (date.hour || "0");
					break;
				case 'HH':
					str += this._pad(date.hour || "0", 2);
					break;
				case 'k':
					str += (date.hour == 0 ? "24" : date.hour);
					break;
				case 'kk':
					temp = (date.hour == 0 ? "24" : date.hour);
					str += this._pad(temp, 2);
					break;

				case 'm':
					str += (date.minute || "0");
					break;
				case 'mm':
					str += this._pad(date.minute || "0", 2);
					break;
				case 's':
					str += (date.minute || "0");
					break;
				case 'ss':
					str += this._pad(date.second || "0", 2);
					break;
				case 'S':
					str += (date.millisecond || "0");
					break;
				case 'SSS':
					str += this._pad(date.millisecond || "0", 3);
					break;

				case 'N':
				case 'NN':
				case 'MMM':
				case 'MMMM':
					key = templateArr[i] + (date.month || 1);
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;

				case 'E':
				case 'EE':
				case 'EEE':
				case 'EEEE':
					key = templateArr[i] + date.getDayOfWeek();
					//console.log("finding " + key + " in the resources");
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;
					
				case 'a':
					if (this.locale.getLanguage() === 'zh') {
						if (date.hour < 6) {
							key = "azh0";	// before dawn
						} else if (date.hour < 9) {
							key = "azh1";	// morning
						} else if (date.hour < 12) {
							key = "azh2";	// late morning/day before noon
						} else if (date.hour < 13) {
							key = "azh3";	// noon hour/midday
						} else if (date.hour < 18) {
							key = "azh4";	// afternoon
						} else if (date.hour < 21) {
							key = "azh5";	// evening time/dusk
						} else {
							key = "azh6";	// night time
						}
					} else {
						key = date.hour < 12 ? "a0" : "a1";
					}
					//console.log("finding " + key + " in the resources");
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;
					
				case 'w':
					str += date.getWeekOfYear();
					break;
				case 'ww':
					str += this._pad(date.getWeekOfYear(), 2);
					break;

				case 'D':
					str += date.getDayOfYear();
					break;
				case 'DD':
					str += this._pad(date.getDayOfYear(), 2);
					break;
				case 'DDD':
					str += this._pad(date.getDayOfYear(), 3);
					break;
				case 'W':
					str += date.getWeekOfMonth(this.locale);
					break;

				case 'G':
					key = "G" + date.getEra();
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;

				case 'O':
					temp = this.sysres.getString("1#1st|2#2nd|3#3rd|21#21st|22#22nd|23#23rd|31#31st|#{num}th", "ordinalChoice");
					str += temp.formatChoice(date.day, {num: date.day});
					break;
					
				case 'z': // general time zone
					tz = this.getTimeZone(); // lazy-load the tz
					str += tz.getDisplayName(date, "standard");
					break;
				case 'Z': // RFC 822 time zone
					tz = this.getTimeZone(); // lazy-load the tz
					str += tz.getDisplayName(date, "rfc822");
					break;

				default:
					str += templateArr[i].replace(/'/g, "");
					break;
			}
		}

		if (this.digits) {
			str = ilib.mapString(str, this.digits);
		}
		return str;
	},
	
	/**
	 * Format a particular date instance according to the settings of this
	 * formatter object. The type of the date instance being formatted must 
	 * correspond exactly to the calendar type with which this formatter was 
	 * constructed. If the types are not compatible, this formatter will
	 * produce bogus results.
	 * 
	 * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} dateLike a date-like object to format
	 * @return {string} the formatted version of the given date instance
	 */
	format: function (dateLike) {
		var date = ilib.Date._dateToIlib(dateLike);
		
		if (!date.getCalendar || date.getCalendar() !== this.calName) {
			throw "Wrong date type passed to ilib.DateFmt.format()";
		}
		
		var thisZoneName = this.tz && this.tz.getId() || "local";
		var dateZoneName = date.timezone || "local";
		
		// convert to the time zone of this formatter before formatting
		if (dateZoneName !== thisZoneName) {
			// console.log("Differing time zones date: " + dateZoneName + " and fmt: " + thisZoneName + ". Converting...");
			// this will recalculate the date components based on the new time zone
			var newDate = ilib.Date.newInstance({
				type: this.calName,
				timezone: thisZoneName,
				rd: date.getRataDie()
			});
			
			date = newDate;
		}
		return this._formatTemplate(date, this.templateArr);
	},
	
	/**
	 * Return a string that describes a date relative to the given 
	 * reference date. The string returned is text that for the locale that
	 * was specified when the formatter instance was constructed.<p>
	 * 
	 * The date can be in the future relative to the reference date or in
	 * the past, and the formatter will generate the appropriate string.<p>
	 * 
	 * The text used to describe the relative reference depends on the length
	 * of time between the date and the reference. If the time was in the
	 * past, it will use the "ago" phrase, and in the future, it will use
	 * the "in" phrase. Examples:<p>
	 * 
	 * <ul>
	 * <li>within a minute: either "X seconds ago" or "in X seconds"
	 * <li>within an hour: either "X minutes ago" or "in X minutes"
	 * <li>within a day: either "X hours ago" or "in X hours"
	 * <li>within 2 weeks: either "X days ago" or "in X days"
	 * <li>within 12 weeks (~3 months): either "X weeks ago" or "in X weeks"
	 * <li>within two years: either "X months ago" or "in X months"
	 * <li>longer than 2 years: "X years ago" or "in X years"
	 * </ul>
	 * 
	 * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} reference a date that the date parameter should be relative to
	 * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} date a date being formatted
	 * @throws "Wrong calendar type" when the start or end dates are not the same
	 * calendar type as the formatter itself
	 * @return {string} the formatted relative date
	 */
	formatRelative: function(reference, date) {
		reference = ilib.Date._dateToIlib(reference);
		date = ilib.Date._dateToIlib(date);
		
		var referenceRd, dateRd, fmt, time, diff, num;
		
		if (typeof(reference) !== 'object' || !reference.getCalendar || reference.getCalendar() !== this.calName ||
			typeof(date) !== 'object' || !date.getCalendar || date.getCalendar() !== this.calName) {
			throw "Wrong calendar type";
		}
		
		referenceRd = reference.getRataDie();
		dateRd = date.getRataDie();
		
		if (dateRd < referenceRd) {
			diff = referenceRd - dateRd;
			fmt = this.sysres.getString("{duration} ago");
		} else {
			diff = dateRd - referenceRd;
			fmt = this.sysres.getString("in {duration}");
		}
		
		if (diff < 0.000694444) {
			num = Math.round(diff * 86400);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}s");
					break;
				case 'm':
					time = this.sysres.getString("1#1 se|#{num} sec");
					break;
				case 'l':
					time = this.sysres.getString("1#1 sec|#{num} sec");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 second|#{num} seconds");
					break;
			}
		} else if (diff < 0.041666667) {
			num = Math.round(diff * 1440);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}m", "durationShortMinutes");
					break;
				case 'm':
					time = this.sysres.getString("1#1 mi|#{num} min");
					break;
				case 'l':
					time = this.sysres.getString("1#1 min|#{num} min");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 minute|#{num} minutes");
					break;
			}
		} else if (diff < 1) {
			num = Math.round(diff * 24);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}h");
					break;
				case 'm':
					time = this.sysres.getString("1#1 hr|#{num} hrs", "durationMediumHours");
					break;
				case 'l':
					time = this.sysres.getString("1#1 hr|#{num} hrs");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 hour|#{num} hours");
					break;
			}
		} else if (diff < 14) {
			num = Math.round(diff);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}d");
					break;
				case 'm':
					time = this.sysres.getString("1#1 dy|#{num} dys");
					break;
				case 'l':
					time = this.sysres.getString("1#1 day|#{num} days", "durationLongDays");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 day|#{num} days");
					break;
			}
		} else if (diff < 84) {
			num = Math.round(diff/7);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}w");
					break;
				case 'm':
					time = this.sysres.getString("1#1 wk|#{num} wks", "durationMediumWeeks");
					break;
				case 'l':
					time = this.sysres.getString("1#1 wk|#{num} wks");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 week|#{num} weeks");
					break;
			}
		} else if (diff < 730) {
			num = Math.round(diff/30.4);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}m", "durationShortMonths");
					break;
				case 'm':
					time = this.sysres.getString("1#1 mo|#{num} mos");
					break;
				case 'l':
					time = this.sysres.getString("1#1 mon|#{num} mons");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 month|#{num} months");
					break;
			}
		} else {
			num = Math.round(diff/365);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}y");
					break;
				case 'm':
					time = this.sysres.getString("1#1 yr|#{num} yrs", "durationMediumYears");
					break;
				case 'l':
					time = this.sysres.getString("1#1 yr|#{num} yrs");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 year|#{num} years");
					break;
			}
		}
		return fmt.format({duration: time.formatChoice(num, {num: num})});
	}
};

/*
 * datefmt.js - Date formatter definition
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
date.js 
strings.js 
calendar.js
localeinfo.js
timezone.js
datefmt.js
calendar/gregorian.js
util/jsutils.js
*/

// !data dateformats sysres

/**
 * @class
 * 
 * Create a new date range formatter instance. The date range formatter is immutable once
 * it is created, but can format as many different date ranges as needed with the same
 * options. Create different date range formatter instances for different purposes
 * and then keep them cached for use later if you have more than one range to
 * format.<p>
 * 
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when formatting the date/times in the range. If the 
 * locale is not specified, then the default locale of the app or web page will be used.
 * 
 * <li><i>calendar</i> - the type of calendar to use for this format. The value should
 * be a sting containing the name of the calendar. Currently, the supported
 * types are "gregorian", "julian", "arabic", "hebrew", or "chinese". If the
 * calendar is not specified, then the default calendar for the locale is used. When the
 * calendar type is specified, then the format method must be called with an instance of
 * the appropriate date type. (eg. Gregorian calendar means that the format method must 
 * be called with a GregDate instance.)
 *  
 * <li><i>timezone</i> - time zone to use when formatting times. This may be a time zone
 * instance or a time zone specifier string in RFC 822 format. If not specified, the
 * default time zone for the locale is used.
 * 
 * <li><i>length</i> - Specify the length of the format to use as a string. The length 
 * is the approximate size of the formatted string.
 * 
 * <ul>
 * <li><i>short</i> - use a short representation of the time. This is the most compact format possible for the locale.
 * <li><i>medium</i> - use a medium length representation of the time. This is a slightly longer format.
 * <li><i>long</i> - use a long representation of the time. This is a fully specified format, but some of the textual 
 * components may still be abbreviated. (eg. "Tue" instead of "Tuesday")
 * <li><i>full</i> - use a full representation of the time. This is a fully specified format where all the textual 
 * components are spelled out completely.
 * </ul>
 * 
 * eg. The "short" format for an en_US range may be "MM/yy - MM/yy", whereas the long format might be 
 * "MMM, yyyy - MMM, yyyy". In the long format, the month name is textual instead of numeric 
 * and is longer, the year is 4 digits instead of 2, and the format contains slightly more 
 * spaces and formatting characters.<p>
 * 
 * Note that the length parameter does not specify which components are to be formatted. The
 * components that are formatted depend on the length of time in the range.
 * 
 * <li><i>clock</i> - specify that formatted times should use a 12 or 24 hour clock if the
 * format happens to include times. Valid values are "12" and "24".<p>
 * 
 * In some locales, both clocks are used. For example, in en_US, the general populace uses
 * a 12 hour clock with am/pm, but in the US military or in nautical or aeronautical or 
 * scientific writing, it is more common to use a 24 hour clock. This property allows you to
 * construct a formatter that overrides the default for the locale.<p>
 * 
 * If this property is not specified, the default is to use the most widely used convention
 * for the locale.
 * <li>onLoad - a callback function to call when the date range format object is fully 
 * loaded. When the onLoad option is given, the DateRngFmt object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * <p>
 * 
 * Depends directive: !depends daterangefmt.js
 * 
 * @constructor
 * @param {Object} options options governing the way this date range formatter instance works
 */
ilib.DateRngFmt = function(options) {
	var sync = true;
	var loadParams = undefined;
	this.locale = new ilib.Locale();
	this.length = "s";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.length) {
			if (options.length === 'short' ||
				options.length === 'medium' ||
				options.length === 'long' ||
				options.length === 'full') {
				// only use the first char to save space in the json files
				this.length = options.length.charAt(0);
			}
		}
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		loadParams = options.loadParams;
	}
	
	var opts = {};
	ilib.shallowCopy(options, opts);
	opts.sync = sync;
	opts.loadParams = loadParams;
	
	/**
	 * @private
	 */
	opts.onLoad = ilib.bind(this, function (fmt) {
		this.dateFmt = fmt;
		if (fmt) {
			this.locinfo = this.dateFmt.locinfo;

			// get the default calendar name from the locale, and if the locale doesn't define
			// one, use the hard-coded gregorian as the last resort
			this.calName = this.calName || this.locinfo.getCalendar() || "gregorian";
			this.cal = ilib.Cal.newInstance({
				type: this.calName
			});
			if (!this.cal) {
				this.cal = new ilib.Cal.Gregorian();
			}
			
			this.timeTemplate = this.dateFmt._getFormat(this.dateFmt.formats.time[this.dateFmt.clock], this.dateFmt.timeComponents, this.length) || "hh:mm";
			this.timeTemplateArr = this.dateFmt._tokenize(this.timeTemplate);
			
			if (options && typeof(options.onLoad) === 'function') {
				options.onLoad(this);
			}
		}
	});

	// delegate a bunch of the formatting to this formatter
	new ilib.DateFmt(opts);
};

ilib.DateRngFmt.prototype = {
	/**
	 * Return the locale used with this formatter instance.
	 * @return {ilib.Locale} the ilib.Locale instance for this formatter
	 */
	getLocale: function() {
		return this.locale;
	},
	
	/**
	 * Return the name of the calendar used to format date/times for this
	 * formatter instance.
	 * @return {string} the name of the calendar used by this formatter
	 */
	getCalendar: function () {
		return this.dateFmt.getCalendar();
	},
	
	/**
	 * Return the length used to format date/times in this formatter. This is either the
	 * value of the length option to the constructor, or the default value.
	 * 
	 * @return {string} the length of formats this formatter returns
	 */
	getLength: function () {
		return ilib.DateFmt.lenmap[this.length] || "";
	},
	
	/**
	 * Return the time zone used to format date/times for this formatter
	 * instance.
	 * @return {ilib.TimeZone} a string naming the time zone
	 */
	getTimeZone: function () {
		return this.dateFmt.getTimeZone();
	},
	
	/**
	 * Return the clock option set in the constructor. If the clock option was
	 * not given, the default from the locale is returned instead.
	 * @return {string} "12" or "24" depending on whether this formatter uses
	 * the 12-hour or 24-hour clock
	 */
	getClock: function () {
		return this.dateFmt.getClock();
	},
	
	/**
	 * Format a date/time range according to the settings of the current
	 * formatter. The range is specified as being from the "start" date until
	 * the "end" date. <p>
	 * 
	 * The template that the date/time range uses depends on the
	 * length of time between the dates, on the premise that a long date range
	 * which is too specific is not useful. For example, when giving
	 * the dates of the 100 Years War, in most situations it would be more 
	 * appropriate to format the range as "1337 - 1453" than to format it as 
	 * "10:37am November 9, 1337 - 4:37pm July 17, 1453", as the latter format 
	 * is much too specific given the length of time that the range represents.
	 * If a very specific, but long, date range really is needed, the caller 
	 * should format two specific dates separately and put them 
	 * together as you might with other normal strings.<p>
	 * 
	 * The format used for a date range contains the following date components,
	 * where the order of those components is rearranged and the component values 
	 * are translated according to each locale:
	 * 
	 * <ul>
	 * <li>within 3 days: the times of day, dates, months, and years
	 * <li>within 730 days (2 years): the dates, months, and years
	 * <li>within 3650 days (10 years): the months and years
	 * <li>longer than 10 years: the years only 
	 * </ul>
	 * 
	 * In general, if any of the date components share a value between the
	 * start and end date, that component is only given once. For example,
	 * if the range is from November 15, 2011 to November 26, 2011, the 
	 * start and end dates both share the same month and year. The 
	 * range would then be formatted as "November 15-26, 2011". <p>
	 * 
	 * If you want to format a length of time instead of a particular range of
	 * time (for example, the length of an event rather than the specific start time
	 * and end time of that event), then use a duration formatter instance 
	 * (ilib.DurFmt) instead. The formatRange method will make sure that each component 
	 * of the date/time is within the normal range for that component. For example, 
	 * the minutes will always be between 0 and 59, no matter what is specified in 
	 * the date to format, because that is the normal range for minutes. A duration 
	 * format will allow the number of minutes to exceed 59. For example, if you 
	 * were displaying the length of a movie that is 198 minutes long, the minutes
	 * component of a duration could be 198.<p>
	 * 
	 * @param {ilib.Date} start the starting date/time of the range. This must be of 
	 * the same calendar type as the formatter itself. 
	 * @param {ilib.Date} end the ending date/time of the range. This must be of the 
	 * same calendar type as the formatter itself.
	 * @throws "Wrong calendar type" when the start or end dates are not the same
	 * calendar type as the formatter itself
	 * @return {string} a date range formatted for the locale
	 */
	format: function (start, end) {
		var startRd, endRd, fmt = "", yearTemplate, monthTemplate, dayTemplate;
		
		if (typeof(start) !== 'object' || !start.getCalendar || start.getCalendar() !== this.calName ||
			typeof(end) !== 'object' || !end.getCalendar || end.getCalendar() !== this.calName) {
			throw "Wrong calendar type";
		}
		
		startRd = start.getRataDie();
		endRd = end.getRataDie();
		
		// 
		// legend:
		// c00 - difference is less than 3 days. Year, month, and date are same, but time is different
		// c01 - difference is less than 3 days. Year and month are same but date and time are different
		// c02 - difference is less than 3 days. Year is same but month, date, and time are different. (ie. it straddles a month boundary)
		// c03 - difference is less than 3 days. Year, month, date, and time are all different. (ie. it straddles a year boundary)
		// c10 - difference is less than 2 years. Year and month are the same, but date is different.
		// c11 - difference is less than 2 years. Year is the same, but month, date, and time are different.
		// c12 - difference is less than 2 years. All fields are different. (ie. straddles a year boundary)
		// c20 - difference is less than 10 years. All fields are different.
		// c30 - difference is more than 10 years. All fields are different.
		//
		
		if (endRd - startRd < 3) {
			if (start.year === end.year) {
				if (start.month === end.month) {
					if (start.day === end.day) {
						fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c00", this.length));
					} else {
						fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c01", this.length));
					}
				} else {
					fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c02", this.length));
				}
			} else {
				fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c03", this.length));
			}
		} else if (endRd - startRd < 730) {
			if (start.year === end.year) {
				if (start.month === end.month) {
					fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c10", this.length));
				} else {
					fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c11", this.length));
				}
			} else {
				fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c12", this.length));
			}
		} else if (endRd - startRd < 3650) {
			fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c20", this.length));
		} else {
			fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c30", this.length));
		}

		yearTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, "y", this.length) || "yyyy");
		monthTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, "m", this.length) || "MM");
		dayTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, "d", this.length) || "dd");
		
		/*
		console.log("fmt is " + fmt.toString());
		console.log("year template is " + yearTemplate);
		console.log("month template is " + monthTemplate);
		console.log("day template is " + dayTemplate);
		*/
		
		return fmt.format({
			sy: this.dateFmt._formatTemplate(start, yearTemplate),
			sm: this.dateFmt._formatTemplate(start, monthTemplate),
			sd: this.dateFmt._formatTemplate(start, dayTemplate),
			st: this.dateFmt._formatTemplate(start, this.timeTemplateArr),
			ey: this.dateFmt._formatTemplate(end, yearTemplate),
			em: this.dateFmt._formatTemplate(end, monthTemplate),
			ed: this.dateFmt._formatTemplate(end, dayTemplate),
			et: this.dateFmt._formatTemplate(end, this.timeTemplateArr)
		});
	}
};

/*
 * hebrew.js - Represent a Hebrew calendar object.
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js util/utils.js */

/**
 * @class
 * Construct a new Hebrew calendar object. This class encodes information about
 * the Hebrew (Jewish) calendar. The Hebrew calendar is a tabular hebrew 
 * calendar where the dates are calculated by arithmetic rules. This differs from 
 * the religious Hebrew calendar which is used to mark the beginning of particular 
 * holidays. The religious calendar depends on the first sighting of the new 
 * crescent moon to determine the first day of the new month. Because humans and 
 * weather are both involved, the actual time of sighting varies, so it is not 
 * really possible to precalculate the religious calendar. Certain groups, such 
 * as the Hebrew Society of North America, decreed in in 2007 that they will use
 * a calendar based on calculations rather than observations to determine the 
 * beginning of lunar months, and therefore the dates of holidays.<p>
 * 
 * Depends directive: !depends hebrew.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.Hebrew = function() {
	this.type = "hebrew";
};


/**
 * @private
 * Return the number of days elapsed in the Hebrew calendar before the
 * given year starts.
 * @param {number} year the year for which the number of days is sought
 * @return {number} the number of days elapsed in the Hebrew calendar before the
 * given year starts
 */
ilib.Cal.Hebrew.elapsedDays = function(year) {
	var months = Math.floor(((235*year) - 234)/19);
	var parts = 204 + 793 * ilib.mod(months, 1080);
	var hours = 11 + 12 * months + 793 * Math.floor(months/1080) + 
		Math.floor(parts/1080);
	var days = 29 * months + Math.floor(hours/24);
	return (ilib.mod(3 * (days + 1), 7) < 3) ? days + 1 : days;
};

/**
 * @private
 * Return the number of days that the New Year's (Rosh HaShanah) in the Hebrew 
 * calendar will be corrected for the given year. Corrections are caused because New 
 * Year's is not allowed to start on certain days of the week. To deal with 
 * it, the start of the new year is corrected for the next year by adding a 
 * day to the 8th month (Heshvan) and/or the 9th month (Kislev) in the current
 * year to make them 30 days long instead of 29.
 * 
 * @param {number} year the year for which the correction is sought
 * @param {number} elapsed number of days elapsed up to this year
 * @return {number} the number of days correction in the current year to make sure
 * Rosh HaShanah does not fall on undesirable days of the week
 */
ilib.Cal.Hebrew.newYearsCorrection = function(year, elapsed) {
	var lastYear = ilib.Cal.Hebrew.elapsedDays(year-1),
		thisYear = elapsed,
		nextYear = ilib.Cal.Hebrew.elapsedDays(year+1);
	
	return (nextYear - thisYear) == 356 ? 2 : ((thisYear - lastYear) == 382 ? 1 : 0);
};

/**
 * @private
 * Return the rata die date of the new year for the given hebrew year.
 * @param {number} year the year for which the new year is needed
 * @return {number} the rata die date of the new year
 */
ilib.Cal.Hebrew.newYear = function(year) {
	var elapsed = ilib.Cal.Hebrew.elapsedDays(year); 
	
	return elapsed + ilib.Cal.Hebrew.newYearsCorrection(year, elapsed);
};

/**
 * @private
 * Return the number of days in the given year. Years contain a variable number of
 * days because the date of Rosh HaShanah (New Year's) changes so that it doesn't
 * fall on particular days of the week. Days are added to the months of Heshvan
 * and/or Kislev in the previous year in order to prevent the current year's New
 * Year from being on Sunday, Wednesday, or Friday.
 * 
 * @param {number} year the year for which the length is sought
 * @return {number} number of days in the given year
 */
ilib.Cal.Hebrew.daysInYear = function(year) {
	return ilib.Cal.Hebrew.newYear(year+1) - ilib.Cal.Hebrew.newYear(year);
};

/**
 * @private
 * Return true if the given year contains a long month of Heshvan. That is,
 * it is 30 days instead of 29.
 * 
 * @param {number} year the year in which that month is questioned
 * @return {boolean} true if the given year contains a long month of Heshvan
 */
ilib.Cal.Hebrew.longHeshvan = function(year) {
	return ilib.mod(ilib.Cal.Hebrew.daysInYear(year), 10) === 5;
};

/**
 * @private
 * Return true if the given year contains a long month of Kislev. That is,
 * it is 30 days instead of 29.
 * 
 * @param {number} year the year in which that month is questioned
 * @return {boolean} true if the given year contains a short month of Kislev
 */
ilib.Cal.Hebrew.longKislev = function(year) {
	return ilib.mod(ilib.Cal.Hebrew.daysInYear(year), 10) !== 3;
};

/**
 * @private
 * Return the date of the last day of the month for the given year. The date of
 * the last day of the month is variable because a number of months gain an extra 
 * day in leap years, and it is variable which months gain a day for each leap 
 * year and which do not.
 * 
 * @param {number} month the month for which the number of days is sought
 * @param {number} year the year in which that month is
 * @return {number} the number of days in the given month and year
 */
ilib.Cal.Hebrew.prototype.lastDayOfMonth = function(month, year) {
	switch (month) {
		case 2: 
		case 4: 
		case 6: 
		case 10: 
			return 29;
		case 13:
			return this.isLeapYear(year) ? 29 : 0;
		case 8:
			return ilib.Cal.Hebrew.longHeshvan(year) ? 30 : 29;
		case 9:
			return ilib.Cal.Hebrew.longKislev(year) ? 30 : 29;
		case 12:
		case 1:
		case 3:
		case 5:
		case 7:
		case 11:
			return 30;
		default:
			return 0;
	}
};

/**
 * Return the number of months in the given year. The number of months in a year varies
 * for luni-solar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=first month, 2=second month, etc.
 * 
 * @param {number} year a year for which the number of months is sought
 */
ilib.Cal.Hebrew.prototype.getNumMonths = function(year) {
	return this.isLeapYear(year) ? 13 : 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of leap years.
 *
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @returns {number} the number of days within the given month in the given year, or
 * 0 for an invalid month in the year
 */
ilib.Cal.Hebrew.prototype.getMonLength = function(month, year) {
	if (month < 1 || month > 13 || (month == 13 && !this.isLeapYear(year))) {
		return 0;
	}
	return this.lastDayOfMonth(month, year);
};

/**
 * Return true if the given year is a leap year in the Hebrew calendar.
 * The year parameter may be given as a number, or as a HebrewDate object.
 * @param {number|Object} year the year for which the leap year information is being sought
 * @returns {boolean} true if the given year is a leap year
 */
ilib.Cal.Hebrew.prototype.isLeapYear = function(year) {
	var y = (typeof(year) == 'number') ? year : year.year;
	return (ilib.mod(1 + 7 * y, 19) < 7);
};

/**
 * Return the type of this calendar.
 * 
 * @returns {string} the name of the type of this calendar 
 */
ilib.Cal.Hebrew.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @returns {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.Hebrew.prototype.newDateInstance = function (options) {
	return new ilib.Date.HebrewDate(options);
};

/*register this calendar for the factory method */
ilib.Cal._constructors["hebrew"] = ilib.Cal.Hebrew;

/*
 * hebrewdate.js - Represent a date in the Hebrew calendar
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends date.js calendar/hebrew.js util/utils.js */

/**
 * @class
 * 
 * Construct a new civil Hebrew date object. The constructor can be called
 * with a params object that can contain the following properties:<p>
 * 
 * <ul>
 * <li><i>julianday</i> - the Julian Day to set into this date
 * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year
 * <li><i>month</i> - 1 to 12, where 1 means Nisan, 2 means Iyyar, etc.
 * <li><i>day</i> - 1 to 30
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify 
 * the parts or specify the minutes, seconds, and milliseconds, but not both. 
 * <li><i>minute</i> - 0 to 59
 * <li><i>second</i> - 0 to 59
 * <li><i>millisecond</i> - 0 to 999
 * <li><i>locale</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this julian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * <li><i>timezone</i> - the time zone of this instance. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale. 
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 * 
 * If called with another Hebrew date argument, the date components of the given
 * date are copied into the current one.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>julianday</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * Depends directive: !depends hebrewdate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew date
 */
ilib.Date.HebrewDate = function(params) {
	this.cal = new ilib.Cal.Hebrew();
	
	if (params) {
		if (params.timezone) {
			this.timezone = params.timezone;
		}
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			if (!this.timezone) {
				var li = new ilib.LocaleInfo(this.locale);
				this.timezone = li.getTimeZone(); 
			}
		}

		if (typeof(params.date) !== 'undefined') {
			// accept JS Date classes or strings
			var date = params.date;
			if (!(date instanceof Date)) {
				date = new Date(date);
			}
			this.timezone = "Etc/UTC";
			this.setTime(date.getTime());
		} else if (typeof(params.unixtime) != 'undefined') {
			this.setTime(parseInt(params.unixtime, 10));
		} else if (typeof(params.julianday) != 'undefined') {
			// JD time is defined to be UTC
			this.timezone = "Etc/UTC";
			this.setJulianDay(parseFloat(params.julianday));
		} else if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond || params.parts ) {
			/**
			 * Year in the Hebrew calendar.
			 * @type number
			 */
			this.year = parseInt(params.year, 10) || 0;

			/**
			 * The month number, ranging from 1 to 13.
			 * @type number
			 */
			this.month = parseInt(params.month, 10) || 1;

			/**
			 * The day of the month. This ranges from 1 to 30.
			 * @type number
			 */
			this.day = parseInt(params.day, 10) || 1;
			
			/**
			 * The hour of the day. This can be a number from 0 to 23, as times are
			 * stored unambiguously in the 24-hour clock.
			 * @type number
			 */
			this.hour = parseInt(params.hour, 10) || 0;

			this.parts = -1;
			
			if (typeof(params.parts) !== 'undefined') {
				/**
				 * The parts (halaqim) of the hour. This can be a number from 0 to 1079.
				 * @type number
				 */
				this.parts = parseInt(params.parts, 10);
				var seconds = parseInt(params.parts, 10) * 3.333333333333;
				this.minute = Math.floor(seconds / 60);
				seconds -= this.minute * 60;
				this.second = Math.floor(seconds);
				this.millisecond = (seconds - this.second);	
			} else {
				/**
				 * The minute of the hours. Ranges from 0 to 59.
				 * @type number
				 */
				this.minute = parseInt(params.minute, 10) || 0;
	
				/**
				 * The second of the minute. Ranges from 0 to 59.
				 * @type number
				 */
				this.second = parseInt(params.second, 10) || 0;
	
				/**
				 * The millisecond of the second. Ranges from 0 to 999.
				 * @type number
				 */
				this.millisecond = parseInt(params.millisecond, 10) || 0;
			}
				
			/**
			 * The day of the year. Ranges from 1 to 383.
			 * @type number
			 */
			this.dayOfYear = parseInt(params.dayOfYear, 10);
		} else if (typeof(params.rd) != 'undefined') {
			// private parameter. Do not document this!
			this.setRd(params.rd);
		} else {
			var now = new Date();
			this.setTime(now.getTime());
		}
	} else {
		var now = new Date();
		this.setTime(now.getTime());
	}
};

ilib.Date.HebrewDate.prototype = new ilib.Date();
ilib.Date.HebrewDate.prototype.parent = ilib.Date;
ilib.Date.HebrewDate.prototype.constructor = ilib.Date.HebrewDate;

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month for a non-leap year, without new years corrections
 */
ilib.Date.HebrewDate.cumMonthLengths = [
	176,  /* Nisan */
	206,  /* Iyyar */
	235,  /* Sivan */
	265,  /* Tammuz */
	294,  /* Av */
	324,  /* Elul */
	0,    /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	30,   /* Heshvan */
	59,   /* Kislev */
	88,   /* Teveth */
	117,  /* Shevat */
	147   /* Adar I */
];

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month for a non-leap year, without new years corrections,
 * that can be used in reverse to map days to months
 */
ilib.Date.HebrewDate.cumMonthLengthsReverse = [
//  [days, monthnumber],                                                
	[0,   7],  /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	[30,  8],  /* Heshvan */
	[59,  9],  /* Kislev */
	[88,  10], /* Teveth */
	[117, 11], /* Shevat */
	[147, 12], /* Adar I */
	[176, 1],  /* Nisan */
	[206, 2],  /* Iyyar */
	[235, 3],  /* Sivan */
	[265, 4],  /* Tammuz */
	[294, 5],  /* Av */
	[324, 6],  /* Elul */
	[354, 7]   /* end of year sentinel value */
];

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month for a leap year, without new years corrections 
 */
ilib.Date.HebrewDate.cumMonthLengthsLeap = [
	206,  /* Nisan */
	236,  /* Iyyar */
	265,  /* Sivan */
	295,  /* Tammuz */
	324,  /* Av */
	354,  /* Elul */
	0,    /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	30,   /* Heshvan */
	59,   /* Kislev */
	88,   /* Teveth */
	117,  /* Shevat */
	147,  /* Adar I */
	177   /* Adar II */
];

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month for a leap year, without new years corrections
 * that can be used in reverse to map days to months 
 */
ilib.Date.HebrewDate.cumMonthLengthsLeapReverse = [
//  [days, monthnumber],                                                
	[0,   7],  /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	[30,  8],  /* Heshvan */
	[59,  9],  /* Kislev */
	[88,  10], /* Teveth */
	[117, 11], /* Shevat */
	[147, 12], /* Adar I */
	[177, 13], /* Adar II */
	[206, 1],  /* Nisan */
	[236, 2],  /* Iyyar */
	[265, 3],  /* Sivan */
	[295, 4],  /* Tammuz */
	[324, 5],  /* Av */
	[354, 6],  /* Elul */
	[384, 7]   /* end of year sentinel value */
];

/**
 * @private
 * @const
 * @type number
 * Number of days difference between RD 0 of the Gregorian calendar 
 * (Jan 1, 1 Gregorian = JD 1721057.5) and RD 0 of the Hebrew calendar
 * (September 7, -3760 Gregorian = JD 347997.25)
 */
ilib.Date.HebrewDate.GregorianDiff = 1373060.25;

/**
 * @private
 * @const
 * @type number
 * The difference between a zero Julian day and the first day of the Hebrew 
 * calendar: sunset on Monday, Tishri 1, 1 = September 7, 3760 BC Gregorian = JD 347997.25
 */
ilib.Date.HebrewDate.epoch = 347997.25;

/**
 * @private
 * Return the Rata Die (fixed day) number of the given date.
 * 
 * @param {Object} date hebrew date to calculate
 * @return {number} the rd date as a number
 */
ilib.Date.HebrewDate.prototype.calcRataDie = function(date) {
	var elapsed = ilib.Cal.Hebrew.elapsedDays(date.year);
	var days = elapsed +
		ilib.Cal.Hebrew.newYearsCorrection(date.year, elapsed) +
		date.day - 1;
	var i, sum = 0, table;
	
	//console.log("getRataDie: converting " +  JSON.stringify(date));
	//console.log("getRataDie: days is " +  days);
	//console.log("getRataDie: new years correction is " +  ilib.Cal.Hebrew.newYearsCorrection(date.year, elapsed));
	
	table = this.cal.isLeapYear(date.year) ? 
				ilib.Date.HebrewDate.cumMonthLengthsLeap :
				ilib.Date.HebrewDate.cumMonthLengths;
	sum = table[date.month-1];
	
	// gets cumulative without correction, so now add in the correction
	if ((date.month < 7 || date.month > 8) && ilib.Cal.Hebrew.longHeshvan(date.year)) {
		sum++;
	}
	if ((date.month < 7 || date.month > 9) && ilib.Cal.Hebrew.longKislev(date.year)) {
		sum++;
	}
	// console.log("getRataDie: cum days is now " +  sum);
	
	days += sum;
	
	// the date starts at sunset, which we take as 18:00, so the hours from
	// midnight to 18:00 are on the current Gregorian day, and the hours from
	// 18:00 to midnight are on the previous Gregorian day. So to calculate the 
	// number of hours into the current day that this time represents, we have
	// to count from 18:00 to midnight first, and add in 6 hours if the time is
	// less than 18:00
	var time;
	if (date.hour >= 18) {
		time = ((date.hour - 18 || 0) * 3600000 +
			(date.minute || 0) * 60000 +
			(date.second || 0) * 1000 +
			(date.millisecond || 0)) / 
			86400000;
	} else {
		time = 0.25 +	// 6 hours from 18:00 to midnight on the previous gregorian day
				((date.hour || 0) * 3600000 +
				(date.minute || 0) * 60000 +
				(date.second || 0) * 1000 +
				(date.millisecond || 0)) / 
				86400000;
	}
	
	//console.log("getRataDie: rd is " +  (days + time));
	return days + time;
};

/**
 * @private
 * Return the Rata Die (fixed day) number of this date.
 * 
 * @return {number} the rd date as a number
 */
ilib.Date.HebrewDate.prototype.getRataDie = function() {
	return this.calcRataDie(this);
};

/**
 * @private
 * Calculate date components for the given RD date.
 * @return {Object.<{year:number,month:number,day:number,hour:number,minute:number,second:number,millisecond:number}>} object containing the fields
 */
ilib.Date.HebrewDate.prototype.calcComponents = function (rd) {
	var ret = {},
		remainder,
		approximation,
		year,
		month,
		i,
		table,
		target,
		thisNewYear = 0,
		nextNewYear;
	
	// console.log("HebrewDate.calcComponents: calculating for rd " + rd);
	
	// divide by the average number of days per year in the Hebrew calendar
	// to approximate the year, then tweak it to get the real year
	approximation = Math.floor(rd / 365.246822206) + 1;
	
	// console.log("HebrewDate.calcComponents: approx is " + approximation);
	
	// search forward from approximation-1 for the year that actually contains this rd
	year = approximation;
	thisNewYear = ilib.Cal.Hebrew.newYear(year-1);
	nextNewYear = ilib.Cal.Hebrew.newYear(year);
	while (rd >= nextNewYear) {
		year++;
		thisNewYear = nextNewYear;
		nextNewYear = ilib.Cal.Hebrew.newYear(year);
	}
	ret.year = year-1;
	
	// console.log("HebrewDate.calcComponents: year is " + ret.year + " with starting rd " + thisNewYear);
	
	remainder = rd - thisNewYear;
	// console.log("HebrewDate.calcComponents: remainder is " + remainder);

	// take out new years corrections so we get the right month when we look it up in the table
	if (remainder >= 59) {
		if (remainder >= 88) {
			if (ilib.Cal.Hebrew.longKislev(ret.year)) {
				remainder--;
			}
		}
		if (ilib.Cal.Hebrew.longHeshvan(ret.year)) {
			remainder--;
		}
	}
	
	// console.log("HebrewDate.calcComponents: after new years corrections, remainder is " + remainder);
	
	table = this.cal.isLeapYear(ret.year) ? 
			ilib.Date.HebrewDate.cumMonthLengthsLeapReverse :
			ilib.Date.HebrewDate.cumMonthLengthsReverse;
	
	i = 0;
	target = Math.floor(remainder);
	while (i+1 < table.length && target >= table[i+1][0]) {
		i++;
	}
	
	ret.month = table[i][1];
	// console.log("HebrewDate.calcComponents: remainder is " + remainder);
	remainder -= table[i][0];
	
	// console.log("HebrewDate.calcComponents: month is " + ret.month + " and remainder is " + remainder);
	
	ret.day = Math.floor(remainder);
	remainder -= ret.day;
	ret.day++; // days are 1-based
	
	// console.log("HebrewDate.calcComponents: day is " + ret.day + " and remainder is " + remainder);

	// now convert to milliseconds for the rest of the calculation
	remainder = Math.round(remainder * 86400000);
	
	ret.hour = Math.floor(remainder/3600000);
	remainder -= ret.hour * 3600000;
	
	// the hours from 0 to 6 are actually 18:00 to midnight of the previous
	// gregorian day, so we have to adjust for that
	if (ret.hour >= 6) {
		ret.hour -= 6;
	} else {
		ret.hour += 18;
	}
		
	ret.minute = Math.floor(remainder/60000);
	remainder -= ret.minute * 60000;
	
	ret.second = Math.floor(remainder/1000);
	remainder -= ret.second * 1000;
	
	ret.millisecond = remainder;
	
	// console.log("HebrewDate.calcComponent: final result is " + JSON.stringify(ret));
	return ret;
};

/**
 * @private
 * Set the date components of this instance based on the given rd.
 * @param {number} rd the rata die date to set
 */
ilib.Date.HebrewDate.prototype.setRd = function (rd) {
	var fields = this.calcComponents(rd);
	
	this.year = fields.year;
	this.month = fields.month;
	this.day = fields.day;
	this.hour = fields.hour;
	this.minute = fields.minute;
	this.second = fields.second;
	this.millisecond = fields.millisecond;
};

/**
 * Set the date of this instance using a Julian Day.
 * @param {number} date the Julian Day to use to set this date
 */
ilib.Date.HebrewDate.prototype.setJulianDay = function (date) {
	var jd = (typeof(date) === 'number') ? new ilib.JulianDay(date) : date,
		rd;	// rata die -- # of days since the beginning of the calendar
	
	rd = jd.getDate() - ilib.Date.HebrewDate.epoch; 	// Julian Days start at noon
	this.setRd(rd);
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.HebrewDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.getRataDie());
	return ilib.mod(rd+1, 7);
};

/**
 * Get the Halaqim (parts) of an hour. There are 1080 parts in an hour, which means
 * each part is 3.33333333 seconds long. This means the number returned may not
 * be an integer.
 * 
 * @return {number} the halaqim parts of the current hour
 */
ilib.Date.HebrewDate.prototype.getHalaqim = function() {
	if (this.parts < 0) {
		// convert to ms first, then to parts
		var h = this.minute * 60000 + this.second * 1000 + this.millisecond;
		this.parts = (h * 0.0003);
	}
	return this.parts;
};

/**
 * @private
 * Return the rd of the particular day of the week on or before the given rd.
 * eg. The Sunday on or before the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 */
ilib.Date.HebrewDate.prototype.onOrBeforeRd = function(rd, dayOfWeek) {
	return rd - ilib.mod(Math.floor(rd) - dayOfWeek + 1, 7);
};

/**
 * @private
 * Return the rd of the particular day of the week on or before the given rd.
 * eg. The Sunday on or before the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 */
ilib.Date.HebrewDate.prototype.onOrAfterRd = function(rd, dayOfWeek) {
	return this.onOrBeforeRd(rd+6, dayOfWeek);
};

/**
 * @private
 * Return the rd of the particular day of the week before the given rd.
 * eg. The Sunday before the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 */
ilib.Date.HebrewDate.prototype.beforeRd = function(rd, dayOfWeek) {
	return this.onOrBeforeRd(rd-1, dayOfWeek);
};

/**
 * @private
 * Return the rd of the particular day of the week after the given rd.
 * eg. The Sunday after the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 */
ilib.Date.HebrewDate.prototype.afterRd = function(rd, dayOfWeek) {
	return this.onOrBeforeRd(rd+7, dayOfWeek);
};

/**
 * @private
 * Return the rd of the first Sunday of the given ISO year.
 * @return the rd of the first Sunday of the ISO year
 */
ilib.Date.HebrewDate.prototype.firstSunday = function (year) {
	var tishri1 = this.calcRataDie({
		year: year,
		month: 7,
		day: 1,
		hour: 18,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	var firstThu = this.onOrAfterRd(tishri1, 4);
	return this.beforeRd(firstThu, 0);
};

/**
 * Return a new Hebrew date instance that represents the first instance of the 
 * given day of the week before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week before the current date that is being sought
 * @returns {ilib.Date.HebrewDate} the date being sought
 */
ilib.Date.HebrewDate.prototype.before = function (dow) {
	return new ilib.Date.HebrewDate({rd: this.beforeRd(this.getRataDie(), dow)});
};

/**
 * Return a new Hebrew date instance that represents the first instance of the 
 * given day of the week after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week after the current date that is being sought
 * @returns {ilib.Date.HebrewDate} the date being sought
 */
ilib.Date.HebrewDate.prototype.after = function (dow) {
	return new ilib.Date.HebrewDate({rd: this.afterRd(this.getRataDie(), dow)});
};

/**
 * Return a new Hebrew date instance that represents the first instance of the 
 * given day of the week on or before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or before the current date that is being sought
 * @returns {ilib.Date.HebrewDate} the date being sought
 */
ilib.Date.HebrewDate.prototype.onOrBefore = function (dow) {
	return new ilib.Date.HebrewDate({rd: this.onOrBeforeRd(this.getRataDie(), dow)});
};

/**
 * Return a new Hebrew date instance that represents the first instance of the 
 * given day of the week on or after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or after the current date that is being sought
 * @returns {ilib.Date.HebrewDate} the date being sought
 */
ilib.Date.HebrewDate.prototype.onOrAfter = function (dow) {
	return new ilib.Date.HebrewDate({rd: this.onOrAfterRd(this.getRataDie(), dow)});
};

/**
 * Return the week number in the current year for the current date. This is calculated
 * in a similar way to the ISO 8601 week for a Gregorian calendar, but is technically
 * not an actual ISO week number. That means in some years, the week starts in the
 * previous calendar year. The week number ranges from 1 to 55.
 * 
 * @return {number} the week number for the current date
 */
ilib.Date.HebrewDate.prototype.getWeekOfYear = function() {
	var rd = this.getRataDie(),
		yearStart = this.firstSunday(this.year),
		nextYear;
	
	// if we have a Tishri date, it may be in this year or the previous year
	if (rd < yearStart) {
		yearStart = this.firstSunday(this.year-1);
	} else if (this.month == 6 && this.day > 23) {
		// if we have a late Elul date, it may be in this year, or the next year
		nextYear = this.firstSunday(this.year+1);
		if (rd >= nextYear) {
			yearStart = nextYear;
		}
	}
	
	return Math.floor((rd-yearStart)/7) + 1;
};

/**
 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
 * 385, regardless of months or weeks, etc. That is, Tishri 1st is day 1, and 
 * Elul 29 is 385 for a leap year with a long Heshvan and long Kislev.
 * @return {number} the ordinal day of the year
 */
ilib.Date.HebrewDate.prototype.getDayOfYear = function() {
	var table = this.cal.isLeapYear(this.year) ? 
				ilib.Date.HebrewDate.cumMonthLengthsLeap : 
				ilib.Date.HebrewDate.cumMonthLengths;
	var days = table[this.month-1];
	if ((this.month < 7 || this.month > 8) && ilib.Cal.Hebrew.longHeshvan(this.year)) {
		days++;
	}
	if ((this.month < 7 || this.month > 9) && ilib.Cal.Hebrew.longKislev(this.year)) {
		days++;
	}

	return days + this.day;
};

/**
 * Return the ordinal number of the week within the month. The first week of a month is
 * the first one that contains 4 or more days in that month. If any days precede this
 * first week, they are marked as being in week 0. This function returns values from 0
 * through 6.<p>
 * 
 * The locale is a required parameter because different locales that use the same 
 * Hebrew calendar consider different days of the week to be the beginning of
 * the week. This can affect the week of the month in which some days are located.
 * 
 * @param {ilib.Locale|string} locale the locale or locale spec to use when figuring out 
 * the first day of the week
 * @return {number} the ordinal number of the week within the current month
 */
ilib.Date.HebrewDate.prototype.getWeekOfMonth = function(locale) {
	var li = new ilib.LocaleInfo(locale),
		first = this.calcRataDie({
			year: this.year,
			month: this.month,
			day: 1,
			hour: 18,
			minute: 0,
			second: 0,
			millisecond: 0
		}),
		rd = this.getRataDie(),
		weekStart = this.onOrAfterRd(first, li.getFirstDayOfWeek());
	
	if (weekStart - first > 3) {
		// if the first week has 4 or more days in it of the current month, then consider
		// that week 1. Otherwise, it is week 0. To make it week 1, move the week start
		// one week earlier.
		weekStart -= 7;
	}
	return (rd < weekStart) ? 0 : Math.floor((rd - weekStart) / 7) + 1;
};

/**
 * Return the era for this date as a number. The value for the era for Hebrew 
 * calendars is -1 for "before the Hebrew era" and 1 for "the Hebrew era". 
 * Hebrew era dates are any date after Tishri 1, 1, which is the same as
 * September 7, 3760 BC in the Gregorian calendar. 
 * 
 * @return {number} 1 if this date is in the Hebrew era, -1 if it is before the 
 * Hebrew era 
 */
ilib.Date.HebrewDate.prototype.getEra = function() {
	return (this.year < 1) ? -1 : 1;
};

/**
 * Return the unix time equivalent to this Hebrew date instance. Unix time is
 * the number of milliseconds since midnight on Jan 1, 1970 (Gregorian). This method only
 * returns a valid number for dates between midnight, Jan 1, 1970 (Gregorian) and  
 * Jan 19, 2038 at 3:14:07am (Gregorian), when the unix time runs out. If this instance 
 * encodes a date outside of that range, this method will return -1.
 * 
 * @return {number} a number giving the unix time, or -1 if the date is outside the
 * valid unix time range
 */
ilib.Date.HebrewDate.prototype.getTime = function() {
	if (typeof(this.unixtime) === 'number') {
		return this.unixtime;
	}
	// not stored, so calculate it
	var jd = this.getJulianDay();

	// not earlier than Jan 1, 1970 (Gregorian)
	// or later than Jan 19, 2038 at 3:14:07am (Gregorian)
	if (jd < 2440587.5 || jd > 2465442.634803241) { 
		return -1;
	}

	// avoid the rounding errors in the floating point math by only using
	// the whole days from the rd, and then calculating the milliseconds directly
	var seconds = Math.floor(jd - 2440587.5) * 86400 +
		this.hour * 3600 + 
		this.minute * 60 +
		this.second;
	this.unixtime = seconds * 1000 + this.millisecond;
	
	return this.unixtime;
};

/**
 * Set the time of this instance according to the given unix time. Unix time is
 * the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * @param {number} millis the unix time to set this date to in milliseconds 
 */
ilib.Date.HebrewDate.prototype.setTime = function(millis) {
	var jd = 2440587.5 + millis / 86400000;
	this.unixtime = millis;
	this.setJulianDay(jd);
};

/**
 * Return a Javascript Date object that is equivalent to this Hebrew date
 * object.
 * 
 * @return {Date|undefined} a javascript Date object
 */
ilib.Date.HebrewDate.prototype.getJSDate = function() {
	var unix = this.getTime();
	return (unix === -1) ? undefined : new Date(unix); 
};

/**
 * Return the Julian Day equivalent to this calendar date as a number.
 * 
 * @return {number} the julian date equivalent of this date
 */
ilib.Date.HebrewDate.prototype.getJulianDay = function() {
	return this.getRataDie() + ilib.Date.HebrewDate.epoch;
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.HebrewDate.prototype.getCalendar = function() {
	return "hebrew";
};

/**
 * Return the time zone associated with this Hebrew date, or 
 * undefined if none was specified in the constructor.
 * 
 * @return {string|undefined} the name of the time zone for this date instance
 */
ilib.Date.HebrewDate.prototype.getTimeZone = function() {
	return this.timezone || "local";
};


/**
 * Set the time zone associated with this Hebrew date.
 * @param {string} tzName the name of the time zone to set into this date instance,
 * or "undefined" to unset the time zone 
 */
ilib.Date.HebrewDate.prototype.setTimeZone = function (tzName) {
	if (!tzName || tzName === "") {
		// same as undefining it
		this.timezone = undefined;
	} else if (typeof(tzName) === 'string') {
		this.timezone = tzName;
	}
};

// register with the factory method
ilib.Date._constructors["hebrew"] = ilib.Date.HebrewDate;
/*
 * islamic.js - Represent a Islamic calendar object.
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js util/utils.js */

/**
 * @class
 * Construct a new Islamic calendar object. This class encodes information about
 * the civil Islamic calendar. The civil Islamic calendar is a tabular islamic 
 * calendar where the dates are calculated by arithmetic rules. This differs from 
 * the religious Islamic calendar which is used to mark the beginning of particular 
 * holidays. The religious calendar depends on the first sighting of the new 
 * crescent moon to determine the first day of the new month. Because humans and 
 * weather are both involved, the actual time of sighting varies, so it is not 
 * really possible to precalculate the religious calendar. Certain groups, such 
 * as the Islamic Society of North America, decreed in in 2007 that they will use
 * a calendar based on calculations rather than observations to determine the 
 * beginning of lunar months, and therefore the dates of holidays.<p>
 * 
 * Depends directive: !depends islamic.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.Islamic = function() {
	this.type = "islamic";
};

/**
 * @private
 * @const
 * @type Array.<number>
 * the lengths of each month 
 */
ilib.Cal.Islamic.monthLengths = [
	30,  /* Muharram */
	29,  /* Saffar */
	30,  /* Rabi'I */
	29,  /* Rabi'II */
	30,  /* Jumada I */
	29,  /* Jumada II */
	30,  /* Rajab */
	29,  /* Sha'ban */
	30,  /* Ramadan */
	29,  /* Shawwal */
	30,  /* Dhu al-Qa'da */
	29   /* Dhu al-Hijja */
];


/**
 * Return the number of months in the given year. The number of months in a year varies
 * for luni-solar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=first month, 2=second month, etc.
 * 
 * @param {number} year a year for which the number of months is sought
 */
ilib.Cal.Islamic.prototype.getNumMonths = function(year) {
	return 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of things
 * like leap years.
 *
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @return {number} the number of days within the given month in the given year
 */
ilib.Cal.Islamic.prototype.getMonLength = function(month, year) {
	if (month !== 12) {
		return ilib.Cal.Islamic.monthLengths[month-1];
	} else {
		return this.isLeapYear(year) ? 30 : 29;
	}
};

/**
 * Return true if the given year is a leap year in the Islamic calendar.
 * The year parameter may be given as a number, or as a IslamicDate object.
 * @param {number} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.Islamic.prototype.isLeapYear = function(year) {
	return (ilib.mod((14 + 11 * year), 30) < 11);
};

/**
 * Return the type of this calendar.
 * 
 * @return {string} the name of the type of this calendar 
 */
ilib.Cal.Islamic.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.Islamic.prototype.newDateInstance = function (options) {
	return new ilib.Date.IslamicDate(options);
};

/*register this calendar for the factory method */
ilib.Cal._constructors["islamic"] = ilib.Cal.Islamic;

/*
 * islamicdate.js - Represent a date in the Islamic calendar
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/islamic.js 
util/utils.js 
util/search.js
localeinfo.js
julianday.js
*/

/**
 * @class
 * 
 * Construct a new civil Islamic date object. The constructor can be called
 * with a params object that can contain the following properties:<p>
 * 
 * <ul>
 * <li><i>julianday</i> - the Julian Day to set into this date
 * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year
 * <li><i>month</i> - 1 to 12, where 1 means Muharram, 2 means Saffar, etc.
 * <li><i>day</i> - 1 to 30
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * <li><i>minute</i> - 0 to 59
 * <li><i>second</i> - 0 to 59
 * <li><i>millisecond</i> - 0 to 999
 * <li><i>locale</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this julian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * <li><i>timezone</i> - the time zone of this instance. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale. 
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 * 
 * If called with another Islamic date argument, the date components of the given
 * date are copied into the current one.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>julianday</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * Depends directive: !depends islamicdate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Islamic date
 */
ilib.Date.IslamicDate = function(params) {
	this.cal = new ilib.Cal.Islamic();
	
	if (params) {
		if (params.timezone) {
			this.timezone = params.timezone;
		}
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			if (!this.timezone) {
				var li = new ilib.LocaleInfo(this.locale);
				this.timezone = li.getTimeZone(); 
			}
		}

		if (typeof(params.date) !== 'undefined') {
			// accept JS Date classes or strings
			var date = params.date;
			if (!(date instanceof Date)) {
				date = new Date(date);
			}
			this.timezone = "Etc/UTC";
			this.setTime(date.getTime());
		} else if (typeof(params.unixtime) != 'undefined') {
			this.setTime(parseInt(params.unixtime, 10));
		} else if (typeof(params.julianday) != 'undefined') {
			// JD time is defined to be UTC
			this.timezone = "Etc/UTC";
			this.setJulianDay(parseFloat(params.julianday));
		} else if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond ) {
			/**
			 * Year in the Islamic calendar.
			 * @type number
			 */
			this.year = parseInt(params.year, 10) || 0;

			/**
			 * The month number, ranging from 1 to 12 (December).
			 * @type number
			 */
			this.month = parseInt(params.month, 10) || 1;

			/**
			 * The day of the month. This ranges from 1 to 30.
			 * @type number
			 */
			this.day = parseInt(params.day, 10) || 1;
			
			/**
			 * The hour of the day. This can be a number from 0 to 23, as times are
			 * stored unambiguously in the 24-hour clock.
			 * @type number
			 */
			this.hour = parseInt(params.hour, 10) || 0;

			/**
			 * The minute of the hours. Ranges from 0 to 59.
			 * @type number
			 */
			this.minute = parseInt(params.minute, 10) || 0;

			/**
			 * The second of the minute. Ranges from 0 to 59.
			 * @type number
			 */
			this.second = parseInt(params.second, 10) || 0;

			/**
			 * The millisecond of the second. Ranges from 0 to 999.
			 * @type number
			 */
			this.millisecond = parseInt(params.millisecond, 10) || 0;
			
			/**
			 * The day of the year. Ranges from 1 to 355.
			 * @type number
			 */
			this.dayOfYear = parseInt(params.dayOfYear, 10);
		} else if (typeof(params.rd) != 'undefined') {
			// private parameter. Do not document this!
			this.setRd(params.rd);
		} else {
			var now = new Date();
			this.setTime(now.getTime());
		}
	} else {
		var now = new Date();
		this.setTime(now.getTime());
	}
};

ilib.Date.IslamicDate.prototype = new ilib.Date();
ilib.Date.IslamicDate.prototype.parent = ilib.Date;
ilib.Date.IslamicDate.prototype.constructor = ilib.Date.IslamicDate;

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month, for a non-leap year 
 */
ilib.Date.IslamicDate.cumMonthLengths = [
	0,  /* Muharram */
	30,  /* Saffar */
	59,  /* Rabi'I */
	89,  /* Rabi'II */
	118,  /* Jumada I */
	148,  /* Jumada II */
	177,  /* Rajab */
	207,  /* Sha'ban */
	236,  /* Ramadan */
	266,  /* Shawwal */
	295,  /* Dhu al-Qa'da */
	325,  /* Dhu al-Hijja */
	354
];

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month, for a leap year 
 */
ilib.Date.IslamicDate.cumMonthLengthsLeap = [
	0,  /* Muharram */
	30,  /* Saffar */
	59,  /* Rabi'I */
	89,  /* Rabi'II */
	118,  /* Jumada I */
	148,  /* Jumada II */
	177,  /* Rajab */
	207,  /* Sha'ban */
	236,  /* Ramadan */
	266,  /* Shawwal */
	295,  /* Dhu al-Qa'da */
	325,  /* Dhu al-Hijja */
	355
];

/**
 * @private
 * @const
 * @type number
 * Number of days difference between RD 0 of the Gregorian calendar and
 * RD 0 of the Islamic calendar. 
 */
ilib.Date.IslamicDate.GregorianDiff = 227015;

/**
 * @private
 * @const
 * @type number
 * The difference between a zero Julian day and the first Islamic date
 * of Friday, July 16, 622 CE Julian. 
 */
ilib.Date.IslamicDate.epoch = 1948439.5;

/**
 * @private
 * Return the Rata Die (fixed day) number of the given date.
 * 
 * @param {Object} date islamic date to calculate
 * @return {number} the rd date as a number
 */
ilib.Date.IslamicDate.prototype.calcRataDie = function(date) {
	var days = (date.year - 1) * 354 +
		Math.ceil(29.5 * (date.month - 1)) +
		date.day +
		Math.floor((3 + 11 * date.year) / 30) - 1;
	var time = (date.hour * 3600000 +
		date.minute * 60000 +
		date.second * 1000 +
		date.millisecond) / 
		86400000; 
	
	//console.log("getRataDie: converting " +  JSON.stringify(date));
	//console.log("getRataDie: days is " +  days);
	//console.log("getRataDie: time is " +  time);
	//console.log("getRataDie: rd is " +  (days + time));
	
	return days + time;
};

/**
 * @private
 * Return the Rata Die (fixed day) number of this date.
 * 
 * @return {number} the rd date as a number
 */
ilib.Date.IslamicDate.prototype.getRataDie = function() {
	return this.calcRataDie(this);
};

/**
 * @private
 * Calculate date components for the given RD date.
 * @return {Object.<{year:number,month:number,day:number,hour:number,minute:number,second:number,millisecond:number}>} object containing the fields
 */
ilib.Date.IslamicDate.prototype.calcComponents = function (rd) {
	var ret = {},
		remainder,
		m;
	
	ret.year = Math.floor((30 * rd + 10646) / 10631);
	
	//console.log("IslamicDate.calcComponent: calculating for rd " + rd);
	//console.log("IslamicDate.calcComponent: year is " + ret.year);
	remainder = rd - this.calcRataDie({
		year: ret.year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	}) + 1;
	
	ret.dayOfYear = remainder;
	
	//console.log("IslamicDate.calcComponent: remainder is " + remainder);
	
	ret.month = ilib.bsearch(remainder, ilib.Date.IslamicDate.cumMonthLengths);
	remainder -= ilib.Date.IslamicDate.cumMonthLengths[ret.month-1];

	//console.log("IslamicDate.calcComponent: month is " + ret.month + " and remainder is " + remainder);
	
	ret.day = Math.floor(remainder);
	remainder -= ret.day;

	//console.log("IslamicDate.calcComponent: day is " + ret.day + " and remainder is " + remainder);

	// now convert to milliseconds for the rest of the calculation
	remainder = Math.round(remainder * 86400000);
	
	ret.hour = Math.floor(remainder/3600000);
	remainder -= ret.hour * 3600000;
	
	ret.minute = Math.floor(remainder/60000);
	remainder -= ret.minute * 60000;
	
	ret.second = Math.floor(remainder/1000);
	remainder -= ret.second * 1000;
	
	ret.millisecond = remainder;
	
	return ret;
};

/**
 * @private
 * Set the date components of this instance based on the given rd.
 * @param {number} rd the rata die date to set
 */
ilib.Date.IslamicDate.prototype.setRd = function (rd) {
	var fields = this.calcComponents(rd);
	
	this.year = fields.year;
	this.month = fields.month;
	this.day = fields.day;
	this.hour = fields.hour;
	this.minute = fields.minute;
	this.second = fields.second;
	this.millisecond = fields.millisecond;
};

/**
 * Set the date of this instance using a Julian Day.
 * @param {number} date the Julian Day to use to set this date
 */
ilib.Date.IslamicDate.prototype.setJulianDay = function (date) {
	var jd = (typeof(date) === 'number') ? new ilib.JulianDay(date) : date,
		rd;	// rata die -- # of days since the beginning of the calendar
	
	rd = jd.getDate() - ilib.Date.IslamicDate.epoch; 	// Julian Days start at noon
	this.setRd(rd);
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.IslamicDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.getRataDie());
	return ilib.mod(rd-2, 7);
};


/**
 * @private
 * Return the rd of the particular day of the week on or before the given rd.
 * eg. The Sunday on or before the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 */
ilib.Date.IslamicDate.prototype.onOrBeforeRd = function(rd, dayOfWeek) {
	return rd - ilib.mod(Math.floor(rd) - dayOfWeek - 2, 7);
};

/**
 * @private
 * Return the rd of the particular day of the week on or before the given rd.
 * eg. The Sunday on or before the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 */
ilib.Date.IslamicDate.prototype.onOrAfterRd = function(rd, dayOfWeek) {
	return this.onOrBeforeRd(rd+6, dayOfWeek);
};

/**
 * @private
 * Return the rd of the particular day of the week before the given rd.
 * eg. The Sunday before the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 */
ilib.Date.IslamicDate.prototype.beforeRd = function(rd, dayOfWeek) {
	return this.onOrBeforeRd(rd-1, dayOfWeek);
};

/**
 * @private
 * Return the rd of the particular day of the week after the given rd.
 * eg. The Sunday after the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 */
ilib.Date.IslamicDate.prototype.afterRd = function(rd, dayOfWeek) {
	return this.onOrBeforeRd(rd+7, dayOfWeek);
};

/**
 * @private
 * Return the rd of the first Sunday of the given ISO year.
 * @return the rd of the first Sunday of the ISO year
 */
ilib.Date.IslamicDate.prototype.firstSunday = function (year) {
	var jan1 = this.calcRataDie({
		year: year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	var firstThu = this.onOrAfterRd(jan1, 4);
	return this.beforeRd(firstThu, 0);
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week before the current date that is being sought
 * @returns {ilib.Date.IslamicDate} the date being sought
 */
ilib.Date.IslamicDate.prototype.before = function (dow) {
	return new ilib.Date.IslamicDate({rd: this.beforeRd(this.getRataDie(), dow)});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week after the current date that is being sought
 * @returns {ilib.Date.IslamicDate} the date being sought
 */
ilib.Date.IslamicDate.prototype.after = function (dow) {
	return new ilib.Date.IslamicDate({rd: this.afterRd(this.getRataDie(), dow)});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or before the current date that is being sought
 * @returns {ilib.Date.IslamicDate} the date being sought
 */
ilib.Date.IslamicDate.prototype.onOrBefore = function (dow) {
	return new ilib.Date.IslamicDate({rd: this.onOrBeforeRd(this.getRataDie(), dow)});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or after the current date that is being sought
 * @returns {ilib.Date.IslamicDate} the date being sought
 */
ilib.Date.IslamicDate.prototype.onOrAfter = function (dow) {
	return new ilib.Date.IslamicDate({rd: this.onOrAfterRd(this.getRataDie(), dow)});
};

/**
 * Return the week number in the current year for the current date. This is calculated
 * similar to the ISO 8601 for a Gregorian calendar, but is not an ISO week number. 
 * The week number ranges from 1 to 51.
 * 
 * @return {number} the week number for the current date
 */
ilib.Date.IslamicDate.prototype.getWeekOfYear = function() {
	var rd = Math.floor(this.getRataDie()),
		yearStart = this.firstSunday(this.year),
		nextYear;
	
	// if we have a Muh date, it may be in this year or the previous year
	if (rd < yearStart) {
		yearStart = this.firstSunday(this.year-1);
	} else if (this.month == 12 && this.day > 25) {
		// if we have a late Dhu al'Hijja date, it may be in this year, or the next year
		nextYear = this.firstSunday(this.year+1);
		if (rd >= nextYear) {
			yearStart = nextYear;
		}
	}
	
	return Math.floor((rd-yearStart)/7) + 1;
};

/**
 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
 * 354 or 355, regardless of months or weeks, etc. That is, Muharran 1st is day 1, and 
 * Dhu al-Hijja 29 is 354.
 * @return {number} the ordinal day of the year
 */
ilib.Date.IslamicDate.prototype.getDayOfYear = function() {
	return ilib.Date.IslamicDate.cumMonthLengths[this.month-1] + this.day;
};

/**
 * Return the ordinal number of the week within the month. The first week of a month is
 * the first one that contains 4 or more days in that month. If any days precede this
 * first week, they are marked as being in week 0. This function returns values from 0
 * through 6.<p>
 * 
 * The locale is a required parameter because different locales that use the same 
 * Islamic calendar consider different days of the week to be the beginning of
 * the week. This can affect the week of the month in which some days are located.
 * 
 * @param {ilib.Locale|string} locale the locale or locale spec to use when figuring out 
 * the first day of the week
 * @return {number} the ordinal number of the week within the current month
 */
ilib.Date.IslamicDate.prototype.getWeekOfMonth = function(locale) {
	var li = new ilib.LocaleInfo(locale),
		first = this.calcRataDie({
			year: this.year,
			month: this.month,
			day: 1,
			hour: 0,
			minute: 0,
			second: 0,
			millisecond: 0
		}),
		rd = this.getRataDie(),
		weekStart = this.onOrAfterRd(first, li.getFirstDayOfWeek());
	if (weekStart - first > 3) {
		// if the first week has 4 or more days in it of the current month, then consider
		// that week 1. Otherwise, it is week 0. To make it week 1, move the week start
		// one week earlier.
		weekStart -= 7;
	}
	return Math.floor((rd - weekStart) / 7) + 1;
};

/**
 * Return the era for this date as a number. The value for the era for Islamic 
 * calendars is -1 for "before the Islamic era" and 1 for "the Islamic era". 
 * Islamic era dates are any date after Muharran 1, 1, which is the same as
 * July 16, 622 CE in the Gregorian calendar. 
 * 
 * @return {number} 1 if this date is in the common era, -1 if it is before the 
 * common era 
 */
ilib.Date.IslamicDate.prototype.getEra = function() {
	return (this.year < 1) ? -1 : 1;
};

/**
 * Return the unix time equivalent to this Islamic date instance. Unix time is
 * the number of milliseconds since midnight on Jan 1, 1970 Gregorian. This method only
 * returns a valid number for dates between midnight, Jan 1, 1970 and  
 * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance 
 * encodes a date outside of that range, this method will return -1.
 * 
 * @return {number} a number giving the unix time, or -1 if the date is outside the
 * valid unix time range
 */
ilib.Date.IslamicDate.prototype.getTime = function() {
	if (typeof(this.unixtime) === 'number') {
		return this.unixtime;
	}
	// not stored, so calculate it
	var rd = this.calcRataDie({
		year: this.year,
		month: this.month,
		day: this.day,
		hour: this.hour,
		minute: this.minute,
		second: this.second,
		millisecond: 0
	});

	// earlier than Jan 1, 1970
	// or later than Jan 19, 2038 at 3:14:07am
	if (rd < 492148 || rd > 517003.134803241) { 
		return -1;
	}

	// avoid the rounding errors in the floating point math by only using
	// the whole days from the rd, and then calculating the milliseconds directly
	var seconds = Math.floor(rd - 492148) * 86400 + 
		this.hour * 3600 +
		this.minute * 60 +
		this.second;
	this.unixtime = seconds * 1000 + this.millisecond;
	
	return this.unixtime;
};

/**
 * Set the time of this instance according to the given unix time. Unix time is
 * the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * @param {number} millis the unix time to set this date to in milliseconds 
 */
ilib.Date.IslamicDate.prototype.setTime = function(millis) {
	var rd = 492148 + millis / 86400000;
	this.setRd(rd);
};

/**
 * Return a Javascript Date object that is equivalent to this Islamic date
 * object.
 * 
 * @return {Date|undefined} a javascript Date object
 */
ilib.Date.IslamicDate.prototype.getJSDate = function() {
	var unix = this.getTime();
	return (unix === -1) ? undefined : new Date(unix); 
};

/**
 * Return the Julian Day equivalent to this calendar date as a number.
 * 
 * @return {number} the julian date equivalent of this date
 */
ilib.Date.IslamicDate.prototype.getJulianDay = function() {
	return this.getRataDie() + ilib.Date.IslamicDate.epoch;
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.IslamicDate.prototype.getCalendar = function() {
	return "islamic";
};

/**
 * Return the time zone associated with this Islamic date, or 
 * undefined if none was specified in the constructor.
 * 
 * @return {string|undefined} the name of the time zone for this date instance
 */
ilib.Date.IslamicDate.prototype.getTimeZone = function() {
	return this.timezone || "local";
};


/**
 * Set the time zone associated with this Islamic date.
 * @param {string} tzName the name of the time zone to set into this date instance,
 * or "undefined" to unset the time zone 
 */
ilib.Date.IslamicDate.prototype.setTimeZone = function (tzName) {
	if (!tzName || tzName === "") {
		// same as undefining it
		this.timezone = undefined;
	} else if (typeof(tzName) === 'string') {
		this.timezone = tzName;
	}
};

//register with the factory method
ilib.Date._constructors["islamic"] = ilib.Date.IslamicDate;
/*
 * julian.js - Represent a Julian calendar object.
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js util/utils.js */

/**
 * @class
 * Construct a new Julian calendar object. This class encodes information about
 * a Julian calendar.<p>
 * 
 * Depends directive: !depends julian.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.Julian = function() {
	this.type = "julian";
};

/* the lengths of each month */
ilib.Cal.Julian.monthLengths = [
	31,  /* Jan */
	28,  /* Feb */
	31,  /* Mar */
	30,  /* Apr */
	31,  /* May */
	30,  /* Jun */
	31,  /* Jul */
	31,  /* Aug */
	30,  /* Sep */
	31,  /* Oct */
	30,  /* Nov */
	31   /* Dec */
];

/**
 * Return the number of months in the given year. The number of months in a year varies
 * for lunar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=Jaunary, 2=February, etc. until 12=December.
 * 
 * @param {number} year a year for which the number of months is sought
 */
ilib.Cal.Julian.prototype.getNumMonths = function(year) {
	return 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of things
 * like leap years.
 * 
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @return {number} the number of days within the given month in the given year
 */
ilib.Cal.Julian.prototype.getMonLength = function(month, year) {
	if (month !== 2 || !this.isLeapYear(year)) {
		return ilib.Cal.Julian.monthLengths[month-1];
	} else {
		return 29;
	}
};

/**
 * Return true if the given year is a leap year in the Julian calendar.
 * The year parameter may be given as a number, or as a JulDate object.
 * @param {number|ilib.Date.JulDate} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.Julian.prototype.isLeapYear = function(year) {
	var y = (typeof(year) === 'number' ? year : year.year);
	return ilib.mod(y, 4) === ((year > 0) ? 0 : 3);
};

/**
 * Return the type of this calendar.
 * 
 * @return {string} the name of the type of this calendar 
 */
ilib.Cal.Julian.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.Julian.prototype.newDateInstance = function (options) {
	return new ilib.Date.JulDate(options);
};

/* register this calendar for the factory method */
ilib.Cal._constructors["julian"] = ilib.Cal.Julian;
/*
 * juliandate.js - Represent a date in the Julian calendar
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/julian.js 
util/utils.js
util/search.js 
localeinfo.js 
julianday.js 
*/

/**
 * @class
 * 
 * Construct a new date object for the Julian Calendar. The constructor can be called
 * with a parameter object that contains any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).
 * <li><i>julianday</i> - the Julian Day to set into this date
 * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero 
 * year which doesn't exist in the Julian calendar
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * <li><i>day</i> - 1 to 31
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * <li><i>minute</i> - 0 to 59
 * <li><i>second</i> - 0 to 59
 * <li><i>millisecond<i> - 0 to 999
 * <li><i>locale</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this julian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * <li><i>timezone</i> - the time zone of this instance. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale. 
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 * 
 * NB. The <a href="http://en.wikipedia.org/wiki/Julian_date">Julian Day</a> 
 * (ilib.JulianDay) object is a <i>different</i> object than a 
 * <a href="http://en.wikipedia.org/wiki/Julian_calendar">date in
 * the Julian calendar</a> and the two are not to be confused. The Julian Day 
 * object represents time as a number of whole and fractional days since the 
 * beginning of the epoch, whereas a date in the Julian 
 * calendar is a regular date that signifies year, month, day, etc. using the rules
 * of the Julian calendar. The naming of Julian Days and the Julian calendar are
 * unfortunately close, and come from history.<p>
 *  
 * If called with another Julian date argument, the date components of the given
 * date are copied into the current one.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * Depends directive: !depends juliandate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Julian date
 */
ilib.Date.JulDate = function(params) {
	this.cal = new ilib.Cal.Julian();
	
	if (params) {
		if (params.timezone) {
			this.timezone = params.timezone;
		}
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			if (!this.timezone) {
				var li = new ilib.LocaleInfo(this.locale);
				this.timezone = li.getTimeZone(); 
			}
		}

		if (typeof(params.date) !== 'undefined') {
			// accept JS Date classes or strings
			var date = params.date;
			if (!(date instanceof Date)) {
				date = new Date(date);
			}
			this.timezone = "Etc/UTC";
			this.setTime(date.getTime());
		} else if (typeof(params.unixtime) != 'undefined') {
			this.setTime(parseInt(params.unixtime, 10));
		} else if (typeof(params.julianday) != 'undefined') {
			// JD time is defined to be UTC
			this.timezone = "Etc/UTC";
			this.setJulianDay(parseFloat(params.julianday));
		} else if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond ) {
			/**
			 * Year in the Julian calendar.
			 * @type number
			 */
			this.year = parseInt(params.year, 10) || 0;
			/**
			 * The month number, ranging from 1 (January) to 12 (December).
			 * @type number
			 */
			this.month = parseInt(params.month, 10) || 1;
			/**
			 * The day of the month. This ranges from 1 to 31.
			 * @type number
			 */
			this.day = parseInt(params.day, 10) || 1;
			/**
			 * The hour of the day. This can be a number from 0 to 23, as times are
			 * stored unambiguously in the 24-hour clock.
			 * @type number
			 */
			this.hour = parseInt(params.hour, 10) || 0;
			/**
			 * The minute of the hours. Ranges from 0 to 59.
			 * @type number
			 */
			this.minute = parseInt(params.minute, 10) || 0;
			/**
			 * The second of the minute. Ranges from 0 to 59.
			 * @type number
			 */
			this.second = parseInt(params.second, 10) || 0;
			/**
			 * The millisecond of the second. Ranges from 0 to 999.
			 * @type number
			 */
			this.millisecond = parseInt(params.millisecond, 10) || 0;
		} else if (typeof(params.rd) != 'undefined') {
			// private parameter. Do not document this!
			this.setRd(params.rd);
		} else {
			var now = new Date();
			this.setTime(now.getTime());
		}
	} else {
		var now = new Date();
		this.setTime(now.getTime());
	}
};

ilib.Date.JulDate.prototype = new ilib.Date();
ilib.Date.JulDate.prototype.parent = ilib.Date;
ilib.Date.JulDate.prototype.constructor = ilib.Date.JulDate;

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month, for a non-leap year 
 */
ilib.Date.JulDate.cumMonthLengths = [
    0,   /* Jan */
	31,  /* Feb */
	59,  /* Mar */
	90,  /* Apr */
	120, /* May */
	151, /* Jun */
	181, /* Jul */
	212, /* Aug */
	243, /* Sep */
	273, /* Oct */
	304, /* Nov */
	334, /* Dec */
	365
];

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month, for a leap year 
 */
ilib.Date.JulDate.cumMonthLengthsLeap = [
	0,   /* Jan */
	31,  /* Feb */
	60,  /* Mar */
	91,  /* Apr */
	121, /* May */
	152, /* Jun */
	182, /* Jul */
	213, /* Aug */
	244, /* Sep */
	274, /* Oct */
	305, /* Nov */
	335, /* Dec */
	366
];

/**
 * @private
 * @const
 * @type number
 * the difference between a zero Julian day and the first Julian date. */
ilib.Date.JulDate.epoch = 1721422.5;

/**
 * @private
 * Return the Rata Die (fixed day) number for the given date.
 * @param {Object} parts the parts to calculate with
 * @return {number} the rd date as a number
 */
ilib.Date.JulDate.prototype.calcRataDie = function(parts) {
	var year = parts.year + ((parts.year < 0) ? 1 : 0);
	var years = 365 * (year - 1) + Math.floor((year-1)/4);
	var dayInYear = (parts.month > 1 ? ilib.Date.JulDate.cumMonthLengths[parts.month-1] : 0) +
	parts.day +
		(this.cal.isLeapYear(parts.year) && parts.month > 2 ? 1 : 0);
	var rdtime = (parts.hour * 3600000 +
		parts.minute * 60000 +
		parts.second * 1000 +
		parts.millisecond) / 
		86400000;
	// the arithmetic is not more accurage than this, so just round it to make nice numbers
	rdtime = Math.round(rdtime*10000000)/10000000; 
	
	/*
	console.log("calcRataDie: converting " +  JSON.stringify(parts));
	console.log("getRataDie: year is " +  years);
	console.log("getRataDie: day in year is " +  dayInYear);
	console.log("getRataDie: rdtime is " +  rdtime);
	console.log("getRataDie: rd is " +  (years + dayInYear + rdtime));
	*/
	
	return years + dayInYear + rdtime;
};

/**
 * @private
 * Return the Rata Die (fixed day) number of this date.
 * 
 * @return {number} the rd date as a number
 */
ilib.Date.JulDate.prototype.getRataDie = function() {
	return this.calcRataDie(this);
};

/**
 * @private
 * Calculate date components for the given RD date.
 * @param {number} rd the RD date to calculate components for
 * @return {Object} object containing the component fields
 */
ilib.Date.JulDate.prototype.calcComponents = function (rd) {
	var year,
		remainder,
		cumulative,
		ret = {};
	
	year = Math.floor((4*(Math.floor(rd)-1) + 1464)/1461);
	
	ret.year = (year <= 0) ? year - 1 : year;
	
	remainder = rd + 1 - this.calcRataDie({
		year: ret.year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	
	cumulative = this.cal.isLeapYear(ret.year) ? 
		ilib.Date.JulDate.cumMonthLengthsLeap : 
		ilib.Date.JulDate.cumMonthLengths; 
	
	ret.month = ilib.bsearch(Math.floor(remainder), cumulative);
	remainder = remainder - cumulative[ret.month-1];
	
	ret.day = Math.floor(remainder);
	remainder -= ret.day;
	// now convert to milliseconds for the rest of the calculation
	remainder = Math.round(remainder * 86400000);
	
	ret.hour = Math.floor(remainder/3600000);
	remainder -= ret.hour * 3600000;
	
	ret.minute = Math.floor(remainder/60000);
	remainder -= ret.minute * 60000;
	
	ret.second = Math.floor(remainder/1000);
	remainder -= ret.second * 1000;
	
	ret.millisecond = remainder;
	
	return ret;
};

/**
 * @private
 * Set the date components of this instance based on the given rd.
 * @param {number} rd the rata die date to set
 */
ilib.Date.JulDate.prototype.setRd = function (rd) {
	var fields = this.calcComponents(rd);
	
	this.year = fields.year;
	this.month = fields.month;
	this.day = fields.day;
	this.hour = fields.hour;
	this.minute = fields.minute;
	this.second = fields.second;
	this.millisecond = fields.millisecond;
};

/**
 * Set the date of this instance using a Julian Day.
 * @param {number} date the Julian Day to use to set this date
 */
ilib.Date.JulDate.prototype.setJulianDay = function (date) {
	var jd = (typeof(date) === 'number') ? new ilib.JulianDay(date) : date,
		rd;	// rata die -- # of days since the beginning of the calendar
	
	rd = jd.getDate() - ilib.Date.JulDate.epoch; 	// Julian Days start at noon
	this.setRd(rd);
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.JulDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.getRataDie());
	return ilib.mod(rd-2, 7);
};

/**
 * @private
 * Return the rd of the particular day of the week on or before the given rd.
 * eg. The Sunday on or before the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 * @return {number} the day of the week
 */
ilib.Date.JulDate.prototype.onOrBeforeRd = function(rd, dayOfWeek) {
	return rd - ilib.mod(Math.floor(rd) - dayOfWeek - 2, 7);
};

/**
 * @private
 * Return the rd of the particular day of the week on or before the given rd.
 * eg. The Sunday on or before the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 * @return {number} the day of the week
 */
ilib.Date.JulDate.prototype.onOrAfterRd = function(rd, dayOfWeek) {
	return this.onOrBeforeRd(rd+6, dayOfWeek);
};

/**
 * @private
 * Return the rd of the particular day of the week before the given rd.
 * eg. The Sunday before the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 * @return {number} the day of the week
 */
ilib.Date.JulDate.prototype.beforeRd = function(rd, dayOfWeek) {
	return this.onOrBeforeRd(rd-1, dayOfWeek);
};

/**
 * @private
 * Return the rd of the particular day of the week after the given rd.
 * eg. The Sunday after the given rd.
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the reference date
 * @return {number} the day of the week
 */
ilib.Date.JulDate.prototype.afterRd = function(rd, dayOfWeek) {
	return this.onOrBeforeRd(rd+7, dayOfWeek);
};

/**
 * @private
 * Return the rd of the first Sunday of the given ISO year.
 * @param {number} year the year for which the first Sunday is being sought
 * @return the rd of the first Sunday of the ISO year
 */
ilib.Date.JulDate.prototype.firstSunday = function (year) {
	var jan1 = this.calcRataDie({
		year: year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	var firstThu = this.onOrAfterRd(jan1, 4);
	return this.beforeRd(firstThu, 0);
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week before the current date that is being sought
 * @return {ilib.Date.JulDate} the date being sought
 */
ilib.Date.JulDate.prototype.before = function (dow) {
	return new ilib.Date.JulDate({rd: this.beforeRd(this.getRataDie(), dow)});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week after the current date that is being sought
 * @return {ilib.Date.JulDate} the date being sought
 */
ilib.Date.JulDate.prototype.after = function (dow) {
	return new ilib.Date.JulDate({rd: this.afterRd(this.getRataDie(), dow)});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or before the current date that is being sought
 * @return {ilib.Date.JulDate} the date being sought
 */
ilib.Date.JulDate.prototype.onOrBefore = function (dow) {
	return new ilib.Date.JulDate({rd: this.onOrBeforeRd(this.getRataDie(), dow)});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or after the current date that is being sought
 * @return {ilib.Date.JulDate} the date being sought
 */
ilib.Date.JulDate.prototype.onOrAfter = function (dow) {
	return new ilib.Date.JulDate({rd: this.onOrAfterRd(this.getRataDie(), dow)});
};

/**
 * Return the unix time equivalent to this Julian date instance. Unix time is
 * the number of milliseconds since midnight on Jan 1, 1970. This method only
 * returns a valid number for dates between midnight, Jan 1, 1970 and  
 * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance 
 * encodes a date outside of that range, this method will return -1.
 * 
 * @return {number} a number giving the unix time, or -1 if the date is outside the
 * valid unix time range
 */
ilib.Date.JulDate.prototype.getTime = function() {
	if (typeof(this.unixtime) === 'number') {
		return this.unixtime;
	}
	// not stored, so calculate it
	var rd = this.calcRataDie({
		year: this.year,
		month: this.month,
		day: this.day,
		hour: this.hour,
		minute: this.minute,
		second: this.second,
		millisecond: 0
	});
	
	// earlier than Jan 1, 1970
	// or later than Jan 19, 2038 at 3:14:07am
	if (rd < 719165 || rd > 744020.134803241) { 
		return -1;
	}

	// avoid the rounding errors in the floating point math by only using
	// the whole days from the rd, and then calculating the milliseconds directly
	var seconds = Math.floor(rd - 719165) * 86400 + 
		this.hour * 3600 +
		this.minute * 60 +
		this.second;
	this.unixtime = seconds * 1000 + this.millisecond;
	
	return this.unixtime;
};

/**
 * Set the time of this instance according to the given unix time. Unix time is
 * the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * @param {number} millis the unix time to set this date to in milliseconds 
 */
ilib.Date.JulDate.prototype.setTime = function(millis) {
	var rd = 719165 + millis / 86400000;
	this.setRd(rd);
};

/**
 * Return a Javascript Date object that is equivalent to this Julian date
 * object. If the julian date object represents a date that cannot be represented
 * by a Javascript Date object, the value undefined is returned
 * 
 * @return {Date|undefined} a javascript Date object, or undefined if the date is out of range
 */
ilib.Date.JulDate.prototype.getJSDate = function() {
	var unix = this.getTime();
	return (unix === -1) ? undefined : new Date(unix); 
};

/**
 * Return the Julian Day equivalent to this calendar date as a number.
 * 
 * @return {number} the julian date equivalent of this date
 */
ilib.Date.JulDate.prototype.getJulianDay = function() {
	return this.getRataDie() + ilib.Date.JulDate.epoch;
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.JulDate.prototype.getCalendar = function() {
	return "julian";
};

/**
 * Return the time zone associated with this Julian date, or 
 * undefined if none was specified in the constructor.
 * 
 * @return {string|undefined} the name of the time zone for this date instance
 */
ilib.Date.JulDate.prototype.getTimeZone = function() {
	return this.timezone || "local";
};

/**
 * Set the time zone associated with this Julian date.
 * @param {string} tzName the name of the time zone to set into this date instance,
 * or "undefined" to unset the time zone 
 */
ilib.Date.JulDate.prototype.setTimeZone = function (tzName) {
	if (!tzName || tzName === "") {
		// same as undefining it
		this.timezone = undefined;
	} else if (typeof(tzName) === 'string') {
		this.timezone = tzName;
	}
};

//register with the factory method
ilib.Date._constructors["julian"] = ilib.Date.JulDate;
/*
 * gregoriandate.js - Represent a date in the Gregorian calendar
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/gregorian.js 
util/utils.js
util/search.js 
localeinfo.js 
julianday.js
calendar/gregratadie.js
timezone.js
*/

/**
 * @class
 * 
 * Construct a new Gregorian date object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>dst</i> - boolean used to specify whether the given time components are
 * intended to be in daylight time or not. This is only used in the overlap
 * time when transitioning from DST to standard time, and the time components are 
 * ambiguous. Otherwise at all other times of the year, this flag is ignored.
 * If you specify the date using unix time (UTC) or a julian day, then the time is
 * already unambiguous and this flag does not need to be specified.
 * <p>
 * For example, in the US, the transition out of daylight savings time 
 * in 2014 happens at Nov 2, 2014 2:00am Daylight Time, when the time falls 
 * back to Nov 2, 2014 1:00am Standard Time. If you give a date/time components as 
 * "Nov 2, 2014 1:30am", then there are two 1:30am times in that day, and you would 
 * have to give the standard flag to indicate which of those two you mean. 
 * (dst=true means daylight time, dst=false means standard time).   
 * 
 * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this gregorian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * 
 * <li><i>locale</i> - locale for this gregorian date. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale.
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Gregorian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends gregoriandate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian date
 */
ilib.Date.GregDate = function(params) {
	this.cal = new ilib.Cal.Gregorian();
	this.timezone = "local";

	if (params) {
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			var li = new ilib.LocaleInfo(this.locale);
			this.timezone = li.getTimeZone(); 
		}
		if (params.timezone) {
			this.timezone = params.timezone;
		}
		
		if (typeof(params.date) !== 'undefined') {
			// accept JS Date classes or strings
			var date = params.date;
			if (!(date instanceof Date)) {
				date = new Date(date);
			}
			this.setTime(date.getTime());
		} else if (typeof(params.unixtime) !== 'undefined') {
			this.setTime(parseInt(params.unixtime, 10));
		} else if (typeof(params.julianday) !== 'undefined') {
			this.setJulianDay(parseFloat(params.julianday));
		} else if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond ) {
			this.year = parseInt(params.year, 10) || 0;
			this.month = parseInt(params.month, 10) || 1;
			this.day = parseInt(params.day, 10) || 1;
			this.hour = parseInt(params.hour, 10) || 0;
			this.minute = parseInt(params.minute, 10) || 0;
			this.second = parseInt(params.second, 10) || 0;
			this.millisecond = parseInt(params.millisecond, 10) || 0;
			if (typeof(params.dst) === 'boolean') {
				this.dst = params.dst;
			}
			this.rd = new ilib.Date.GregRataDie(params);
			
			// add the time zone offset to the rd to convert to UTC
			var offset = 0;
			if (this.timezone === "local" && typeof(params.dst) === 'undefined') {
				// if dst is defined, the intrinsic Date object has no way of specifying which version of a time you mean
				// in the overlap time at the end of DST. Do you mean the daylight 1:30am or the standard 1:30am? In this
				// case, use the ilib calculations below, which can distinguish between the two properly
				var d = new Date(this.year, this.month-1, this.day, this.hour, this.minute, this.second, this.millisecond);
				offset = d.getTimezoneOffset() / 1440;
			} else {
				if (!this.tz) {
					this.tz = new ilib.TimeZone({id: this.timezone});
				}
				// getOffsetMillis requires that this.year, this.rd, and this.dst 
				// are set in order to figure out which time zone rules apply and 
				// what the offset is at that point in the year
				offset = -this.tz._getOffsetMillisWallTime(this) / 86400000;
			}
			if (offset !== 0) {
				this.rd = new ilib.Date.GregRataDie({
					rd: this.rd.getRataDie() + offset
				});
			}
		} else if (typeof(params.rd) !== 'undefined') {
			// private parameter. Do not document this!
			this.setRd(params.rd);
		}
	} 

	if (!this.rd) {
		var now = new Date();
		this.setTime(now.getTime());
	}
};

ilib.Date.GregDate.prototype = new ilib.Date();
ilib.Date.GregDate.prototype.parent = ilib.Date;
ilib.Date.GregDate.prototype.constructor = ilib.Date.GregDate;

/**
 * @private
 * Return the Rata Die (fixed day) number of this date.
 * 
 * @return {number} the rd date as a number
 */
ilib.Date.GregDate.prototype.getRataDie = function() {
	return this.rd.getRataDie();
};

/**
 * @private
 * Set the date components of this instance based on the given rd.
 * @param {number} rd the rata die date to set
 */
ilib.Date.GregDate.prototype.setRd = function (rd) {
	this.rd = new ilib.Date.GregRataDie({rd: rd});
	this.calcDateComponents();
};

/**
 * @private
 * Calculates the Gregorian year for a given rd number.
 */
ilib.Date.GregDate.prototype._calcYear = function(rd) {
	var days400,
		days100,
		days4,
		years400,
		years100,
		years4,
		years1,
		year;

	years400 = Math.floor((rd - 1) / 146097);
	days400 = ilib.mod((rd - 1), 146097);
	years100 = Math.floor(days400 / 36524);
	days100 = ilib.mod(days400, 36524);
	years4 = Math.floor(days100 / 1461);
	days4 = ilib.mod(days100, 1461);
	years1 = Math.floor(days4 / 365);
	
	year = 400 * years400 + 100 * years100 + 4 * years4 + years1;
	if (years100 !== 4 && years1 !== 4) {
		year++;
	}
	return year;
};

/**
 * @private
 * Calculate the date components for the current time zone
 */
ilib.Date.GregDate.prototype.calcDateComponents = function () {
	if (this.timezone === "local" && this.rd.getRataDie() >= 719163 && this.rd.getRataDie() <= 744018.134803241) {
		// use the intrinsic JS Date object to do the tz conversion for us, which 
		// guarantees that it follows the system tz database settings 
		var d = new Date(this.rd.getTime());
	
		/**
		 * Year in the Gregorian calendar.
		 * @type number
		 */
		this.year = d.getFullYear();
		
		/**
		 * The month number, ranging from 1 (January) to 12 (December).
		 * @type number
		 */
		this.month = d.getMonth()+1;
		
		/**
		 * The day of the month. This ranges from 1 to 31.
		 * @type number
		 */
		this.day = d.getDate();
		
		/**
		 * The hour of the day. This can be a number from 0 to 23, as times are
		 * stored unambiguously in the 24-hour clock.
		 * @type number
		 */
		this.hour = d.getHours();
		
		/**
		 * The minute of the hours. Ranges from 0 to 59.
		 * @type number
		 */
		this.minute = d.getMinutes();
		
		/**
		 * The second of the minute. Ranges from 0 to 59.
		 * @type number
		 */
		this.second = d.getSeconds();
		
		/**
		 * The millisecond of the second. Ranges from 0 to 999.
		 * @type number
		 */
		this.millisecond = d.getMilliseconds();
	} else {
		this.year = this._calcYear(this.rd.getRataDie());
		
		// now offset the RD by the time zone, then recalculate in case we were 
		// near the year boundary
		if (!this.tz) {
			this.tz = new ilib.TimeZone({id: this.timezone});
		}
		var offset = this.tz.getOffsetMillis(this) / 86400000;
		var rd = this.rd.getRataDie();
		if (offset !== 0) {
			rd += offset;
			this.year = this._calcYear(rd);
		}
		
		var yearStartRd = new ilib.Date.GregRataDie({
			year: this.year,
			month: 1,
			day: 1
		});
		
		// remainder is days into the year
		var remainder = rd - yearStartRd.getRataDie() + 1;
		
		var cumulative = ilib.Cal.Gregorian.prototype.isLeapYear.call(this.cal, this.year) ? 
			ilib.Date.GregRataDie.cumMonthLengthsLeap : 
			ilib.Date.GregRataDie.cumMonthLengths; 
		
		this.month = ilib.bsearch(Math.floor(remainder), cumulative);
		remainder = remainder - cumulative[this.month-1];
		
		this.day = Math.floor(remainder);
		remainder -= this.day;
		// now convert to milliseconds for the rest of the calculation
		remainder = Math.round(remainder * 86400000);
		
		this.hour = Math.floor(remainder/3600000);
		remainder -= this.hour * 3600000;
		
		this.minute = Math.floor(remainder/60000);
		remainder -= this.minute * 60000;
		
		this.second = Math.floor(remainder/1000);
		remainder -= this.second * 1000;
		
		this.millisecond = Math.floor(remainder);
	}
};

/**
 * Set the date of this instance using a Julian Day.
 * @param {number|ilib.JulianDay} date the Julian Day to use to set this date
 */
ilib.Date.GregDate.prototype.setJulianDay = function (date) {
	this.rd = new ilib.Date.GregRataDie({julianday: (typeof(date) === 'object') ? date.getDate() : date});
	this.calcDateComponents();
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.GregDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.rd.getRataDie());
	return ilib.mod(rd, 7);
};

/**
 * @private
 * Return the rd number of the first Sunday of the given ISO year.
 * @param {number} year the year for which the first Sunday is being sought
 * @return {number} the rd of the first Sunday of the ISO year
 */
ilib.Date.GregDate.prototype.firstSunday = function (year) {
	var jan1 = new ilib.Date.GregRataDie({
		year: year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	var firstThu = new ilib.Date.GregRataDie({rd: jan1.onOrAfterRd(4)});
	return firstThu.beforeRd(0);
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week before the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.GregDate.prototype.before = function (dow) {
	return this.cal.newDateInstance({rd: this.rd.beforeRd(dow)});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week after the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.GregDate.prototype.after = function (dow) {
	return this.cal.newDateInstance({rd: this.rd.afterRd(dow)});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or before the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.GregDate.prototype.onOrBefore = function (dow) {
	return this.cal.newDateInstance({rd: this.rd.onOrBeforeRd(dow)});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or after the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.GregDate.prototype.onOrAfter = function (dow) {
	return this.cal.newDateInstance({rd: this.rd.onOrAfterRd(dow)});
};

/**
 * Return the ISO 8601 week number in the current year for the current date. The week
 * number ranges from 1 to 53, as some years have 53 weeks assigned to them, and most
 * only 52.
 * 
 * @return {number} the week number for the current date
 */
ilib.Date.GregDate.prototype.getWeekOfYear = function() {
	var rd = Math.floor(this.rd.getRataDie()),
		gregorianYear = this._calcYear(rd),
		yearStart = this.firstSunday(gregorianYear),
		nextYear;
	
	// if we have a January date, it may be in this ISO year or the previous year
	if (rd < yearStart) {
		yearStart = this.firstSunday(gregorianYear-1);
	} else if (this.month == 12 && this.day > 25) {
		// if we have a late December date, it may be in this ISO year, or the next year
		nextYear = this.firstSunday(gregorianYear+1);
		if (rd >= nextYear) {
			yearStart = nextYear;
		}
	}
	
	return Math.floor((rd-yearStart)/7) + 1;
};

/**
 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
 * 365, regardless of months or weeks, etc. That is, January 1st is day 1, and 
 * December 31st is 365 in regular years, or 366 in leap years.
 * @return {number} the ordinal day of the year
 */
ilib.Date.GregDate.prototype.getDayOfYear = function() {
	var cumulativeMap = this.cal.isLeapYear(this.year) ? 
		ilib.Date.GregRataDie.cumMonthLengthsLeap : 
		ilib.Date.GregRataDie.cumMonthLengths; 
		
	return cumulativeMap[this.month-1] + this.day;
};

/**
 * Return the ordinal number of the week within the month. The first week of a month is
 * the first one that contains 4 or more days in that month. If any days precede this
 * first week, they are marked as being in week 0. This function returns values from 0
 * through 6.<p>
 * 
 * The locale is a required parameter because different locales that use the same 
 * Gregorian calendar consider different days of the week to be the beginning of
 * the week. This can affect the week of the month in which some days are located.
 * 
 * @param {ilib.Locale|string} locale the locale or locale spec to use when figuring out 
 * the first day of the week
 * @return {number} the ordinal number of the week within the current month
 */
ilib.Date.GregDate.prototype.getWeekOfMonth = function(locale) {
	var li = new ilib.LocaleInfo(locale),
		first = new ilib.Date.GregRataDie({
			year: this._calcYear(this.rd.getRataDie()),
			month: this.month,
			day: 1,
			hour: 0,
			minute: 0,
			second: 0,
			millisecond: 0
		}),
		weekStart = first.onOrAfterRd(li.getFirstDayOfWeek());
	if (weekStart - first.getRataDie() > 3) {
		// if the first week has 4 or more days in it of the current month, then consider
		// that week 1. Otherwise, it is week 0. To make it week 1, move the week start
		// one week earlier.
		weekStart -= 7;
	}
	return Math.floor((this.rd.getRataDie() - weekStart) / 7) + 1;
};

/**
 * Return the era for this date as a number. The value for the era for Gregorian 
 * calendars is -1 for "before the common era" (BCE) and 1 for "the common era" (CE). 
 * BCE dates are any date before Jan 1, 1 CE. In the proleptic Gregorian calendar, 
 * there is a year 0, so any years that are negative or zero are BCE. In the Julian
 * calendar, there is no year 0. Instead, the calendar goes straight from year -1 to 
 * 1.
 * @return {number} 1 if this date is in the common era, -1 if it is before the 
 * common era 
 */
ilib.Date.GregDate.prototype.getEra = function() {
	return (this.year < 1) ? -1 : 1;
};

/**
 * Return the unix time equivalent to this Gregorian date instance. Unix time is
 * the number of milliseconds since midnight on Jan 1, 1970. This method only
 * returns a valid number for dates between midnight, Jan 1, 1970 and  
 * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance 
 * encodes a date outside of that range, this method will return -1. This method
 * returns the time in the local time zone, not in UTC.
 * 
 * @return {number} a number giving the unix time, or -1 if the date is outside the
 * valid unix time range
 */
ilib.Date.GregDate.prototype.getTime = function() {
	return this.rd.getTime(); 
};

/**
 * Set the time of this instance according to the given unix time. Unix time is
 * the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * @param {number} millis the unix time to set this date to in milliseconds 
 */
ilib.Date.GregDate.prototype.setTime = function(millis) {
	this.rd = new ilib.Date.GregRataDie({unixtime: millis});
	this.calcDateComponents();
};

/**
 * Return a Javascript Date object that is equivalent to this Gregorian date
 * object.
 * 
 * @return {Date|undefined} a javascript Date object
 */
ilib.Date.GregDate.prototype.getJSDate = function() {
	var unix = this.rd.getTime();
	return (unix === -1) ? undefined : new Date(unix); 
};

/**
 * Return the Julian Day equivalent to this calendar date as a number.
 * This returns the julian day in the local time zone.
 * 
 * @return {number} the julian date equivalent of this date
 */
ilib.Date.GregDate.prototype.getJulianDay = function() {
	return this.rd.getJulianDay();
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.GregDate.prototype.getCalendar = function() {
	return "gregorian";
};

/**
 * Return the time zone associated with this Gregorian date, or 
 * undefined if none was specified in the constructor.
 * 
 * @return {string|undefined} the name of the time zone for this date instance
 */
ilib.Date.GregDate.prototype.getTimeZone = function() {
	return this.timezone || "local";
};

/**
 * Set the time zone associated with this Gregorian date.
 * @param {string} tzName the name of the time zone to set into this date instance,
 * or "undefined" to unset the time zone 
 */
ilib.Date.GregDate.prototype.setTimeZone = function (tzName) {
	if (!tzName || tzName === "") {
		// same as undefining it
		this.timezone = undefined;
		this.tz = undefined;
	} else if (typeof(tzName) === 'string') {
		this.timezone = tzName;
		this.tz = undefined;
		// assuming the same UTC time, but a new time zone, now we have to 
		// recalculate what the date components are
		this.calcDateComponents();
	}
};

// register with the factory method
ilib.Date._constructors["gregorian"] = ilib.Date.GregDate;
/*
 * thaisolar.js - Represent a Thai solar calendar object.
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js calendar/gregorian.js util/utils.js */

/**
 * @class
 * Construct a new Thai solar calendar object. This class encodes information about
 * a Thai solar calendar.<p>
 * 
 * Depends directive: !depends thaisolar.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.ThaiSolar = function() {
	this.type = "thaisolar";
};

ilib.Cal.ThaiSolar.prototype = new ilib.Cal.Gregorian();
ilib.Cal.ThaiSolar.prototype.parent = ilib.Cal.Gregorian;
ilib.Cal.ThaiSolar.prototype.constructor = ilib.Cal.ThaiSolar;

/**
 * Return true if the given year is a leap year in the Thai solar calendar.
 * The year parameter may be given as a number, or as a ThaiSolarDate object.
 * @param {number|ilib.Date.ThaiSolarDate} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.ThaiSolar.prototype.isLeapYear = function(year) {
	var y = (typeof(year) === 'number' ? year : year.getYears());
	y -= 543;
	var centuries = ilib.mod(y, 400);
	return (ilib.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.ThaiSolar.prototype.newDateInstance = function (options) {
	return new ilib.Date.ThaiSolarDate(options);
};

/* register this calendar for the factory method */
ilib.Cal._constructors["thaisolar"] = ilib.Cal.ThaiSolar;
/*
 * thaisolardate.js - Represent a date in the ThaiSolar calendar
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/gregorian.js 
util/jsutils.js
*/

/**
 * @class
 * 
 * Construct a new Thai solar date object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this Thai solar date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * 
 * <li><i>locale</i> - locale for this Thai solar date. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale. 
 * </ul>
 *
 * If the constructor is called with another Thai solar date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends thaisolardate.js
 * 
 * @constructor
 * @extends ilib.Date.GregDate
 * @param {Object=} params parameters that govern the settings and behaviour of this Thai solar date
 */
ilib.Date.ThaiSolarDate = function(params) {
	var p = params;
	if (params) {
		// there is 198327 days difference between the Thai solar and 
		// Gregorian epochs which is equivalent to 543 years
		p = {};
		ilib.shallowCopy(params, p);
		if (typeof(p.year) !== 'undefined') {
			p.year -= 543;	
		}
		if (typeof(p.rd) !== 'undefined') {
			p.rd -= 198327;
		}
	}
	this.rd = undefined; // clear this out so that the GregDate constructor can set it
	ilib.Date.GregDate.call(this, p);
	this.cal = new ilib.Cal.ThaiSolar();
	// make sure the year is set correctly
	this.calcDateComponents();
};

ilib.Date.ThaiSolarDate.prototype = new ilib.Date.GregDate();
ilib.Date.ThaiSolarDate.prototype.parent = ilib.Date.GregDate.prototype;
ilib.Date.ThaiSolarDate.prototype.constructor = ilib.Date.ThaiSolarDate;

/**
 * @private
 * @const
 * @type number
 * the difference between a zero Julian day and the zero Thai Solar date.
 * This is some 543 years before the start of the Gregorian epoch. 
 */
ilib.Date.ThaiSolarDate.epoch = 1523097.5;

/**
 * @private
 * Calculate the date components for the current time zone
 */
ilib.Date.ThaiSolarDate.prototype.calcDateComponents = function () {
	// there is 198327 days difference between the Thai solar and 
	// Gregorian epochs which is equivalent to 543 years
	this.parent.calcDateComponents.call(this);
	this.year += 543;
};

/**
 * @private
 * Return the Rata Die (fixed day) number of this date.
 * 
 * @return {number} the rd date as a number
 */
ilib.Date.ThaiSolarDate.prototype.getRataDie = function() {
	// there is 198327 days difference between the Thai solar and 
	// Gregorian epochs which is equivalent to 543 years
	return this.rd.getRataDie() + 198327;
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week before the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.before = function (dow) {
	return this.cal.newDateInstance({rd: this.rd.beforeRd(dow) + 198327});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week after the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.after = function (dow) {
	return this.cal.newDateInstance({rd: this.rd.afterRd(dow) + 198327});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or before the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.onOrBefore = function (dow) {
	return this.cal.newDateInstance({rd: this.rd.onOrBeforeRd(dow) + 198327});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or after the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.onOrAfter = function (dow) {
	return this.cal.newDateInstance({rd: this.rd.onOrAfterRd(dow) + 198327});
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.ThaiSolarDate.prototype.getCalendar = function() {
	return "thaisolar";
};

//register with the factory method
ilib.Date._constructors["thaisolar"] = ilib.Date.ThaiSolarDate;


ilib.data.ctype = {"ideograph":[[4352,4607],[12353,12447],[12449,12543],[12549,12589],[12593,12686],[12704,12727],[12784,12799],[13312,19893],[19968,40907],[40960,42124],[43360,43388],[44032,55203],[55216,55291],[63744,64217],[65382,65437],[65440,65500]],"ideoother":[[12294,12294],[12348,12348],[12352,12352],[12448,12448],[12544,12548],[12590,12591],[12592,12592],[12687,12687],[12800,13055],[13056,13183],[13184,13311],[40908,40959],[42125,42191],[43389,43391],[55292,55295],[64218,64255]],"ascii":[[32,127]],"digit":[[48,57]],"xdigit":[[48,57],[65,70],[97,102]],"blank":[[9,9],[32,32]],"space":[[9,13],[133],[8232,8233]],"latin":[[0,591],[7680,7935],[11360,11391],[42784,43007]],"ipa":[[592,687],[7424,7551],[7552,7615]],"operators":[[8704,8959],[10752,11007]],"greek":[[880,1023],[7936,8191]],"cyrillic":[[1024,1327],[11744,11775],[42560,42655]],"arabic":[[1536,1791],[1872,1919],[64336,65023],[65136,65279]],"devanagari":[[2304,2431],[43232,43263]],"myanmar":[[4096,4255],[43616,43647]],"hangul":[[4352,4607],[44032,55215],[43360,43391],[55216,55295],[12592,12687]],"ethiopic":[[4608,5023],[11648,11743],[43776,43823]],"canadian":[[5120,5759],[6320,6399]],"combining":[[768,879],[7616,7679],[8400,8447]],"arrows":[[8592,8703],[11008,11263],[10224,10239],[10496,10623]],"cjk":[[19968,40959],[13312,19903],[131072,173791],[173824,177983],[177984,178207],[12272,12287]],"cjkcompatibility":[[13056,13311],[63744,64255],[65072,65103],[194560,195103]],"mathematical":[[119808,120831],[10176,10223],[10624,10751]],"privateuse":[[57344,63743],[983040,1048575],[1048576,1114111]],"variations":[[65024,65039],[917760,917999]],"bamum":[[42656,42751],[92160,92735]],"georgian":[[4256,4351],[11520,11567]],"punctuation":[[8192,8303],[11776,11903]],"katakana":[[12448,12543],[12784,12799],[110592,110847]],"bopomofo":[[12544,12591],[12704,12735]],"enclosedalpha":[[9312,9471],[127232,127487]],"cjkradicals":[[11904,12031],[12032,12255]],"yi":[[40960,42127],[42128,42191]],"linearb":[[65536,65663],[65664,65791]],"enclosedcjk":[[12800,13055],[127488,127743]],"spacing":[[688,767]],"armenian":[[1328,1423]],"hebrew":[[1424,1535]],"syriac":[[1792,1871]],"thaana":[[1920,1983]],"nko":[[1984,2047]],"samaritan":[[2048,2111]],"mandaic":[[2112,2143]],"bengali":[[2432,2559]],"gurmukhi":[[2560,2687]],"gujarati":[[2688,2815]],"oriya":[[2816,2943]],"tamil":[[2944,3071]],"telugu":[[3072,3199]],"kannada":[[3200,3327]],"malayalam":[[3328,3455]],"sinhala":[[3456,3583]],"thai":[[3584,3711]],"lao":[[3712,3839]],"tibetan":[[3840,4095]],"cherokee":[[5024,5119]],"ogham":[[5760,5791]],"runic":[[5792,5887]],"tagalog":[[5888,5919]],"hanunoo":[[5920,5951]],"buhid":[[5952,5983]],"tagbanwa":[[5984,6015]],"khmer":[[6016,6143]],"mongolian":[[6144,6319]],"limbu":[[6400,6479]],"taile":[[6480,6527]],"newtailue":[[6528,6623]],"khmersymbols":[[6624,6655]],"buginese":[[6656,6687]],"taitham":[[6688,6831]],"balinese":[[6912,7039]],"sundanese":[[7040,7103]],"batak":[[7104,7167]],"lepcha":[[7168,7247]],"olchiki":[[7248,7295]],"vedic":[[7376,7423]],"supersub":[[8304,8351]],"currency":[[8352,8399]],"letterlike":[[8448,8527]],"numbers":[[8528,8591]],"misc":[[8960,9215]],"controlpictures":[[9216,9279]],"ocr":[[9280,9311]],"box":[[9472,9599]],"block":[[9600,9631]],"geometric":[[9632,9727]],"miscsymbols":[[9728,9983],[127744,128511]],"dingbats":[[9984,10175]],"braille":[[10240,10495]],"glagolitic":[[11264,11359]],"coptic":[[11392,11519]],"tifinagh":[[11568,11647]],"cjkpunct":[[12288,12351]],"hiragana":[[12352,12447]],"kanbun":[[12688,12703]],"yijing":[[19904,19967]],"cjkstrokes":[[12736,12783]],"lisu":[[42192,42239]],"vai":[[42240,42559]],"modifiertone":[[42752,42783]],"sylotinagri":[[43008,43055]],"indicnumber":[[43056,43071]],"phagspa":[[43072,43135]],"saurashtra":[[43136,43231]],"kayahli":[[43264,43311]],"rejang":[[43312,43359]],"javanese":[[43392,43487]],"cham":[[43520,43615]],"taiviet":[[43648,43743]],"meeteimayek":[[43968,44031]],"presentation":[[64256,64335]],"vertical":[[65040,65055]],"halfmarks":[[65056,65071]],"small":[[65104,65135]],"width":[[65280,65519]],"specials":[[65520,65535]],"aegean":[[65792,65855]],"ancient":[[65936,65999]],"phaistosdisc":[[66000,66047]],"lycian":[[66176,66207]],"carian":[[66208,66271]],"olditalic":[[66304,66351]],"gothic":[[66352,66383]],"ugaritic":[[66432,66463]],"oldpersian":[[66464,66527]],"deseret":[[66560,66639]],"shavian":[[66640,66687]],"osmanya":[[66688,66735]],"cypriot":[[67584,67647]],"aramaic":[[67648,67679]],"phoenician":[[67840,67871]],"lydian":[[67872,67903]],"kharoshthi":[[68096,68191]],"oldsoutharabian":[[68192,68223]],"avestan":[[68352,68415]],"parthian":[[68416,68447]],"pahlavi":[[68448,68479]],"oldturkic":[[68608,68687]],"ruminumerals":[[69216,69247]],"brahmi":[[69632,69759]],"kaithi":[[69760,69839]],"cuneiform":[[73728,74751]],"cuneiformnumbers":[[74752,74879]],"hieroglyphs":[[77824,78895]],"byzantine musical":[[118784,119039]],"musicalsymbols":[[119040,119295]],"taixuanjing":[[119552,119647]],"rodnumerals":[[119648,119679]],"mahjong":[[126976,127023]],"domino":[[127024,127135]],"playingcards":[[127136,127231]],"emoticons":[[128512,128591]],"mapsymbols":[[128640,128767]],"alchemic":[[128768,128895]],"tags":[[917504,917631]],"greeknumbers":[[65856,65935]],"greekmusic":[[119296,119375]]};
/*
 * ctype.js - Character type definitions
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js

// !data ctype

/**
 * @namespace
 * Provides a set of static routines that return information about characters.
 * These routines emulate the C-library ctype functions. The characters must be 
 * encoded in utf-16, as no other charsets are currently supported. Only the first
 * character of the given string is tested.
 */
ilib.CType = {
	/**
	 * @protected
	 * Actual implementation for withinRange. Searches the given object for ranges.
	 * The range names are taken from the Unicode range names in 
	 * http://www.unicode.org/Public/UNIDATA/extracted/DerivedGeneralCategory.txt
	 * 
	 * <ul>
	 * <li>Cn - Unassigned
	 * <li>Lu - Uppercase_Letter
	 * <li>Ll - Lowercase_Letter
	 * <li>Lt - Titlecase_Letter
	 * <li>Lm - Modifier_Letter
	 * <li>Lo - Other_Letter
	 * <li>mn - Nonspacing_Mark
	 * <li>Me - Enclosing_Mark
	 * <li>Mc - Spacing_Mark
	 * <li>Nd - Decimal_Number
	 * <li>Nl - Letter_Number
	 * <li>No - Other_Number
	 * <li>Zs - Space_Separator
	 * <li>Zl - Line_Separator
	 * <li>Zp - Paragraph_Separator
	 * <li>Cc - Control
	 * <li>Cf - Format
	 * <li>Co - Private_Use
	 * <li>Cs - Surrogate
	 * <li>Pd - Dash_Punctuation
	 * <li>Ps - Open_Punctuation
	 * <li>Pe - Close_Punctuation
	 * <li>Pc - Connector_Punctuation
	 * <li>Po - Other_Punctuation
	 * <li>Sm - Math_Symbol
	 * <li>Sc - Currency_Symbol
	 * <li>Sk - Modifier_Symbol
	 * <li>So - Other_Symbol
	 * <li>Pi - Initial_Punctuation
	 * <li>Pf - Final_Punctuation
	 * </ul>
	 * 
	 * @param {string} ch character to examine
	 * @param {string} rangeName the name of the range to check
	 * @param {Object} obj object containing the character range data
	 * @return {boolean} true if the first character is within the named
	 * range
	 */
	_inRange: function(ch, rangeName, obj) {
		var range, i, num;
		if (!ch || ch.length === 0 || !rangeName || typeof(obj) === 'undefined') {
			return false;
		}
		
		num = new ilib.String(ch).codePointAt(0);
		range = obj[rangeName];
		if (!range) {
			return false;
		}
		
		for (i = 0; i < range.length; i++) {
			if (range[i].length === 1) {
				// single character range
				if (num === range[i][0]) {
					return true;
				}
			} else if (num >= range[i][0] && num <= range[i][1]) {
				// multi-character range
				return true;
			}
		}
		
		return false;
	},
	
	/**
	 * Return whether or not the first character is within the named range
	 * of Unicode characters. The valid list of range names are taken from 
	 * the Unicode 6.0 spec. Characters in all ranges of Unicode are supported,
	 * including those supported in Javascript via UTF-16. Currently, this method 
	 * supports the following range names:
	 * 
	 * <ul>
	 * <li><i>ascii</i> - basic ASCII
	 * <li><i>latin</i> - Latin, Latin Extended Additional, Latin Extended-C, Latin Extended-D
	 * <li><i>armenian</i>
	 * <li><i>greek</i> - Greek, Greek Extended
	 * <li><i>cyrillic</i> - Cyrillic, Cyrillic Extended-A, Cyrillic Extended-B
	 * <li><i>georgian</i> - Georgian, Georgian Supplement
	 * <li><i>glagolitic</i>
	 * <li><i>gothic</i>
	 * <li><i>ogham</i>
	 * <li><i>oldpersian</i>
	 * <li><i>runic</i>
	 * <li><i>ipa</i> - IPA, Phonetic Extensions, Phonetic Extensions Supplement
	 * <li><i>phonetic</i>
	 * <li><i>modifiertone</i> - Modifier Tone Letters
	 * <li><i>spacing</i>
	 * <li><i>diacritics</i>
	 * <li><i>halfmarks</i> - Combining Half Marks
	 * <li><i>small</i> - Small Form Variants
	 * <li><i>bamum</i> - Bamum, Bamum Supplement
	 * <li><i>ethiopic</i> - Ethiopic, Ethiopic Extended, Ethiopic Extended-A
	 * <li><i>nko</i>
	 * <li><i>osmanya</i>
	 * <li><i>tifinagh</i>
	 * <li><i>val</i>
	 * <li><i>arabic</i> - Arabic, Arabic Supplement, Arabic Presentation Forms-A, 
	 * Arabic Presentation Forms-B
	 * <li><i>carlan</i>
	 * <li><i>hebrew</i>
	 * <li><i>mandaic</i>
	 * <li><i>samaritan</i>
	 * <li><i>syriac</i>
	 * <li><i>mongolian</i>
	 * <li><i>phagspa</i>
	 * <li><i>tibetan</i>
	 * <li><i>bengali</i>
	 * <li><i>devanagari</i> - Devanagari, Devanagari Extended
	 * <li><i>gujarati</i>
	 * <li><i>gurmukhi</i>
	 * <li><i>kannada</i>
	 * <li><i>lepcha</i>
	 * <li><i>limbu</i>
	 * <li><i>malayalam</i>
	 * <li><i>meetaimayek</i>
	 * <li><i>olchiki</i>
	 * <li><i>oriya</i>
	 * <li><i>saurashtra</i>
	 * <li><i>sinhala</i>
	 * <li><i>sylotinagri</i> - Syloti Nagri
	 * <li><i>tamil</i>
	 * <li><i>telugu</i>
	 * <li><i>thaana</i>
	 * <li><i>vedic</i>
	 * <li><i>batak</i>
	 * <li><i>balinese</i>
	 * <li><i>buginese</i>
	 * <li><i>cham</i>
	 * <li><i>javanese</i>
	 * <li><i>kayahli</i>
	 * <li><i>khmer</i>
	 * <li><i>lao</i>
	 * <li><i>myanmar</i> - Myanmar, Myanmar Extended-A
	 * <li><i>newtailue</i>
	 * <li><i>rejang</i>
	 * <li><i>sundanese</i>
	 * <li><i>taile</i>
	 * <li><i>taitham</i>
	 * <li><i>taiviet</i>
	 * <li><i>thai</i>
	 * <li><i>buhld</i>
	 * <li><i>hanunoo</i>
	 * <li><i>tagalog</i>
	 * <li><i>tagbanwa</i>
	 * <li><i>bopomofo</i> - Bopomofo, Bopomofo Extended
	 * <li><i>cjk</i> - the CJK unified ideographs (Han), CJK Unified Ideographs
	 *  Extension A, CJK Unified Ideographs Extension B, CJK Unified Ideographs 
	 *  Extension C, CJK Unified Ideographs Extension D, Ideographic Description 
	 *  Characters (=isIdeo())
	 * <li><i>cjkcompatibility</i> - CJK Compatibility, CJK Compatibility 
	 * Ideographs, CJK Compatibility Forms, CJK Compatibility Ideographs Supplement
	 * <li><i>cjkradicals</i> - the CJK radicals, KangXi radicals
	 * <li><i>hangul</i> - Hangul Jamo, Hangul Syllables, Hangul Jamo Extended-A, 
	 * Hangul Jamo Extended-B, Hangul Compatibility Jamo
	 * <li><i>cjkpunct</i> - CJK symbols and punctuation
	 * <li><i>cjkstrokes</i> - CJK strokes
	 * <li><i>hiragana</i>
	 * <li><i>katakana</i> - Katakana, Katakana Phonetic Extensions, Kana Supplement
	 * <li><i>kanbun</i>
	 * <li><i>lisu</i>
	 * <li><i>yi</i> - Yi Syllables, Yi Radicals
	 * <li><i>cherokee</i>
	 * <li><i>canadian</i> - Unified Canadian Aboriginal Syllabics, Unified Canadian 
	 * Aboriginal Syllabics Extended
	 * <li><i>presentation</i> - Alphabetic presentation forms
	 * <li><i>vertical</i> - Vertical Forms
	 * <li><i>width</i> - Halfwidth and Fullwidth Forms
	 * <li><i>punctuation</i> - General punctuation, Supplemental Punctuation
	 * <li><i>box</i> - Box Drawing
	 * <li><i>block</i> - Block Elements
	 * <li><i>letterlike</i> - Letterlike symbols
	 * <li><i>mathematical</i> - Mathematical alphanumeric symbols, Miscellaneous 
	 * Mathematical Symbols-A, Miscellaneous Mathematical Symbols-B
	 * <li><i>enclosedalpha</i> - Enclosed alphanumerics, Enclosed Alphanumeric Supplement
	 * <li><i>enclosedcjk</i> - Enclosed CJK letters and months, Enclosed Ideographic Supplement
	 * <li><i>cjkcompatibility</i> - CJK compatibility
	 * <li><i>apl</i> - APL symbols
	 * <li><i>controlpictures</i> - Control pictures
	 * <li><i>misc</i> - Miscellaneous technical
	 * <li><i>ocr</i> - Optical character recognition (OCR)
	 * <li><i>combining</i> - Combining Diacritical Marks, Combining Diacritical Marks 
	 * for Symbols, Combining Diacritical Marks Supplement
	 * <li><i>digits</i> - ASCII digits (=isDigit())
	 * <li><i>indicnumber</i> - Common Indic Number Forms
	 * <li><i>numbers</i> - Number dorms
	 * <li><i>supersub</i> - Super- and subscripts
	 * <li><i>arrows</i> - Arrows, Miscellaneous Symbols and Arrows, Supplemental Arrows-A,
	 * Supplemental Arrows-B
	 * <li><i>operators</i> - Mathematical operators, supplemental 
	 * mathematical operators 
	 * <li><i>geometric</i> - Geometric shapes
	 * <li><i>ancient</i> - Ancient symbols
	 * <li><i>braille</i> - Braille patterns
	 * <li><i>currency</i> - Currency symbols
	 * <li><i>dingbats</i>
	 * <li><i>gamesymbols</i>
	 * <li><i>yijing</i> - Yijing Hexagram Symbols
	 * <li><i>specials</i>
	 * <li><i>variations</i> - Variation Selectors, Variation Selectors Supplement
	 * <li><i>privateuse</i> - Private Use Area, Supplementary Private Use Area-A, 
	 * Supplementary Private Use Area-B
	 * <li><i>supplementarya</i> - Supplementary private use area-A
	 * <li><i>supplementaryb</i> - Supplementary private use area-B
	 * <li><i>highsurrogates</i> - High Surrogates, High Private Use Surrogates
	 * <li><i>lowsurrogates</i>
	 * <li><i>reserved</i>
	 * <li><i>noncharacters</i>
	 * </ul><p>
	 * 
	 * Depends directive: !depends ctype.js
	 * 
	 * @param {string} ch character to examine
	 * @param {string} rangeName the name of the range to check
	 * @return {boolean} true if the first character is within the named
	 * range
	 */
	withinRange: function(ch, rangeName) {
		if (!rangeName) {
			return false;
		}
		return ilib.CType._inRange(ch, rangeName.toLowerCase(), ilib.data.ctype);
	},
	
	/**
	 * @protected
	 * @param {boolean} sync
	 * @param {Object} loadParams
	 * @param {function(*)|undefined} onLoad
	 */
	_init: function(sync, loadParams, onLoad) {
		ilib.CType._load("ctype", sync, loadParams, onLoad);
	},
	
	/**
	 * @protected
	 * @param {string} name
	 * @param {boolean} sync
	 * @param {Object} loadParams
	 * @param {function(*)|undefined} onLoad
	 */
	_load: function (name, sync, loadParams, onLoad) {
		if (!ilib.data[name]) {
			var loadName = name ? name + ".json" : "ctype.json";
			ilib.loadData({
				name: loadName,
				locale: "-",
				sync: sync,
				loadParams: loadParams, 
				callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(ct) {
					ilib.data[name] = ct;
					if (onLoad && typeof(onLoad) === 'function') {
						onLoad(ilib.data[name]);
					}
				})
			});
		} else {
			if (onLoad && typeof(onLoad) === 'function') {
				onLoad(ilib.data[name]);
			}
		}
	}
};

/*
 * ctype.isdigit.js - Character type is digit
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype

/**
 * Return whether or not the first character is a digit character in the
 * Latin script.<p>
 * 
 * Depends directive: !depends ctype.isdigit.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is a digit character in the
 * Latin script. 
 */
ilib.CType.isDigit = function (ch) {
	return ilib.CType._inRange(ch, 'digit', ilib.data.ctype);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isDigit._init = function (sync, loadParams, onLoad) {
	ilib.CType._init(sync, loadParams, onLoad);
};

ilib.data.ctype_z = {"Zs":[[32],[160],[5760],[6158],[8192,8202],[8239],[8287],[12288]],"Zl":[[8232]],"Zp":[[8233]]};
/*
 * ctype.isspace.js - Character type is space char
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype ctype_z

/**
 * Return whether or not the first character is a whitespace character.<p>
 * 
 * Depends directive: !depends ctype.isspace.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is a whitespace character.
 */
ilib.CType.isSpace = function (ch) {
	return ilib.CType._inRange(ch, 'space', ilib.data.ctype) ||
		ilib.CType._inRange(ch, 'Zs', ilib.data.ctype_z) ||
		ilib.CType._inRange(ch, 'Zl', ilib.data.ctype_z) ||
		ilib.CType._inRange(ch, 'Zp', ilib.data.ctype_z);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isSpace._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_z", sync, loadParams, function () {
		ilib.CType._init(sync, loadParams, onLoad);
	});
};

/*
 * numprs.js - Parse a number in any locale
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
strings.js 
ctype.isdigit.js 
ctype.isspace.js
*/

/**
 * @class
 * Parse a string as a number, ignoring all locale-specific formatting.<p>
 * 
 * This class is different from the standard Javascript parseInt() and parseFloat() 
 * functions in that the number to be parsed can have formatting characters in it 
 * that are not supported by those two
 * functions, and it handles numbers written in other locales properly. For example, 
 * if you pass the string "203,231.23" to the parseFloat() function in Javascript, it 
 * will return you the number 203. The ilib.Number class will parse it correctly and 
 * the value() function will return the number 203231.23. If you pass parseFloat() the 
 * string "203.231,23" with the locale set to de-DE, it will return you 203 again. This
 * class will return the correct number 203231.23 again.<p>
 * 
 * The options object may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - specify the locale of the string to parse. This is used to
 * figure out what the decimal point character is. If not specified, the default locale
 * for the app or browser is used.
 * <li><i>type</i> - specify whether this string should be interpretted as a number,
 * currency, or percentage amount. When the number is interpretted as a currency
 * amount, the getCurrency() method will return something useful, otherwise it will
 * return undefined. If
 * the number is to be interpretted as percentage amount and there is a percentage sign
 * in the string, then the number will be returned
 * as a fraction from the valueOf() method. If there is no percentage sign, then the 
 * number will be returned as a regular number. That is "58.3%" will be returned as the 
 * number 0.583 but "58.3" will be returned as 58.3. Valid values for this property 
 * are "number", "currency", and "percentage". Default if this is not specified is
 * "number".
 * <li><i>onLoad</i> - a callback function to call when the locale data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * <p>
 * 
 * Depends directive: !depends numprs.js
 * 
 * @constructor
 * @param {string|number|Number|ilib.Number|undefined} str a string to parse as a number, or a number value
 * @param {Object} options Options controlling how the instance should be created 
 */
ilib.Number = function (str, options) {
	var i, stripped = "", 
		sync = true,
		loadParams,
		onLoad;
	
	this.locale = new ilib.Locale();
	this.type = "number";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		if (options.type) {
			switch (options.type) {
				case "number":
				case "currency":
				case "percentage":
					this.type = options.type;
					break;
				default:
					break;
			}
		}
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		loadParams = options.loadParams;
		onLoad = options.onLoad;
	}
	
	ilib.CType.isDigit._init(sync, loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
		ilib.CType.isSpace._init(sync, loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
			new ilib.LocaleInfo(this.locale, {
				sync: sync,
				onLoad: ilib.bind(this, function (li) {
					this.decimal = li.getDecimalSeparator();
					
					switch (typeof(str)) {
					case 'string':
						// stripping should work for all locales, because you just ignore all the
						// formatting except the decimal char
						var unary = true; // looking for the unary minus still?
						this.str = str || "0";
						i = 0;
						for (i = 0; i < this.str.length; i++) {
							if (unary && this.str.charAt(i) === '-') {
								unary = false;
								stripped += this.str.charAt(i);
							} else if (ilib.CType.isDigit(this.str.charAt(i))) {
								stripped += this.str.charAt(i);
								unary = false;
							} else if (this.str.charAt(i) === this.decimal) {
								stripped += "."; // always convert to period
								unary = false;
							} // else ignore
						}
						this.value = parseFloat(stripped);
						break;
					case 'number':
						this.str = "" + str;
						this.value = str;
						break;
						
					case 'object':
						this.value = /** @type {number} */ str.valueOf();
						this.str = "" + this.value;
						break;
						
					case 'undefined':
						this.value = 0;
						this.str = "0";
						break;
					}
					
					switch (this.type) {
						default:
							// don't need to do anything special for other types
							break;
						case "percentage":
							if (this.str.indexOf(li.getPercentageSymbol()) !== -1) {
								this.value /= 100;
							}
							break;
						case "currency":
							stripped = "";
							i = 0;
							while (i < this.str.length &&
								   !ilib.CType.isDigit(this.str.charAt(i)) &&
								   !ilib.CType.isSpace(this.str.charAt(i))) {
								stripped += this.str.charAt(i++);
							}
							if (stripped.length === 0) {
								while (i < this.str.length && 
									   ilib.CType.isDigit(this.str.charAt(i)) ||
									   ilib.CType.isSpace(this.str.charAt(i)) ||
									   this.str.charAt(i) === '.' ||
									   this.str.charAt(i) === ',' ) {
									i++;
								}
								while (i < this.str.length && 
									   !ilib.CType.isDigit(this.str.charAt(i)) &&
									   !ilib.CType.isSpace(this.str.charAt(i))) {
									stripped += this.str.charAt(i++);
								}
							}
							new ilib.Currency({
								locale: this.locale, 
								sign: stripped,
								sync: sync,
								onLoad: ilib.bind(this, function (cur) {
									this.currency = cur;
									if (options && typeof(options.onLoad) === 'function') {
										options.onLoad(this);
									}				
								})
							});
							return;
					}
					
					if (options && typeof(options.onLoad) === 'function') {
						options.onLoad(this);
					}
				})
			});
		}));
	}));
};

ilib.Number.prototype = {
	/**
	 * Return the locale for this formatter instance.
	 * @return {ilib.Locale} the locale instance for this formatter
	 */
	getLocale: function () {
		return this.locale;
	},
	
	/**
	 * Return the original string that this number instance was created with.
	 * @return {string} the original string
	 */
	toString: function () {
		return this.str;
	},
	
	/**
	 * If the type of this Number instance is "currency", then the parser will attempt
	 * to figure out which currency this amount represents. The amount can be written
	 * with any of the currency signs or ISO 4217 codes that are currently
	 * recognized by ilib, and the currency signs may occur before or after the
	 * numeric portion of the string. If no currency can be recognized, then the 
	 * default currency for the locale is returned. If multiple currencies can be
	 * recognized (for example if the currency sign is "$"), then this method 
	 * will prefer the one for the current locale. If multiple currencies can be
	 * recognized, but none are used in the current locale, then the first currency
	 * encountered will be used. This may produce random results, though the larger
	 * currencies occur earlier in the list. For example, if the sign found in the
	 * string is "$" and that is not the sign of the currency of the current locale
	 * then the US dollar will be recognized, as it is the largest currency that uses
	 * the "$" as its sign.
	 * 
	 * @return {ilib.Currency|undefined} the currency instance for this amount, or 
	 * undefined if this Number object is not of type currency
	 */
	getCurrency: function () {
		return this.currency;
	},
	
	/**
	 * Return the value of this number object as a primitive number instance.
	 * @return {number} the value of this number instance
	 */
	valueOf: function () {
		return this.value;
	}
};

ilib.data.currency = {"USD":{"name":"US Dollar","decimals":2,"sign":"$"},"CHF":{"name":"Swiss Franc","decimals":2,"sign":"Fr"},"RON":{"name":"Leu","decimals":2,"sign":"L"},"RUB":{"name":"Russian Ruble","decimals":2,"sign":"ÑÑÐ±."},"SEK":{"name":"Swedish Krona","decimals":2,"sign":"kr"},"GBP":{"name":"Pound Sterling","decimals":2,"sign":"Â£"},"PKR":{"name":"Pakistan Rupee","decimals":2,"sign":"â¨"},"KES":{"name":"Kenyan Shilling","decimals":2,"sign":"Sh"},"AED":{"name":"UAE Dirham","decimals":2,"sign":"Ø¯.Ø¥"},"KRW":{"name":"Won","decimals":0,"sign":"â©"},"AFN":{"name":"Afghani","decimals":2,"sign":"Ø"},"ALL":{"name":"Lek","decimals":2,"sign":"L"},"AMD":{"name":"Armenian Dram","decimals":2,"sign":"Õ¤Ö."},"ANG":{"name":"Netherlands Antillean Guilder","decimals":2,"sign":"Æ"},"AOA":{"name":"Kwanza","decimals":2,"sign":"Kz"},"ARS":{"name":"Argentine Peso","decimals":2,"sign":"$"},"AUD":{"name":"Australian Dollar","decimals":2,"sign":"$"},"AWG":{"name":"Aruban Florin","decimals":2,"sign":"Æ"},"AZN":{"name":"Azerbaijanian Manat","decimals":2,"sign":"AZN"},"BAM":{"name":"Convertible Mark","decimals":2,"sign":"ÐÐ"},"BBD":{"name":"Barbados Dollar","decimals":2,"sign":"$"},"BDT":{"name":"Taka","decimals":2,"sign":"à§³"},"BGN":{"name":"Bulgarian Lev","decimals":2,"sign":"Ð»Ð²"},"BHD":{"name":"Bahraini Dinar","decimals":3,"sign":".Ø¯.Ø¨"},"BIF":{"name":"Burundi Franc","decimals":0,"sign":"Fr"},"BMD":{"name":"Bermudian Dollar","decimals":2,"sign":"$"},"BND":{"name":"Brunei Dollar","decimals":2,"sign":"$"},"BOB":{"name":"Boliviano","decimals":2,"sign":"Bs."},"BRL":{"name":"Brazilian Real","decimals":2,"sign":"R$"},"BSD":{"name":"Bahamian Dollar","decimals":2,"sign":"$"},"BTN":{"name":"Ngultrum","decimals":2,"sign":"Nu."},"BWP":{"name":"Pula","decimals":2,"sign":"P"},"BYR":{"name":"Belarussian Ruble","decimals":0,"sign":"Br"},"BZD":{"name":"Belize Dollar","decimals":2,"sign":"$"},"CAD":{"name":"Canadian Dollar","decimals":2,"sign":"$"},"CDF":{"name":"Congolese Franc","decimals":2,"sign":"Fr"},"CLP":{"name":"Chilean Peso","decimals":0,"sign":"$"},"CNY":{"name":"Yuan Renminbi","decimals":2,"sign":"å"},"COP":{"name":"Colombian Peso","decimals":2,"sign":"$"},"CRC":{"name":"Costa Rican Colon","decimals":2,"sign":"â¡"},"CUP":{"name":"Cuban Peso","decimals":2,"sign":"$"},"CVE":{"name":"Cape Verde Escudo","decimals":2,"sign":"$"},"CZK":{"name":"Czech Koruna","decimals":2,"sign":"KÄ"},"DJF":{"name":"Djibouti Franc","decimals":0,"sign":"Fr"},"DKK":{"name":"Danish Krone","decimals":2,"sign":"kr"},"DOP":{"name":"Dominican Peso","decimals":2,"sign":"$"},"DZD":{"name":"Algerian Dinar","decimals":2,"sign":"Ø¯.Ø¬"},"EGP":{"name":"Egyptian Pound","decimals":2,"sign":"Â£"},"ERN":{"name":"Nakfa","decimals":2,"sign":"Nfk"},"ETB":{"name":"Ethiopian Birr","decimals":2,"sign":"Br"},"EUR":{"name":"Euro","decimals":2,"sign":"â¬"},"FJD":{"name":"Fiji Dollar","decimals":2,"sign":"$"},"FKP":{"name":"Falkland Islands Pound","decimals":2,"sign":"Â£"},"GEL":{"name":"Lari","decimals":2,"sign":"á"},"GHS":{"name":"Cedi","decimals":2,"sign":"âµ"},"GIP":{"name":"Gibraltar Pound","decimals":2,"sign":"Â£"},"GMD":{"name":"Dalasi","decimals":2,"sign":"D"},"GNF":{"name":"Guinea Franc","decimals":0,"sign":"Fr"},"GTQ":{"name":"Quetzal","decimals":2,"sign":"Q"},"GYD":{"name":"Guyana Dollar","decimals":2,"sign":"$"},"HKD":{"name":"Hong Kong Dollar","decimals":2,"sign":"$"},"HNL":{"name":"Lempira","decimals":2,"sign":"L"},"HRK":{"name":"Croatian Kuna","decimals":2,"sign":"kn"},"HTG":{"name":"Gourde","decimals":2,"sign":"G"},"HUF":{"name":"Forint","decimals":2,"sign":"Ft"},"IDR":{"name":"Rupiah","decimals":2,"sign":"Rp"},"ILS":{"name":"New Israeli Sheqel","decimals":2,"sign":"âª"},"INR":{"name":"Indian Rupee","decimals":2,"sign":"â¹"},"IQD":{"name":"Iraqi Dinar","decimals":3,"sign":"Ø¹.Ø¯"},"IRR":{"name":"Iranian Rial","decimals":2,"sign":"ï·¼"},"ISK":{"name":"Iceland Krona","decimals":0,"sign":"kr"},"JMD":{"name":"Jamaican Dollar","decimals":2,"sign":"$"},"JOD":{"name":"Jordanian Dinar","decimals":3,"sign":"Ø¯.Ø§"},"JPY":{"name":"Yen","decimals":0,"sign":"Â¥"},"KGS":{"name":"Som","decimals":2,"sign":"Ð»Ð²"},"KHR":{"name":"Riel","decimals":2,"sign":"á"},"KMF":{"name":"Comoro Franc","decimals":0,"sign":"Fr"},"KPW":{"name":"North Korean Won","decimals":2,"sign":"â©"},"KWD":{"name":"Kuwaiti Dinar","decimals":3,"sign":"Ø¯.Ù"},"KYD":{"name":"Cayman Islands Dollar","decimals":2,"sign":"$"},"KZT":{"name":"Tenge","decimals":2,"sign":"â¸"},"LAK":{"name":"Kip","decimals":2,"sign":"â­"},"LBP":{"name":"Lebanese Pound","decimals":2,"sign":"Ù.Ù"},"LKR":{"name":"Sri Lanka Rupee","decimals":2,"sign":"Rs"},"LRD":{"name":"Liberian Dollar","decimals":2,"sign":"$"},"LSL":{"name":"Loti","decimals":2,"sign":"L"},"LTL":{"name":"Lithuanian Litas","decimals":2,"sign":"Lt"},"LVL":{"name":"Latvian Lats","decimals":2,"sign":"Ls"},"LYD":{"name":"Libyan Dinar","decimals":3,"sign":"Ù.Ø¯"},"MAD":{"name":"Moroccan Dirham","decimals":2,"sign":"Ø¯.Ù."},"MDL":{"name":"Moldovan Leu","decimals":2,"sign":"L"},"MGA":{"name":"Malagasy Ariary","decimals":2,"sign":"Ar"},"MKD":{"name":"Denar","decimals":2,"sign":"Ð´ÐµÐ½"},"MMK":{"name":"Kyat","decimals":2,"sign":"K"},"MNT":{"name":"Tugrik","decimals":2,"sign":"â®"},"MOP":{"name":"Pataca","decimals":2,"sign":"P"},"MRO":{"name":"Ouguiya","decimals":2,"sign":"UM"},"MUR":{"name":"Mauritius Rupee","decimals":2,"sign":"â¨"},"MVR":{"name":"Rufiyaa","decimals":2,"sign":".Þ"},"MWK":{"name":"Kwacha","decimals":2,"sign":"MK"},"MXN":{"name":"Mexican Peso","decimals":2,"sign":"$"},"MYR":{"name":"Malaysian Ringgit","decimals":2,"sign":"RM"},"MZN":{"name":"Metical","decimals":2,"sign":"MT"},"NAD":{"name":"Namibia Dollar","decimals":2,"sign":"$"},"NGN":{"name":"Naira","decimals":2,"sign":"â¦"},"NIO":{"name":"Cordoba Oro","decimals":2,"sign":"C$"},"NOK":{"name":"Norwegian Krone","decimals":2,"sign":"kr"},"NPR":{"name":"Nepalese Rupee","decimals":2,"sign":"â¨"},"NZD":{"name":"New Zealand Dollar","decimals":2,"sign":"$"},"OMR":{"name":"Rial Omani","decimals":3,"sign":"Ø±.Ø¹."},"PAB":{"name":"Balboa","decimals":2,"sign":"B/."},"PEN":{"name":"Nuevo Sol","decimals":2,"sign":"S/."},"PGK":{"name":"Kina","decimals":2,"sign":"K"},"PHP":{"name":"Philippine Peso","decimals":2,"sign":"â±"},"PLN":{"name":"Zloty","decimals":2,"sign":"zÅ"},"PYG":{"name":"Guarani","decimals":0,"sign":"â²"},"QAR":{"name":"Qatari Rial","decimals":2,"sign":"Ø±.Ù"},"RSD":{"name":"Serbian Dinar","decimals":2,"sign":"Ð´Ð¸Ð½."},"RWF":{"name":"Rwanda Franc","decimals":0,"sign":"Fr"},"SAR":{"name":"Saudi Riyal","decimals":2,"sign":"Ø±.Ø³"},"SBD":{"name":"Solomon Islands Dollar","decimals":2,"sign":"$"},"SCR":{"name":"Seychelles Rupee","decimals":2,"sign":"â¨"},"SDG":{"name":"Sudanese Pound","decimals":2,"sign":"Â£"},"SGD":{"name":"Singapore Dollar","decimals":2,"sign":"$"},"SHP":{"name":"Saint Helena Pound","decimals":2,"sign":"Â£"},"SLL":{"name":"Leone","decimals":2,"sign":"Le"},"SOS":{"name":"Somali Shilling","decimals":2,"sign":"Sh"},"SRD":{"name":"Surinam Dollar","decimals":2,"sign":"$"},"SSP":{"name":"South Sudanese Pound","decimals":2,"sign":""},"STD":{"name":"Dobra","decimals":2,"sign":"Db"},"SYP":{"name":"Syrian Pound","decimals":2,"sign":"Â£"},"SZL":{"name":"Lilangeni","decimals":2,"sign":"L"},"THB":{"name":"Baht","decimals":2,"sign":"à¸¿"},"TJS":{"name":"Somoni","decimals":2,"sign":"ÐÐ"},"TMT":{"name":"New Manat","decimals":2,"sign":"m"},"TND":{"name":"Tunisian Dinar","decimals":3,"sign":"Ø¯.Øª"},"TOP":{"name":"Paâanga","decimals":2,"sign":"T$"},"TRY":{"name":"Turkish Lira","decimals":2,"sign":"TL"},"TTD":{"name":"Trinidad and Tobago Dollar","decimals":2,"sign":"$"},"TWD":{"name":"New Taiwan Dollar","decimals":2,"sign":"$"},"TZS":{"name":"Tanzanian Shilling","decimals":2,"sign":"Sh"},"UAH":{"name":"Hryvnia","decimals":2,"sign":"â´"},"UGX":{"name":"Uganda Shilling","decimals":2,"sign":"Sh"},"UYU":{"name":"Peso Uruguayo","decimals":2,"sign":"$"},"UZS":{"name":"Uzbekistan Sum","decimals":2,"sign":"Ð»Ð²"},"VEF":{"name":"Bolivar Fuerte","decimals":2,"sign":"Bs F"},"VND":{"name":"Dong","decimals":0,"sign":"â«"},"VUV":{"name":"Vatu","decimals":0,"sign":"Vt"},"WST":{"name":"Tala","decimals":2,"sign":"T"},"XAF":{"name":"CFA Franc BEAC","decimals":0,"sign":"Fr"},"XCD":{"name":"East Caribbean Dollar","decimals":2,"sign":"$"},"XOF":{"name":"CFA Franc BCEAO","decimals":0,"sign":"Fr"},"XPF":{"name":"CFP Franc","decimals":0,"sign":"Fr"},"YER":{"name":"Yemeni Rial","decimals":2,"sign":"ï·¼"},"ZAR":{"name":"Rand","decimals":2,"sign":"R"},"ZMK":{"name":"Zambian Kwacha","decimals":2,"sign":"ZK"},"ZWL":{"name":"Zimbabwe Dollar","decimals":2,"sign":"$"}};
/*
 * currency.js - Currency definition
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js

// !data currency

/**
 * @class
 * Create a new currency information instance. Instances of this class encode 
 * information about a particular currency.<p>
 * 
 * Note: that if you are looking to format currency for display, please see
 * the number formatting class {ilib.NumFmt}. This class only gives information
 * about currencies.<p> 
 * 
 * The options can contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - specify the locale for this instance
 * <li><i>code</i> - find info on a specific currency with the given ISO 4217 code 
 * <li><i>sign</i> - search for a currency that uses this sign
 * <li><i>onLoad</i> - a callback function to call when the currency data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * When searching for a currency by its sign, this class cannot guarantee 
 * that it will return info about a specific currency. The reason is that currency 
 * signs are sometimes shared between different currencies and the sign is 
 * therefore ambiguous. If you need a 
 * guarantee, find the currency using the code instead.<p>
 * 
 * The way this class finds a currency by sign is the following. If the sign is 
 * unambiguous, then
 * the currency is returned. If there are multiple currencies that use the same
 * sign, and the current locale uses that sign, then the default currency for
 * the current locale is returned. If there are multiple, but the current locale
 * does not use that sign, then the currency with the largest circulation is
 * returned. For example, if you are in the en-GB locale, and the sign is "$",
 * then this class will notice that there are multiple currencies with that
 * sign (USD, CAD, AUD, HKD, MXP, etc.) Since "$" is not used in en-GB, it will 
 * pick the one with the largest circulation, which in this case is the US Dollar
 * (USD).<p>
 * 
 * If neither the code or sign property is set, the currency that is most common 
 * for the locale
 * will be used instead. If the locale is not set, the default locale will be used.
 * If the code is given, but it is not found in the list of known currencies, this
 * constructor will throw an exception. If the sign is given, but it is not found,
 * this constructor will default to the currency for the current locale. If both
 * the code and sign properties are given, then the sign property will be ignored
 * and only the code property used. If the locale is given, but it is not a known
 * locale, this class will default to the default locale instead.<p>
 * 
 * Depends directive: !depends currency.js
 * 
 * @constructor
 * @param options {Object} a set of properties to govern how this instance is constructed.
 * @throws "currency xxx is unknown" when the given currency code is not in the list of 
 * known currencies. xxx is replaced with the requested code.
 */
ilib.Currency = function (options) {
	this.sync = true;
	
	if (options) {
		if (options.code) {
			this.code = options.code;
		}
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		if (options.sign) {
			this.sign = options.sign;
		}
		if (typeof(options.sync) !== 'undefined') {
			this.sync = options.sync;
		}
		if (options.loadParams) {
			this.loadParams = options.loadParams;
		}
	}
	
	this.locale = this.locale || new ilib.Locale();
	if (typeof(ilib.data.currency) === 'undefined') {
		ilib.loadData({
			name: "currency.json",
			object: ilib.Currency, 
			locale: "-",
			sync: this.sync, 
			loadParams: this.loadParams, 
			callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(currency) {
				ilib.data.currency = currency;
				this._loadLocinfo(options && options.onLoad);
			})
		});
	} else {
		this._loadLocinfo(options && options.onLoad);
	}
};

/**
 * @static
 * Return an array of the ids for all ISO 4217 currencies that
 * this copy of ilib knows about.
 * @return {Array.<string>} an array of currency ids that this copy of ilib knows about.
 */
ilib.Currency.getAvailableCurrencies = function() {
	var ret = [],
		cur,
		currencies = new ilib.ResBundle({
			name: "currency"
		}).getResObj();
	
	for (cur in currencies) {
		if (cur && currencies[cur]) {
			ret.push(cur);
		}
	}
	
	return ret;
};

ilib.Currency.prototype = {
	/**
	 * @private
	 */
	_loadLocinfo: function(onLoad) {
		new ilib.LocaleInfo(this.locale, {
			onLoad: ilib.bind(this, function (li) {
				var currInfo;
				
				this.locinfo = li;
		    	if (this.code) {
		    		currInfo = ilib.data.currency[this.code];
		    		if (!currInfo) {
		    			throw "currency " + this.code + " is unknown";
		    		}
		    	} else if (this.sign) {
		    		currInfo = ilib.data.currency[this.sign]; // maybe it is really a code...
		    		if (typeof(currInfo) !== 'undefined') {
		    			this.code = this.sign;
		    		} else {
		    			this.code = this.locinfo.getCurrency();
		    			currInfo = ilib.data.currency[this.code];
		    			if (currInfo.sign !== this.sign) {
		    				// current locale does not use the sign, so search for it
		    				for (var cur in ilib.data.currency) {
		    					if (cur && ilib.data.currency[cur]) {
		    						currInfo = ilib.data.currency[cur];
		    						if (currInfo.sign === this.sign) {
		    							// currency data is already ordered so that the currency with the
		    							// largest circulation is at the beginning, so all we have to do
		    							// is take the first one in the list that matches
		    							this.code = cur;
		    							break;
		    						}
		    					}
		    				}
		    			}
		    		}
		    	}
		    	
		    	if (!currInfo || !this.code) {
		    		this.code = this.locinfo.getCurrency();
		    		currInfo = ilib.data.currency[this.code];
		    	}
		    	
		    	this.name = currInfo.name;
		    	this.fractionDigits = currInfo.decimals;
		    	this.sign = currInfo.sign;
		    	
				if (typeof(onLoad) === 'function') {
					onLoad(this);
				}
			})
		});
	},
	
	/**
	 * Return the ISO 4217 currency code for this instance.
	 * @return {string} the ISO 4217 currency code for this instance
	 */
	getCode: function () {
		return this.code;
	},
	
	/**
	 * Return the default number of fraction digits that is typically used
	 * with this type of currency.
	 * @return {number} the number of fraction digits for this currency
	 */
	getFractionDigits: function () {
		return this.fractionDigits;
	},
	
	/**
	 * Return the sign commonly used to represent this currency.
	 * @return {string} the sign commonly used to represent this currency
	 */
	getSign: function () {
		return this.sign;
	},
	
	/**
	 * Return the name of the currency in English.
	 * @return {string} the name of the currency in English
	 */
	getName: function () {
		return this.name;
	},
	
	/**
	 * Return the locale for this currency. If the options to the constructor 
	 * included a locale property in order to find the currency that is appropriate
	 * for that locale, then the locale is returned here. If the options did not
	 * include a locale, then this method returns undefined.
	 * @return {ilib.Locale} the locale used in the constructor of this instance,
	 * or undefined if no locale was given in the constructor
	 */
	getLocale: function () {
		return this.locale;
	}
};

/*
 * numfmt.js - Number formatter definition
 *
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js strings.js currency.js
/*
!depends 
ilibglobal.js 
locale.js
localeinfo.js
util/utils.js
util/math.js
currency.js
strings.js
util/jsutils.js
*/

// !data localeinfo currency

/**
 * @class
 * Create a new number formatter instance. Locales differ in the way that digits
 * in a formatted number are grouped, in the way the decimal character is represented,
 * etc. Use this formatter to get it right for any locale.<p>
 *
 * This formatter can format plain numbers, currency amounts, and percentage amounts.<p>
 *
 * As with all formatters, the recommended
 * practice is to create one formatter and use it multiple times to format various
 * numbers.<p>
 *
 * The options can contain any of the following properties:
 *
 * <ul>
 * <li><i>locale</i> - use the conventions of the specified locale when figuring out how to
 * format a number.
 * <li><i>type</i> - the type of this formatter. Valid values are "number", "currency", or
 * "percentage". If this property is not specified, the default is "number".
 * <li><i>currency</i> - the ISO 4217 3-letter currency code to use when the formatter type
 * is "currency". This property is required for currency formatting. If the type property
 * is "currency" and the currency property is not specified, the constructor will throw a
 * an exception.
 * <li><i>maxFractionDigits</i> - the maximum number of digits that should appear in the
 * formatted output after the decimal. A value of -1 means unlimited, and 0 means only print
 * the integral part of the number.
 * <li><i>minFractionDigits</i> - the minimum number of fractional digits that should
 * appear in the formatted output. If the number does not have enough fractional digits
 * to reach this minimum, the number will be zero-padded at the end to get to the limit.
 * If the type of the formatter is "currency" and this
 * property is not specified, then the minimum fraction digits is set to the normal number
 * of digits used with that currency, which is almost always 0, 2, or 3 digits.
 * <li><i>useNative</i> - the flag used to determaine whether to use the native script settings
 * for formatting the numbers .
 * <li><i>roundingMode</i> - When the maxFractionDigits or maxIntegerDigits is specified,
 * this property governs how the least significant digits are rounded to conform to that
 * maximum. The value of this property is a string with one of the following values:
 * <ul>
 *   <li><i>up</i> - round away from zero
 *   <li><i>down</i> - round towards zero. This has the effect of truncating the number
 *   <li><i>ceiling</i> - round towards positive infinity
 *   <li><i>floor</i> - round towards negative infinity
 *   <li><i>halfup</i> - round towards nearest neighbour. If equidistant, round up.
 *   <li><i>halfdown</i> - round towards nearest neighbour. If equidistant, round down.
 *   <li><i>halfeven</i> - round towards nearest neighbour. If equidistant, round towards the even neighbour
 *   <li><i>halfodd</i> - round towards nearest neighbour. If equidistant, round towards the odd neighbour
 * </ul>
 * When the type of the formatter is "currency" and the <i>roundingMode</i> property is not
 * set, then the standard legal rounding rules for the locale are followed. If the type
 * is "number" or "percentage" and the <i>roundingMode</i> property is not set, then the
 * default mode is "halfdown".</i>.
 *
 * <li><i>style</i> - When the type of this formatter is "currency", the currency amount
 * can be formatted in the following styles: "common" and "iso". The common style is the
 * one commonly used in every day writing where the currency unit is represented using a
 * symbol. eg. "$57.35" for fifty-seven dollars and thirty five cents. The iso style is
 * the international style where the currency unit is represented using the ISO 4217 code.
 * eg. "USD 57.35" for the same amount. The default is "common" style if the style is
 * not specified.<p>
 *
 * When the type of this formatter is "number",
 * the style can be either "standard" or "scientific" or "native". A "standard" style means
 * a fully specified floating point number formatted for the locale, whereas "scientific" uses
 * scientific notation for all numbers. That is, 1 integral digit, followed by a number
 * of fractional digits, followed by an "e" which denotes exponentiation, followed digits
 * which give the power of 10 in the exponent. The native style will format a floating point
 * number using the native digits and formatting symbols for the script of the locale. Note
 * that if you specify a maximum number
 * of integral digits, the formatter with a standard style will give you standard
 * formatting for smaller numbers and scientific notation for larger numbers. The default
 * is standard style if this is not specified.
 *
 * <li><i>onLoad</i> - a callback function to call when the format data is fully
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 *
 * <li>sync - tell whether to load any missing locale data synchronously or
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 * </ul>
 * <p>
 *
 * Depends directive: !depends numfmt.js
 *
 * @constructor
 * @param {Object.<string,*>} options A set of options that govern how the formatter will behave
 */
ilib.NumFmt = function (options) {
	var sync = true;
	this.locale = new ilib.Locale();
	/** @type {string} */
	this.type = "number";

	if (options) {
		if (options.locale) {
			this.locale = (typeof (options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}

		if (options.type) {
			if (options.type === 'number' ||
				options.type === 'currency' ||
				options.type === 'percentage') {
				this.type = options.type;
			}
		}

		if (options.currency) {
			/** @type {string} */
			this.currency = options.currency;
		}

		if (typeof (options.maxFractionDigits) === 'number') {
			/** @type {number|undefined} */
			this.maxFractionDigits = this._toPrimitive(options.maxFractionDigits);
		}
		if (typeof (options.minFractionDigits) === 'number') {
			/** @type {number|undefined} */
			this.minFractionDigits = this._toPrimitive(options.minFractionDigits);
		}
		if (options.style) {
			/** @type {string} */
			this.style = options.style;
		}
		if (typeof(options.useNative) === 'boolean') {
			this.useNative = options.useNative;
		}
		/** @type {string} */
		this.roundingMode = options.roundingMode;

		if (typeof (options.sync) !== 'undefined') {
			/** @type {boolean} */
			sync = (options.sync == true);
		}
	}

	/** @type {ilib.LocaleInfo|undefined} */
	this.localeInfo = undefined;
	
	new ilib.LocaleInfo(this.locale, {
		sync: sync,
		onLoad: ilib.bind(this, function (li) {
			/** @type {ilib.LocaleInfo|undefined} */
			this.localeInfo = li;

			if (this.type === "number") {
				this.templateNegative = new ilib.String(this.localeInfo.getNegativeNumberFormat() || "-{n}");
			} else if (this.type === "currency") {
				var templates;

				if (!this.currency || typeof (this.currency) != 'string') {
					throw "A currency property is required in the options to the number formatter constructor when the type property is set to currency.";
				}

				new ilib.Currency({
					locale: this.locale,
					code: this.currency,
					sync: sync,
					onLoad: ilib.bind(this, function (cur) {
						this.currencyInfo = cur;
						if (this.style !== "common" && this.style !== "iso") {
							this.style = "common";
						}
						
						if (typeof(this.maxFractionDigits) !== 'number' && typeof(this.minFractionDigits) !== 'number') {
							this.minFractionDigits = this.maxFractionDigits = this.currencyInfo.getFractionDigits();
						}

						templates = this.localeInfo.getCurrencyFormats();
						this.template = new ilib.String(templates[this.style] || templates.common);
						this.templateNegative = new ilib.String(templates[this.style + "Negative"] || templates["commonNegative"]);
						this.sign = (this.style === "iso") ? this.currencyInfo.getCode() : this.currencyInfo.getSign();
						
						if (!this.roundingMode) {
							this.roundingMode = this.currencyInfo && this.currencyInfo.roundingMode;
						}

						this._init();

						if (options && typeof (options.onLoad) === 'function') {
							options.onLoad(this);
						}
					})
				});
				return;
			} else if (this.type === "percentage") {
				this.template =  new ilib.String(this.localeInfo.getPercentageFormat() || "{n}%");
				this.templateNegative = new ilib.String(this.localeInfo.getNegativePercentageFormat() || this.localeInfo.getNegativeNumberFormat() + "%");
			}

			this._init();

			if (options && typeof (options.onLoad) === 'function') {
				options.onLoad(this);
			}
		})
	});
};

/**
 * @static
 * Return an array of available locales that this formatter can format
 * @return {Array.<ilib.Locale>|undefined} an array of available locales
 */
ilib.NumFmt.getAvailableLocales = function () {
	return undefined;
};

/**
 * @private
 * @const
 * @type string
 */
ilib.NumFmt.zeros = "0000000000000000000000000000000000000000000000000000000000000000000000";

ilib.NumFmt.prototype = {
	/**
	 * Return true if this formatter uses native digits to format the number. If the useNative
	 * option is given to the constructor, then this flag will be honoured. If the useNative
	 * option is not given to the constructor, this this formatter will use native digits if
	 * the locale typically uses native digits.
	 * 
	 *  @return {boolean} true if this formatter will format with native digits, false otherwise
	 */
	getUseNative: function() {
		if (typeof(this.useNative) === "boolean") {
			return this.useNative;
		} 
		return (this.localeInfo.getDigitsStyle() === "native");
	},
	
	/**
	 * @private
	 */
	_init: function () {
		if (this.maxFractionDigits < this.minFractionDigits) {
			this.minFractionDigits = this.maxFractionDigits;
		}

		if (!this.roundingMode) {
			this.roundingMode = this.localeInfo.getRoundingMode();
		}

		if (!this.roundingMode) {
			this.roundingMode = "halfdown";
		}

		// set up the function, so we only have to figure it out once
		// and not every time we do format()
		this.round = ilib._roundFnc[this.roundingMode];
		if (!this.round) {
			this.roundingMode = "halfdown";
			this.round = ilib._roundFnc[this.roundingMode];
		}
		
		this.prigroupSize = this.localeInfo.getPrimaryGroupingDigits(),
		this.secgroupSize = this.localeInfo.getSecondaryGroupingDigits(),
		this.groupingSeparator = this.getUseNative() ? this.localeInfo.getNativeGroupingSeparator() : this.localeInfo.getGroupingSeparator();
		this.decimalSeparator = this.getUseNative() ? this.localeInfo.getNativeDecimalSeparator() : this.localeInfo.getDecimalSeparator();
		
		if (this.getUseNative()) {
			var nd = this.localeInfo.getNativeDigits() || this.localeInfo.getDigits();
			if (nd) {
				this.digits = nd.split("");
			}
		}
		
		this.exponentSymbol = this.localeInfo.getExponential() || "e";
	},

	/*
	 * @private
	 */
	_pad: function (str, length, left) {
		return (str.length >= length) ?
			str :
			(left ?
			ilib.NumFmt.zeros.substring(0, length - str.length) + str :
			str + ilib.NumFmt.zeros.substring(0, length - str.length));
	},

	/**
	 * @private
	 * @param {Number|ilib.Number|string|number} num object, string, or number to convert to a primitive number
	 * @return {number} the primitive number equivalent of the argument
	 */
	_toPrimitive: function (num) {
		var n = 0;

		switch (typeof (num)) {
		case 'number':
			n = num;
			break;
		case 'string':
			n = parseFloat(num);
			break;
		case 'object':
			// Number.valueOf() is incorrectly documented as being of type "string" rather than "number", so coerse 
			// the type here to shut the type checker up
			n = /** @type {number} */ num.valueOf();
			break;
		}

		return n;
	},

	/**
	 * @private
	 * Format the number using scientific notation as a positive number. Negative
	 * formatting to be applied later.
	 * @param {number} num the number to format
	 * @return {string} the formatted number
	 */
	_formatScientific: function (num) {
		var n = new Number(num);
		var formatted;
		if (typeof (this.maxFractionDigits) !== 'undefined') {
			// if there is fraction digits, round it to the right length first
			// divide or multiply by 10 by manipulating the exponent so as to
			// avoid the rounding errors of floating point numbers
			var e,
				factor,
				str = n.toExponential(),
				parts = str.split("e"),
				significant = parts[0];

			e = parts[1];
			factor = Math.pow(10, this.maxFractionDigits);
			significant = this.round(significant * factor) / factor;
			formatted = "" + significant + this.exponentSymbol + e;
		} else {
			formatted = n.toExponential(this.minFractionDigits);
			if (this.exponentSymbol !== 'e') {
				formatted = formatted.replace(/e/, this.exponentSymbol);
			}
		}
		return formatted;
	},

	/**
	 * @private
	 * Formats the number as a positive number. Negative formatting to be applied later.
	 * @param {number} num the number to format
	 * @return {string} the formatted number
	 */
	_formatStandard: function (num) {
		var i;
		var k;
		
		if (typeof(this.maxFractionDigits) !== 'undefined' && this.maxFractionDigits > -1) {
			var factor = Math.pow(10, this.maxFractionDigits);
			num = this.round(num * factor) / factor;
		}

		num = Math.abs(num);

		var parts = ("" + num).split("."),
			integral = parts[0],
			fraction = parts[1],
			cycle,
			formatted;
		
		integral = integral.toString();

		if (this.minFractionDigits > 0) {
			fraction = this._pad(fraction || "", this.minFractionDigits, false);
		}

		if (this.secgroupSize > 0) {
			if (integral.length > this.prigroupSize) {
				var size1 = this.prigroupSize;
				var size2 = integral.length;
				var size3 = size2 - size1;
				integral = integral.slice(0, size3) + this.groupingSeparator + integral.slice(size3);
				var num_sec = integral.substring(0, integral.indexOf(this.groupingSeparator));
				k = num_sec.length;
				while (k > this.secgroupSize) {
					var secsize1 = this.secgroupSize;
					var secsize2 = num_sec.length;
					var secsize3 = secsize2 - secsize1;
					integral = integral.slice(0, secsize3) + this.groupingSeparator + integral.slice(secsize3);
					num_sec = integral.substring(0, integral.indexOf(this.groupingSeparator));
					k = num_sec.length;
				}
			}

			formatted = integral;
		} else if (this.prigroupSize !== 0) {
			cycle = ilib.mod(integral.length - 1, this.prigroupSize);

			formatted = "";

			for (i = 0; i < integral.length - 1; i++) {
				formatted += integral.charAt(i);
				if (cycle === 0) {
					formatted += this.groupingSeparator;
				}
				cycle = ilib.mod(cycle - 1, this.prigroupSize);
			}
			formatted += integral.charAt(integral.length - 1);
		} else {
			formatted = integral;
		}

		if (fraction && (typeof(this.maxFractionDigits) === 'undefined' || this.maxFractionDigits > 0)) {
			formatted += this.decimalSeparator;
			formatted += fraction;
		}
		
		if (this.digits) {
			formatted = ilib.mapString(formatted, this.digits);
		}
		
		return formatted;
	},

	/**
	 * Format a number according to the settings of this number formatter instance.
	 * @param num {number|string|Number|ilib.Number} a floating point number to format
	 * @return {string} a string containing the formatted number
	 */
	format: function (num) {
		var formatted, n;

		if (typeof (num) === 'undefined') {
			return "";
		}

		// convert to a real primitive number type
		n = this._toPrimitive(num);

		if (this.type === "number") {
			formatted = (this.style === "scientific") ?
				this._formatScientific(n) :
				this._formatStandard(n);

			if (num < 0) {
				formatted = this.templateNegative.format({n: formatted});
			}
		} else {
			formatted = this._formatStandard(n);
			var template = (n < 0) ? this.templateNegative : this.template;
			formatted = template.format({
				n: formatted,
				s: this.sign
			});
		}

		return formatted;
	},

	/**
	 * Return the type of formatter. Valid values are "number", "currency", and
	 * "percentage".
	 *
	 * @return {string} the type of formatter
	 */
	getType: function () {
		return this.type;
	},

	/**
	 * Return the locale for this formatter instance.
	 * @return {ilib.Locale} the locale instance for this formatter
	 */
	getLocale: function () {
		return this.locale;
	},

	/**
	 * Returns true if this formatter groups together digits in the integral
	 * portion of a number, based on the options set up in the constructor. In
	 * most western European cultures, this means separating every 3 digits
	 * of the integral portion of a number with a particular character.
	 *
	 * @return {boolean} true if this formatter groups digits in the integral
	 * portion of the number
	 */
	isGroupingUsed: function () {
		return (this.groupingSeparator !== 'undefined' && this.groupingSeparator.length > 0);
	},

	/**
	 * Returns the maximum fraction digits set up in the constructor.
	 *
	 * @return {number} the maximum number of fractional digits this
	 * formatter will format, or -1 for no maximum
	 */
	getMaxFractionDigits: function () {
		return typeof (this.maxFractionDigits) !== 'undefined' ? this.maxFractionDigits : -1;
	},

	/**
	 * Returns the minimum fraction digits set up in the constructor. If
	 * the formatter has the type "currency", then the minimum fraction
	 * digits is the amount of digits that is standard for the currency
	 * in question unless overridden in the options to the constructor.
	 *
	 * @return {number} the minimum number of fractional digits this
	 * formatter will format, or -1 for no minimum
	 */
	getMinFractionDigits: function () {
		return typeof (this.minFractionDigits) !== 'undefined' ? this.minFractionDigits : -1;
	},

	/**
	 * Returns the ISO 4217 code for the currency that this formatter formats.
	 * IF the typeof this formatter is not "currency", then this method will
	 * return undefined.
	 *
	 * @return {string} the ISO 4217 code for the currency that this formatter
	 * formats, or undefined if this not a currency formatter
	 */
	getCurrency: function () {
		return this.currencyInfo && this.currencyInfo.getCode();
	},

	/**
	 * Returns the rounding mode set up in the constructor. The rounding mode
	 * controls how numbers are rounded when the integral or fraction digits
	 * of a number are limited.
	 *
	 * @return {string} the name of the rounding mode used in this formatter
	 */
	getRoundingMode: function () {
		return this.roundingMode;
	},

	/**
	 * If this formatter is a currency formatter, then the style determines how the
	 * currency is denoted in the formatted output. This method returns the style
	 * that this formatter will produce. (See the constructor comment for more about
	 * the styles.)
	 * @return {string} the name of the style this formatter will use to format
	 * currency amounts, or "undefined" if this formatter is not a currency formatter
	 */
	getStyle: function () {
		return this.style;
	}
};

/*
 * durfmt.js - Date formatter definition
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
date.js 
strings.js 
resources.js 
localeinfo.js
util/jsutils.js
*/

// !data dateformats sysres
// !resbundle sysres

/**
 * @class
 * 
 * Create a new duration formatter instance. The duration formatter is immutable once
 * it is created, but can format as many different durations as needed with the same
 * options. Create different duration formatter instances for different purposes
 * and then keep them cached for use later if you have more than one duration to
 * format.<p>
 * 
 * Duration formatters format lengths of time. The duration formatter is meant to format 
 * durations of such things as the length of a song or a movie or a meeting, or the 
 * current position in that song or movie while playing it. If you wish to format a 
 * period of time that has a specific start and end date/time, then use a
 * [ilib.DateRngFmt] instance instead and call its format method.<p>
 *  
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when formatting the duration. If the locale is
 * not specified, then the default locale of the app or web page will be used.
 * 
 * <li><i>length</i> - Specify the length of the format to use. The length is the approximate size of the 
 * formatted string.
 * 
 * <ul>
 * <li><i>short</i> - use a short representation of the duration. This is the most compact format possible for the locale. eg. 1y 1m 1w 1d 1:01:01
 * <li><i>medium</i> - use a medium length representation of the duration. This is a slightly longer format. eg. 1 yr 1 mo 1 wk 1 dy 1 hr 1 mi 1 se
 * <li><i>long</i> - use a long representation of the duration. This is a fully specified format, but some of the textual 
 * parts may still be abbreviated. eg. 1 yr 1 mo 1 wk 1 day 1 hr 1 min 1 sec
 * <li><i>full</i> - use a full representation of the duration. This is a fully specified format where all the textual 
 * parts are spelled out completely. eg. 1 year, 1 month, 1 week, 1 day, 1 hour, 1 minute and 1 second
 * </ul>
 * 
 * <li><i>style<i> - whether hours, minutes, and seconds should be formatted as a text string
 * or as a regular time as on a clock. eg. text is "1 hour, 15 minutes", whereas clock is "1:15:00". Valid
 * values for this property are "text" or "clock". Default if this property is not specified
 * is "text".
 * 
 *<li><i>useNative</i> - the flag used to determaine whether to use the native script settings 
 * for formatting the numbers .
 * 
 * <li><i>onLoad</i> - a callback function to call when the format data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * <p>
 * 
 * Depends directive: !depends durfmt.js
 * 
 * @constructor
 * @param {?Object} options options governing the way this date formatter instance works
 */
ilib.DurFmt = function(options) {
	var sync = true;
	var loadParams = undefined;
	
	this.locale = new ilib.Locale();
	this.length = "short";
	this.style = "text";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.length) {
			if (options.length === 'short' ||
				options.length === 'medium' ||
				options.length === 'long' ||
				options.length === 'full') {
				this.length = options.length;
			}
		}
		
		if (options.style) {
			if (options.style === 'text' || options.style === 'clock') {
				this.style = options.style;
			}
		}
		
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.useNative) === 'boolean') {
			this.useNative = options.useNative;
		}
		
		loadParams = options.loadParams;
	}
	
	new ilib.ResBundle({
		locale: this.locale,
		name: "sysres",
		sync: sync,
		loadParams: loadParams,
		onLoad: ilib.bind(this, function (sysres) {
			switch (this.length) {
				case 'short':
					this.components = {
						year: sysres.getString("#{num}y"),
						month: sysres.getString("#{num}m", "durationShortMonths"),
						week: sysres.getString("#{num}w"),
						day: sysres.getString("#{num}d"),
						hour: sysres.getString("#{num}h"),
						minute: sysres.getString("#{num}m", "durationShortMinutes"),
						second: sysres.getString("#{num}s"),
						millisecond: sysres.getString("#{num}m", "durationShortMillis"),
						separator: sysres.getString(" ", "separatorShort"),
						finalSeparator: "" // not used at this length
					};
					break;
					
				case 'medium':
					this.components = {
						year: sysres.getString("1#1 yr|#{num} yrs", "durationMediumYears"),
						month: sysres.getString("1#1 mo|#{num} mos"),
						week: sysres.getString("1#1 wk|#{num} wks", "durationMediumWeeks"),
						day: sysres.getString("1#1 dy|#{num} dys"),
						hour: sysres.getString("1#1 hr|#{num} hrs", "durationMediumHours"),
						minute: sysres.getString("1#1 mi|#{num} min"),
						second: sysres.getString("1#1 se|#{num} sec"),
						millisecond: sysres.getString("#{num} ms"),
						separator: sysres.getString(" ", "separatorMedium"),
						finalSeparator: "" // not used at this length
					};
					break;
					
				case 'long':
					this.components = {
						year: sysres.getString("1#1 yr|#{num} yrs"),
						month: sysres.getString("1#1 mon|#{num} mons"),
						week: sysres.getString("1#1 wk|#{num} wks"),
						day: sysres.getString("1#1 day|#{num} days", "durationLongDays"),
						hour: sysres.getString("1#1 hr|#{num} hrs"),
						minute: sysres.getString("1#1 min|#{num} min"),
						second: sysres.getString("1#1 sec|#{num} sec"),
						millisecond: sysres.getString("#{num} ms"),
						separator: sysres.getString(", ", "separatorLong"),
						finalSeparator: "" // not used at this length
					};
					break;
					
				case 'full':
					this.components = {
						year: sysres.getString("1#1 year|#{num} years"),
						month: sysres.getString("1#1 month|#{num} months"),
						week: sysres.getString("1#1 week|#{num} weeks"),
						day: sysres.getString("1#1 day|#{num} days"),
						hour: sysres.getString("1#1 hour|#{num} hours"),
						minute: sysres.getString("1#1 minute|#{num} minutes"),
						second: sysres.getString("1#1 second|#{num} seconds"),
						millisecond: sysres.getString("1#1 millisecond|#{num} milliseconds"),
						separator: sysres.getString(", ", "separatorFull"),
						finalSeparator: sysres.getString(" and ", "finalSeparatorFull")
					};
					break;
			}
			
			if (this.style === 'clock') {
				new ilib.DateFmt({
					locale: this.locale,
					type: "time",
					time: "ms",
					sync: sync,
					loadParams: loadParams,
					useNative: this.useNative,
					onLoad: ilib.bind(this, function (fmtMS) {
						this.timeFmtMS = fmtMS;
						new ilib.DateFmt({
							locale: this.locale,
							type: "time",
							time: "hm",
							sync: sync,
							loadParams: loadParams,
							useNative: this.useNative,
							onLoad: ilib.bind(this, function (fmtHM) {
								this.timeFmtHM = fmtHM;		
								new ilib.DateFmt({
									locale: this.locale,
									type: "time",
									time: "hms",
									sync: sync,
									loadParams: loadParams,
									useNative: this.useNative,
									onLoad: ilib.bind(this, function (fmtHMS) {
										this.timeFmtHMS = fmtHMS;		

										// munge with the template to make sure that the hours are not formatted mod 12
										this.timeFmtHM.template = this.timeFmtHM.template.replace(/hh?/, 'H');
										this.timeFmtHM.templateArr = this.timeFmtHM._tokenize(this.timeFmtHM.template);
										this.timeFmtHMS.template = this.timeFmtHMS.template.replace(/hh?/, 'H');
										this.timeFmtHMS.templateArr = this.timeFmtHMS._tokenize(this.timeFmtHMS.template);
										
										this._init(this.timeFmtHM.locinfo, options && options.onLoad);
									})
								});
							})
						});
					})
				});
				return;
			}

			new ilib.LocaleInfo(this.locale, {
				sync: sync,
				loadParams: loadParams,
				onLoad: ilib.bind(this, function (li) {
					this._init(li, options && options.onLoad);
				})
			});
		})
	});
};

/**
 * @private
 * @static
 */
ilib.DurFmt.complist = {
	"text": ["year", "month", "week", "day", "hour", "minute", "second", "millisecond"],
	"clock": ["year", "month", "week", "day"]
};

/**
 * @private
 */
ilib.DurFmt.prototype._mapDigits = function(str) {
	if (this.useNative && this.digits) {
		return ilib.mapString(str.toString(), this.digits);
	}
	return str;
};

/**
 * @private
 * @param {ilib.LocaleInfo} locinfo
 * @param {Function|undefined} onLoad
 */
ilib.DurFmt.prototype._init = function(locinfo, onLoad) {
	var digits;
	if (typeof(this.useNative) === 'boolean') {
		// if the caller explicitly said to use native or not, honour that despite what the locale data says...
		if (this.useNative) {
			digits = locinfo.getNativeDigits();
			if (digits) {
				this.digits = digits;
			}
		}
	} else if (locinfo.getDigitsStyle() === "native") {
		// else if the locale usually uses native digits, then use them 
		digits = locinfo.getNativeDigits();
		if (digits) {
			this.useNative = true;
			this.digits = digits;
		}
	} // else use western digits always

	if (typeof(onLoad) === 'function') {
		onLoad(this);
	}
};

/**
 * Format a duration according to the format template of this formatter instance.<p>
 * 
 * The components parameter should be an object that contains any or all of these 
 * numeric properties:
 * 
 * <ul>
 * <li>year
 * <li>month
 * <li>week
 * <li>day
 * <li>hour
 * <li>minute
 * <li>second
 * </ul>
 * <p>
 *
 * When a property is left out of the components parameter or has a value of 0, it will not
 * be formatted into the output string, except for times that include 0 minutes and 0 seconds.
 * 
 * This formatter will not ensure that numbers for each component property is within the
 * valid range for that component. This allows you to format durations that are longer
 * than normal range. For example, you could format a duration has being "33 hours" rather
 * than "1 day, 9 hours".
 * 
 * @param {Object} components date/time components to be formatted into a duration string
 * @return {ilib.String} a string with the duration formatted according to the style and 
 * locale set up for this formatter instance. If the components parameter is empty or 
 * undefined, an empty string is returned.
 */
ilib.DurFmt.prototype.format = function (components) {
	var i, list, temp, fmt, secondlast = true, str = "";
	
	list = ilib.DurFmt.complist[this.style];
	//for (i = 0; i < list.length; i++) {
	for (i = list.length-1; i >= 0; i--) {
		//console.log("Now dealing with " + list[i]);
		if (typeof(components[list[i]]) !== 'undefined' && components[list[i]] != 0) {
			if (str.length > 0) {
				str = ((this.length === 'full' && secondlast) ? this.components.finalSeparator : this.components.separator) + str;
				secondlast = false;
			}
			str = this.components[list[i]].formatChoice(components[list[i]], {num: this._mapDigits(components[list[i]])}) + str;
		}
	}

	if (this.style === 'clock') {
		if (typeof(components.hour) !== 'undefined') {
			fmt = (typeof(components.second) !== 'undefined') ? this.timeFmtHMS : this.timeFmtHM;
		} else {
			fmt = this.timeFmtMS;
		}
				
		if (str.length > 0) {
			str += this.components.separator;
		}
		str += fmt._formatTemplate(components, fmt.templateArr);
	}
	
	return new ilib.String(str);
};

/**
 * Return the locale that was used to construct this duration formatter object. If the
 * locale was not given as parameter to the constructor, this method returns the default
 * locale of the system.
 * 
 * @return {ilib.Locale} locale that this duration formatter was constructed with
 */
ilib.DurFmt.prototype.getLocale = function () {
	return this.locale;
};

/**
 * Return the length that was used to construct this duration formatter object. If the
 * length was not given as parameter to the constructor, this method returns the default
 * length. Valid values are "short", "medium", "long", and "full".
 * 
 * @return {string} length that this duration formatter was constructed with
 */
ilib.DurFmt.prototype.getLength = function () {
	return this.length;
};

/**
 * Return the style that was used to construct this duration formatter object. Returns
 * one of "text" or "clock".
 * 
 * @return {string} style that this duration formatter was constructed with
 */
ilib.DurFmt.prototype.getStyle = function () {
	return this.style;
};

ilib.data.ctype_l = {"Lu":[[65,90],[192,214],[216,222],[256],[258],[260],[262],[264],[266],[268],[270],[272],[274],[276],[278],[280],[282],[284],[286],[288],[290],[292],[294],[296],[298],[300],[302],[304],[306],[308],[310],[313],[315],[317],[319],[321],[323],[325],[327],[330],[332],[334],[336],[338],[340],[342],[344],[346],[348],[350],[352],[354],[356],[358],[360],[362],[364],[366],[368],[370],[372],[374],[376,377],[379],[381],[385,386],[388],[390,391],[393,395],[398,401],[403,404],[406,408],[412,413],[415,416],[418],[420],[422,423],[425],[428],[430,431],[433,435],[437],[439,440],[444],[452],[455],[458],[461],[463],[465],[467],[469],[471],[473],[475],[478],[480],[482],[484],[486],[488],[490],[492],[494],[497],[500],[502,504],[506],[508],[510],[512],[514],[516],[518],[520],[522],[524],[526],[528],[530],[532],[534],[536],[538],[540],[542],[544],[546],[548],[550],[552],[554],[556],[558],[560],[562],[570,571],[573,574],[577],[579,582],[584],[586],[588],[590],[880],[882],[886],[902],[904,906],[908],[910,911],[913,929],[931,939],[975],[978,980],[984],[986],[988],[990],[992],[994],[996],[998],[1000],[1002],[1004],[1006],[1012],[1015],[1017,1018],[1021,1071],[1120],[1122],[1124],[1126],[1128],[1130],[1132],[1134],[1136],[1138],[1140],[1142],[1144],[1146],[1148],[1150],[1152],[1162],[1164],[1166],[1168],[1170],[1172],[1174],[1176],[1178],[1180],[1182],[1184],[1186],[1188],[1190],[1192],[1194],[1196],[1198],[1200],[1202],[1204],[1206],[1208],[1210],[1212],[1214],[1216,1217],[1219],[1221],[1223],[1225],[1227],[1229],[1232],[1234],[1236],[1238],[1240],[1242],[1244],[1246],[1248],[1250],[1252],[1254],[1256],[1258],[1260],[1262],[1264],[1266],[1268],[1270],[1272],[1274],[1276],[1278],[1280],[1282],[1284],[1286],[1288],[1290],[1292],[1294],[1296],[1298],[1300],[1302],[1304],[1306],[1308],[1310],[1312],[1314],[1316],[1318],[1329,1366],[4256,4293],[4295],[4301],[7680],[7682],[7684],[7686],[7688],[7690],[7692],[7694],[7696],[7698],[7700],[7702],[7704],[7706],[7708],[7710],[7712],[7714],[7716],[7718],[7720],[7722],[7724],[7726],[7728],[7730],[7732],[7734],[7736],[7738],[7740],[7742],[7744],[7746],[7748],[7750],[7752],[7754],[7756],[7758],[7760],[7762],[7764],[7766],[7768],[7770],[7772],[7774],[7776],[7778],[7780],[7782],[7784],[7786],[7788],[7790],[7792],[7794],[7796],[7798],[7800],[7802],[7804],[7806],[7808],[7810],[7812],[7814],[7816],[7818],[7820],[7822],[7824],[7826],[7828],[7838],[7840],[7842],[7844],[7846],[7848],[7850],[7852],[7854],[7856],[7858],[7860],[7862],[7864],[7866],[7868],[7870],[7872],[7874],[7876],[7878],[7880],[7882],[7884],[7886],[7888],[7890],[7892],[7894],[7896],[7898],[7900],[7902],[7904],[7906],[7908],[7910],[7912],[7914],[7916],[7918],[7920],[7922],[7924],[7926],[7928],[7930],[7932],[7934],[7944,7951],[7960,7965],[7976,7983],[7992,7999],[8008,8013],[8025],[8027],[8029],[8031],[8040,8047],[8120,8123],[8136,8139],[8152,8155],[8168,8172],[8184,8187],[8450],[8455],[8459,8461],[8464,8466],[8469],[8473,8477],[8484],[8486],[8488],[8490,8493],[8496,8499],[8510,8511],[8517],[8579],[11264,11310],[11360],[11362,11364],[11367],[11369],[11371],[11373,11376],[11378],[11381],[11390,11392],[11394],[11396],[11398],[11400],[11402],[11404],[11406],[11408],[11410],[11412],[11414],[11416],[11418],[11420],[11422],[11424],[11426],[11428],[11430],[11432],[11434],[11436],[11438],[11440],[11442],[11444],[11446],[11448],[11450],[11452],[11454],[11456],[11458],[11460],[11462],[11464],[11466],[11468],[11470],[11472],[11474],[11476],[11478],[11480],[11482],[11484],[11486],[11488],[11490],[11499],[11501],[11506],[42560],[42562],[42564],[42566],[42568],[42570],[42572],[42574],[42576],[42578],[42580],[42582],[42584],[42586],[42588],[42590],[42592],[42594],[42596],[42598],[42600],[42602],[42604],[42624],[42626],[42628],[42630],[42632],[42634],[42636],[42638],[42640],[42642],[42644],[42646],[42786],[42788],[42790],[42792],[42794],[42796],[42798],[42802],[42804],[42806],[42808],[42810],[42812],[42814],[42816],[42818],[42820],[42822],[42824],[42826],[42828],[42830],[42832],[42834],[42836],[42838],[42840],[42842],[42844],[42846],[42848],[42850],[42852],[42854],[42856],[42858],[42860],[42862],[42873],[42875],[42877,42878],[42880],[42882],[42884],[42886],[42891],[42893],[42896],[42898],[42912],[42914],[42916],[42918],[42920],[42922],[65313,65338],[66560,66599],[119808,119833],[119860,119885],[119912,119937],[119964],[119966,119967],[119970],[119973,119974],[119977,119980],[119982,119989],[120016,120041],[120068,120069],[120071,120074],[120077,120084],[120086,120092],[120120,120121],[120123,120126],[120128,120132],[120134],[120138,120144],[120172,120197],[120224,120249],[120276,120301],[120328,120353],[120380,120405],[120432,120457],[120488,120512],[120546,120570],[120604,120628],[120662,120686],[120720,120744],[120778]],"Ll":[[97,122],[181],[223,246],[248,255],[257],[259],[261],[263],[265],[267],[269],[271],[273],[275],[277],[279],[281],[283],[285],[287],[289],[291],[293],[295],[297],[299],[301],[303],[305],[307],[309],[311,312],[314],[316],[318],[320],[322],[324],[326],[328,329],[331],[333],[335],[337],[339],[341],[343],[345],[347],[349],[351],[353],[355],[357],[359],[361],[363],[365],[367],[369],[371],[373],[375],[378],[380],[382,384],[387],[389],[392],[396,397],[402],[405],[409,411],[414],[417],[419],[421],[424],[426,427],[429],[432],[436],[438],[441,442],[445,447],[454],[457],[460],[462],[464],[466],[468],[470],[472],[474],[476,477],[479],[481],[483],[485],[487],[489],[491],[493],[495,496],[499],[501],[505],[507],[509],[511],[513],[515],[517],[519],[521],[523],[525],[527],[529],[531],[533],[535],[537],[539],[541],[543],[545],[547],[549],[551],[553],[555],[557],[559],[561],[563,569],[572],[575,576],[578],[583],[585],[587],[589],[591,659],[661,687],[881],[883],[887],[891,893],[912],[940,974],[976,977],[981,983],[985],[987],[989],[991],[993],[995],[997],[999],[1001],[1003],[1005],[1007,1011],[1013],[1016],[1019,1020],[1072,1119],[1121],[1123],[1125],[1127],[1129],[1131],[1133],[1135],[1137],[1139],[1141],[1143],[1145],[1147],[1149],[1151],[1153],[1163],[1165],[1167],[1169],[1171],[1173],[1175],[1177],[1179],[1181],[1183],[1185],[1187],[1189],[1191],[1193],[1195],[1197],[1199],[1201],[1203],[1205],[1207],[1209],[1211],[1213],[1215],[1218],[1220],[1222],[1224],[1226],[1228],[1230,1231],[1233],[1235],[1237],[1239],[1241],[1243],[1245],[1247],[1249],[1251],[1253],[1255],[1257],[1259],[1261],[1263],[1265],[1267],[1269],[1271],[1273],[1275],[1277],[1279],[1281],[1283],[1285],[1287],[1289],[1291],[1293],[1295],[1297],[1299],[1301],[1303],[1305],[1307],[1309],[1311],[1313],[1315],[1317],[1319],[1377,1415],[7424,7467],[7531,7543],[7545,7578],[7681],[7683],[7685],[7687],[7689],[7691],[7693],[7695],[7697],[7699],[7701],[7703],[7705],[7707],[7709],[7711],[7713],[7715],[7717],[7719],[7721],[7723],[7725],[7727],[7729],[7731],[7733],[7735],[7737],[7739],[7741],[7743],[7745],[7747],[7749],[7751],[7753],[7755],[7757],[7759],[7761],[7763],[7765],[7767],[7769],[7771],[7773],[7775],[7777],[7779],[7781],[7783],[7785],[7787],[7789],[7791],[7793],[7795],[7797],[7799],[7801],[7803],[7805],[7807],[7809],[7811],[7813],[7815],[7817],[7819],[7821],[7823],[7825],[7827],[7829,7837],[7839],[7841],[7843],[7845],[7847],[7849],[7851],[7853],[7855],[7857],[7859],[7861],[7863],[7865],[7867],[7869],[7871],[7873],[7875],[7877],[7879],[7881],[7883],[7885],[7887],[7889],[7891],[7893],[7895],[7897],[7899],[7901],[7903],[7905],[7907],[7909],[7911],[7913],[7915],[7917],[7919],[7921],[7923],[7925],[7927],[7929],[7931],[7933],[7935,7943],[7952,7957],[7968,7975],[7984,7991],[8000,8005],[8016,8023],[8032,8039],[8048,8061],[8064,8071],[8080,8087],[8096,8103],[8112,8116],[8118,8119],[8126],[8130,8132],[8134,8135],[8144,8147],[8150,8151],[8160,8167],[8178,8180],[8182,8183],[8458],[8462,8463],[8467],[8495],[8500],[8505],[8508,8509],[8518,8521],[8526],[8580],[11312,11358],[11361],[11365,11366],[11368],[11370],[11372],[11377],[11379,11380],[11382,11387],[11393],[11395],[11397],[11399],[11401],[11403],[11405],[11407],[11409],[11411],[11413],[11415],[11417],[11419],[11421],[11423],[11425],[11427],[11429],[11431],[11433],[11435],[11437],[11439],[11441],[11443],[11445],[11447],[11449],[11451],[11453],[11455],[11457],[11459],[11461],[11463],[11465],[11467],[11469],[11471],[11473],[11475],[11477],[11479],[11481],[11483],[11485],[11487],[11489],[11491,11492],[11500],[11502],[11507],[11520,11557],[11559],[11565],[42561],[42563],[42565],[42567],[42569],[42571],[42573],[42575],[42577],[42579],[42581],[42583],[42585],[42587],[42589],[42591],[42593],[42595],[42597],[42599],[42601],[42603],[42605],[42625],[42627],[42629],[42631],[42633],[42635],[42637],[42639],[42641],[42643],[42645],[42647],[42787],[42789],[42791],[42793],[42795],[42797],[42799,42801],[42803],[42805],[42807],[42809],[42811],[42813],[42815],[42817],[42819],[42821],[42823],[42825],[42827],[42829],[42831],[42833],[42835],[42837],[42839],[42841],[42843],[42845],[42847],[42849],[42851],[42853],[42855],[42857],[42859],[42861],[42863],[42865,42872],[42874],[42876],[42879],[42881],[42883],[42885],[42887],[42892],[42894],[42897],[42899],[42913],[42915],[42917],[42919],[42921],[43002],[64256,64262],[64275,64279],[65345,65370],[66600,66639],[119834,119859],[119886,119892],[119894,119911],[119938,119963],[119990,119993],[119995],[119997,120003],[120005,120015],[120042,120067],[120094,120119],[120146,120171],[120198,120223],[120250,120275],[120302,120327],[120354,120379],[120406,120431],[120458,120485],[120514,120538],[120540,120545],[120572,120596],[120598,120603],[120630,120654],[120656,120661],[120688,120712],[120714,120719],[120746,120770],[120772,120777],[120779]],"Lt":[[453],[456],[459],[498],[8072,8079],[8088,8095],[8104,8111],[8124],[8140],[8188]],"Lm":[[688,705],[710,721],[736,740],[748],[750],[884],[890],[1369],[1600],[1765,1766],[2036,2037],[2042],[2074],[2084],[2088],[2417],[3654],[3782],[4348],[6103],[6211],[6823],[7288,7293],[7468,7530],[7544],[7579,7615],[8305],[8319],[8336,8348],[11388,11389],[11631],[11823],[12293],[12337,12341],[12347],[12445,12446],[12540,12542],[40981],[42232,42237],[42508],[42623],[42775,42783],[42864],[42888],[43000,43001],[43471],[43632],[43741],[43763,43764],[65392],[65438,65439],[94099,94111]],"Lo":[[170],[186],[443],[448,451],[660],[1488,1514],[1520,1522],[1568,1599],[1601,1610],[1646,1647],[1649,1747],[1749],[1774,1775],[1786,1788],[1791],[1808],[1810,1839],[1869,1957],[1969],[1994,2026],[2048,2069],[2112,2136],[2208],[2210,2220],[2308,2361],[2365],[2384],[2392,2401],[2418,2423],[2425,2431],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482],[2486,2489],[2493],[2510],[2524,2525],[2527,2529],[2544,2545],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2649,2652],[2654],[2674,2676],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2749],[2768],[2784,2785],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2877],[2908,2909],[2911,2913],[2929],[2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3024],[3077,3084],[3086,3088],[3090,3112],[3114,3123],[3125,3129],[3133],[3160,3161],[3168,3169],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3261],[3294],[3296,3297],[3313,3314],[3333,3340],[3342,3344],[3346,3386],[3389],[3406],[3424,3425],[3450,3455],[3461,3478],[3482,3505],[3507,3515],[3517],[3520,3526],[3585,3632],[3634,3635],[3648,3653],[3713,3714],[3716],[3719,3720],[3722],[3725],[3732,3735],[3737,3743],[3745,3747],[3749],[3751],[3754,3755],[3757,3760],[3762,3763],[3773],[3776,3780],[3804,3807],[3840],[3904,3911],[3913,3948],[3976,3980],[4096,4138],[4159],[4176,4181],[4186,4189],[4193],[4197,4198],[4206,4208],[4213,4225],[4238],[4304,4346],[4349,4680],[4682,4685],[4688,4694],[4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4992,5007],[5024,5108],[5121,5740],[5743,5759],[5761,5786],[5792,5866],[5888,5900],[5902,5905],[5920,5937],[5952,5969],[5984,5996],[5998,6000],[6016,6067],[6108],[6176,6210],[6212,6263],[6272,6312],[6314],[6320,6389],[6400,6428],[6480,6509],[6512,6516],[6528,6571],[6593,6599],[6656,6678],[6688,6740],[6917,6963],[6981,6987],[7043,7072],[7086,7087],[7098,7141],[7168,7203],[7245,7247],[7258,7287],[7401,7404],[7406,7409],[7413,7414],[8501,8504],[11568,11623],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[12294],[12348],[12353,12438],[12447],[12449,12538],[12543],[12549,12589],[12593,12686],[12704,12730],[12784,12799],[13312,19893],[19968,40908],[40960,40980],[40982,42124],[42192,42231],[42240,42507],[42512,42527],[42538,42539],[42606],[42656,42725],[43003,43009],[43011,43013],[43015,43018],[43020,43042],[43072,43123],[43138,43187],[43250,43255],[43259],[43274,43301],[43312,43334],[43360,43388],[43396,43442],[43520,43560],[43584,43586],[43588,43595],[43616,43631],[43633,43638],[43642],[43648,43695],[43697],[43701,43702],[43705,43709],[43712],[43714],[43739,43740],[43744,43754],[43762],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43968,44002],[44032,55203],[55216,55238],[55243,55291],[63744,64109],[64112,64217],[64285],[64287,64296],[64298,64310],[64312,64316],[64318],[64320,64321],[64323,64324],[64326,64433],[64467,64829],[64848,64911],[64914,64967],[65008,65019],[65136,65140],[65142,65276],[65382,65391],[65393,65437],[65440,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[66176,66204],[66208,66256],[66304,66334],[66352,66368],[66370,66377],[66432,66461],[66464,66499],[66504,66511],[66640,66717],[67584,67589],[67592],[67594,67637],[67639,67640],[67644],[67647,67669],[67840,67861],[67872,67897],[67968,68023],[68030,68031],[68096],[68112,68115],[68117,68119],[68121,68147],[68192,68220],[68352,68405],[68416,68437],[68448,68466],[68608,68680],[69635,69687],[69763,69807],[69840,69864],[69891,69926],[70019,70066],[70081,70084],[71296,71338],[73728,74606],[77824,78894],[92160,92728],[93952,94020],[94032],[110592,110593],[126464,126467],[126469,126495],[126497,126498],[126500],[126503],[126505,126514],[126516,126519],[126521],[126523],[126530],[126535],[126537],[126539],[126541,126543],[126545,126546],[126548],[126551],[126553],[126555],[126557],[126559],[126561,126562],[126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[131072,173782],[173824,177972],[177984,178205],[194560,195101]]};
/*
 * ctype.islpha.js - Character type is alphabetic
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype_l

/**
 * Return whether or not the first character is alphabetic.<p>
 * 
 * Depends directive: !depends ctype.isalnum.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is alphabetic.
 */
ilib.CType.isAlpha = function (ch) {
	return ilib.CType._inRange(ch, 'Lu', ilib.data.ctype_l) ||
		ilib.CType._inRange(ch, 'Ll', ilib.data.ctype_l) ||
		ilib.CType._inRange(ch, 'Lt', ilib.data.ctype_l) ||
		ilib.CType._inRange(ch, 'Lm', ilib.data.ctype_l) ||
		ilib.CType._inRange(ch, 'Lo', ilib.data.ctype_l);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isAlpha._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_l", sync, loadParams, onLoad);
};



/*
 * ctype.isalnum.js - Character type alphanumeric
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js ctype.isalpha.js ctype.isdigit.js

/**
 * Return whether or not the first character is alphabetic or numeric.<p>
 * 
 * Depends directive: !depends ctype.isalnum.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is alphabetic or numeric
 */
ilib.CType.isAlnum = function isAlnum(ch) {
	return ilib.CType.isAlpha(ch) || ilib.CType.isDigit(ch);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isAlnum._init = function (sync, loadParams, onLoad) {
	ilib.CType.isAlpha._init(sync, loadParams, function () {
		ilib.CType.isDigit._init(sync, loadParams, onLoad);
	});
};

/*
 * ctype.isascii.js - Character type is ASCII
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype

/**
 * Return whether or not the first character is in the ASCII range.<p>
 * 
 * Depends directive: !depends ctype.isascii.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is in the ASCII range.
 */
ilib.CType.isAscii = function (ch) {
	return ilib.CType._inRange(ch, 'ascii', ilib.data.ctype);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isAscii._init = function (sync, loadParams, onLoad) {
	ilib.CType._init(sync, loadParams, onLoad);
};

/*
 * ctype.isblank.js - Character type is blank
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype

/**
 * Return whether or not the first character is a blank character.<p>
 * 
 * Depends directive: !depends ctype.isblank.js
 * 
 * ie. a space or a tab.
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is a blank character.
 */
ilib.CType.isBlank = function (ch) {
	return ilib.CType._inRange(ch, 'blank', ilib.data.ctype);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isBlank._init = function (sync, loadParams, onLoad) {
	ilib.CType._init(sync, loadParams, onLoad);
};

ilib.data.ctype_c = {"Cn":[[888,889],[895,899],[907],[909],[930],[1320,1328],[1367,1368],[1376],[1416],[1419,1422],[1424],[1480,1487],[1515,1519],[1525,1535],[1541],[1564,1565],[1806],[1867,1868],[1970,1983],[2043,2047],[2094,2095],[2111],[2140,2141],[2143,2207],[2209],[2221,2275],[2303],[2424],[2432],[2436],[2445,2446],[2449,2450],[2473],[2481],[2483,2485],[2490,2491],[2501,2502],[2505,2506],[2511,2518],[2520,2523],[2526],[2532,2533],[2556,2560],[2564],[2571,2574],[2577,2578],[2601],[2609],[2612],[2615],[2618,2619],[2621],[2627,2630],[2633,2634],[2638,2640],[2642,2648],[2653],[2655,2661],[2678,2688],[2692],[2702],[2706],[2729],[2737],[2740],[2746,2747],[2758],[2762],[2766,2767],[2769,2783],[2788,2789],[2802,2816],[2820],[2829,2830],[2833,2834],[2857],[2865],[2868],[2874,2875],[2885,2886],[2889,2890],[2894,2901],[2904,2907],[2910],[2916,2917],[2936,2945],[2948],[2955,2957],[2961],[2966,2968],[2971],[2973],[2976,2978],[2981,2983],[2987,2989],[3002,3005],[3011,3013],[3017],[3022,3023],[3025,3030],[3032,3045],[3067,3072],[3076],[3085],[3089],[3113],[3124],[3130,3132],[3141],[3145],[3150,3156],[3159],[3162,3167],[3172,3173],[3184,3191],[3200,3201],[3204],[3213],[3217],[3241],[3252],[3258,3259],[3269],[3273],[3278,3284],[3287,3293],[3295],[3300,3301],[3312],[3315,3329],[3332],[3341],[3345],[3387,3388],[3397],[3401],[3407,3414],[3416,3423],[3428,3429],[3446,3448],[3456,3457],[3460],[3479,3481],[3506],[3516],[3518,3519],[3527,3529],[3531,3534],[3541],[3543],[3552,3569],[3573,3584],[3643,3646],[3676,3712],[3715],[3717,3718],[3721],[3723,3724],[3726,3731],[3736],[3744],[3748],[3750],[3752,3753],[3756],[3770],[3774,3775],[3781],[3783],[3790,3791],[3802,3803],[3808,3839],[3912],[3949,3952],[3992],[4029],[4045],[4059,4095],[4294],[4296,4300],[4302,4303],[4681],[4686,4687],[4695],[4697],[4702,4703],[4745],[4750,4751],[4785],[4790,4791],[4799],[4801],[4806,4807],[4823],[4881],[4886,4887],[4955,4956],[4989,4991],[5018,5023],[5109,5119],[5789,5791],[5873,5887],[5901],[5909,5919],[5943,5951],[5972,5983],[5997],[6001],[6004,6015],[6110,6111],[6122,6127],[6138,6143],[6159],[6170,6175],[6264,6271],[6315,6319],[6390,6399],[6429,6431],[6444,6447],[6460,6463],[6465,6467],[6510,6511],[6517,6527],[6572,6575],[6602,6607],[6619,6621],[6684,6685],[6751],[6781,6782],[6794,6799],[6810,6815],[6830,6911],[6988,6991],[7037,7039],[7156,7163],[7224,7226],[7242,7244],[7296,7359],[7368,7375],[7415,7423],[7655,7675],[7958,7959],[7966,7967],[8006,8007],[8014,8015],[8024],[8026],[8028],[8030],[8062,8063],[8117],[8133],[8148,8149],[8156],[8176,8177],[8181],[8191],[8293,8297],[8306,8307],[8335],[8349,8351],[8379,8399],[8433,8447],[8586,8591],[9204,9215],[9255,9279],[9291,9311],[9984],[11085,11087],[11098,11263],[11311],[11359],[11508,11512],[11558],[11560,11564],[11566,11567],[11624,11630],[11633,11646],[11671,11679],[11687],[11695],[11703],[11711],[11719],[11727],[11735],[11743],[11836,11903],[11930],[12020,12031],[12246,12271],[12284,12287],[12352],[12439,12440],[12544,12548],[12590,12592],[12687],[12731,12735],[12772,12783],[12831],[13055],[19894,19903],[40909,40959],[42125,42127],[42183,42191],[42540,42559],[42648,42654],[42744,42751],[42895],[42900,42911],[42923,42999],[43052,43055],[43066,43071],[43128,43135],[43205,43213],[43226,43231],[43260,43263],[43348,43358],[43389,43391],[43470],[43482,43485],[43488,43519],[43575,43583],[43598,43599],[43610,43611],[43644,43647],[43715,43738],[43767,43776],[43783,43784],[43791,43792],[43799,43807],[43815],[43823,43967],[44014,44015],[44026,44031],[55204,55215],[55239,55242],[55292,55295],[64110,64111],[64218,64255],[64263,64274],[64280,64284],[64311],[64317],[64319],[64322],[64325],[64450,64466],[64832,64847],[64912,64913],[64968,65007],[65022,65023],[65050,65055],[65063,65071],[65107],[65127],[65132,65135],[65141],[65277,65278],[65280],[65471,65473],[65480,65481],[65488,65489],[65496,65497],[65501,65503],[65511],[65519,65528],[65534,65535],[65548],[65575],[65595],[65598],[65614,65615],[65630,65663],[65787,65791],[65795,65798],[65844,65846],[65931,65935],[65948,65999],[66046,66175],[66205,66207],[66257,66303],[66335],[66340,66351],[66379,66431],[66462],[66500,66503],[66518,66559],[66718,66719],[66730,67583],[67590,67591],[67593],[67638],[67641,67643],[67645,67646],[67670],[67680,67839],[67868,67870],[67898,67902],[67904,67967],[68024,68029],[68032,68095],[68100],[68103,68107],[68116],[68120],[68148,68151],[68155,68158],[68168,68175],[68185,68191],[68224,68351],[68406,68408],[68438,68439],[68467,68471],[68480,68607],[68681,69215],[69247,69631],[69710,69713],[69744,69759],[69826,69839],[69865,69871],[69882,69887],[69941],[69956,70015],[70089,70095],[70106,71295],[71352,71359],[71370,73727],[74607,74751],[74851,74863],[74868,77823],[78895,92159],[92729,93951],[94021,94031],[94079,94094],[94112,110591],[110594,118783],[119030,119039],[119079,119080],[119262,119295],[119366,119551],[119639,119647],[119666,119807],[119893],[119965],[119968,119969],[119971,119972],[119975,119976],[119981],[119994],[119996],[120004],[120070],[120075,120076],[120085],[120093],[120122],[120127],[120133],[120135,120137],[120145],[120486,120487],[120780,120781],[120832,126463],[126468],[126496],[126499],[126501,126502],[126504],[126515],[126520],[126522],[126524,126529],[126531,126534],[126536],[126538],[126540],[126544],[126547],[126549,126550],[126552],[126554],[126556],[126558],[126560],[126563],[126565,126566],[126571],[126579],[126584],[126589],[126591],[126602],[126620,126624],[126628],[126634],[126652,126703],[126706,126975],[127020,127023],[127124,127135],[127151,127152],[127167,127168],[127184],[127200,127231],[127243,127247],[127279],[127340,127343],[127387,127461],[127491,127503],[127547,127551],[127561,127567],[127570,127743],[127777,127791],[127798],[127869,127871],[127892,127903],[127941],[127947,127967],[127985,127999],[128063],[128065],[128248],[128253,128255],[128318,128319],[128324,128335],[128360,128506],[128577,128580],[128592,128639],[128710,128767],[128884,131071],[173783,173823],[177973,177983],[178206,194559],[195102,917504],[917506,917535],[917632,917759],[918000,983039],[1048574,1048575],[1114110,1114111]],"Cc":[[0,31],[127,159]],"Cf":[[173],[1536,1540],[1757],[1807],[8203,8207],[8234,8238],[8288,8292],[8298,8303],[65279],[65529,65531],[69821],[119155,119162],[917505],[917536,917631]],"Co":[[57344,63743],[983040,1048573],[1048576,1114109]],"Cs":[[55296,57343]]};
/*
 * ctype.iscntrl.js - Character type is control character
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype_c

/**
 * Return whether or not the first character is a control character.<p>
 * 
 * Depends directive: !depends ctype.iscntrl.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is a control character.
 */
ilib.CType.isCntrl = function (ch) {
	return ilib.CType._inRange(ch, 'Cc', ilib.data.ctype_c);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isCntrl._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_c", sync, loadParams, onLoad);
};

/*
 * ctype.isgraph.js - Character type is graph char
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js ctype.isspace.js ctype.iscntrl.js

/**
 * Return whether or not the first character is any printable character
 * other than space.<p>
 * 
 * Depends directive: !depends ctype.isgraph.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is any printable character
 * other than space. 
 */
ilib.CType.isGraph = function (ch) {
	return typeof(ch) !== 'undefined' && ch.length > 0 && !ilib.CType.isSpace(ch) && !ilib.CType.isCntrl(ch);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isGraph._init = function (sync, loadParams, onLoad) {
	ilib.CType.isSpace._init(sync, loadParams, function () {
		ilib.CType.isCntrl._init(sync, loadParams, onLoad);
	});
};

/*
 * ctype.js - Character type definitions
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype

/**
 * Return whether or not the first character is an ideographic character.<p>
 * 
 * Depends directive: !depends ctype.isideo.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is an ideographic character.
 */
ilib.CType.isIdeo = function (ch) {
	return ilib.CType._inRange(ch, 'cjk', ilib.data.ctype) ||
		ilib.CType._inRange(ch, 'cjkradicals', ilib.data.ctype) ||
		ilib.CType._inRange(ch, 'enclosedcjk', ilib.data.ctype) ||
		ilib.CType._inRange(ch, 'cjkpunct', ilib.data.ctype) ||
		ilib.CType._inRange(ch, 'cjkcompatibility', ilib.data.ctype);
	
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isIdeo._init = function (sync, loadParams, onLoad) {
	ilib.CType._init(sync, loadParams, onLoad);
};

/*
 * ctype.islower.js - Character type is lower case letter
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype_l

/**
 * Return whether or not the first character is lower-case. For alphabetic
 * characters in scripts that do not make a distinction between upper- and 
 * lower-case, this function always returns true.<p>
 * 
 * Depends directive: !depends ctype.islower.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is lower-case.
 */
ilib.CType.isLower = function (ch) {
	return ilib.CType._inRange(ch, 'Ll', ilib.data.ctype_l);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isLower._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_l", sync, loadParams, onLoad);
};

/*
 * ctype.isprint.js - Character type is printable char
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js ctype.iscntrl.js

/**
 * Return whether or not the first character is any printable character,
 * including space.<p>
 * 
 * Depends directive: !depends ctype.isprint.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is printable.
 */
ilib.CType.isPrint = function (ch) {
	return typeof(ch) !== 'undefined' && ch.length > 0 && !ilib.CType.isCntrl(ch);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isPrint._init = function (sync, loadParams, onLoad) {
	ilib.CType.isCntrl._init(sync, loadParams, onLoad);
};

ilib.data.ctype_p = {"Pd":[[45],[1418],[1470],[5120],[6150],[8208,8213],[11799],[11802],[11834,11835],[12316],[12336],[12448],[65073,65074],[65112],[65123],[65293]],"Ps":[[40],[91],[123],[3898],[3900],[5787],[8218],[8222],[8261],[8317],[8333],[9001],[10088],[10090],[10092],[10094],[10096],[10098],[10100],[10181],[10214],[10216],[10218],[10220],[10222],[10627],[10629],[10631],[10633],[10635],[10637],[10639],[10641],[10643],[10645],[10647],[10712],[10714],[10748],[11810],[11812],[11814],[11816],[12296],[12298],[12300],[12302],[12304],[12308],[12310],[12312],[12314],[12317],[64830],[65047],[65077],[65079],[65081],[65083],[65085],[65087],[65089],[65091],[65095],[65113],[65115],[65117],[65288],[65339],[65371],[65375],[65378]],"Pe":[[41],[93],[125],[3899],[3901],[5788],[8262],[8318],[8334],[9002],[10089],[10091],[10093],[10095],[10097],[10099],[10101],[10182],[10215],[10217],[10219],[10221],[10223],[10628],[10630],[10632],[10634],[10636],[10638],[10640],[10642],[10644],[10646],[10648],[10713],[10715],[10749],[11811],[11813],[11815],[11817],[12297],[12299],[12301],[12303],[12305],[12309],[12311],[12313],[12315],[12318,12319],[64831],[65048],[65078],[65080],[65082],[65084],[65086],[65088],[65090],[65092],[65096],[65114],[65116],[65118],[65289],[65341],[65373],[65376],[65379]],"Pc":[[95],[8255,8256],[8276],[65075,65076],[65101,65103],[65343]],"Po":[[33,35],[37,39],[42],[44],[46,47],[58,59],[63,64],[92],[161],[167],[182,183],[191],[894],[903],[1370,1375],[1417],[1472],[1475],[1478],[1523,1524],[1545,1546],[1548,1549],[1563],[1566,1567],[1642,1645],[1748],[1792,1805],[2039,2041],[2096,2110],[2142],[2404,2405],[2416],[2800],[3572],[3663],[3674,3675],[3844,3858],[3860],[3973],[4048,4052],[4057,4058],[4170,4175],[4347],[4960,4968],[5741,5742],[5867,5869],[5941,5942],[6100,6102],[6104,6106],[6144,6149],[6151,6154],[6468,6469],[6686,6687],[6816,6822],[6824,6829],[7002,7008],[7164,7167],[7227,7231],[7294,7295],[7360,7367],[7379],[8214,8215],[8224,8231],[8240,8248],[8251,8254],[8257,8259],[8263,8273],[8275],[8277,8286],[11513,11516],[11518,11519],[11632],[11776,11777],[11782,11784],[11787],[11790,11798],[11800,11801],[11803],[11806,11807],[11818,11822],[11824,11833],[12289,12291],[12349],[12539],[42238,42239],[42509,42511],[42611],[42622],[42738,42743],[43124,43127],[43214,43215],[43256,43258],[43310,43311],[43359],[43457,43469],[43486,43487],[43612,43615],[43742,43743],[43760,43761],[44011],[65040,65046],[65049],[65072],[65093,65094],[65097,65100],[65104,65106],[65108,65111],[65119,65121],[65128],[65130,65131],[65281,65283],[65285,65287],[65290],[65292],[65294,65295],[65306,65307],[65311,65312],[65340],[65377],[65380,65381],[65792,65794],[66463],[66512],[67671],[67871],[67903],[68176,68184],[68223],[68409,68415],[69703,69709],[69819,69820],[69822,69825],[69952,69955],[70085,70088],[74864,74867]],"Pi":[[171],[8216],[8219,8220],[8223],[8249],[11778],[11780],[11785],[11788],[11804],[11808]],"Pf":[[187],[8217],[8221],[8250],[11779],[11781],[11786],[11789],[11805],[11809]]};
/*
 * ctype.ispunct.js - Character type is punctuation
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype_p

/**
 * Return whether or not the first character is punctuation.<p>
 * 
 * Depends directive: !depends ctype.isprint.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is punctuation.
 */
ilib.CType.isPunct = function (ch) {
	return ilib.CType._inRange(ch, 'Pd', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Ps', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Pe', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Pc', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Po', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Pi', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Pf', ilib.data.ctype_p);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isPunct._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_p", sync, loadParams, onLoad);
};

/*
 * ctype.isupper.js - Character type is upper-case letter
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype_l

/**
 * Return whether or not the first character is upper-case. For alphabetic
 * characters in scripts that do not make a distinction between upper- and 
 * lower-case, this function always returns true.<p>
 * 
 * Depends directive: !depends ctype.isupper.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is upper-case.
 */
ilib.CType.isUpper = function (ch) {
	return ilib.CType._inRange(ch, 'Lu', ilib.data.ctype_l);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isUpper._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_l", sync, loadParams, onLoad);
};

/*
 * ctype.isdigit.js - Character type is digit
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype

/**
 * Return whether or not the first character is a hexadecimal digit written
 * in the Latin script. (0-9 or A-F)<p>
 * 
 * Depends directive: !depends ctype.isxdigit.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is a hexadecimal digit written
 * in the Latin script.
 */
ilib.CType.isXdigit = function (ch) {
	return ilib.CType._inRange(ch, 'xdigit', ilib.data.ctype);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isXdigit._init = function (sync, loadParams, onLoad) {
	ilib.CType._init(sync, loadParams, onLoad);
};

ilib.data.scriptToRange = {"Zyyy":[[0,64],[91,96],[123,169],[171,185],[187,191],[215],[247],[697,735],[741,745],[748,767],[884],[894],[901],[903],[1417],[1548],[1563],[1567],[1600],[1632,1641],[1757],[2404,2405],[3647],[4053,4056],[4347],[5867,5869],[5941,5942],[6146,6147],[6149],[7379],[7393],[7401,7404],[7406,7411],[7413,7414],[8192,8203],[8206,8292],[8298,8304],[8308,8318],[8320,8334],[8352,8378],[8448,8485],[8487,8489],[8492,8497],[8499,8525],[8527,8543],[8585],[8592,9203],[9216,9254],[9280,9290],[9312,9983],[9985,10239],[10496,11084],[11088,11097],[11776,11835],[12272,12283],[12288,12292],[12294],[12296,12320],[12336,12343],[12348,12351],[12443,12444],[12448],[12539,12540],[12688,12703],[12736,12771],[12832,12895],[12927,13007],[13144,13311],[19904,19967],[42752,42785],[42888,42890],[43056,43065],[64830,64831],[65021],[65040,65049],[65072,65106],[65108,65126],[65128,65131],[65279],[65281,65312],[65339,65344],[65371,65381],[65392],[65438,65439],[65504,65510],[65512,65518],[65529,65533],[65792,65794],[65799,65843],[65847,65855],[65936,65947],[66000,66044],[118784,119029],[119040,119078],[119081,119142],[119146,119162],[119171,119172],[119180,119209],[119214,119261],[119552,119638],[119648,119665],[119808,119892],[119894,119964],[119966,119967],[119970],[119973,119974],[119977,119980],[119982,119993],[119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134],[120138,120144],[120146,120485],[120488,120779],[120782,120831],[126976,127019],[127024,127123],[127136,127150],[127153,127166],[127169,127183],[127185,127199],[127232,127242],[127248,127278],[127280,127339],[127344,127386],[127462,127487],[127489,127490],[127504,127546],[127552,127560],[127568,127569],[127744,127776],[127792,127797],[127799,127868],[127872,127891],[127904,127940],[127942,127946],[127968,127984],[128000,128062],[128064],[128066,128247],[128249,128252],[128256,128317],[128320,128323],[128336,128359],[128507,128576],[128581,128591],[128640,128709],[128768,128883],[917505],[917536,917631]],"Latn":[[65,90],[97,122],[170],[186],[192,214],[216,246],[248,696],[736,740],[7424,7461],[7468,7516],[7522,7525],[7531,7543],[7545,7614],[7680,7935],[8305],[8319],[8336,8348],[8490,8491],[8498],[8526],[8544,8584],[11360,11391],[42786,42887],[42891,42894],[42896,42899],[42912,42922],[43000,43007],[64256,64262],[65313,65338],[65345,65370]],"Grek":[[880,883],[885,887],[890,893],[900],[902],[904,906],[908],[910,929],[931,993],[1008,1023],[7462,7466],[7517,7521],[7526,7530],[7615],[7936,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025],[8027],[8029],[8031,8061],[8064,8116],[8118,8132],[8134,8147],[8150,8155],[8157,8175],[8178,8180],[8182,8190],[8486],[65856,65930],[119296,119365]],"Cyrl":[[1024,1156],[1159,1319],[7467],[7544],[11744,11775],[42560,42647],[42655]],"Armn":[[1329,1366],[1369,1375],[1377,1415],[1418],[1423],[64275,64279]],"Hebr":[[1425,1479],[1488,1514],[1520,1524],[64285,64310],[64312,64316],[64318],[64320,64321],[64323,64324],[64326,64335]],"Arab":[[1536,1540],[1542,1547],[1549,1562],[1566],[1568,1599],[1601,1610],[1622,1631],[1642,1647],[1649,1756],[1758,1791],[1872,1919],[2208],[2210,2220],[2276,2302],[64336,64449],[64467,64829],[64848,64911],[64914,64967],[65008,65020],[65136,65140],[65142,65276],[69216,69246],[126464,126467],[126469,126495],[126497,126498],[126500],[126503],[126505,126514],[126516,126519],[126521],[126523],[126530],[126535],[126537],[126539],[126541,126543],[126545,126546],[126548],[126551],[126553],[126555],[126557],[126559],[126561,126562],[126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[126704,126705]],"Syrc":[[1792,1805],[1807,1866],[1869,1871]],"Thaa":[[1920,1969]],"Deva":[[2304,2384],[2387,2403],[2406,2423],[2425,2431],[43232,43259]],"Beng":[[2433,2435],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482],[2486,2489],[2492,2500],[2503,2504],[2507,2510],[2519],[2524,2525],[2527,2531],[2534,2555]],"Guru":[[2561,2563],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2620],[2622,2626],[2631,2632],[2635,2637],[2641],[2649,2652],[2654],[2662,2677]],"Gujr":[[2689,2691],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2748,2757],[2759,2761],[2763,2765],[2768],[2784,2787],[2790,2801]],"Orya":[[2817,2819],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2876,2884],[2887,2888],[2891,2893],[2902,2903],[2908,2909],[2911,2915],[2918,2935]],"Taml":[[2946,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3006,3010],[3014,3016],[3018,3021],[3024],[3031],[3046,3066]],"Telu":[[3073,3075],[3077,3084],[3086,3088],[3090,3112],[3114,3123],[3125,3129],[3133,3140],[3142,3144],[3146,3149],[3157,3158],[3160,3161],[3168,3171],[3174,3183],[3192,3199]],"Knda":[[3202,3203],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3260,3268],[3270,3272],[3274,3277],[3285,3286],[3294],[3296,3299],[3302,3311],[3313,3314]],"Mlym":[[3330,3331],[3333,3340],[3342,3344],[3346,3386],[3389,3396],[3398,3400],[3402,3406],[3415],[3424,3427],[3430,3445],[3449,3455]],"Sinh":[[3458,3459],[3461,3478],[3482,3505],[3507,3515],[3517],[3520,3526],[3530],[3535,3540],[3542],[3544,3551],[3570,3572]],"Thai":[[3585,3642],[3648,3675]],"Laoo":[[3713,3714],[3716],[3719,3720],[3722],[3725],[3732,3735],[3737,3743],[3745,3747],[3749],[3751],[3754,3755],[3757,3769],[3771,3773],[3776,3780],[3782],[3784,3789],[3792,3801],[3804,3807]],"Tibt":[[3840,3911],[3913,3948],[3953,3991],[3993,4028],[4030,4044],[4046,4052],[4057,4058]],"Mymr":[[4096,4255],[43616,43643]],"Geok":[[4256,4293],[4295],[4301],[4304,4346],[4348,4351],[11520,11557],[11559],[11565]],"Hang":[[4352,4607],[12334,12335],[12593,12686],[12800,12830],[12896,12926],[43360,43388],[44032,55203],[55216,55238],[55243,55291],[65440,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500]],"Ethi":[[4608,4680],[4682,4685],[4688,4694],[4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4957,4988],[4992,5017],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822]],"Cher":[[5024,5108]],"Cans":[[5120,5759],[6320,6389]],"Ogam":[[5760,5788]],"Runr":[[5792,5866],[5870,5872]],"Khmr":[[6016,6109],[6112,6121],[6128,6137],[6624,6655]],"Mong":[[6144,6145],[6148],[6150,6158],[6160,6169],[6176,6263],[6272,6314]],"Hira":[[12353,12438],[12445,12447],[110593],[127488]],"Kana":[[12449,12538],[12541,12543],[12784,12799],[13008,13054],[13056,13143],[65382,65391],[65393,65437],[110592]],"Bopo":[[746,747],[12549,12589],[12704,12730]],"Hani":[[11904,11929],[11931,12019],[12032,12245],[12293],[12295],[12321,12329],[12344,12347],[13312,19893],[19968,40908],[63744,64109],[64112,64217],[131072,173782],[173824,177972],[177984,178205],[194560,195101]],"Yiii":[[40960,42124],[42128,42182]],"Ital":[[66304,66334],[66336,66339]],"Goth":[[66352,66378]],"Dsrt":[[66560,66639]],"Zinh":[[768,879],[1157,1158],[1611,1621],[1648],[2385,2386],[7376,7378],[7380,7392],[7394,7400],[7405],[7412],[7616,7654],[7676,7679],[8204,8205],[8400,8432],[12330,12333],[12441,12442],[65024,65039],[65056,65062],[66045],[119143,119145],[119163,119170],[119173,119179],[119210,119213],[917760,917999]],"Tglg":[[5888,5900],[5902,5908]],"Hano":[[5920,5940]],"Buhd":[[5952,5971]],"Tagb":[[5984,5996],[5998,6000],[6002,6003]],"Limb":[[6400,6428],[6432,6443],[6448,6459],[6464],[6468,6479]],"Tale":[[6480,6509],[6512,6516]],"Linb":[[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786]],"Ugar":[[66432,66461],[66463]],"Shaw":[[66640,66687]],"Osma":[[66688,66717],[66720,66729]],"Cprt":[[67584,67589],[67592],[67594,67637],[67639,67640],[67644],[67647]],"Brai":[[10240,10495]],"Bugi":[[6656,6683],[6686,6687]],"Copt":[[994,1007],[11392,11507],[11513,11519]],"Talu":[[6528,6571],[6576,6601],[6608,6618],[6622,6623]],"Glag":[[11264,11310],[11312,11358]],"Tfng":[[11568,11623],[11631,11632],[11647]],"Sylo":[[43008,43051]],"Xpeo":[[66464,66499],[66504,66517]],"Khar":[[68096,68099],[68101,68102],[68108,68115],[68117,68119],[68121,68147],[68152,68154],[68159,68167],[68176,68184]],"Bali":[[6912,6987],[6992,7036]],"Xsux":[[73728,74606],[74752,74850],[74864,74867]],"Phnx":[[67840,67867],[67871]],"Phag":[[43072,43127]],"Nkoo":[[1984,2042]],"Sund":[[7040,7103],[7360,7367]],"Lepc":[[7168,7223],[7227,7241],[7245,7247]],"Olck":[[7248,7295]],"Vaii":[[42240,42539]],"Saur":[[43136,43204],[43214,43225]],"Kali":[[43264,43311]],"Rjng":[[43312,43347],[43359]],"Lyci":[[66176,66204]],"Cari":[[66208,66256]],"Lydi":[[67872,67897],[67903]],"Cham":[[43520,43574],[43584,43597],[43600,43609],[43612,43615]],"Lana":[[6688,6750],[6752,6780],[6783,6793],[6800,6809],[6816,6829]],"Tavt":[[43648,43714],[43739,43743]],"Avst":[[68352,68405],[68409,68415]],"Egyp":[[77824,78894]],"Samr":[[2048,2093],[2096,2110]],"Lisu":[[42192,42239]],"Bamu":[[42656,42743],[92160,92728]],"Java":[[43392,43469],[43471,43481],[43486,43487]],"Mtei":[[43744,43766],[43968,44013],[44016,44025]],"Armi":[[67648,67669],[67671,67679]],"Sarb":[[68192,68223]],"Prti":[[68416,68437],[68440,68447]],"Phli":[[68448,68466],[68472,68479]],"Orkh":[[68608,68680]],"Kthi":[[69760,69825]],"Batk":[[7104,7155],[7164,7167]],"Brah":[[69632,69709],[69714,69743]],"Mand":[[2112,2139],[2142]],"Cakm":[[69888,69940],[69942,69955]],"Merc":[[68000,68023],[68030,68031]],"Mero":[[67968,67999]],"Plrd":[[93952,94020],[94032,94078],[94095,94111]],"Shrd":[[70016,70088],[70096,70105]],"Sora":[[69840,69864],[69872,69881]],"Takr":[[71296,71351],[71360,71369]]};
/*
 * ctype.isscript.js - Character type is script
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data scriptToRange

/**
 * Return whether or not the first character in the given string is 
 * in the given script. The script is given as the 4-letter ISO
 * 15924 script code.<p>
 * 
 * Depends directive: !depends ctype.isscript.js
 * 
 * @param {string} ch character to examine
 * @param {string} script the 4-letter ISO 15924 to query against
 * @return {boolean} true if the first character is in the given script, and
 * false otherwise
 */
ilib.CType.isScript = function (ch, script) {
	return ilib.CType._inRange(ch, script, ilib.data.scriptToRange);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isScript._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("scriptToRange", sync, loadParams, onLoad);
};


ilib.data.scripts = {"Afak":{"nb":439,"nm":"Afaka","lid":"Afaka"},"Aghb":{"nb":239,"nm":"Caucasian Albanian","lid":"Caucasian_Albanian"},"Arab":{"nb":160,"nm":"Arabic","lid":"Arabic","rtl":true,"ime":false,"casing":false},"Armi":{"nb":124,"nm":"Imperial Aramaic","lid":"Imperial_Aramaic","rtl":true,"ime":false,"casing":false},"Armn":{"nb":230,"nm":"Armenian","lid":"Armenian","rtl":false,"ime":false,"casing":true},"Avst":{"nb":134,"nm":"Avestan","lid":"Avestan","rtl":true,"ime":false,"casing":false},"Bali":{"nb":360,"nm":"Balinese","lid":"Balinese","rtl":false,"ime":false,"casing":false},"Bamu":{"nb":435,"nm":"Bamum","lid":"Bamum","rtl":false,"ime":true,"casing":false},"Bass":{"nb":259,"nm":"Bassa Vah","lid":"Bassa_Vah"},"Batk":{"nb":365,"nm":"Batak","lid":"Batak","rtl":false,"ime":false,"casing":false},"Beng":{"nb":325,"nm":"Bengali","lid":"Bengali","rtl":false,"ime":false,"casing":false},"Blis":{"nb":550,"nm":"Blissymbols","lid":"Blissymbols"},"Bopo":{"nb":285,"nm":"Bopomofo","lid":"Bopomofo","rtl":false,"ime":false,"casing":false},"Brah":{"nb":300,"nm":"Brahmi","lid":"Brahmi","rtl":false,"ime":false,"casing":false},"Brai":{"nb":570,"nm":"Braille","lid":"Braille","rtl":false,"ime":false,"casing":false},"Bugi":{"nb":367,"nm":"Buginese","lid":"Buginese","rtl":false,"ime":false,"casing":false},"Buhd":{"nb":372,"nm":"Buhid","lid":"Buhid","rtl":false,"ime":false,"casing":false},"Cakm":{"nb":349,"nm":"Chakma","lid":"Chakma","rtl":false,"ime":false,"casing":false},"Cans":{"nb":440,"nm":"Unified Canadian Aboriginal Syllabics","lid":"Canadian_Aboriginal","rtl":false,"ime":true,"casing":false},"Cari":{"nb":201,"nm":"Carian","lid":"Carian","rtl":false,"ime":false,"casing":false},"Cham":{"nb":358,"nm":"Cham","lid":"Cham","rtl":false,"ime":false,"casing":false},"Cher":{"nb":445,"nm":"Cherokee","lid":"Cherokee","rtl":false,"ime":false,"casing":false},"Cirt":{"nb":291,"nm":"Cirth","lid":"Cirth"},"Copt":{"nb":204,"nm":"Coptic","lid":"Coptic","rtl":false,"ime":false,"casing":true},"Cprt":{"nb":403,"nm":"Cypriot","lid":"Cypriot","rtl":true,"ime":false,"casing":false},"Cyrl":{"nb":220,"nm":"Cyrillic","lid":"Cyrillic","rtl":false,"ime":false,"casing":true},"Cyrs":{"nb":221,"nm":"Cyrillic (Old Church Slavonic variant)","lid":"Cyrillic_(Old_Church_Slavonic_variant)"},"Deva":{"nb":315,"nm":"Devanagari (Nagari)","lid":"Devanagari","rtl":false,"ime":false,"casing":false},"Dsrt":{"nb":250,"nm":"Deseret (Mormon)","lid":"Deseret","rtl":false,"ime":false,"casing":true},"Dupl":{"nb":755,"nm":"Duployan shorthand, Duployan stenography","lid":"Duployan_shorthand,_Duployan_stenography"},"Egyd":{"nb":70,"nm":"Egyptian demotic","lid":"Egyptian_demotic"},"Egyh":{"nb":60,"nm":"Egyptian hieratic","lid":"Egyptian_hieratic"},"Egyp":{"nb":50,"nm":"Egyptian hieroglyphs","lid":"Egyptian_Hieroglyphs","rtl":false,"ime":true,"casing":false},"Elba":{"nb":226,"nm":"Elbasan","lid":"Elbasan"},"Ethi":{"nb":430,"nm":"Ethiopic (GeÊ»ez)","lid":"Ethiopic","rtl":false,"ime":true,"casing":false},"Geor":{"nb":240,"nm":"Georgian (Mkhedruli)","lid":"Georgian","rtl":false,"ime":false,"casing":false},"Geok":{"nb":241,"nm":"Khutsuri (Asomtavruli and Nuskhuri)","lid":"Georgian"},"Glag":{"nb":225,"nm":"Glagolitic","lid":"Glagolitic","rtl":false,"ime":false,"casing":true},"Goth":{"nb":206,"nm":"Gothic","lid":"Gothic","rtl":false,"ime":false,"casing":false},"Gran":{"nb":343,"nm":"Grantha","lid":"Grantha"},"Grek":{"nb":200,"nm":"Greek","lid":"Greek","rtl":false,"ime":false,"casing":true},"Gujr":{"nb":320,"nm":"Gujarati","lid":"Gujarati","rtl":false,"ime":false,"casing":false},"Guru":{"nb":310,"nm":"Gurmukhi","lid":"Gurmukhi","rtl":false,"ime":false,"casing":false},"Hang":{"nb":286,"nm":"Hangul (HangÅ­l, Hangeul)","lid":"Hangul","rtl":false,"ime":true,"casing":false},"Hani":{"nb":500,"nm":"Han (Hanzi, Kanji, Hanja)","lid":"Han","rtl":false,"ime":true,"casing":false},"Hano":{"nb":371,"nm":"Hanunoo (HanunÃ³o)","lid":"Hanunoo","rtl":false,"ime":false,"casing":false},"Hans":{"nb":501,"nm":"Han (Simplified variant)","lid":"Han_(Simplified_variant)","rtl":false,"ime":true,"casing":false},"Hant":{"nb":502,"nm":"Han (Traditional variant)","lid":"Han_(Traditional_variant)","rtl":false,"ime":true,"casing":false},"Hebr":{"nb":125,"nm":"Hebrew","lid":"Hebrew","rtl":true,"ime":false,"casing":false},"Hira":{"nb":410,"nm":"Hiragana","lid":"Hiragana","rtl":false,"ime":false,"casing":false},"Hluw":{"nb":80,"nm":"Anatolian Hieroglyphs (Luwian Hieroglyphs, Hittite Hieroglyphs)","lid":"Anatolian_Hieroglyphs_(Luwian_Hieroglyphs,_Hittite_Hieroglyphs)"},"Hmng":{"nb":450,"nm":"Pahawh Hmong","lid":"Pahawh_Hmong"},"Hrkt":{"nb":412,"nm":"Japanese syllabaries (alias for Hiragana + Katakana)","lid":"Katakana_Or_Hiragana"},"Hung":{"nb":176,"nm":"Old Hungarian (Hungarian Runic)","lid":"Old_Hungarian_(Hungarian_Runic)"},"Inds":{"nb":610,"nm":"Indus (Harappan)","lid":"Indus_(Harappan)"},"Ital":{"nb":210,"nm":"Old Italic (Etruscan, Oscan, etc.)","lid":"Old_Italic","rtl":false,"ime":false,"casing":false},"Java":{"nb":361,"nm":"Javanese","lid":"Javanese","rtl":false,"ime":false,"casing":false},"Jpan":{"nb":413,"nm":"Japanese (alias for Han + Hiragana + Katakana)","lid":"Japanese_(alias_for_Han_+_Hiragana_+_Katakana)","rtl":false,"ime":false,"casing":false},"Jurc":{"nb":510,"nm":"Jurchen","lid":"Jurchen"},"Kali":{"nb":357,"nm":"Kayah Li","lid":"Kayah_Li","rtl":false,"ime":false,"casing":false},"Kana":{"nb":411,"nm":"Katakana","lid":"Katakana","rtl":false,"ime":false,"casing":false},"Khar":{"nb":305,"nm":"Kharoshthi","lid":"Kharoshthi","rtl":true,"ime":false,"casing":false},"Khmr":{"nb":355,"nm":"Khmer","lid":"Khmer","rtl":false,"ime":false,"casing":false},"Khoj":{"nb":322,"nm":"Khojki","lid":"Khojki"},"Knda":{"nb":345,"nm":"Kannada","lid":"Kannada","rtl":false,"ime":false,"casing":false},"Kore":{"nb":287,"nm":"Korean (alias for Hangul + Han)","lid":"Korean_(alias_for_Hangul_+_Han)","rtl":false,"ime":true,"casing":false},"Kpel":{"nb":436,"nm":"Kpelle","lid":"Kpelle"},"Kthi":{"nb":317,"nm":"Kaithi","lid":"Kaithi","rtl":false,"ime":false,"casing":false},"Lana":{"nb":351,"nm":"Tai Tham (Lanna)","lid":"Tai_Tham","rtl":false,"ime":false,"casing":false},"Laoo":{"nb":356,"nm":"Lao","lid":"Lao","rtl":false,"ime":false,"casing":false},"Latf":{"nb":217,"nm":"Latin (Fraktur variant)","lid":"Latin_(Fraktur_variant)"},"Latg":{"nb":216,"nm":"Latin (Gaelic variant)","lid":"Latin_(Gaelic_variant)"},"Latn":{"nb":215,"nm":"Latin","lid":"Latin","rtl":false,"ime":false,"casing":true},"Lepc":{"nb":335,"nm":"Lepcha (RÃ³ng)","lid":"Lepcha","rtl":false,"ime":false,"casing":false},"Limb":{"nb":336,"nm":"Limbu","lid":"Limbu","rtl":false,"ime":false,"casing":false},"Lina":{"nb":400,"nm":"Linear A","lid":"Linear_A"},"Linb":{"nb":401,"nm":"Linear B","lid":"Linear_B","rtl":false,"ime":true,"casing":false},"Lisu":{"nb":399,"nm":"Lisu (Fraser)","lid":"Lisu","rtl":false,"ime":true,"casing":false},"Loma":{"nb":437,"nm":"Loma","lid":"Loma"},"Lyci":{"nb":202,"nm":"Lycian","lid":"Lycian","rtl":false,"ime":false,"casing":false},"Lydi":{"nb":116,"nm":"Lydian","lid":"Lydian","rtl":true,"ime":false,"casing":false},"Mahj":{"nb":314,"nm":"Mahajani","lid":"Mahajani"},"Mand":{"nb":140,"nm":"Mandaic, Mandaean","lid":"Mandaic","rtl":true,"ime":false,"casing":false},"Mani":{"nb":139,"nm":"Manichaean","lid":"Manichaean"},"Maya":{"nb":90,"nm":"Mayan hieroglyphs","lid":"Mayan_hieroglyphs"},"Mend":{"nb":438,"nm":"Mende","lid":"Mende"},"Merc":{"nb":101,"nm":"Meroitic Cursive","lid":"Meroitic_Cursive","rtl":true,"ime":false,"casing":false},"Mero":{"nb":100,"nm":"Meroitic Hieroglyphs","lid":"Meroitic_Hieroglyphs","rtl":true,"ime":false,"casing":false},"Mlym":{"nb":347,"nm":"Malayalam","lid":"Malayalam","rtl":false,"ime":false,"casing":false},"Moon":{"nb":218,"nm":"Moon (Moon code, Moon script, Moon type)","lid":"Moon_(Moon_code,_Moon_script,_Moon_type)"},"Mong":{"nb":145,"nm":"Mongolian","lid":"Mongolian","rtl":false,"ime":false,"casing":false},"Mroo":{"nb":199,"nm":"Mro, Mru","lid":"Mro,_Mru"},"Mtei":{"nb":337,"nm":"Meitei Mayek (Meithei, Meetei)","lid":"Meetei_Mayek","rtl":false,"ime":false,"casing":false},"Mymr":{"nb":350,"nm":"Myanmar (Burmese)","lid":"Myanmar","rtl":false,"ime":false,"casing":false},"Narb":{"nb":106,"nm":"Old North Arabian (Ancient North Arabian)","lid":"Old_North_Arabian_(Ancient_North_Arabian)"},"Nbat":{"nb":159,"nm":"Nabataean","lid":"Nabataean"},"Nkgb":{"nb":420,"nm":"Nakhi Geba ('Na-'Khi Â²GgÅ-Â¹baw, Naxi Geba)","lid":"Nakhi_Geba_('Na-'Khi_Â²GgÅ-Â¹baw,_Naxi_Geba)"},"Nkoo":{"nb":165,"nm":"NâKo","lid":"Nko","rtl":true,"ime":false,"casing":false},"Nshu":{"nb":499,"nm":"NÃ¼shu","lid":"NÃ¼shu"},"Ogam":{"nb":212,"nm":"Ogham","lid":"Ogham","rtl":false,"ime":false,"casing":false},"Olck":{"nb":261,"nm":"Ol Chiki (Ol Cemetâ, Ol, Santali)","lid":"Ol_Chiki","rtl":false,"ime":false,"casing":false},"Orkh":{"nb":175,"nm":"Old Turkic, Orkhon Runic","lid":"Old_Turkic","rtl":true,"ime":false,"casing":false},"Orya":{"nb":327,"nm":"Oriya","lid":"Oriya","rtl":false,"ime":false,"casing":false},"Osma":{"nb":260,"nm":"Osmanya","lid":"Osmanya","rtl":false,"ime":false,"casing":false},"Palm":{"nb":126,"nm":"Palmyrene","lid":"Palmyrene"},"Perm":{"nb":227,"nm":"Old Permic","lid":"Old_Permic"},"Phag":{"nb":331,"nm":"Phags-pa","lid":"Phags_Pa","rtl":false,"ime":false,"casing":false},"Phli":{"nb":131,"nm":"Inscriptional Pahlavi","lid":"Inscriptional_Pahlavi","rtl":true,"ime":false,"casing":false},"Phlp":{"nb":132,"nm":"Psalter Pahlavi","lid":"Psalter_Pahlavi"},"Phlv":{"nb":133,"nm":"Book Pahlavi","lid":"Book_Pahlavi"},"Phnx":{"nb":115,"nm":"Phoenician","lid":"Phoenician","rtl":true,"ime":false,"casing":false},"Plrd":{"nb":282,"nm":"Miao (Pollard)","lid":"Miao","rtl":false,"ime":false,"casing":false},"Prti":{"nb":130,"nm":"Inscriptional Parthian","lid":"Inscriptional_Parthian","rtl":true,"ime":false,"casing":false},"Qaaa":{"nb":900,"nm":"Reserved for private use (start)","lid":"Reserved_for_private_use_(start)"},"Qabx":{"nb":949,"nm":"Reserved for private use (end)","lid":"Reserved_for_private_use_(end)"},"Rjng":{"nb":363,"nm":"Rejang (Redjang, Kaganga)","lid":"Rejang","rtl":false,"ime":false,"casing":false},"Roro":{"nb":620,"nm":"Rongorongo","lid":"Rongorongo"},"Runr":{"nb":211,"nm":"Runic","lid":"Runic","rtl":false,"ime":false,"casing":false},"Samr":{"nb":123,"nm":"Samaritan","lid":"Samaritan","rtl":true,"ime":false,"casing":false},"Sara":{"nb":292,"nm":"Sarati","lid":"Sarati"},"Sarb":{"nb":105,"nm":"Old South Arabian","lid":"Old_South_Arabian","rtl":true,"ime":false,"casing":false},"Saur":{"nb":344,"nm":"Saurashtra","lid":"Saurashtra","rtl":false,"ime":false,"casing":false},"Sgnw":{"nb":95,"nm":"SignWriting","lid":"SignWriting"},"Shaw":{"nb":281,"nm":"Shavian (Shaw)","lid":"Shavian","rtl":false,"ime":false,"casing":false},"Shrd":{"nb":319,"nm":"Sharada, ÅÄradÄ","lid":"Sharada","rtl":false,"ime":false,"casing":false},"Sind":{"nb":318,"nm":"Khudawadi, Sindhi","lid":"Khudawadi,_Sindhi"},"Sinh":{"nb":348,"nm":"Sinhala","lid":"Sinhala","rtl":false,"ime":false,"casing":false},"Sora":{"nb":398,"nm":"Sora Sompeng","lid":"Sora_Sompeng","rtl":false,"ime":false,"casing":false},"Sund":{"nb":362,"nm":"Sundanese","lid":"Sundanese","rtl":false,"ime":false,"casing":false},"Sylo":{"nb":316,"nm":"Syloti Nagri","lid":"Syloti_Nagri","rtl":false,"ime":false,"casing":false},"Syrc":{"nb":135,"nm":"Syriac","lid":"Syriac","rtl":true,"ime":false,"casing":false},"Syre":{"nb":138,"nm":"Syriac (Estrangelo variant)","lid":"Syriac_(Estrangelo_variant)"},"Syrj":{"nb":137,"nm":"Syriac (Western variant)","lid":"Syriac_(Western_variant)"},"Syrn":{"nb":136,"nm":"Syriac (Eastern variant)","lid":"Syriac_(Eastern_variant)"},"Tagb":{"nb":373,"nm":"Tagbanwa","lid":"Tagbanwa","rtl":false,"ime":false,"casing":false},"Takr":{"nb":321,"nm":"Takri, á¹¬ÄkrÄ«, á¹¬Äá¹krÄ«","lid":"Takri","rtl":false,"ime":false,"casing":false},"Tale":{"nb":353,"nm":"Tai Le","lid":"Tai_Le","rtl":false,"ime":false,"casing":false},"Talu":{"nb":354,"nm":"New Tai Lue","lid":"New_Tai_Lue","rtl":false,"ime":false,"casing":false},"Taml":{"nb":346,"nm":"Tamil","lid":"Tamil","rtl":false,"ime":false,"casing":false},"Tang":{"nb":520,"nm":"Tangut","lid":"Tangut"},"Tavt":{"nb":359,"nm":"Tai Viet","lid":"Tai_Viet","rtl":false,"ime":false,"casing":false},"Telu":{"nb":340,"nm":"Telugu","lid":"Telugu","rtl":false,"ime":false,"casing":false},"Teng":{"nb":290,"nm":"Tengwar","lid":"Tengwar"},"Tfng":{"nb":120,"nm":"Tifinagh (Berber)","lid":"Tifinagh","rtl":false,"ime":false,"casing":false},"Tglg":{"nb":370,"nm":"Tagalog (Baybayin, Alibata)","lid":"Tagalog","rtl":false,"ime":false,"casing":false},"Thaa":{"nb":170,"nm":"Thaana","lid":"Thaana","rtl":true,"ime":false,"casing":false},"Thai":{"nb":352,"nm":"Thai","lid":"Thai","rtl":false,"ime":false,"casing":false},"Tibt":{"nb":330,"nm":"Tibetan","lid":"Tibetan","rtl":false,"ime":false,"casing":false},"Tirh":{"nb":326,"nm":"Tirhuta","lid":"Tirhuta"},"Ugar":{"nb":40,"nm":"Ugaritic","lid":"Ugaritic","rtl":false,"ime":false,"casing":false},"Vaii":{"nb":470,"nm":"Vai","lid":"Vai","rtl":false,"ime":true,"casing":false},"Visp":{"nb":280,"nm":"Visible Speech","lid":"Visible_Speech"},"Wara":{"nb":262,"nm":"Warang Citi (Varang Kshiti)","lid":"Warang_Citi_(Varang_Kshiti)"},"Wole":{"nb":480,"nm":"Woleai","lid":"Woleai"},"Xpeo":{"nb":30,"nm":"Old Persian","lid":"Old_Persian","rtl":false,"ime":false,"casing":false},"Xsux":{"nb":20,"nm":"Cuneiform, Sumero-Akkadian","lid":"Cuneiform","rtl":false,"ime":true,"casing":false},"Yiii":{"nb":460,"nm":"Yi","lid":"Yi","rtl":false,"ime":true,"casing":false},"Zinh":{"nb":994,"nm":"Code for inherited script","lid":"Inherited","rtl":false,"ime":false,"casing":false},"Zmth":{"nb":995,"nm":"Mathematical notation","lid":"Mathematical_notation"},"Zsym":{"nb":996,"nm":"Symbols","lid":"Symbols"},"Zxxx":{"nb":997,"nm":"Code for unwritten documents","lid":"Code_for_unwritten_documents"},"Zyyy":{"nb":998,"nm":"Code for undetermined script","lid":"Common","rtl":false,"ime":false,"casing":false},"Zzzz":{"nb":999,"nm":"Code for uncoded script","lid":"Unknown","rtl":false,"ime":false,"casing":false}};
/*
 * scriptinfo.js - information about scripts
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

// !data scripts

/**
 * @class
 * Create a new script info instance. This class encodes information about
 * scripts, which are sets of characters used in a writing system.<p>
 * 
 * The options object may contain any of the following properties:
 * 
 * <ul>
 * <li><i>onLoad</i> - a callback function to call when the script info object is fully 
 * loaded. When the onLoad option is given, the script info object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Depends directive: !depends scriptinfo.js
 * 
 * @constructor
 * @param {string} script The ISO 15924 4-letter identifier for the script
 * @param {Object} options parameters to initialize this matcher 
 */
ilib.ScriptInfo = function(script, options) {
	var sync = true,
	    loadParams = undefined;
	
	this.script = script;
	
	if (options) {
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			loadParams = options.loadParams;
		}
	}

	if (!ilib.ScriptInfo.cache) {
		ilib.ScriptInfo.cache = {};
	}

	if (!ilib.data.scripts) {
		ilib.loadData({
			object: ilib.ScriptInfo, 
			locale: "-", 
			name: "scripts.json", 
			sync: sync, 
			loadParams: loadParams, 
			callback: ilib.bind(this, function (info) {
				if (!info) {
					info = {"Latn":{"nb":215,"nm":"Latin","lid":"Latin","rtl":false,"ime":false,"casing":true}};
					var spec = this.locale.getSpec().replace(/-/g, "_");
					ilib.ScriptInfo.cache[spec] = info;
				}
				ilib.data.scripts = info;
				this.info = script && ilib.data.scripts[script];
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			})
		});
	} else {
		this.info = ilib.data.scripts[script];
	}

};

/**
 * @static
 * Return an array of all ISO 15924 4-letter identifier script identifiers that
 * this copy of ilib knows about.
 * @return {Array.<string>} an array of all script identifiers that this copy of
 * ilib knows about
 */
ilib.ScriptInfo.getAllScripts = function() {
	var ret = [],
		script = undefined,
		scripts = ilib.data.scripts;
	
	for (script in scripts) {
		if (script && scripts[script]) {
			ret.push(script);
		}
	}
	
	return ret;
};

ilib.ScriptInfo.prototype = {
	/**
	 * Return the 4-letter ISO 15924 identifier associated
	 * with this script.
	 * @return {string} the 4-letter ISO code for this script
	 */
	getCode: function () {
		return this.info && this.script;
	},
	
	/**
	 * Get the ISO 15924 code number associated with this
	 * script.
	 * 
	 * @return {number} the ISO 15924 code number
	 */
	getCodeNumber: function () {
		return this.info && this.info.nb || 0;
	},
	
	/**
	 * Get the name of this script in English.
	 * 
	 * @return {string} the name of this script in English
	 */
	getName: function () {
		return this.info && this.info.nm;
	},
	
	/**
	 * Get the long identifier assciated with this script.
	 * 
	 * @return {string} the long identifier of this script
	 */
	getLongCode: function () {
		return this.info && this.info.lid;
	},
	
	/**
	 * Return the usual direction that text in this script is written
	 * in. Possible return values are "rtl" for right-to-left,
	 * "ltr" for left-to-right, and "ttb" for top-to-bottom.
	 * 
	 * @return {string} the usual direction that text in this script is
	 * written in
	 */
	getScriptDirection: function() {
		return (this.info && typeof(this.info.rtl) !== 'undefined' && this.info.rtl) ? "rtl" : "ltr";
	},
	
	/**
	 * Return true if this script typically requires an input method engine
	 * to enter its characters.
	 * 
	 * @return {boolean} true if this script typically requires an IME
	 */
	getNeedsIME: function () {
		return this.info && this.info.ime ? true : false; // converts undefined to false
	},
	
	/**
	 * Return true if this script uses lower- and upper-case characters.
	 * 
	 * @return {boolean} true if this script uses letter case
	 */
	getCasing: function () {
		return this.info && this.info.casing ? true : false; // converts undefined to false
	}
};
ilib.data.name = {"components":{"short":{"g":1,"f":1},"medium":{"g":1,"m":1,"f":1},"long":{"p":1,"g":1,"m":1,"f":1},"full":{"p":1,"g":1,"m":1,"f":1,"s":1}},"format":"{prefix} {givenName} {middleName} {familyName}{suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"and","and2":"and","or1":"or","or2":"or"},"auxillaries":{"mac":1,"mc":1,"von":1,"von der":1,"von den":1,"vom":1,"zu":1,"zum":1,"zur":1,"von und zu":1,"van":1,"van der":1,"van de":1,"van den":1,"de":1,"den":1,"vande":1,"vander":1,"di":1,"da":1,"della":1,"dalla":1,"la":1,"lo":1,"li":1,"del":1,"des":1,"le":1,"les":1,"du":1,"de la":1,"de los":1,"de las":1,"do":1,"abu":1,"ibn":1,"bar":1,"ter":1,"ben":1,"bin":1},"prefixes":["doctor","dr","mr","mrs","ms","mister","madame","madamoiselle","miss","herr","hr","frau","fr","fraulein","frl","monsieur","mssr","mdm","mlle","seÃ±or","seÃ±ora","seÃ±orita","sr","sra","srta","meneer","mevrouw"],"suffixes":[",","junior","jr","senior","sr","i","iii","iii","iv","v","vi","vii","viii","ix","x","2nd","3rd","4th","5th","6th","7th","8th","9th","10th","esq","phd","md","ddm","dds"]};
ilib.data.name_en = {"prefixes":["rep","representative","senator","congressman","congresswoman","president","vice president","vice-president","mp","member of parliament","chief","justice","chief justice","judge","minister","prime minister","governor general","lieutenant governor","speaker of the house of commons","speaker of the house","speaker of the senate","supreme court justice","secretary of state","mayor","justice of the peace","emporer","chairman","chairwoman","alderman","general secretary","ambassador","minister","cardinal","bishop","archbishop","rabbi","grand rabbi","mulah","mullah","canon","cantor","pastor","ps","monsignor","mgsr","pope","chef","master","coach","professor","prof","nobel laureate","king","queen","prince","princess","crown prince","crown princess","marquess","marchioness","earl","countess","count","archduke","duke","duchess","baron","baroness","viscount","private","private first class","corporal","sargeant","staff sargeant","sargeant first class","master sargeant","first sargeant","sargeant major","command sargeant major","sargeant major of the army","pv1","pv2","pfc","spc","cpl","sgt","ssg","sfc","msg","1sg","sgm","csm","sma","warrant officer","chief warrant officer","second lieutenant","first lieutenant","captain","major","lieutenant colonel","colonel","brigadier general","major general","lieutenant general","general","2lt","1lt","cpt","maj","ltc","col","bg","mg","ltg","gen","general of the army","fleet admiral","admiral","vice admiral","rear admiral","commander","lieutenant commander","lieutenant","lieutenant (junior grade)","ensign","fadm","adm","vadm","radm","rdml","capt","cdr","lcdr","lt","ltjg","ens","petty officer","petty officer first class","petty officer second class","petty officer third class","petty officer 1st class","petty officer 2nd class","petty officer 3rd class","po","po1","po2","po3","chief petty officer","senior chief petty officer","master chief petty officer","cpo","scpo","mcpo","command master chief petty officer","fleet master chief petty officer","force master chief petty officer","cmdcm","fltcm","forcm","master chief petty officer of the navy","mcpon","sergeant major of the marine corps","master gunnery sergeant","gunnery sergeant","lance corporal","sgtmaj","mgysgt","1stsgt","msgt","gysgt","ssgt","sgt","cpl","lcpl","pfc","pvt","airman basic","airman","airman first class","senior airman","technical sergeant","master sergeant","senior master sergeant","chief master sergeant","command chief master sergeant","chief master sergeant of the air force","ab","amn","a1c","sra","tsgt","msgt","smsgt","cmsgt","ccm","cmsaf","field marshal","brigadier","officer cadet","fm","lt gen","maj gen","brig","col","lt col","maj","capt","lt","2lt","ocdt","admiral of the fleet","marshal","marshal of the air force","air marshal","commodore","air commodore","group captain","lieutenant colonel","lt colonel","wing commander","lt commander","commandant","squadron leader","flight lieutenant","sub-lieutenant","flying officer","ensign","second lieutenant","2nd lieutenant","pilot officer","midshipman","warrant officer","leading seaman","seaman","aircraftman","midshipwoman","leading seawoman","seawoman","aircraftwoman","vice-admiral","vadm","lieutenant-general","lgen","rear-admiral","radm","major-general","mgen","brigadier-general","bgen","lieutenant-colonel","lcol","naval cadet","ncdt","able seaman","ab","ordinary seaman","os","pte","master bombardier","trooper","bombardier","sapper","signalman","craftsman","guardsman","rifleman","fusilier","chief of police","police commissioner","superintendent","sheriff","deputy chief of police","deputy commissioner","deputy superintendent","undersheriff","deputy sheriff","inspector","deputy inspector","detective","investigator","officer","deputy sheriff","constable","police constable","chief superintendent","assistant chief constable","deputy chief constable","chief constable","assistant commissioner","deputy commissioner","detective constable","staff inspector","staff superintendent","station duty officer","auxiliary sergeant","senior constable","cadet","probationary constable","recruit","sir","lady","lord","dame","his royal highness","hrh","his honour","his honor","maestro","his lordship","his majesty","his worship","the right worshipful","the worshipful","the honourable","the right honourable","the honorable","the right honorable","the hon","the most noble","the most honourable","the most honorable","the most hon","the rt hon","the right honourable and learned","the right honourable and gallant","the much honoured","the right honorable and learned","the right honorable and gallant","the much honored","the much hon","her royal highness","her honour","her honor","her majesty","her worship","his excellency","her excellency","his serene highness","her serene highness","his most reverend excellency","her most reverend excellency","his holiness","hh","his all holiness","hah","his beatitude","his eminence","he","his beatitude and eminence","father","mother","brother","br","sister","reverend","rev","the most reverend","the most rev","his grace","the right reverend","the rt rev","the most reverend and right honourable","the most reverend and right honorable","the most rev and rt hon","the right reverend and right honourable monsignor","the right reverend and right honorable monsignor","the rt rev and rt hon mgr","the right reverend and right honourable","the right reverend and right honorable","the very reverend","the very rev","the reverend monsignor","the rev msgr","the venerable","venerable","ven","his imperial majesty","his imperial and royal majesty","his apostolic majesty","his catholic majesty","his most faithful majesty","his imperial highness","his imperial and royal highness","his royal highness","his grand ducal highness","his highness","his ducal serene highness","his serene highness","his illustrious highness","his highborn","his grace","his high well-born","his excellency","his high excellency","her imperial majesty","her imperial and royal majesty","her apostolic majesty","her catholic majesty","her most faithful majesty","her imperial highness","her imperial and royal highness","her royal highness","her grand ducal highness","her highness","her ducal serene highness","her serene highness","her illustrious highness","her highborn","her grace","her high well-born","her excellency","her high excellency","him","hi&rm","ham","hcm","hfm","hih","hi&rh","hrh","hgdh","hh","hdsh","hsh","hillh","he","the","and","or","aunt","uncle","grandma","grandpa","granma","grampa","cousin"],"suffixes":["junior","jr","senior","sr","i","iii","iii","iv","v","vi","vii","viii","ix","x","2nd","3rd","4th","5th","6th","7th","8th","9th","10th","esquire","esq","jd","phd","md","ddm","dds","dmv","bvsc","ah","bsc","ba","ret","retired"]};
ilib.data.name_de = {"sortByHeadWord":true,"conjunctions":{"and1":"und","and2":"und","or1":"oder","or2":"oder"},"auxillaries":{"von":1,"van":1,"von der":1,"von den":1,"vom":1,"auf":1,"auf dem":1,"auf der":1,"aus":1,"aus den":1,"aus dem":1,"aus der":1,"in":1,"im":1,"in den":1,"in dem":1,"in der":1,"zu":1,"zu den":1,"zum":1,"zur":1,"von und zu":1,"vor dem":1},"prefixes":["doktor","dr","med","dent","habil","rer nat","hc","jur","vet","ing","dipl-ing","prÃ¤sident","prÃ¤sidentin","professor","professorin","prof","privatdozent","privatdozentin","direktor","direktorin","chefarzt","oberarzt","chefÃ¤rztin","oberÃ¤rztin","mutter","vater","schwester","bruder","patin","pate","tante","onkel","groÃmutter","groÃvater","oma","opa","bundesprÃ¤sident","bundeskanzler","minister","senator","staatssekretÃ¤r","abgeordneter","bÃ¼rgermeister","landrat","stadtrat","staatsanwalt","vorsitzender","rechtsanwalt","anwalt","verteidiger","bundesprÃ¤sidentin","bundeskanzlerin","ministerin","senatorin","staatssekretÃ¤rin","abgeordnete","bÃ¼rgermeisterin","landrÃ¤tin","stadtrÃ¤tin","staatsanwÃ¤ltin","vorsitzende","rechtsanwÃ¤ltin","anwÃ¤ltin","verteidigerin","unteroffizier","leutnant","feldwebel","fÃ¤hnrich","oberleutnant","hauptmann","major","gefreiter","kapitÃ¤n","admiral","maat","bootsmann","oberst","general","exzellenz","botschafter","botschafterin","konsul","konsulin","gesandter","gesandte","fÃ¼rst","fÃ¼rstin","herzog","herzogin","graf","grÃ¤fin","baron","baronin","freiherr","freifrau","hofrÃ¤tin","hofrat","hr","regierungsrÃ¤tin","regierungsrat","rgr","amtsrÃ¤tin","amtsrat","ar","kanzleirÃ¤tin","kanzleirat","kzlr","kommerzialrÃ¤tin","kommerzialrat","kommr","Ã¶konomierÃ¤tin","Ã¶konomierat","Ã¶kr","medizinalrÃ¤tin","medizinalrat","medr","obermedizinalrÃ¤tin","obermedizinalrat","omedr","veterinÃ¤rrÃ¤tin","veterinÃ¤rrat","vetr","technische rÃ¤tin","technischer rat","tr","schulrÃ¤tin","schulrat","sr","oberschulrÃ¤tin","oberschulrat","osr","studienrÃ¤tin","studienrat","str","oberstudienrÃ¤tin","oberstudienrat","ostr","universitÃ¤tsprofessorin","universitÃ¤tsprofessor","univprof","kammersÃ¤ngerin","kammersÃ¤nger","ksÃ¤ng","kammerschauspielerin","kammerschauspieler","kschausp","pfarrer","pfr","pfarrerin","dekan","dekanin","kreisdekan","kreisdekanin","bischof","bischÃ¶fin","regionalbischof","regionalbischÃ¶fin","ddr","agr","biol hum","diac","disc pol","e h","h c mult","habil","iur","iur","iur et rer pol","math","med","med dent","med dent et scient med","med univ","med univ et scient med","med vet","mult","mus","nat med","nat techn","oec","oec publ","oec troph","paed","pharm","phil","rer agr","rer biol hum","rer biol vet","rer cam","rer cult","rer cur","rer forest","rer hort","rer med","rer merc","rer mont","rer nat","rer oec","rer physiol","rer pol","rer publ","rer sec","rer silv","rer soc","rer soc oec","rer tech","sc agr","sc hum","sc inf","sc inf biomed","sc inf med","sc math","sc mus","sc nat","sc oec","sc pol","sc rel","sc soc","sc techn","scient med","techn","theol","troph","dr-ing","hochwÃ¼rdigste","hochwÃ¼rdigster","hochwÃ¼rden","ehrwÃ¼rden","montsignore","hoheit","kÃ¶nigliche","ihre","seine","hochwohlgeborene","hochwohlgeborener","heiliger","der","die","das","dem","den","und","oder"],"suffixes":["junior","jr","senior","sr","i","iii","iii","iv","v","vi","vii","viii","ix","x","ir","im ruhestand","ba","ma","phd"]};
ilib.data.name_fr = {"prefixes":["baron","baronne","bey","calife","cheikh","cheykha","comte","comtesse","cousin","cousine","docteur","dom","dr","duc","duchesse","Ã©mir","Ã©mira","frÃ¨re","grand-mÃ¨re","grand-oncle","grand-pÃ¨re","grand-tante","hadjib","lady","lord","madame la prÃ©sidente","malik","mamy","marquis","marquise","marraine","mÃ¨re","monsieur le prÃ©sident","neveu","niÃ¨ce","nizam","oncle","padishah","papy","parrain","pÃ¨re","pervane","petite-niÃ¨ce","petit-neveu","pr","prÃ©sident","prÃ©sidente","professeur","professeure","rÃ¢ja","rani","rÃ©vÃ©rend pÃ¨re","rÃ©vÃ©rend","rÃ©vÃ©rende","rÃ©vÃ©rende mÃ¨re","sa","sai","sar","sas","se","shah","sir","sm","sm","smi","sÅur","sultan","sultane","tante","veuve","vicomte","vicomtesse","vizir","et","m","maÃ®tres","maÃ®tre","majestÃ©","mes","mesdames","mesdemoiselles","messieurs","mgr","mlles","mm","mme","mmes","monseigneur","ou","son","sa","saintetÃ©","altesse","royale","sÃ©rÃ©nissime","Ã©minence","excellence"],"auxillaries":["la","le","les","des","du","de"],"suffixes":["docteur en philosophie","docteur en mÃ©decine","docteur en linguistique","docteur en physique","docteur en chimie","docteur en mathÃ©matiques","docteur en droit","docteur en chirurgie dentaire","docteur en pharmacie","docteur en mÃ©decine vÃ©tÃ©rinaire","dep","dem","del","dec","ded","decd","demv"]};
ilib.data.name_es = {"conjunctions":{"and1":"y","and2":"e","or1":"o","or2":"u"},"prefixes":["presidente","vicepresidente","profesor","prof","licenciado","licenc","ingeniero","ing","arquitecto","arq","cardenal","monseÃ±or","madre","padre","hermana","hermano","madrina","padrino","mamÃ¡","papÃ¡","tÃ­a","tÃ­o","abuela","abuelo","abuelita","abuelito","primo","prima","nono","nona","capitÃ¡n","general","coronel","mayor","almirante","general","comandante","teniente","teniente coronel","teniente general","detective","ministro","alcalde","alcaldesa","embajador","embajadora","don","doÃ±a","el seÃ±or","la seÃ±ora","la seÃ±orita","el sr","la sra","la srta","reverendo","reverenda","su excelencia","su santidad","el presidente","su excelencia","excelentÃ­simo seÃ±or","excelentÃ­sima seÃ±ora","seÃ±or ministro","seÃ±ora ministra","seÃ±or alcalde","seÃ±ora alcaldesa","su eminencia","honorable seÃ±or","honorable seÃ±ora","la","el","los","las","y","e","o","u"],"suffixes":["sr","senior","jr","junior","hijo","padre","ii","iii","iv","v","vi","vii","viii","ix","x"]};
ilib.data.name_id = {"format":"{prefix} {givenName} {middleName} {suffix}","sortByHeadWord":false,"conjunctions":{"and1":"dan","and2":"dan","or1":"atau","or2":"atau"},"prefixes":["bapak","ibu","presiden","wakil presiden","perdana menteri","walikota","gubernur","ketua","ketua","melayani","pendeta Yahudi","mu","pendeta","koki","melatih","profesor","raja","ratu","pangeran","puteri","umum","laksamana","komisaris","pengawas","kepala polisi daerah","inspektur","detektif","petugas","tuan","wanita","raja","nyonya","ayah","ibu","saudara","saudara","pendeta","bibi","paman","nenek","nenek","kakek","kakek","granma","sepupu"],"suffixes":["muda","lebih tua","mundur"]};
ilib.data.name_it = {"conjunctions":{"and1":"e","and2":"ed","or1":"o","or2":"o"},"auxillaries":{"di":1,"de":1,"da":1,"della":1,"dalla":1,"la":1,"lo":1,"li":1,"del":1,"degli":1,"dei":1,"lu":1,"dal":1},"prefixes":["ingegnere","ing","geometra","avvocato","notaio","dottore","dott","ragioniere","architetto","dottoressa","maestro","prof","professor","professore","professoressa","fra","frate","fratello","suor","suora","sorella","don","padre","monsignore","cavaliere","commendatore","onorevole","colonnello","generale","tenente","maresciallo","madre","zio","zia","nonna","nonno","signor","signore","sig","signora","sigra","signorina","signa","sgna"],"suffixes":[]};
ilib.data.name_ja = {"format":"{prefix}{familyName}{middleName}{givenName}{suffix}","nameStyle":"asian","conjunctions":{"and1":"ä¸","and2":"ä¸","or1":"ããã¨ã","or2":"ããã¨ã"},"suffixes":["ãã","ç·è£","å¯å¤§çµ±é ","ç·ç","å¸é·","ç¥äº","ä¸»å¸­","ä¸»å¸­","ã©ã","ç§å¸«","ã·ã§ã","æå°è","ææ","ç","å¥³ç","çå¤ªå­","ããªã³ã»ã¹","æç£","ç®¡çè","ä¿å®å®","ç£å¯","å½¹å¡","å¿","å¥³æ§","é ä¸»","ãã¤ã ","ç¶è¦ª","æ¯è¦ª","å¼","ã·ã¹ã¿ã¼","ç§å¸«","åæ¯","åç¶","ãã°ãã¡ãã","ãã°ããã","ãããã¡ãã","ããããã","ãã¨ã","å¹´ä¸","ä¸ç´","ãã¡","ã«","ãã","ãã","ã","ãã","ãªãª","ã¯ã¡","ããã","ããã"],"knownFamilyNames":{"ä½è¤":"SatÅ","é´æ¨":"Suzuki","é«æ©":"Takahashi","ç°ä¸­":"Tanaka","æ¸¡è¾º":"Watanabe","ä¼è¤":"ItÅ","ä¸­æ":"Nakamura","å°æ":"Kobayashi","å±±æ¬":"Yamamoto","å è¤":"KatÅ","åç°":"Yoshida","å±±ç°":"Yamada","ä½ãæ¨":"Sasaki","å±±å£":"Yamaguchi","æ¾æ¬":"Matsumoto","äºä¸":"Inoue","æ¨æ":"Kimura","æ¸æ°´":"Shimizu","æ":"Hayashi","æè¤":"SaitÅ","æè¤":"SaitÅ","å±±å´":"Yamazaki Yamasaki","ä¸­å³¶":"Nakajima Nakashima","æ£®":"Mori","é¿é¨":"Abe","æ± ç°":"Ikeda","æ©æ¬":"Hashimoto","ç³å·":"Ishikawa","å±±ä¸":"Yamashita","å°å·":"Ogawa","ç³äº":"Ishii","é·è°·å·":"Hasegawa","å¾è¤":"GotÅ","å²¡ç°":"Okada","è¿è¤":"KondÅ","åç°":"Maeda","è¤ç°":"Fujita","é è¤":"EndÅ","éæ¨":"Aoki","åæ¬":"Sakamoto","æä¸":"Murakami","å¤ªç°":"Åta","éå­":"Kaneko","è¤äº":"Fujii","ç¦ç°":"Fukuda","è¥¿æ":"Nishimura","ä¸æµ¦":"Miura","ç«¹å":"Takeuchi","ä¸­å·":"Nakagawa","å²¡æ¬":"Okamoto","æ¾ç°":"Matsuda","åç°":"Harada","ä¸­é":"Nakano","å°é":"Ono","ç°æ":"Tamura","è¤å":"Fujiwara Fujihara","ä¸­å±±":"Nakayama","ç³ç°":"Ishida","å°å³¶":"Kojima","åç°":"Wada","æ£®ç°":"Morita","åç°":"Uchida","æ´ç°":"Shibata","éäº":"Sakai","å":"Hara","é«æ¨":"Takagi Takaki","æ¨ªå±±":"Yokoyama","å®è¤":"AndÅ","å®®å´":"Miyazaki Miyasaki","ä¸ç°":"Ueda Ueta","å³¶ç°":"Shimada","å·¥è¤":"KudÅ","å¤§é":"Åno","å®®æ¬":"Miyamoto","æå±±":"Sugiyama","ä»äº":"Imai","ä¸¸å±±":"Maruyama","å¢ç°":"Masuda","é«ç°":"Takada Takata","æç°":"Murata","å¹³é":"Hirano","å¤§å¡":"Åtsuka","èå":"Sugawara Sugahara","æ­¦ç°":"Takeda Taketa","æ°äº":"Arai","å°å±±":"Koyama Oyama","éå£":"Noguchi","æ¡äº":"Sakurai","åè":"Chiba","å²©å´":"Iwasaki","ä½é":"Sano","è°·å£":"Taniguchi","ä¸é":"Ueno","æ¾äº":"Matsui","æ²³é":"KÅno Kawano","å¸å·":"Ichikawa","æ¸¡é¨":"Watanabe Watabe","éæ":"Nomura","èå°":"Kikuchi","æ¨ä¸":"Kinoshita"}};
ilib.data.name_ko = {"order":"fmg","useSpaces":false,"format":"{prefix}{familyName}{middleName}{givenName}{suffix}","nameStyle":"asian","sortByHeadWord":false,"conjunctions":{"and1":"ê·¸ë¦¬ê³ ","and2":"ê·¸ë¦¬ê³ ","or1":"ëë","or2":"ëë"},"prefixes":["ë¯¸ì¤í°","ë¶ì¸","ëíµë ¹","ë¶ì¬ì¥","ì´ë¦¬","ìì¥","ì§ì¬","íì¥","ëí","ì¥ê´","ë ë¹","mulah","ëª©ì¬ ë","ìë¦¬ì¬","ì½ì¹","êµì","êµì","í¹","ì¬ì","íë¦°ì¤","ê³µì£¼","ì¼ë°","ì  ë","ê°ë ê´","êµì¡ ê°","ë³´ìê´","ê´ë¦¬ì] ","íì¬","ì¥êµ","ì ìë","ë ì´ë","ì£¼ ë","ë¨¸ë¦¬ í","ìë²ì§","ì´ë¨¸ë","ëì","ì¬ëì","ëª©ì¬","ì´ ëª¨","ì¼ì´","í ë¨¸ë","í ë¨¸ë ","í ìë²ì§","í ìë²ì§","ì¬ì´"],"suffixes":["ì£¼ëì´","ìì","íë","ë","ì","ë·","ë¤ì¯","ì¬ì¯","ì¼ê³±","ì¬ë","ìí","ì´","ë°ì¬ íì","ìí´"],"knownFamilyNames":{"ê¹":"Kim","ì´":"Lee","ë°":"Park","ìµ":"Choi","ì ":"Jeong","ê°":"Kang","ì¡°":"Cho","ì¤":"Yoon","ì¥":"Jang","ì":"Lim","í":"Han","ì¤":"O","ì ":"Shin","ì":"Seo,Suh,Seoh","ê¶":"Kwon","í©":"Hwang","ì":"Ahn","ì¡":"Song","ì ":"Yoo","í":"Hong","ì ":"Jeon","ê³ ":"Ko","ë¬¸":"Mun","ì":"Son","ì":"Yang"}};
ilib.data.name_pt = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"e","and2":"e","or1":"ou","or2":"ou"},"prefixes":["Senhor","Senhora","presidente","vice-presidente","primeiro ministro","prefeito","governador","presidente","presidenta","ministro","rabino","treinador","rei","rainha","prÃ­ncipe","princesa","geral","almirante","comissÃ¡rio","superintendente","xerife","inspetor","detetive","oficial","senhor","senhora","senhor","dama","pai","mÃ£e","irmÃ£o","irmÃ£","reverendo","tia","tio","avÃ³","avÃ³","avÃ´","avÃ´","VovÃ´","primo","e","ou"],"suffixes":["aposentados"]};
ilib.data.name_ru = {"format":"{prefix} {givenName} {middleName} {familyName}{suffix}","sortByHeadWord":false,"conjunctions":{"and1":"Ð¸","and2":"Ð¸","or1":"Ð¸Ð»Ð¸","or2":"Ð¸Ð»Ð¸"},"prefixes":["Ð³-Ð½","Ð³-Ð¶Ð°","Ð³Ð¾ÑÐ¿Ð¾Ð´Ð¸Ð½","Ð¿ÑÐ¾Ð¼Ð°ÑÐ¸","Ð´Ð¾ÐºÑÐ¾Ñ","Ð´Ð¾Ðº","Ð¿ÑÐµÐ·Ð¸Ð´ÐµÐ½Ñ","bÐ¸ÑÐµ-Ð¿ÑÐµÐ·Ð¸Ð´ÐµÐ½Ñ","Ð¿ÑÐµÐ¼ÑÐµÑ-Ð¼Ð¸Ð½Ð¸ÑÑÑ","Ð¼ÑÑ","Ð³ÑÐ±ÐµÑÐ½Ð°ÑÐ¾Ñ","Ð¿ÑÐµÐ´ÑÐµÐ´Ð°ÑÐµÐ»Ñ","Ð¿ÑÐµÐ´ÑÐµÐ´Ð°ÑÐµÐ»ÑÐ½Ð¸ÑÐ°","Ð¼Ð¸Ð½Ð¸ÑÑÑ","ÑÐ°Ð²Ð²Ð¸Ð½","Ð¼ÑÐ»Ð°Ñ","Ð¿Ð°ÑÑÐ¾Ñ","ÑÐµÑ-Ð¿Ð¾Ð²Ð°Ñ","ÑÑÐµÐ½ÐµÑ","Ð¿ÑÐ¾ÑÐµÑÑÐ¾Ñ","ÐºÐ¾ÑÐ¾Ð»Ñ","ÐºÐ¾ÑÐ¾Ð»ÐµÐ²Ð°","Ð¿ÑÐ¸Ð½Ñ","Ð¿ÑÐ¸Ð½ÑÐµÑÑÐ°","Ð¾Ð±ÑÐ¸Ð¹","Ð°Ð´Ð¼Ð¸ÑÐ°Ð»","ÐºÐ¾Ð¼Ð¸ÑÑÐ°Ñ","Ð½Ð°ÑÐ°Ð»ÑÐ½Ð¸Ðº","ÑÐµÑÐ¸Ñ","Ð¸Ð½ÑÐ¿ÐµÐºÑÐ¾Ñ","Ð´ÐµÑÐµÐºÑÐ¸Ð²","Ð¾ÑÐ¸ÑÐµÑ","ÑÑÑ","Ð»ÐµÐ´Ð¸","Ð³Ð¾ÑÐ¿Ð¾Ð´Ð¸Ð½","Ð´Ð°Ð¼Ð°","Ð¾ÑÐµÑ","Ð¼Ð°ÑÑ","Ð±ÑÐ°Ñ","ÑÐµÑÑÑÐ°","Ð¿ÑÐµÐ¿Ð¾Ð´Ð¾Ð±Ð½ÑÐ¹","ÑÐµÑÑ","Ð´ÑÐ´Ñ","Ð±Ð°Ð±ÑÑÐºÐ°","Ð±Ð°Ð±ÑÑÐºÐ°","Ð´ÐµÐ´ÑÑÐºÐ°","Ð´ÐµÐ´","ÐÑÐ°Ð½Ð¼Ð°","Ð´ÐµÐ´ÑÑÐºÐ°","Ð´Ð²Ð¾ÑÑÐ¾Ð´Ð½ÑÐ¹ Ð±ÑÐ°Ñ"],"suffixes":["Ð¼Ð»Ð°Ð´ÑÐ¸Ð¹","ÑÑÐ°ÑÑÐ¸Ð¹","ÐÑÑÐ¸Ð»ÐµÐ½Ð´","Ð¾ÑÑÑÐ°Ð²ÐºÑ"]};
ilib.data.name_tr = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"ve","and2":"ve","or1":"veya","or2":"veya"},"prefixes":["bay","bayan","baÅkan","baÅkan YardÄ±mcÄ±sÄ±","baÅbakan","belediye baÅkanÄ±","vali","baÅkan","kadÄ±n baÅkan","bakan","haham","papaz","Åef","koÃ§","profesÃ¶r","kral","kraliÃ§e","prens","prenses","genel","amiral","komiser","baÅkomiser","Åerif","mÃ¼fettiÅ","dedektif","subay","bayÄ±m","bayan","kadÄ±n","baba","anne","kardeÅ","muhterem","teyze","amca","bÃ¼yÃ¼kanne","dede","nine","kuzen","ve","veya"],"suffixes":["genÃ§","kÄ±demli","doktoralÄ±","Ã§Ã¼rÃ¼mek","emekli"]};
ilib.data.name_vi = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortbyHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"vÃ ","and2":"vÃ ","or1":"hoÄÌ£c","or2":"hoÄÌ£c"},"prefixes":["Ã´ng","bÃ ","bÃ ","chá»§ tá»ch","phÃ³ chá»§ tá»ch","thá»§ tÆ°á»ng","thiÌ£ trÆ°Æ¡Ìng","Thá»ng Äá»c","chá»§ tá»ch","chuÌ tiÌ£ch ÄaÍn baÍ","bá» trÆ°Æ¡Ìng","phaÍp sÆ°","mulah","Má»¥c sÆ°","Äáº§u báº¿p","HLV","giÃ¡o sÆ°","prof","vua","ná»¯ hoÃ ng","vua","cÃ´ng chÃºa","chung","thuyÃªÍn trÆ°Æ¡Ìng","uÌy viÃªn","giÃ¡m Äá»c","cáº£nh sÃ¡t trÆ°á»ng","viÃªn thanh tra","thÃ¡m tá»­","viÃªn","thÆ°a Ã´ng","phá»¥ ná»¯","chÃºa","phu nhÃ¢n","cha","meÌ£","em trai","chá»","tÃ´n troÌ£ng","cÃ´","chÃº","bÃ ","bÃ ","Ã´ng ná»i","Ã´ng ná»i","anh em há»"],"suffixes":["em","cao cáº¥p","Tiáº¿n Sá»¹","nghá» hÆ°u"]};
ilib.data.name_zxx = {"prefixes":["rep","representative","senator","congressman","congresswoman","president","vice president","vice-president","mp","member of parliament","chief","justice","chief justice","judge","minister","prime minister","governor general","lieutenant governor","speaker of the house of commons","speaker of the house","speaker of the senate","supreme court justice","secretary of state","mayor","justice of the peace","emporer","chairman","chairwoman","alderman","general secretary","ambassador","minister","cardinal","bishop","archbishop","rabbi","grand rabbi","mulah","mullah","canon","cantor","pastor","ps","monsignor","mgsr","pope","chef","master","coach","professor","prof","nobel laureate","king","queen","prince","princess","crown prince","crown princess","marquess","marchioness","earl","countess","count","archduke","duke","duchess","baron","baroness","viscount","private","private first class","corporal","sargeant","staff sargeant","sargeant first class","master sargeant","first sargeant","sargeant major","command sargeant major","sargeant major of the army","pv1","pv2","pfc","spc","cpl","sgt","ssg","sfc","msg","1sg","sgm","csm","sma","warrant officer","chief warrant officer","second lieutenant","first lieutenant","captain","major","lieutenant colonel","colonel","brigadier general","major general","lieutenant general","general","2lt","1lt","cpt","maj","ltc","col","bg","mg","ltg","gen","general of the army","fleet admiral","admiral","vice admiral","rear admiral","commander","lieutenant commander","lieutenant","lieutenant (junior grade)","ensign","fadm","adm","vadm","radm","rdml","capt","cdr","lcdr","lt","ltjg","ens","petty officer","petty officer first class","petty officer second class","petty officer third class","petty officer 1st class","petty officer 2nd class","petty officer 3rd class","po","po1","po2","po3","chief petty officer","senior chief petty officer","master chief petty officer","cpo","scpo","mcpo","command master chief petty officer","fleet master chief petty officer","force master chief petty officer","cmdcm","fltcm","forcm","master chief petty officer of the navy","mcpon","sergeant major of the marine corps","master gunnery sergeant","gunnery sergeant","lance corporal","sgtmaj","mgysgt","1stsgt","msgt","gysgt","ssgt","sgt","cpl","lcpl","pfc","pvt","airman basic","airman","airman first class","senior airman","technical sergeant","master sergeant","senior master sergeant","chief master sergeant","command chief master sergeant","chief master sergeant of the air force","ab","amn","a1c","sra","tsgt","msgt","smsgt","cmsgt","ccm","cmsaf","field marshal","brigadier","officer cadet","fm","lt gen","maj gen","brig","col","lt col","maj","capt","lt","2lt","ocdt","admiral of the fleet","marshal","marshal of the air force","air marshal","commodore","air commodore","group captain","lieutenant colonel","lt colonel","wing commander","lt commander","commandant","squadron leader","flight lieutenant","sub-lieutenant","flying officer","ensign","second lieutenant","2nd lieutenant","pilot officer","midshipman","warrant officer","leading seaman","seaman","aircraftman","midshipwoman","leading seawoman","seawoman","aircraftwoman","vice-admiral","vadm","lieutenant-general","lgen","rear-admiral","radm","major-general","mgen","brigadier-general","bgen","lieutenant-colonel","lcol","naval cadet","ncdt","able seaman","ab","ordinary seaman","os","pte","master bombardier","trooper","bombardier","sapper","signalman","craftsman","guardsman","rifleman","fusilier","chief of police","police commissioner","superintendent","sheriff","deputy chief of police","deputy commissioner","deputy superintendent","undersheriff","deputy sheriff","inspector","deputy inspector","detective","investigator","officer","deputy sheriff","constable","police constable","chief superintendent","assistant chief constable","deputy chief constable","chief constable","assistant commissioner","deputy commissioner","detective constable","staff inspector","staff superintendent","station duty officer","auxiliary sergeant","senior constable","cadet","probationary constable","recruit","sir","lady","lord","dame","his royal highness","hrh","his honour","his honor","maestro","his lordship","his majesty","his worship","the right worshipful","the worshipful","the honourable","the right honourable","the honorable","the right honorable","the hon","the most noble","the most honourable","the most honorable","the most hon","the rt hon","the right honourable and learned","the right honourable and gallant","the much honoured","the right honorable and learned","the right honorable and gallant","the much honored","the much hon","her royal highness","her honour","her honor","her majesty","her worship","his excellency","her excellency","his serene highness","her serene highness","his most reverend excellency","her most reverend excellency","his holiness","hh","his all holiness","hah","his beatitude","his eminence","he","his beatitude and eminence","father","mother","brother","br","sister","reverend","rev","the most reverend","the most rev","his grace","the right reverend","the rt rev","the most reverend and right honourable","the most reverend and right honorable","the most rev and rt hon","the right reverend and right honourable monsignor","the right reverend and right honorable monsignor","the rt rev and rt hon mgr","the right reverend and right honourable","the right reverend and right honorable","the very reverend","the very rev","the reverend monsignor","the rev msgr","the venerable","venerable","ven","his imperial majesty","his imperial and royal majesty","his apostolic majesty","his catholic majesty","his most faithful majesty","his imperial highness","his imperial and royal highness","his royal highness","his grand ducal highness","his highness","his ducal serene highness","his serene highness","his illustrious highness","his highborn","his grace","his high well-born","his excellency","his high excellency","her imperial majesty","her imperial and royal majesty","her apostolic majesty","her catholic majesty","her most faithful majesty","her imperial highness","her imperial and royal highness","her royal highness","her grand ducal highness","her highness","her ducal serene highness","her serene highness","her illustrious highness","her highborn","her grace","her high well-born","her excellency","her high excellency","him","hi&rm","ham","hcm","hfm","hih","hi&rh","hrh","hgdh","hh","hdsh","hsh","hillh","he","the","and","or","aunt","uncle","grandma","grandpa","granma","grampa","cousin"],"suffixes":["junior","jr","senior","sr","i","iii","iii","iv","v","vi","vii","viii","ix","x","2nd","3rd","4th","5th","6th","7th","8th","9th","10th","esquire","esq","jd","phd","md","ddm","dds","dmv","bvsc","ah","bsc","ba","ret","retired"]};
ilib.data.name_zh = {"format":"{prefix}{familyName}{middleName}{givenName}{suffix}","nameStyle":"asian","conjunctions":{"and1":"ä¸","and2":"ä¸","or1":"æ","or2":"æ"},"prefixes":["é¦å¸­æ§è¡å®","é¦å¸­å·è¡å®","é¦å¸­è´¢å¡å®","é¦å¸­è²¡åå®","é¦å¸­ææ¯å®","é¦å¸­æè¡å®","é¦å¸­è¿è¥å®","é¦å¸­çéå®","å¤ç¥å¥³","å å¥","å å¼","å å§","å å¦¹","è¡¨å¥","è¡¨å¼","è¡¨å§","è¡¨å¦¹","å¨å®¶","ä¸å®¶","å§¥ç·","å§¥çº","å¤å©","åç¶","å©¶å©¶","èåª½","å¬¸å¬¸","èè","èå¦","å§¨ä¸","å§¨ç¶","å§å¦","å§åª½","å§ç¶","å§ä¸","å¿å­","åå­","å¥³å¿","å¥³å","å­å­","å­«å­","å­å¥³","å­«å¥³","å¦¹å©¿","å«å«","å¼åª³","ä¾å­","ä¾å¥³","å¤ç¥","è","å°","å","ä¸","è","å"],"suffixes":["é¦å¸­æ§è¡å®","é¦å¸­è´¢å¡å®","é¦å¸­ææ¯å®","é¦å¸­è¿è¥å®","é¦å¸­å·è¡å®","é¦å¸­è²¡åå®","é¦å¸­æè¡å®","é¦å¸­çéå®","æ»å·¥ç¨å¸","ç¸½å·¥ç¨å¸«","é«ç´ç£å¯","æ ¼æçæ¥","æ ¼æçªå ±","å·¥ç¨å¸","æ»ç»ç","å¤ç¥å¥³","å·¥ç¨å¸«","ç¸½ç¶ç","å¸ä»¤å","ç¸½ç£å¯","ç¸½è­¦å¸","è²´å©¦äºº","è´µå¦äºº","å§¥ç·","å§¥çº","å§¨ç¶","å§ç¶","å­å­","å­«å­","å­å¥³","å­«å¥³","å¤å©","åç¶","å©¶å©¶","èåª½","å¬¸å¬¸","èè","èå¦","å§¨ä¸","å§å¦","å§åª½","å§ä¸","å¿å­","åå­","å¥³å¿","å¥³å","å¦¹å©¿","å«å«","å¼åª³","ä¾å­","ä¾å¥³","å¤ç¥","èå¸","èå¸«","æ ¡é¿","æ ¡é·","åå£«","ææ","å¾å¸","å¾å¸«","æ³å®","å»ç","æ¤å£«","ä¼è®¡","ç»ç","èæ¿","èæ»","é¨é¿","å¸é¿","å±é¿","å¤é¿","åé¿","ç§é¿","è¯¾é¿","ç»é¿","é«ç","è­·å£«","æè¨","ç¶ç","èé","èç¸½","é¨é·","å¸é·","å±é·","èé·","çµé·","å©ç","æ»è£","ç­é¿","æé¿","è¥é¿","æé¿","å¢é¿","å¸é¿","åé¿","æ¿å§","ä¸å°","ä¸­å°","å¤§å°","å¤§æ ¡","ä¸­æ ¡","ä¸æ ¡","ä¸å°","ä¸­å°","å°å°","åå¸","ç¸½è£","ä¸»å¸­","ç­é·","è­¦å¡","è­¦é·","ç£å¯","è­¦å¸","åç","å¤ªå¤ª","å¤«å¦","å¤«å©¦","å¤«äºº","å¥³å£«","å°å§","å¥å¥","å¼å¼","å§å§","å¦¹å¦¹","ç·ç·","çºçº","å¥¶å¥¶","åå","é¿å§¨","ä¼¯ç¶","ä¼¯æ¯","å å¥","å å¼","å å§","å å¦¹","è¡¨å¥","è¡¨å¼","è¡¨å§","è¡¨å¦¹","èå¸«","åª½åª½","ä¸å¸","å¦å¦","ç¸ç¸","åå­","å¥³å","ç¥ç¶","ç¥æ¯","å¤å¬","å¬¸å¬¸","èåª½","å§åª½","å§ªå­","å§ªå¥³","è¡¨å","è¡¨å¬¸","å¥¹","å·¥","æ»","ç¸½","ç"],"knownFamilyNames":{"æ":"Ãi","è¾":"Ãi","å®":"Än","æ":"Ão","ç½":"BÃ¡i1","ç¾":"BÇi2","ç¾é":"BÇilÇ","ç­":"BÄn","å":"BÄo1","ä¿":"BÇo2","é²":"BÃ o3","é®":"BÃ o4","æ´":"BÃ o5","å·´":"BÄ","è´":"BÃ¨i1","è²":"BÃ¨i2","è³":"BÄn","æ¯":"BÃ¬1","ç¢":"BÃ¬2","è¾¹":"BiÄn1","é":"BiÄn2","å":"BiÃ n3","å¥":"BiÃ©","é´":"BÇng","ä¼¯":"BÃ³1","è":"BÃ³2","æ":"BÃ²3","å":"BÅ­1","æ­¥":"BÃ¹2","è¡":"CÃ i","è¼":"CÄng","æ¹":"CÃ¡o","æ¾":"CÃ©ng","å²":"CÃ©n","æ´":"ChÃ¡i","å":"ChÃ¡n1","å®":"ChÃ¡n2","å¸¸":"ChÃ¡ng1","æ":"ChÄng2","ç":"ChÃ ng3","é¿å­":"ChÃ¡ngsÅ«n1","é·å­«":"ChÃ¡ngsÅ«n2","å®äº":"ChÃ¡nyÃº","æ":"ChÃ¡o1","å·¢":"ChÃ¡o2","æ¥":"ChÃ¡","è½¦":"ChÄ1","è»":"ChÄ2","æ²":"ChÃ©n1","é":"ChÃ©n2","é³":"ChÃ©n3","æ":"ChÃ©ng1","ç¨":"ChÃ©ng2","ç":"ChÃ©ng3","æ± ":"ChÃ­1","è¿":"ChÃ­2","é":"ChÄ«3","å":"ChÅng","ä»":"ChÃ³u","è¤":"ChÇ1","æ¥":"ChÇ2","å²":"ChÇ3","æ·³äº":"ChÃºnyÃº","è¤å¸":"ChÇshÄ«","ä¸":"CÃ³ng1","å¾":"CÅng2","å´":"CuÄ«","æ´":"DÃ i","å":"DÇng1","é»¨":"DÇng2","æ¾¹å°":"DÃ ntÃ¡i1","æ¾¹èº":"DÃ ntÃ¡i2","ç³":"DÃ n","è¾¾å¥":"DÃ¡xÄ«","ç¬ª":"DÃ¡","é":"DÃ¨ng1","é§":"DÃ¨ng2","ç":"DÃ­1","ç¿":"DÃ­2","å":"DiÄo","ä¸":"DÄ«ng","ç¬¬äº":"DÃ¬wÇ","é¸":"DÇ","æ±":"DÅng1","è£":"DÇng2","ä¸æ¹":"DÅngfÄng1","æ±æ¹":"DÅngfÄng2","ä¸å®«":"DÅnggÅng","ä¸é­":"DÅngguÅ1","æ±é­":"DÅngguÅ2","ä¸é":"DÅnglÇ","æ±é":"DÅngmÃ©n","çª¦":"DÃ²u1","ç«":"DÃ²u2","é½":"DÅu","ç£":"DÅ«1","å µ":"DÇ2","æ":"DÃ¹3","æ®µå¹²":"DuÃ ngÄn","ç«¯æ¨":"DuÄnmÃ¹","æ®µ":"DuÃ n","ç¬å­¤":"DÃºgÅ«","ä½´":"Ãr","é":"Ã","æ¨":"FÃ¡n1","è":"FÃ n2","æ¹":"FÄng1","æ¿":"FÃ¡ng2","æ³":"FÇ","è´¹":"FÃ¨i1","è²»":"FÃ¨i2","å°":"FÄng1","è±":"FÄng2","é":"FÄng3","å¯":"FÃ©ng4","é¦®":"FÃ©ng5","å¤":"FÃ¨ng6","é³³":"FÃ¨ng7","ä¼":"FÃº1","æ¶":"FÃº2","ç¬¦":"FÃº3","ç¦":"FÃº4","ä»":"FÃ¹5","å¯":"FÃ¹6","å":"FÃ¹7","ç":"GÃ i1","è":"GÃ i2","å¹²":"GÄn1","ç":"GÄn2","é«":"GÄo1","é":"GÃ o2","æ":"GÄ1","è":"GÃ©2","è¿":"GÄng","å¬":"GÅng1","å¼":"GÅng2","å®«":"GÅng3","å®®":"GÅng4","é¾":"GÅng5","é¾":"GÅng6","å·©":"GÇng7","é":"GÇng8","å¬ä¼¯":"GÅngbÃ³","å¬ä¹":"GÅngchÃ©ng","å¬æ·":"GÅnghÃ¹","å¬å":"GÅngjiÄn","å¬è¯":"GÅngliÃ¡ng","å¬é¨":"GÅngmÃ©n","å¬ä¸":"GÅngshÃ ng","å¬å±±":"GÅngshÄn","å¬å­":"GÅngsÅ«n1","å¬å­«":"GÅngsÅ«n2","å¬è¥¿":"GÅngxÄ«1","å¬ç":"GÅngxÄ«2","å¬ç¾":"GÅngyÃ¡ng","å¬å¶":"GÅngyÄ","å¬ä»ª":"GÅngyÃ­","å¬ç":"GÅngyÃ¹","å¬ä»²":"GÅngzhÃ²ng","å¬ç¥":"GÅngzÇ","è²¢":"GÃ²ng","å¾":"GÅu1","ç·±":"GÅu2","è":"GÇu3","å¤":"GÇ1","è°·":"GÇ2","è´¾":"GÇ3","æ»":"GÇ4","è³":"GÇ5","é¡¾":"GÃ¹6","é¡§":"GÃ¹7","å³":"GuÄn1","å®":"GuÄn2","é":"GuÄn3","å»£":"GuÇng","è´¯ä¸":"GuÃ nqiÅ«","ç®¡":"GuÇn","æ­¸":"GuÄ«1","æ¡":"GuÃ¬2","è°·æ¢":"GÇliÃ¡ng1","ç©ç²±":"GÇliÃ¡ng2","é­":"GuÅ1","å":"GuÃ³2","è¾":"GÅ«","æµ·":"HÇi","é©":"HÃ¡n1","é":"HÃ¡n2","æ­":"HÃ¡ng","é":"HÇo","å":"HÄ","ä½":"HÃ©1","å":"HÃ©2","è´º":"HÃ¨3","è³":"HÃ¨4","èµ«è¿":"HÃ¨liÃ¡n1","èµ«é£":"HÃ¨liÃ¡n2","è¡¡":"HÃ©ng","å¼":"HÃ³ng1","ç´":"HÃ³ng2","æ´ª":"HÃ³ng3","ä¾¯":"HÃ³u1","å":"HÃ²u2","å¾":"HÃ²u3","è¡":"HÃº1","æ":"HÃ¹2","å":"HuÃ¡1","è¯":"HuÃ¡2","æ·":"HuÃ¡i","æ¡":"HuÃ¡n1","å®¦":"HuÃ n2","çç«":"HuÃ¡ngfÇ","é»":"HuÃ¡ng","è±":"HuÄ","æ ":"HuÃ¬","é":"HuÃ²","å¼å»¶":"HÅ«yÃ¡n","å§¬":"JÄ«01","åµ":"JÄ«02","å":"JÃ­03","æ±²":"JÃ­04","ç±":"JÃ­05","è®¡":"JÃ¬06","çºª":"JÃ¬07","ç´":"JÃ¬08","è¨":"JÃ¬09","å­£":"JÃ¬10","è":"JÃ¬11","æ¨":"JÃ¬12","å":"JÃ¬13","å®¶":"JiÄ1","é":"JiÃ¡2","å¤¹è°·":"JiÄgÇ1","å¤¾è°·":"JiÄgÇ2","ç®":"JiÇn1","ç°¡":"JiÇn2","æ±":"JiÄng1","å§":"JiÄng2","è":"JiÇng3","è£":"JiÇng4","ç¦":"JiÄo","æ­":"JiÄ1","è§£":"JiÄ2","å³å¢¨":"JÃ­mÃ²","æ":"JÃ¬n1","æ":"JÃ¬n2","é³":"JÃ¬n3","è":"JÄ«ng1","è":"JÄ«ng2","ç¶":"JÄ«ng3","äº":"JÇng4","æ¯":"JÇng5","é":"JÄ«n","é ":"JÅ«1","ç¿":"JÃ¹2","å±":"JÅ«","åº·":"KÄng1","äº¢":"KÃ ng2","é":"KÃ n","æ¯":"KÄ","ç©º":"KÅng1","å­":"KÇng2","å¯":"KÃ²u","è¯":"KuÇi","å¡":"KuÄng1","æ³":"KuÃ ng2","å¤":"KuÃ­","è":"La1","è":"La2","æ¥":"LÃ¡i1","èµ":"LÃ i2","è³´":"LÃ i3","é":"LÃ¡ng","å°":"LÃ¡n","å":"LÃ¡o","ä¹":"LÃ¨1","æ¨":"LÃ¨2","é·":"LÃ©i","å·":"LÄng","ä¹æ­£":"LÃ¨zhÄng1","æ¨æ­£":"LÃ¨zhÄng2","é»":"LÃ­1","æ":"LÇ2","å©":"LÃ¬3","æ ":"LÃ¬4","å²":"LÃ¬5","é":"LÃ¬6","è¿":"LiÃ¡n1","é£":"LiÃ¡n2","å»":"LiÃ¡n3","æ¢ä¸":"LiÃ¡ngqiÅ«","æ¢":"LiÃ¡ng","ç»":"LiÃ n","å»":"LiÃ o","æ":"LÃ­n1","èº":"LÃ¬n2","ä»¤ç":"LÃ¬nghÃº","å":"LÃ­ng","å":"LiÃº1","å":"LiÃº2","æ³":"LiÇ3","é":"LiÃ¹4","é¸":"LiÃ¹5","é¾":"LÃ³ng1","é¾":"LÃ³ng2","é":"LÅng3","å¨":"LÃ³u1","å©":"LÃ³u2","å¢":"LÃº01","è¦":"LÃº02","ç§":"LÃº03","é²":"LÇ04","é­¯":"LÇ05","ç¥¿":"lÃ¹06","é¯":"LÃ¹07","è·¯":"LÃ¹08","å":"LÇ09","å":"LÇ10","æ ¾":"LuÃ¡n1","æ¬":"LuÃ¡n2","ç½":"LuÅ1","éª":"LuÃ²1","ç¾":"LuÃ³2","é§±":"LuÃ²2","é¾ä¸":"LÇqiÅ«1","é­ä¸":"LÇqiÅ«2","éº»":"MÃ¡1","é©¬":"MÇ2","é¦¬":"MÇ3","éº¦":"MÃ i","æ»¿":"MÇn","æ¯":"MÃ¡o1","è":"MÃ¡o2","æ¢":"MÃ©i","è":"MÄng1","å­":"MÃ¨ng2","ç³":"MÃ­1","ç±³":"MÇ2","å®":"MÃ¬3","è":"MiÃ¡o1","ç¼ª":"MiÃ o2","ç¹":"MiÃ o3","ä¹":"MiÄ","éµ":"MÇn1","é":"MÇn2","æ":"MÃ­ng","è«":"MÃ²1","å¢¨":"MÃ²2","ç":"MÃ³u","æ¨":"MÃ¹1","ç§":"MÃ¹2","æ":"MÃ¹3","ç©":"MÃ¹4","æå®¹":"MÃ¹rÃ³ng","åå®«":"NÃ¡ngÅng1","åå®®":"NÃ¡ngÅng2","åé¨":"NÃ¡nmÃ©n1","åé":"NÃ¡nmÃ©n2","åè£":"NÃ¡nrÃ³ng","é":"NÃ¡o","é£":"NÇ","è½":"NÃ©ng","å¹´":"NiÃ¡n","è":"NiÃ¨1","è¶":"NiÃ¨2","å®":"NÃ­ng1","å¯§":"NÃ­ng2","ç":"NiÃº1","é":"NiÇ2","åª":"NÃ­","è¾²":"NÃ³ng","æ¬§":"Åu1","æ­":"Åu2","æ¬§é³":"ÅuyÃ¡ng1","æ­é½":"ÅuyÃ¡ng2","åº":"PÃ¡ng1","é":"PÃ¡ng2","é¾":"PÃ¡ng3","æ½":"PÄn","è£´":"PÃ©i","å½­":"PÃ©ng1","è¬":"PÃ©ng2","å¹³":"PÃ­ng","ç®":"PÃ­","æ¿®":"PÃº1","è²":"PÃº2","æµ¦":"PÇ3","æ¿®é³":"PÃºyÃ¡ng1","æ¿®é½":"PÃºyÃ¡ng2","ç¥":"QÃ­1","é½":"QÃ­2","é½":"QÃ­3","é±":"QiÃ¡n1","é¢":"QiÃ¡n2","å¼º":"QiÃ¡ng1","å¼·":"QiÃ¡ng2","ä¹":"QiÃ¡o1","å¬":"QiÃ¡o2","è­":"QiÃ¡o3","æ¼é":"QÄ«diÄo","äºå®":"QÃ­guÄn","æ¬½":"QÄ«n1","ç§¦":"QÃ­n2","ç´":"QÃ­n3","ä¸":"QiÅ«1","é±":"QiÅ«2","ç§":"QiÅ«3","è£":"QiÃº4","æ":"QÄ«","æ²":"QÅ«1","å±":"QÅ«2","ç©":"QÃº3","éº´":"QÃº4","å¨":"QuÃ¡n1","æ¬":"QuÃ¡n2","é":"QuÄ","å£¤é©·":"RÇngsÃ¬1","å£¤é§":"RÇngsÃ¬2","å":"RÇn","é¥":"RÃ¡o","ä»»":"RÃ¨n","æ":"RÃ³ng1","å®¹":"RÃ³ng2","æ¦®":"RÃ³ng3","è":"RÃ³ng4","è¹":"RÃº1","æ±":"RÇ2","é®":"RuÇn","è®":"RuÃ¬","æ¡":"SÄng","å":"ShÄng1","è³":"ShÇng2","å°":"ShÃ ng3","ä¸å®":"ShÃ ngguÄn","å±±":"ShÄn","é¶":"ShÃ¡o1","éµ":"ShÃ o2","æ²":"ShÄ","ä½":"ShÃ©1","å":"ShÃ¨2","ç³":"ShÄn1","è":"ShÄn2","æ":"ShÃ¨n3","ç³å± ":"ShÄntÃº","å¸«":"ShÄ«1","æ½":"ShÄ«2","æ¶":"ShÃ­3","æ":"ShÃ­4","å²":"ShÇ5","å£½":"ShÃ²u","æ®³":"ShÅ«1","è":"ShÅ«2","æ":"ShÃ¹3","å¸¥":"ShuÃ i","é":"ShuÄng","æ°´":"ShuÇ","å¸ç©º":"SÄ«kÅng","å¸å¯":"SÄ«kÃ²u","å¸é©¬":"SÄ«mÇ1","å¸é¦¬":"SÄ«mÇ2","å¸å¾":"SÄ«tÃº","å¸":"SÄ«","æ¾":"SÅng1","å®":"SÃ²ng2","è":"SÅ«1","è":"SÅ«2","é":"SuÃ­","å­":"SÅ«n1","å­«":"SÅ«n2","ç´¢":"SuÇ","å®¿":"SÃ¹","ææ":"TÃ bÃ¡1","æè·":"TÃ bÃ¡2","å°":"TÃ¡i1","é°":"TÃ¡i2","å¤ªå²":"TÃ ishÇ2","å¤ªå":"TÃ ishÅ«1","è°":"TÃ¡n1","è¦":"TÃ¡n2","è«":"TÃ¡n3","è°­":"TÃ¡n4","è­":"TÃ¡n5","æ±¤":"TÄng1","æ¹¯":"TÄng2","å":"TÃ¡ng3","é¶":"TÃ¡o","è¾":"TÃ©ng1","æ»":"TÃ©ng2","ç°":"TiÃ¡n","é":"TÅng1","ä½":"TÃ³ng2","ç«¥":"TÃ³ng3","é":"TÇu","æ¶":"TÃº1","å± ":"TÃº2","ä¸":"WÃ n1","è¬":"WÃ n2","æ±ª":"WÄng1","ç":"WÃ¡ng2","ä¸ä¿":"WÃ nsÃ¬","å±":"WÄi1","é¦":"WÃ©i2","é":"WÃ©i3","é":"WÄi4","å«":"WÃ¨i5","ä½":"WÃ¨i6","è¡":"WÃ¨i7","è":"WÃ¨i8","é­":"WÃ¨i9","å°è¿":"WÃ¨ichÃ­1","å°é²":"WÃ¨ichÃ­2","å¾®ç":"WÄishÄng","æº«":"WÄn1","æ¸©":"WÄn2","æ":"WÃ©n3","è":"WÃ©n4","ç¿":"WÄng","é»äºº":"WÃ©nrÃ©n1","èäºº":"WÃ©nrÃ©n2","æ²":"WÃ²","å·«":"WÅ«1","ç":"WÅ«2","é¬":"WÅ«3","é":"WÅ«4","æ¯":"WÃº5","å´":"WÃº6","å³":"WÃº7","ä¼":"WÇ8","æ­¦":"WÇ9","å·«é©¬":"WÅ«mÇ1","å·«é¦¬":"WÅ«mÇ2","ä¹ ":"XÃ­1","å¥":"XÄ«1","å¸­":"XÃ­2","é¤":"XÃ¬2","ç¿":"XÃ­3","è¢­":"XÃ­4","å¤ä¾¯":"XiÃ hÃ³u","å¼":"XiÇn1","å¸":"XiÃ¡n2","ç¸":"XiÄng1","å":"XiÃ ng2","é¡¹":"XiÃ ng3","é ":"XiÃ ng4","é²äº":"XiÄnyÃº1","é®®äº":"XiÄnyÃº2","è§":"XiÄo1","è­":"XiÄo2","è§è":"XiÄoxiÃ o","å¤":"XiÃ ","è°¢":"XiÃ¨1","è¬":"XiÃ¨2","è¥¿é¨":"XÄ«mÃ©n1","è¥¿é":"XÄ«mÃ©n2","å":"XÃ­ng1","é¢":"XÃ­ng2","å§":"XÃ¬ng3","å¹¸":"XÃ¬ng4","è¾":"XÄ«n","ç":"XiÃ³ng","è¥":"XÅ«1","é ":"XÅ«2","è®¸":"XÇ3","è¨±":"XÇ4","è½©è¾":"XuÄnyuÃ¡n1","è»è½":"XuÄnyuÃ¡n2","å®£":"XuÄn","è":"XuÄ","è":"XÃºn","å¾":"XÃº","æ®·":"YÄn01","ç":"YÄn02","é¢":"YÄn03","è¨":"YÃ¡n04","ä¸¥":"YÃ¡n05","é":"YÃ¡n06","é":"YÃ¡n07","é»":"YÃ¡n08","é¢":"YÃ¡n09","é¡":"YÃ¡n10","å´":"YÃ¡n11","æ":"YÃ n12","ç¾":"YÃ¡ng1","é³":"YÃ¡ng2","æ¬":"YÃ¡ng3","æ¨":"YÃ¡ng4","é½":"YÃ¡ng5","æ¥":"YÃ¡ng6","ä»°":"YÇng7","é¤":"YÇng8","ç¾è":"YÃ¡ngshÃ©","å§":"YÃ¡o","å¶":"YÃ¨1","è":"YÃ¨2","è¡£":"YÄ«1","ä¼":"YÄ«2","æ":"YÃ¬3","ç¾¿":"YÃ¬4","ç":"YÃ¬5","é°":"YÄ«n1","é¶":"YÃ­n2","å°¹":"YÇn3","å°":"YÃ¬n4","åº":"YÄ«ng1","æ":"YÄ«ng2","é":"YÅng","å°¤":"YÃ³u1","æ¸¸":"YÃ³u2","æ":"YÇu3","äº":"YÃº01","ä½":"YÃº02","ä¿":"YÃº03","é­":"YÃº04","è":"YÃº05","å®":"YÇ06","ç¦¹":"YÇ07","åº¾":"YÇ08","é":"YÃ¹09","å»":"YÃ¹10","é¬±":"YÃ¹11","å":"YuÃ¡n1","å":"YuÃ¡n2","è¢":"YuÃ¡n3","è":"YuÃ n4","å²³":"YuÃ¨1","è¶":"YuÃ¨2","äº":"YÃºn1","é²":"YÃºn2","å®æ":"YÇwÃ©n","æ¼":"YÅ«","å®°ç¶":"ZÇifÃ¹","å®°":"ZÇi","è§":"ZÄng","æ":"ZÄn","æ¹":"ZhÃ n1","è©¹":"ZhÄn2","å¼ ":"ZhÄng1","å¼µ":"ZhÄng2","ç« ":"ZhÄng3","ä»":"ZhÇng4","èµµ":"ZhÃ o1","è¶":"ZhÃ o2","é":"ZhÃ¨ng1","é­":"ZhÃ¨ng2","ç":"ZhÄn","æ¯":"ZhÄ«1","æ¤":"ZhÃ­2","é":"ZhÅng1","çµ":"ZhÅng2","é¾":"ZhÅng3","ä»²":"ZhÃ²ng4","ä»²é¿":"ZhÃ²ngchÃ¡ng","éç¦»":"ZhÅnglÃ­1","éé¢":"ZhÅnglÃ­2","ä»²å­":"ZhÃ²ngsÅ«n1","ä»²å­«":"ZhÃ²ngsÅ«n2","å¨":"ZhÅu","æ±":"ZhÅ«1","ç«º":"ZhÃº1","ç¥":"ZhÃ¹2","è«¸":"ZhÅ«2","åº":"ZhuÄng1","è":"ZhuÄng2","é¢å­":"ZhuÄnsÅ«n1","é¡å­«":"ZhuÄnsÅ«n2","è¯¸è":"ZhÅ«gÃ©1","è«¸è":"ZhÅ«gÃ©2","å":"ZhuÃ³","å­è½¦":"ZÇchÄ1","å­è»":"ZÇchÄ2","å­æ¡":"ZÇsÄng","å­ä¹¦":"ZÇshÅ«","è¨¾":"ZÄ«","å®æ¿":"ZÅngzhÃ¨ng","å®":"ZÅng","é¹":"ZÅu1","é":"ZÅu2","å·¦":"ZuÇ3","å·¦ä¸":"ZuÇqiÅ«","ç¥":"ZÇ"}};
/*
 * nameprs.js - Person name parser
 *
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
ilibglobal.js 
locale.js
util/utils.js 
ctype.isalpha.js 
ctype.isideo.js 
ctype.ispunct.js 
ctype.isspace.js
util/jsutils.js 
*/

// !data name

// notes:
// icelandic given names: http://en.wiktionary.org/wiki/Appendix:Icelandic_given_names
// danish approved given names: http://www.familiestyrelsen.dk/samliv/navne/
// http://www.mentalfloss.com/blogs/archives/59277
// other countries with first name restrictions: Norway, China, New Zealand, Japan, Sweden, Germany, Hungary

/**
 * @class
 * A class to parse names of people. Different locales have different conventions when it
 * comes to naming people.<p>
 *
 * The options can contain any of the following properties:
 *
 * <ul>
 * <li><i>locale</i> - use the rules and conventions of the given locale in order to parse
 * the name
 * <li><i>style</i> - explicitly use the named style to parse the name. Valid values so
 * far are "western" and "asian". If this property is not specified, then the style will
 * be gleaned from the name itself. This class will count the total number of Latin or Asian
 * characters. If the majority of the characters are in one style, that style will be
 * used to parse the whole name.
 * <li><i>order</i> - explicitly use the given order for names. In some locales, such
 * as Russian, names may be written equally validly as "givenName familyName" or "familyName
 * givenName". This option tells the parser which order to prefer, and overrides the
 * default order for the locale. Valid values are "gf" (given-family) or "fg" (family-given).
 * <li><i>useSpaces</i> - explicitly specifies whether to use spaces or not between the given name , middle name
 * and family name.
 * <li>onLoad - a callback function to call when the name info is fully
 * loaded and the name has been parsed. When the onLoad option is given, the name object
 * will attempt to load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 *
 * <li>sync - tell whether to load any missing locale data synchronously or
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 *
 * When the parser has completed its parsing, it fills in the fields listed below.<p>
 *
 * For names that include auxilliary words, such as the family name "van der Heijden", all
 * of the auxilliary words ("van der") will be included in the field.<p>
 *
 * For names in Spanish locales, it is assumed that the family name is doubled. That is,
 * a person may have a paternal family name followed by a maternal family name. All
 * family names will be listed in the familyName field as normal, separated by spaces.
 * When formatting the short version of such names, only the paternal family name will
 * be used.
 *
 * Depends directive: !depends nameprs.js
 *
 * @constructor
 * @dict
 * @param {string|ilib.Name=} name the name to parse
 * @param {Object=} options Options governing the construction of this name instance
 */
ilib.Name = function (name, options) {
    var sync = true;

    if (typeof (name) === 'object') {
        // copy constructor
        /**
         * The prefixes for this name
         * @type string
         */
        this.prefix = name.prefix;
        /**
         * The given (personal) name in this name.
         * @type string
         */
        this.givenName = name.givenName;
        /**
         * The middle names used in this name. If there are multiple middle names, they all
         * appear in this field separated by spaces.
         * @type string
         */
        this.middleName = name.middleName;
        /**
         * The family names in this name. If there are multiple family names, they all
         * appear in this field separated by spaces.
         * @type string
         */
        this.familyName = name.familyName;
        /**
         * The suffixes for this name. If there are multiple suffixes, they all
         * appear in this field separated by spaces.
         * @type string
         */
        this.suffix = name.suffix;

        // private properties
        this.locale = name.locale;
        this.style = name.style;
        this.order = name.order;
        this.useSpaces = name.useSpaces;
        return;
    }

    this.loadParams = {};

    if (options) {
        if (options.locale) {
            this.locale = (typeof (options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
        }

        if (options.style && (options.style === "asian" || options.style === "western")) {
            this.style = options.style;
        }

        if (options.order && (options.order === "gmf" || options.order === "fmg" || options.order === "fgm")) {
            this.order = options.order;
        }

        if (typeof (options.sync) !== 'undefined') {
            sync = (options.sync == true);
        }

        if (typeof (options.loadParams) !== 'undefined') {
            this.loadParams = options.loadParams;
        }
    }

    if (!ilib.Name.cache) {
        ilib.Name.cache = {};
    }

	this.locale = this.locale || new ilib.Locale();
	
	ilib.CType.isAlpha._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
		ilib.CType.isIdeo._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
			ilib.CType.isPunct._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
				ilib.CType.isSpace._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
					ilib.loadData({
						object: ilib.Name, 
						locale: this.locale, 
						name: "name.json", 
						sync: sync, 
						loadParams: this.loadParams, 
						callback: ilib.bind(this, function (info) {
							if (!info) {
								info = ilib.Name.defaultInfo;
								var spec = this.locale.getSpec().replace(/-/g, "_");
								ilib.Name.cache[spec] = info;
							}
							this.info = info;
							this._init(name);
							if (options && typeof(options.onLoad) === 'function') {
								options.onLoad(this);
							}
						})
					});					
				}));
			}));
		}));
	}));
};

ilib.Name.defaultInfo = ilib.data.name ||  {
	"components": {
		"short": {
			"g": 1,
			"f": 1
		},
		"medium": {
			"g": 1,
			"m": 1,
			"f": 1
		},
		"long": {
			"p": 1,
			"g": 1,
			"m": 1,
			"f": 1
		},
		"full": {
			"p": 1,
			"g": 1,
			"m": 1,
			"f": 1,
			"s": 1
		}
	},
	"format": "{prefix} {givenName} {middleName} {familyName}{suffix}",
	"sortByHeadWord": false,
	"nameStyle": "western",
	"conjunctions": {
		"and1": "and",
		"and2": "and",
		"or1": "or",
		"or2": "or"
	},
	"auxillaries": {
		"von": 1,
		"von der": 1,
		"von den": 1,
		"van": 1,
		"van der": 1,
        "van de": 1,
        "van den": 1,
        "de": 1,
        "di": 1,
	    "de": 1,
		"la": 1,
		"lo": 1,
        "des": 1,
        "le": 1,
        "les": 1,
		"du": 1,
        "de la": 1,
        "del": 1,
        "de los": 1,
        "de las": 1
	},
	"prefixes": [
		"doctor",
		"dr",
		"mr",
		"mrs",
		"ms",
		"mister",
		"madame",
		"madamoiselle",
		"miss",
		"monsieur",
		"seÃ±or",
        "seÃ±ora",
        "seÃ±orita"
	],
	"suffixes": [
		",",
		"junior",
		"jr",
		"senior",
		"sr",
		"i",
		"ii",
		"iii",
		"esq",
		"phd",
		"md"
	]
};

/**
 * @static
 * @protected
 * Return true if the given character is in the range of the Han, Hangul, or kana
 * scripts.
 */
ilib.Name._isAsianChar = function(c) {
	return ilib.CType.isIdeo(c) ||
		ilib.CType.withinRange(c, "hangul") ||
		ilib.CType.withinRange(c, "hiragana") ||
		ilib.CType.withinRange(c, "katakana");
};


/**
 * @static
 * @protected
 */
ilib.Name._isAsianName = function (name) {
    // the idea is to count the number of asian chars and the number
    // of latin chars. If one is greater than the other, choose
    // that style.
    var asian = 0,
        latin = 0,
        i;

    if (name && name.length > 0) {
        for (i = 0; i < name.length; i++) {
        	var c = name.charAt(i);
             
            if (ilib.Name._isAsianChar(c)) {
                asian++;
            } else if (ilib.CType.isAlpha(c)) {
                latin++;
            }
        }

        return latin < asian;
    }

    return false;
};

/**
 * @static
 * @protected
 * Return true if any Latin letters are found in the string. Return
 * false if all the characters are non-Latin.
 */
ilib.Name._isEuroName = function (name) {
    var c,
        n = new ilib.String(name),
        it = n.charIterator();

    while (it.hasNext()) {
        c = it.next();

        if (!ilib.Name._isAsianChar(c) && !ilib.CType.isPunct(c) && !ilib.CType.isSpace(c)) {
            return true;
        }
    }

    return false;
};

ilib.Name.prototype = {
    /**
     * @protected
     */
    _init: function (name) {
        var parts, prefixArray, prefix, prefixLower,
            suffixArray, suffix, suffixLower,
            asianName, i, info, hpSuffix;

        if (name) {
            // for DFISH-12905, pick off the part that the LDAP server automatically adds to our names in HP emails
            i = name.search(/\s*[,\(\[\{<]/);
            if (i !== -1) {
                hpSuffix = name.substring(i);
                hpSuffix = hpSuffix.replace(/\s+/g, ' '); // compress multiple whitespaces
                suffixArray = hpSuffix.split(" ");
                var conjunctionIndex = this._findLastConjunction(suffixArray);
                if (conjunctionIndex > -1) {
                    // it's got conjunctions in it, so this is not really a suffix
                    hpSuffix = undefined;
                } else {
                    name = name.substring(0, i);
                }
            }

            if (this.info.nameStyle === "asian" || this.info.order === "fmg" || this.info.order === "fgm") {
                asianName = !ilib.Name._isEuroName(name);
                info = asianName ? this.info : ilib.data.name;
            } else {
                asianName = ilib.Name._isAsianName(name);
                info = asianName ? ilib.data.name : this.info;
            }

            if (asianName) {
                // all-asian names
                if (this.useSpaces == false) {
                    name = name.replace(/\s+/g, ''); // eliminate all whitespaces
                }
                parts = name.trim().split('');
            }
            //} 
            else {
                name = name.replace(/, /g, ' , ');
                name = name.replace(/\s+/g, ' '); // compress multiple whitespaces
                parts = name.trim().split(' ');
            }

            // check for prefixes
            if (parts.length > 1) {
                for (i = parts.length; i > 0; i--) {
                    prefixArray = parts.slice(0, i);
                    prefix = prefixArray.join(asianName ? '' : ' ');
                    prefixLower = prefix.toLowerCase();
                    prefixLower = prefixLower.replace(/[,\.]/g, ''); // ignore commas and periods
                    if (this.info.prefixes &&
                        (this.info.prefixes.indexOf(prefixLower) > -1 || this._isConjunction(prefixLower))) {
                        if (this.prefix) {
                            if (!asianName) {
                                this.prefix += ' ';
                            }
                            this.prefix += prefix;
                        } else {
                            this.prefix = prefix;
                        }
                        parts = parts.slice(i);
                        i = parts.length;
                    }
                }
            }
            // check for suffixes
            if (parts.length > 1) {
                for (i = parts.length; i > 0; i--) {
                    suffixArray = parts.slice(-i);
                    suffix = suffixArray.join(asianName ? '' : ' ');
                    suffixLower = suffix.toLowerCase();
                    suffixLower = suffixLower.replace(/[\.]/g, ''); // ignore periods
                    if (this.info.suffixes && this.info.suffixes.indexOf(suffixLower) > -1) {
                        if (this.suffix) {
                            if (!asianName && !ilib.CType.isPunct(this.suffix.charAt(0))) {
                                this.suffix = ' ' + this.suffix;
                            }
                            this.suffix = suffix + this.suffix;
                        } else {
                            this.suffix = suffix;
                        }
                        parts = parts.slice(0, parts.length - i);
                        i = parts.length;
                    }
                }
            }

            if (hpSuffix) {
                this.suffix = (this.suffix && this.suffix + hpSuffix) || hpSuffix;
            }

            // adjoin auxillary words to their headwords
            if (parts.length > 1 && !asianName) {
                parts = this._joinAuxillaries(parts, asianName);
            }

            if (asianName) {
                this._parseAsianName(parts);
            } else {
                this._parseWesternName(parts);
            }

            this._joinNameArrays();
        }
    },

    /**
	 * @return {number} 
	 *
	_findSequence: function(parts, hash, isAsian) {
		var sequence, sequenceLower, sequenceArray, aux = [], i, ret = {};
		
		if (parts.length > 0 && hash) {
			//console.info("_findSequence: finding sequences");
			for (var start = 0; start < parts.length-1; start++) {
				for ( i = parts.length; i > start; i-- ) {
					sequenceArray = parts.slice(start, i);
					sequence = sequenceArray.join(isAsian ? '' : ' ');
					sequenceLower = sequence.toLowerCase();
					sequenceLower = sequenceLower.replace(/[,\.]/g, '');  // ignore commas and periods
					
					//console.info("_findSequence: checking sequence: '" + sequenceLower + "'");
					
					if ( sequenceLower in hash ) {
						ret.match = sequenceArray;
						ret.start = start;
						ret.end = i;
						return ret;
						//console.info("_findSequence: Found sequence '" + sequence + "' New parts list is " + JSON.stringify(parts));
					}
				}
			}
		}
	
		return undefined;
	},
	*/

    /**
     * @protected
     */
    _findPrefix: function (parts, names, isAsian) {
        var i, prefix, prefixLower, prefixArray, aux = [];

        if (parts.length > 0 && names) {
            for (i = parts.length; i > 0; i--) {
                prefixArray = parts.slice(0, i);
                prefix = prefixArray.join(isAsian ? '' : ' ');
                prefixLower = prefix.toLowerCase();
                prefixLower = prefixLower.replace(/[,\.]/g, ''); // ignore commas and periods

                if (prefixLower in names) {
                    aux = aux.concat(isAsian ? prefix : prefixArray);
                    parts = parts.slice(i);
                    i = parts.length + 1;
                }
            }
        }

        return aux;
    },

    /**
     * @protected
     */
    _findSuffix: function (parts, names, isAsian) {
        var i, j, seq = "";

        for (i = 0; i < names.length; i++) {
            if (parts.length >= names[i].length) {
                j = 0;
                while (j < names[i].length && parts[parts.length - j] === names[i][names[i].length - j]) {
                    j++;
                }
                if (j >= names[i].length) {
                    seq = parts.slice(parts.length - j).join(isAsian ? "" : " ") + (isAsian ? "" : " ") + seq;
                    parts = parts.slice(0, parts.length - j);
                    i = -1; // restart the search
                }
            }
        }

        this.suffix = seq;
        return parts;
    },

    /**
     * @protected
     * Tell whether or not the given word is a conjunction in this language.
     * @param {string} word the word to test
     * @return {boolean} true if the word is a conjunction
     */
    _isConjunction: function _isConjunction(word) {
        return (this.info.conjunctions.and1 === word ||
            this.info.conjunctions.and2 === word ||
            this.info.conjunctions.or1 === word ||
            this.info.conjunctions.or2 === word ||
            ("&" === word) ||
            ("+" === word));
    },

    /**
     * @protected
     * Find the last instance of 'and' in the name
     * @param {Array.<string>} parts
     * @return {number}
     */
    _findLastConjunction: function _findLastConjunction(parts) {
        var conjunctionIndex = -1,
            index, part;

        for (index = 0; index < parts.length; index++) {
            part = parts[index];
            if (typeof (part) === 'string') {
                part = part.toLowerCase();
                // also recognize English
                if ("and" === part || "or" === part || "&" === part || "+" === part) {
                    conjunctionIndex = index;
                }
                if (this._isConjunction(part)) {
                    conjunctionIndex = index;
                }
            }
        }
        return conjunctionIndex;
    },

    /**
     * @protected
     * @param {Array.<string>} parts the current array of name parts
     * @param {boolean} isAsian true if the name is being parsed as an Asian name
     * @return {Array.<string>} the remaining parts after the prefixes have been removed
     */
    _extractPrefixes: function (parts, isAsian) {
        var i = this._findPrefix(parts, this.info.prefixes, isAsian);
        if (i > 0) {
            this.prefix = parts.slice(0, i).join(isAsian ? "" : " ");
            return parts.slice(i);
        }
        // prefixes not found, so just return the array unmodified
        return parts;
    },

    /**
     * @protected
     * @param {Array.<string>} parts the current array of name parts
     * @param {boolean} isAsian true if the name is being parsed as an Asian name
     * @return {Array.<string>} the remaining parts after the suffices have been removed
     */
    _extractSuffixes: function (parts, isAsian) {
        var i = this._findSuffix(parts, this.info.suffixes, isAsian);
        if (i > 0) {
            this.suffix = parts.slice(i).join(isAsian ? "" : " ");
            return parts.slice(0, i);
        }
        // suffices not found, so just return the array unmodified
        return parts;
    },

    /**
     * @protected
     * Adjoin auxillary words to their head words.
     * @param {Array.<string>} parts the current array of name parts
     * @param {boolean} isAsian true if the name is being parsed as an Asian name
     * @return {Array.<string>} the parts after the auxillary words have been plucked onto their head word
     */
    _joinAuxillaries: function (parts, isAsian) {
        var start, i, prefixArray, prefix, prefixLower;

        if (this.info.auxillaries && (parts.length > 2 || this.prefix)) {
            for (start = 0; start < parts.length - 1; start++) {
                for (i = parts.length; i > start; i--) {
                    prefixArray = parts.slice(start, i);
                    prefix = prefixArray.join(' ');
                    prefixLower = prefix.toLowerCase();
                    prefixLower = prefixLower.replace(/[,\.]/g, ''); // ignore commas and periods

                    if (prefixLower in this.info.auxillaries) {
                        parts.splice(start, i + 1 - start, prefixArray.concat(parts[i]));
                        i = start;
                    }
                }
            }
        }

        return parts;
    },

    /**
     * @protected
     * Recursively join an array or string into a long string.
     */
    _joinArrayOrString: function _joinArrayOrString(part) {
        var i;
        if (typeof (part) === 'object') {
            for (i = 0; i < part.length; i++) {
                part[i] = this._joinArrayOrString(part[i]);
            }
            var ret = "";
            part.forEach(function (segment) {
                if (ret.length > 0 && !ilib.CType.isPunct(segment.charAt(0))) {
                    ret += ' ';
                }
                ret += segment;
            });

            return ret;
        }

        return part;
    },

    /**
     * @protected
     */
    _joinNameArrays: function _joinNameArrays() {
        var prop;
        for (prop in this) {

            if (this[prop] !== undefined && typeof (this[prop]) === 'object' && this[prop] instanceof Array) {

                this[prop] = this._joinArrayOrString(this[prop]);
            }
        }
    },

    /**
     * @protected
     */
    _parseAsianName: function (parts) {
        var familyNameArray = this._findPrefix(parts, this.info.knownFamilyNames, true);

        if (familyNameArray && familyNameArray.length > 0) {
            this.familyName = familyNameArray.join('');

            this.givenName = parts.slice(this.familyName.length).join('');

        } else if (this.suffix || this.prefix) {
            this.familyName = parts.join('');

        } else {
            this.givenName = parts.join('');

        }
    },

    /**
     * @protected
     */
    _parseSpanishName: function (parts) {
        var conjunctionIndex;

        if (parts.length === 1) {
            if (this.prefix || typeof (parts[0]) === 'object') {
                this.familyName = parts[0];
            } else {
                this.givenName = parts[0];
            }
        } else if (parts.length === 2) {
            // we do G F
            this.givenName = parts[0];
            this.familyName = parts[1];
        } else if (parts.length === 3) {
            conjunctionIndex = this._findLastConjunction(parts);
            // if there's an 'and' in the middle spot, put everything in the first name
            if (conjunctionIndex === 1) {
                this.givenName = parts;
            } else {
                // else, do G F F
                this.givenName = parts[0];
                this.familyName = parts.slice(1);
            }
        } else if (parts.length > 3) {
            //there are at least 4 parts to this name

            conjunctionIndex = this._findLastConjunction(parts);
            ////console.log("@@@@@@@@@@@@@@@@"+conjunctionIndex)
            if (conjunctionIndex > 0) {
                // if there's a conjunction that's not the first token, put everything up to and 
                // including the token after it into the first name, the last 2 tokens into
                // the family name (if they exist) and everything else in to the middle name
                // 0 1 2 3 4 5
                // G A G
                // G A G F
                // G G A G
                // G A G F F
                // G G A G F
                // G G G A G
                // G A G M F F
                // G G A G F F
                // G G G A G F
                // G G G G A G
                this.givenName = parts.splice(0, conjunctionIndex + 2);
                if (parts.length > 1) {
                    this.familyName = parts.splice(parts.length - 2, 2);
                    if (parts.length > 0) {
                        this.middleName = parts;
                    }
                } else if (parts.length === 1) {
                    this.familyName = parts[0];
                }
            } else {
                this.givenName = parts.splice(0, 1);
                this.familyName = parts.splice(parts.length - 2, 2);
                this.middleName = parts;
            }
        }
    },

    _parseIndonesianName: function (parts) {
        var conjunctionIndex;

        if (parts.length === 1) {
            //if (this.prefix || typeof(parts[0]) === 'object') {
            //this.familyName = parts[0];
            //} else {
            this.givenName = parts[0];
            //}
            //} else if (parts.length === 2) {
            // we do G F
            //this.givenName = parts[0];
            //this.familyName = parts[1];
        } else if (parts.length >= 2) {
            //there are at least 3 parts to this name

            conjunctionIndex = this._findLastConjunction(parts);
            if (conjunctionIndex > 0) {
                // if there's a conjunction that's not the first token, put everything up to and 
                // including the token after it into the first name, the last 2 tokens into
                // the family name (if they exist) and everything else in to the middle name
                // 0 1 2 3 4 5
                // G A G
                // G A G F
                // G G A G
                // G A G F F
                // G G A G F
                // G G G A G
                // G A G M F F
                // G G A G F F
                // G G G A G F
                // G G G G A G
                this.givenName = parts.splice(0, conjunctionIndex + 2);
                if (parts.length > 1) {
                    //this.familyName = parts.splice(parts.length-2, 2);
                    //if ( parts.length > 0 ) {
                    this.middleName = parts;
                }
                //} else if (parts.length === 1) {
                //	this.familyName = parts[0];
                //}
            } else {
                this.givenName = parts.splice(0, 1);
                //this.familyName = parts.splice(parts.length-2, 2);
                this.middleName = parts;
            }
        }
    },
    
    _parseGenericWesternName: function (parts) {
        /* Western names are parsed as follows, and rules are applied in this 
         * order:
         *
         * G
         * G F
         * G M F
         * G M M F
         * P F
         * P G F
         */
        var conjunctionIndex;

        if (parts.length === 1) {
            if (this.prefix || typeof (parts[0]) === 'object') {
                // already has a prefix, so assume it goes with the family name like "Dr. Roberts" or
                // it is a name with auxillaries, which is almost always a family name
                this.familyName = parts[0];
            } else {
                this.givenName = parts[0];
            }
        } else if (parts.length === 2) {
            // we do G F
            if (this.info.order == 'fgm') {
                this.givenName = parts[1];
                this.familyName = parts[0];
            } else if (this.info.order == "gmf" || typeof (this.info.order) == 'undefined') {
                this.givenName = parts[0];
                this.familyName = parts[1];
            }
        } else if (parts.length >= 3) {
            //find the first instance of 'and' in the name
            conjunctionIndex = this._findLastConjunction(parts);

            if (conjunctionIndex > 0) {
                // if there's a conjunction that's not the first token, put everything up to and 
                // including the token after it into the first name, the last token into
                // the family name (if it exists) and everything else in to the middle name
                // 0 1 2 3 4 5
                // G A G M M F
                // G G A G M F
                // G G G A G F
                // G G G G A G
                //if(this.order == "gmf") {
                this.givenName = parts.slice(0, conjunctionIndex + 2);

                if (conjunctionIndex + 1 < parts.length - 1) {
                    this.familyName = parts.splice(parts.length - 1, 1);
                    ////console.log(this.familyName);
                    if (conjunctionIndex + 2 < parts.length - 1) {
                        this.middleName = parts.slice(conjunctionIndex + 2, parts.length - conjunctionIndex - 3);
                    }
                } else if (this.order == "fgm") {
                    this.familyName = parts.slice(0, conjunctionIndex + 2);
                    if (conjunctionIndex + 1 < parts.length - 1) {
                        this.middleName = parts.splice(parts.length - 1, 1);
                        if (conjunctionIndex + 2 < parts.length - 1) {
                            this.givenName = parts.slice(conjunctionIndex + 2, parts.length - conjunctionIndex - 3);
                        }
                    }
                }
            } else {
                this.givenName = parts[0];

                this.middleName = parts.slice(1, parts.length - 1);

                this.familyName = parts[parts.length - 1];
            }
        }
    },
    
    /**
     * @protected
     */
    _parseWesternName: function (parts) {

        if (this.locale.getLanguage() === "es" || this.locale.getLanguage() === "pt") {
            // in spain and mexico and portugal, we parse names differently than in the rest of the world 
            // because of the double family names
            this._parseSpanishName(parts);
        } else if (this.locale.getLanguage() === "ru") {
            /*
             * In Russian, names can be given equally validly as given-family
             * or family-given. Use the value of the "order" property of the
             * constructor options to give the default when the order is ambiguous.
             */
            // TODO: this._parseRussianName(parts);
        	this._parseGenericWesternName(parts); // for now, just do western names
        } else if (this.locale.getLanguage() === "id") {
            // in indonesia, we parse names differently than in the rest of the world 
            // because names don't have family names usually.
            this._parseIndonesianName(parts);
        } else {
        	this._parseGenericWesternName(parts);
        }
    },

    /**
     * When sorting names with auxiliary words (like "van der" or "de los"), determine
     * which is the "head word" and return a string that can be easily sorted by head
     * word. In English, names are always sorted by initial characters. In places like
     * the Netherlands or Germany, family names are sorted by the head word of a list
     * of names rather than the first element of that name.
     * @return {string|undefined} a string containing the family name[s] to be used for sorting
     * in the current locale, or undefined if there is no family name in this object
     */
    getSortFamilyName: function () {
        var name,
            auxillaries,
            auxString,
            parts,
            i;

        // no name to sort by
        if (!this.familyName) {
            return undefined;
        }

        // first break the name into parts
        if (this.info) {
            if (this.info.sortByHeadWord) {
                if (typeof (this.familyName) === 'string') {
                    name = this.familyName.replace(/\s+/g, ' '); // compress multiple whitespaces
                    parts = name.trim().split(' ');
                } else {
                    // already split
                    parts = /** @type Array */ this.familyName;
                }

                auxillaries = this._findPrefix(parts, this.info.auxillaries, false);
                if (auxillaries && auxillaries.length > 0) {
                    if (typeof (this.familyName) === 'string') {
                        auxString = auxillaries.join(' ');
                        name = this.familyName.substring(auxString.length + 1) + ', ' + auxString;
                    } else {
                        name = parts.slice(auxillaries.length).join(' ') +
                            ', ' +
                            parts.slice(0, auxillaries.length).join(' ');
                    }
                }
            } else if (this.info.knownFamilyNames && this.familyName) {
                parts = this.familyName.split('');
                var familyNameArray = this._findPrefix(parts, this.info.knownFamilyNames, true);
                name = "";
                for (i = 0; i < familyNameArray.length; i++) {
                    name += (this.info.knownFamilyNames[familyNameArray[i]] || "");
                }
            }
        }

        return name || this.familyName;
    },

    getHeadFamilyName: function () {},

    /** 
     * @protected
     * Return a shallow copy of the current instance.
     */
    clone: function () {
        var other = new ilib.Name();
        ilib.shallowCopy(this, other);
        return other;
    }
};

/*
 * namefmt.js - Format person names for display
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
ilibglobal.js
locale.js
strings.js
nameprs.js
ctype.ispunct.js
*/

// !data name

/**
 * @class
 * Creates a formatter that can format person name instances (ilib.Name) for display to
 * a user. The options may contain the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - Use the conventions of the given locale to construct the name format. 
 * <li><i>style</i> - Format the name with the given style. The value of this property
 * should be one of the following strings: 
 *   <ul>
 *     <li><i>short</i> - Format a short name with just the given and family names.
 *     <li><i>medium</i> - Format a medium-length name with the given, middle, and family names.
 *     <li><i>long</i> - Format a long name with all names available in the given name object, including
 *     prefixes and suffixes.
 *   </ul>
 * <li><i>components</i> - Format the name with the given components in the correct
 * order for those components. Components are encoded as a string of letters representing
 * the desired components:
 *   <ul>
 *     <li><i>p</i> - prefixes
 *     <li><i>g</i> - given name
 *     <li><i>m</i> - middle names
 *     <li><i>f</i> - family name
 *     <li><i>s</i> - suffixes
 *   </ul>
 * <p>
 * 
 * For example, the string "pf" would mean to only format any prefixes and family names 
 * together and leave out all the other parts of the name.<p>
 * 
 * The components can be listed in any order in the string. The <i>components</i> option 
 * overrides the <i>style</i> option if both are specified.
 *
 * <li>onLoad - a callback function to call when the locale info object is fully 
 * loaded. When the onLoad option is given, the localeinfo object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Formatting names is a locale-dependent function, as the order of the components 
 * depends on the locale. The following explains some of the details:<p>
 * 
 * <ul>
 * <li>In Western countries, the given name comes first, followed by a space, followed 
 * by the family name. In Asian countries, the family name comes first, followed immediately
 * by the given name with no space. But, that format is only used with Asian names written
 * in ideographic characters. In Asian countries, especially ones where both an Asian and 
 * a Western language are used (Hong Kong, Singapore, etc.), the convention is often to 
 * follow the language of the name. That is, Asian names are written in Asian style, and 
 * Western names are written in Western style. This class follows that convention as
 * well. 
 * <li>In other Asian countries, Asian names
 * written in Latin script are written with Asian ordering. eg. "Xu Ping-an" instead
 * of the more Western order "Ping-an Xu", as the order is thought to go with the style
 * that is appropriate for the name rather than the style for the language being written.
 * <li>In some Spanish speaking countries, people often take both their maternal and
 * paternal last names as their own family name. When formatting a short or medium style
 * of that family name, only the paternal name is used. In the long style, all the names
 * are used. eg. "Juan Julio Raul Lopez Ortiz" took the name "Lopez" from his father and 
 * the name "Ortiz" from his mother. His family name would be "Lopez Ortiz". The formatted
 * short style of his name would be simply "Juan Lopez" which only uses his paternal
 * family name of "Lopez".
 * <li>In many Western languages, it is common to use auxillary words in family names. For
 * example, the family name of "Ludwig von Beethoven" in German is "von Beethoven", not 
 * "Beethoven". This class ensures that the family name is formatted correctly with 
 * all auxillary words.   
 * </ul>
 * 
 * Depends directive: !depends namefmt.js
 * 
 * @constructor
 * @param {Object} options A set of options that govern how the formatter will behave
 */
ilib.NameFmt = function(options) {
	var sync = true;
	
	this.style = "short";
	this.loadParams = {};
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.style) {
			this.style = options.style;
		}
		
		if (options.components) {
			this.components = options.components;
		}
		
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			this.loadParams = options.loadParams;
		}
	}
	
	// set up defaults in case we need them
	this.defaultEuroTemplate = new ilib.String("{prefix} {givenName} {middleName} {familyName}{suffix}");
	this.defaultAsianTemplate = new ilib.String("{prefix}{familyName}{givenName}{middleName}{suffix}");
	this.useFirstFamilyName = false;

	switch (this.style) {
		default:
		case "s":
		case "short":
			this.style = "short";
			break;
		case "m":
		case "medium":
			this.style = "medium";
			break;
		case "l":
		case "long":
			this.style = "long";
			break;
		case "f":
		case "full":
			this.style = "full";
			break;
	}

	if (!ilib.Name.cache) {
		ilib.Name.cache = {};
	}

	this.locale = this.locale || new ilib.Locale();
	
	ilib.CType.isPunct._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
		ilib.loadData({
			object: ilib.Name, 
			locale: this.locale, 
			name: "name.json", 
			sync: sync, 
			loadParams: this.loadParams, 
			callback: ilib.bind(this, function (info) {
				if (!info) {
					info = ilib.Name.defaultInfo;
					var spec = this.locale.getSpec().replace(/-/g, "_");
					ilib.Name.cache[spec] = info;
				}
				this.info = info;
				this._init();
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			})
		});
	}));
};

ilib.NameFmt.prototype = {
	/**                          
	 * @protected
	 */
	_init: function() {
		if (this.components) {
			var valids = {"p":1,"g":1,"m":1,"f":1,"s":1},
				arr = this.components.split("");
			this.comps = {};
			for (var i = 0; i < arr.length; i++) {
				if (valids[arr[i].toLowerCase()]) {
					this.comps[arr[i].toLowerCase()] = true;
				}
			}
		} else {
			this.comps = this.info.components[this.style];
		}

		this.template = new ilib.String(this.info.format);
		
		if (this.locale.language === "es" && (this.style !== "long" && this.style !== "full")) {
			this.useFirstFamilyName = true;	// in spanish, they have 2 family names, the maternal and paternal
		}

		this.isAsianLocale = (this.info.nameStyle === "asian");
	},

	/**
	 * @protected
	 * adjoin auxillary words to their head words
	 */
	_adjoinAuxillaries: function (parts, namePrefix) {
		var start, i, prefixArray, prefix, prefixLower;
		
		//console.info("_adjoinAuxillaries: finding and adjoining aux words in " + parts.join(' '));
		
		if ( this.info.auxillaries && (parts.length > 2 || namePrefix) ) {
			for ( start = 0; start < parts.length-1; start++ ) {
				for ( i = parts.length; i > start; i-- ) {
					prefixArray = parts.slice(start, i);
					prefix = prefixArray.join(' ');
					prefixLower = prefix.toLowerCase();
					prefixLower = prefixLower.replace(/[,\.]/g, '');  // ignore commas and periods
					
					//console.info("_adjoinAuxillaries: checking aux prefix: '" + prefixLower + "' which is " + start + " to " + i);
					
					if ( prefixLower in this.info.auxillaries ) {
						//console.info("Found! Old parts list is " + JSON.stringify(parts));
						parts.splice(start, i+1-start, prefixArray.concat(parts[i]));
						//console.info("_adjoinAuxillaries: Found! New parts list is " + JSON.stringify(parts));
						i = start;
					}
				}
			}
		}
		
		//console.info("_adjoinAuxillaries: done. Result is " + JSON.stringify(parts));

		return parts;
	},

	/**
	 * Return the locale for this formatter instance.
	 * @return {ilib.Locale} the locale instance for this formatter
	 */
	getLocale: function () {
		return this.locale;
	},
	
	/**
	 * Return the style of names returned by this formatter
	 * @return {string} the style of names returned by this formatter
	 */
	getStyle: function () {
		return this.style;
	},
	
	/**
	 * Return the list of components used to format names in this formatter
	 * @return {string} the list of components
	 */
	getComponents: function () {
		return this.components;
	},
	
	/**
	 * Format the name for display in the current locale with the options set up
	 * in the constructor of this formatter instance.<p>
	 * 
	 * If the name does not contain all the parts required for the style, those parts
	 * will be left blank.<p>
	 * 
	 * There are two basic styles of formatting: European, and Asian. If this formatter object
	 * is set for European style, but an Asian name is passed to the format method, then this
	 * method will format the Asian name with a generic Asian template. Similarly, if the
	 * formatter is set for an Asian style, and a European name is passed to the format method,
	 * the formatter will use a generic European template.<p>
	 * 
	 * This means it is always safe to format any name with a formatter for any locale. You should
	 * always get something at least reasonable as output.<p>
	 * 
	 * @param {ilib.Name} name the name to format
	 * @return {string|undefined} the name formatted according to the style of this formatter instance
	 */
	format: function(name) {
		var formatted, temp, modified, isAsianName;
		
		if (!name || typeof(name) !== 'object') {
			return undefined;
		}
		
		if ((!name.givenName || ilib.Name._isEuroName(name.givenName)) &&
				 (!name.middleName || ilib.Name._isEuroName(name.middleName)) &&
				 (!name.familyName || ilib.Name._isEuroName(name.familyName))) {
			isAsianName = false;	// this is a euro name, even if the locale is asian
			modified = name.clone();
			
			// handle the case where there is no space if there is punctuation in the suffix like ", Phd". 
			// Otherwise, put a space in to transform "PhD" to " PhD"
			/*
			console.log("suffix is " + modified.suffix);
			if ( modified.suffix ) {
				console.log("first char is " + modified.suffix.charAt(0));
				console.log("isPunct(modified.suffix.charAt(0)) is " + ilib.CType.isPunct(modified.suffix.charAt(0)));
			}
			*/
			if (modified.suffix && ilib.CType.isPunct(modified.suffix.charAt(0)) === false) {
				modified.suffix = ' ' + modified.suffix; 
			}
			
			if (this.useFirstFamilyName && name.familyName) {
				var familyNameParts = modified.familyName.trim().split(' ');
				if (familyNameParts.length > 1) {
					familyNameParts = this._adjoinAuxillaries(familyNameParts, name.prefix);
				}	//in spain and mexico, we parse names differently than in the rest of the world
	
				modified.familyName = familyNameParts[0];
			}
		
			modified._joinNameArrays();
		} else {
			isAsianName = true;
			modified = name;
		}
		
		if (!this.template || isAsianName !== this.isAsianLocale) {
			temp = isAsianName ? this.defaultAsianTemplate : this.defaultEuroTemplate;
		} else {
			temp = this.template;
		}
		
		var parts = {
			prefix: this.comps["p"] && modified.prefix || "",
			givenName: this.comps["g"] && modified.givenName || "",
			middleName: this.comps["m"] && modified.middleName || "",
			familyName: this.comps["f"] && modified.familyName || "",
			suffix: this.comps["s"] && modified.suffix || ""
		};
		
		formatted = temp.format(parts);
		return formatted.replace(/\s+/g, ' ').trim();
	}
};

ilib.data.address = {};
ilib.data.address_AU = {"formats":{"default":"{streetAddress}\n{locality} {region} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {region} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{4}"},{"name":"region","line":"last","pattern":["new south wales","nsw","queensland","qld","western australia","west australia","wa","southern australia","south australia","sa","tasmania","tas","victoria","vic","australian capital territory","capital territory","act","northern territory","nt","jervis bay territory","jervis bay","jbt","ashmore and cartier islands","ashmore & cartier islands","cartier island","ashmore island","australian antarctic territory","christmas island","cx","cocos and keeling islands","cocos & keeling islands","cocos (keeling) islands","cocos islands","keeling islands","cc","coral sea islands","willis island","heard island and mcdonald islands","heard island & mcdonald islands","heard island","mcdonald islands","hm","norfolk island","nf"]},{"name":"locality","line":"last","pattern":"[A-z\\.\\-']+(\\s+[A-z\\.\\-']+)?$","matchGroup":0}]};
ilib.data.address_CA = {"formats":{"default":"{streetAddress}\n{locality}, {region} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}, {region} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[A-Za-z][0-9][A-Za-z]\\s+[0-9][A-Za-z][0-9]"},{"name":"region","line":"last","pattern":["new foundland","terre-neuve-et-labrador","terre neuve et labrador","nfld","nl","nova scotia","nouvelle-Ã©cosse","nouvelle Ã©cosse","nouvelle-ecosse","nouvelle ecosse","ns","new brunswick","nouveau-brunswick","nb","prince edward island","Ã®le-du-prince-Ã©douard","Ã®le du prince Ã©douard","ile-du-prince-edouard","ile du prince edouard","pei","pe","quÃ©bec","quebec","quÃ©","que","qc","ontario","ont","on","manitoba","man","mb","saskatchewan","sask","sk","alberta","alb","ab","british columbia","colombie-britannique","colombie britannique","bc","nunavut","nun","nu","north west territories","northwest territories","territoires du nord-ouest","territoires du nordouest","nwt","nt","yukon territory","territoire-yukon","territoire yukon","yukon","yuk","yt"]},{"name":"locality","line":"last","pattern":"[\\wÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+$","matchGroup":0}]};
ilib.data.address_GB = {"formats":{"default":"{streetAddress}\n{locality}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"([A-Za-z]{1,2}[0-9]{1,2}[ABCDEFGHJKMNPRSTUVWXYabcdefghjkmnprstuvwxy]?\\s+[0-9][A-Za-z]{2}|GIR 0AA|SAN TA1)","matchGroup":0},{"name":"locality","line":"last","pattern":"[A-z\\.\\-']+$"}]};
ilib.data.address_IN = {"formats":{"default":"{streetAddress}\n{locality}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{6}$","matchGroup":0},{"name":"locality","line":"last","pattern":"[\\w\\.\\-' ]+"}]};
ilib.data.address_US = {"formats":{"default":"{streetAddress}\n{locality} {region} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {region} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{5}(-[0-9]{4})?","matchGroup":0},{"name":"region","line":"last","pattern":["alabama","ala.","ala","al","alaska","alas.","alas","ak","american samoa","am. samoa","am samoa","as","arizona","ariz.","ariz","az","arkansas","ark.","ark","ar","california","cal.","cal","ca","colorado","col.","col","co","connecticut","conn.","conn","ct","delaware","del.","del","de","district of columbia","district columbia","d of columbia","dc","federated states of micronesia","fsm","micronesia","fm","florida","flor.","flor","flo.","flo","fl","georgia","ga","guam","gu","hawaii","hawai'i","haw.","haw","hi","idaho","id","illinois","ill.","ill","il","indiana","ind.","ind","in","iowa","ia","kansas","kan.","kan","ks","kentucky","kent.","ken.","ken","ky","louisiana","lou.","lou","la","maine","me","marshall islands","mar. islands","marshalls","mh","maryland","mar.","mar","md","massachusetts","mass.","mass","mas.","mas","ma","michigan","mich.","mich","mi","minnesota","minn.","minn","mn","mississippi","miss.","miss","mis.","mis","ms","missouri","mo","montana","mont.","mont","mon.","mon","mt","nebraska","neb.","neb","ne","nevada","nev.","nev","nv","new hampshire","nh","new jersey","nj","new mexico","nm","new york","ny","north carolina","n. carolina","n carolina","nc","north dakota","n. dakota","n dakota","nd","northern mariana islands","n. mariana islands","n mariana islands","marianas","nmi","mp","ohio","oh","oklahoma","okla.","okla","okl.","ok","oregon","ore.","or","palau","pw","pennsylvania","penn.","penn","pen.","pen","pa","puerto rico","pr","rhode island","ri","south carolina","s. carolina","s carolina","sc","south dakota","s. dakota","s dakota","sd","tennessee","tenn.","tenn","ten.","ten","tn","texas","tex.","tex","tx","utah","ut","vermont","ver.","ver","vt","us virgin islands","virgin islands","virgins","vi","virginia","virg.","virg","vir.","va","washington","wash","wa","west virginia","w. virginia","w virginia","w. virg.","w virg","wv","wisconsin","wisc.","wisc","wis.","wis","wi","wyoming","wyom.","wyom","wy","armed forces africa","af africa","ae","armed forces americas","af americas","aa","armed forces canada","af canada","ae","armed forces europe","af europe","ae","armed forces middle east","af middle east","ae","armed forces pacific","af pacific","ap"]},{"name":"locality","line":"last","pattern":"[A-z\\.\\-']+$","matchGroup":0}]};
ilib.data.address_DE = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","pattern":"([0-9]{5}\\s+)?([A-zÃÃ¤Ã¶Ã¼ÃÃÃ\\.\\-'\\/ ]+)$","line":"startAtLast","matchGroup":2},{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{5}"}]};
ilib.data.address_FR = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-' ]+)([Cc][Ee][Dd][Ee][Xx]\\s+[0-9]+)?$","matchGroup":1},{"name":"postalCode","line":"startAtLast","pattern":"([0-9]{5}(\\s+[Cc][Ee][Dd][Ee][Xx]\\s+[0-9]+)?)","matchGroup":0}]};
ilib.data.address_ES = {"formats":{"default":"{streetAddress}\n{postalCode} {locality} {region}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality} {region}"},"startAt":"end","fields":[{"name":"region","line":"last","pattern":["andalusia","andalucÃ­a","andalucia","aragon","aragÃ³n","asturias principality of asturias","principado de asturias","principÃ¡u d'asturies","principau d'asturies","asturias","asturies","balearic islands","islas baleares","baleares","illes balears","basque country","euskadi","paÃ­s vasco","pais vasco","comunidad autÃ³noma vasca","comunidad autonoma vasca","euskal autonomi erkidegoa","canary islands","islas canarias","canarias","cantabria","castile-la mancha","castilla-la mancha","castilla la mancha","la mancha","castile and leÃ³n","castile and leon","castilla y leÃ³n","castilla y leon","catalonia","cataluÃ±a","catalunya","extremadura","galicia","galiza","la rioja","rioja","community of madrid ","comunidad madrid","madrid","region of murcia","regiÃ³n de murcia","region de murcia","murcia","foral community of navarre","comunidad foral de navarra","nafarroako foru komunitatea","navarre","navarra","nafarroako","valencian community","comunidad valenciana","comunitat valenciana","la coruÃ±a","la coruna","a coruÃ±a","a coruna","Ã¡lava","alava","araba","albacete","alicante","alacant","almerÃ­a","almeria","asturias","avila","badajoz","barcelona","biscay","bizkaia","vizcaya","burgos","cÃ¡ceres","caceres","cÃ¡diz","cadiz","cantabria","castellÃ³n","castellon","castellÃ³","castello","ciudad real","cÃ³rdoba","cordoba","cuenca","gipuzkoa","guipÃºzcoa","guipuzcoa","girona","gerona","granada","guadalajara","huelva","huesca","jaÃ©n","jaen","las palmas","leÃ³n","leon","lleida","lÃ©rida","lerida","lugo","mÃ¡laga","malaga","murcia","navarre","nafarroa","navarra","ourense","orense","palencia","pontevedra","salamanca","santa cruz","sta. cruz","sta cruz","segovia","seville","sevilla","soria","tarragona","teruel","toledo","valÃ¨ncia","valencia","valladolid","zamora","zaragoza"]},{"name":"locality","line":"last","pattern":"([0-9]{5}\\s*-?\\s+)?([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼][A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-' ]*)$","matchGroup":2},{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{5}\\s*-?"}]};
ilib.data.address_MX = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}, {region}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}, {region}"},"startAt":"end","fields":[{"name":"region","line":"startAtLast","pattern":["aguascalientes","ags","morelos","mor","baja california","b. c.","b.c.","bc","nayarit","nay","baja california sur","b. c. s.","b.c.s.","bcs","nuevo leÃ³n","nuevo leon","n. l.","n.l.","nl","campeche","cam","oaxaca","oax","coahuila","coah","puebla","pue","colima","col","querÃ©taro","queretaro","qro","chiapas","chis","quintana roo","q. roo","q roo","chihuahua","chih","san luis potosÃ­","san luis potosi","s. l. p.","s.l.p.","slp","distrito federal","d. f.","d.f.","df","sinaloa","sin","durango","dgo","sonora","son","guanajuato","gto","tabasco","tab","guerrero","gro","tamaulipas","tamps","hidalgo","hgo","tlaxcala","tlax","jalisco","jal","veracruz","ver","mexico","mex","yucatÃ¡n","yucatan","yuc","michoacÃ¡n","michoacan","mich","zacatecas","zac"]},{"name":"locality","line":"last","pattern":"(([Cc]\\.?[Pp]\\.?\\s+)?[0-9]{5}\\s+)?([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-' ]+)$","matchGroup":3},{"name":"postalCode","line":"startAtLast","pattern":"(([Cc]\\.?[Pp]\\.?\\s+)?[0-9]{5})","matchGroup":0}]};
ilib.data.address_IT = {"formats":{"default":"{streetAddress}\n{postalCode} {locality} {region}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality} {region}"},"startAt":"end","fields":[{"name":"region","line":"startAtLast","pattern":["rm","(rm)","scv","(scv)","vt","(vt)","ri","(ri)","fr","(fr)","lt","(lt)","tr","(tr)","pg","(pg)","ss","(ss)","ot","(ot)","nu","(nu)","og","(og)","ca","(ca)","or","(or)","ci","(ci)","md","(md)","vs","(vs)","to","(to)","ao","(ao)","cn","(cn)","vc","(vc)","bi","(bi)","at","(at)","al","(al)","ge","(ge)","sv","(sv)","im","(im)","sp","(sp)","mi","(mi)","va","(va)","co","(co)","so","(so)","lc","(lc)","bg","(bg)","bs","(bs)","cr","(cr)","lo","(lo)","pv","(pv)","no","(no)","vb","(vb)","pc","(pc)","ve","(ve)","tv","(tv)","bl","(bl)","ud","(ud)","pn","(pn)","ts","(ts)","go","(go)","pd","(pd)","vi","(vi)","vr","(vr)","tn","(tn)","bz","(bz)","bo","(bo)","mo","(mo)","re","(re)","pr","(pr)","fe","(fe)","ro","(ro)","mn","(mn)","fc","(fc)","rn","(rn)","rsm","(rsm)","ra","(ra)","fi","(fi)","pt","(pt)","ar","(ar)","si","(si)","ms","(ms)","lu","(lu)","pi","(pi)","li","(li)","gr","(gr)","po","(po)","an","(an)","pu","(pu)","mc","(mc)","ap","(ap)","te","(te)","pe","(pe)","ch","(ch)","aq","(aq)","ba","(ba)","fg","(fg)","br","(br)","le","(le)","ta","(ta)","mt","(mt)","na","(na)","ce","(ce)","bn","(bn)","av","(av)","sa","(sa)","pz","(pz)","cb","(cb)","is","(is)","cs","(cs)","cz","(cz)","kr","(kr)","rc","(rc)","vv","(vv)","pa","(pa)","tp","(tp)","ag","(ag)","cl","(cl)","en","(en)","ct","(ct)","sr","(sr)","rg","(rg)","me","(me)"]},{"name":"locality","line":"last","pattern":"((I-|IT-)?[0-9]{5}\\s+)?([A-zÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã²Ã³Ã¹Ãº\\.\\-' ]+)$","matchGroup":3},{"name":"postalCode","line":"startAtLast","pattern":"(I-|IT-)?([0-9]{5})","matchGroup":0}]};
ilib.data.address_XX = {"formats":{"default":"{streetAddress}\n{locality} {region} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {region} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]+$"},{"name":"locality","line":"last","pattern":"[\\wÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+$"}]};
ilib.data.address_CN = {"multiformat":true,"formats":{"default":{"latin":"{streetAddress}\n{locality}, {region} {postalCode}\n{country}","asian":"{country}{postalCode}\n{region}{locality}{streetAddress}"},"asian":{"asian":"{postalCode}\n{region}{locality}{streetAddress}","latin":"{streetAddress}\n{locality} {region} {postalCode}"}},"startAt":{"latin":"end","asian":"beginning"},"fields":{"latin":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{6}$"},{"name":"region","line":"last","pattern":["heilongjiang","hÄilÃ³ngjiÄng","heilungkiang","jilin","jÃ­lÃ­n","kirin","liaoning","liÃ¡onÃ­ng","fengtien","qinghai","qÄ«nghÇi","tsinghai","gansu","gÄnsÃ¹","kansu","shaanxi","shÇnxÄ«","shensi","shanxi","shÄnxÄ«","shansi","hebei","hÃ©bÄi","hopeh","sichuan","sÃ¬chuÄn","szechuan","hubei","hÃºbÄi","hupeh","hena","hÃ©nÃ¡n","honan","shandong","shÄndÅng","shantung","anhui","ÄnhuÄ«","anhwei","jiangsu","jiÄngsÅ«","kiangsu","yunnan","yÃºnnÃ¡n","yunnan","guizhou","gÃ¹izhÅu","kweichow","hunan","hÃºnÃ¡n","hunan","jiangxi","jiÄngxÄ«","kiangsi","zhejiang","zhÃ¨jiÄng","chekiang","hainan","hÇinÃ¡n","hainan","guangdong","guÇngdÅng","kwangtung","fujian","fÃºjiÃ n","fukien","taiwan","tÃ¡iwÄn","taiwan","xÄ«njiÄng wÃ©iwÃº'Är zÃ¬zhÃ¬qÅ«","xinjiang weiwuer zizhiqu","xÄ«njiÄng wÃ©iwÃº'Är","xinjiang weiwuer","nÃ¨imÄnggÇ zÃ¬zhÃ¬qÅ«","neimenggu zizhiqu","nÃ¨imÄnggÇ","neimenggu","xÄ«zÃ ng zÃ¬zhÃ¬qÅ«","xizang zizhiqu","xÄ«zÃ ng","xizang","nÃ­ngxiÃ  huÃ­zÃº zÃ¬zhÃ¬qÅ«","ningxia huizu zizhiqu","nÃ­ngxiÃ  huÃ­zÃº","ningxia hui","guÇngxÄ« zhuÃ ngzÃº zÃ¬zhÃ¬qÅ«","guangxi zhuang zizhiqu","guÇngxÄ« zhuÃ ngzÃº","guangxi zhuang","hong kong","xiÄnggÇng","xianggang","hongkong","macau","Ã omÃ©n","aomen"]},{"name":"locality","line":"last","pattern":"[A-zÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã²Ã³Ã¹ÃºÄÄÄÄÇÇÄÄÄÄÄÄÄªÄ«Ä¬Ä­ÇÇÅÅÅÅÇÇÅªÅ«Å¬Å­ÇÇ\\-']+$"}],"asian":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{6}$"},{"name":"region","line":"startAtFirst","pattern":"^\\S{2}ç(\\w{2}å¿)?","matchGroup":0},{"name":"locality","line":"startAtFirst","pattern":"^(\\S{1,5}[å¸é®é])","matchGroup":0}]}};
ilib.data.address_HK = {"multiformat":true,"formats":{"default":{"asian":"{country}{locality}{streetAddress}","latin":"{streetAddress}\n{locality}\n{country}"},"nocountry":{"asian":"{locality}{streetAddress}{postalCode}","latin":"{streetAddress}\n{locality}"}},"startAt":{"latin":"end","asian":"beginning"},"fields":{"latin":[{"name":"locality","line":"last","pattern":["victoria city","victoria harbour","victoria","kowloon","jiÇlÃ³ng","jiulong","causeway bay","tsuen wan","quÃ¡nwÄn qÅ«","quanwan qu","sha tin","ma on shan","tuen mun","tÃºnmÃ©n xÄ«n shÃ¬zhÃ¨n","tunmen xin shizhen","tÃºnmÃ©n","tunmen","tai po","tai gu","dÃ pÇ xÄ«n shÃ¬zhÃ¨n","dapu xin shizhen","dÃ pÇ","dapu","yuen long","yuÃ¡nlÇng","yuanlang","fanling-sheung shui","shÃ ngshuÇ xÄ«n shÃ¬zhÃ¨n","shangshui xin shizhen","shÃ ngshuÇ","shangshui","tseung kwan o","jiangjun'ao xin shizhen","jiangjun'ao","tin shui wai","north lantau","tung chung","tai ho","aberdeen","cheung chau","discovery bay","jardine's lookout","kennedy town","kwun tong","guÄntÃ¡ng","guantang","lei yue mun","ma wan","mui wo","mÃ©iwÅ","meiwo","silvermine bay","peng chau","sai kung","xÄ«gÃ²ng shÃ¬","xigong shi","xÄ«gÃ²ng","xigong","sha tau kok","shek o","sok kwu wan","stanley","tai o","yuen long town","yuÃ¡nlÇng shÃ¬zhÅngxÄ«n","yuanlang shizhongxin","yuÃ¡nlÇng","yuanlang","yung shue wan","banyan bay","hong kong","xiÄnggÇng","xianggang","quarry bay"]}],"asian":[{"name":"locality","line":"startAtFirst","pattern":"(^\\S{1,5}[å¸é®éå]|hong kong|xiÄnggÇng|xianggang)"}]}};
ilib.data.address_TW = {"multiformat":true,"formats":{"default":{"asian":"{country}\n{region}{locality}{streetAddress}{postalCode}","latin":"{streetAddress}\n{locality}, {region}, {postalCode}\n{country}"},"nocountry":{"asian":"{region}{locality}{streetAddress}{postalCode}","latin":"{streetAddress}\n{locality}, {region}, {postalCode}"}},"startAt":{"latin":"end","asian":"beginning"},"fields":{"latin":[{"name":"postalCode","line":"startAtLast","pattern":"(^[0-9]{3,5}|\\s+[0-9]{3,5})"},{"name":"region","line":"last","pattern":["Taiwan Province","TÃ¡iwÄn ShÄng","Taiwan Sheng","Taiwan","TÃ¡iwÄn","Fujian Province","FÃºjiÃ n ShÄng","Fujian Sheng","Fujian","FÃºjiÃ n"]},{"name":"locality","line":"last","pattern":"([Nn][Ee][Ww]\\s+)?[A-zÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã²Ã³Ã¹ÃºÄÄÄÄÇÇÄÄÄÄÄÄÄªÄ«Ä¬Ä­ÇÇÅÅÅÅÇÇÅªÅ«Å¬Å­ÇÇ\\-']+(\\s+[Cc][Ii][Tt][Yy])?$","matchGroup":0}],"asian":[{"name":"postalCode","line":"startAtLast","pattern":"\\s*[0-9]{3,5}\\s*"},{"name":"region","line":"startAtFirst","pattern":"^\\S{2}ç(\\w{2}ç¸£)?"},{"name":"locality","line":"startAtFirst","pattern":"^\\S{1,5}[å¸é®é]"}]}};
ilib.data.address_SG = {"multiformat":true,"formats":{"default":{"latin":"{streetAddress}\n{locality} {postalCode}\n{country}","asian":"{country}{postalCode}{locality}{streetAddress}"},"nocountry":{"asian":"{postalCode}{locality}{streetAddress}","latin":"{streetAddress}\n{locality} {postalCode}"}},"startAt":{"latin":"end","asian":"beginning"},"fields":{"latin":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{6}"},{"name":"locality","line":"last","pattern":"[Ss][Ii][Nn][Gg][Aa][Pp][Oo][Rr][Ee]$"}],"asian":[{"name":"postalCode","line":"startAtLast","pattern":"^[0-9]{6}"},{"name":"locality","line":"startAtFirst","pattern":"^æ°å å¡","matchGroup":0}]}};
ilib.data.countries = {"afghanistan":"AF","aland islands":"AX","Ã¥land islands":"AX","albania":"AL","algeria":"DZ","american samoa":"AS","andorra":"AD","angola":"AO","anguilla":"AI","antigua and barbuda":"AG","antigua & barbuda":"AG","antigua":"AG","barbuda":"AG","argentina":"AR","armenia":"AM","aruba":"AW","australia":"AU","austria":"AT","azerbaijan":"AZ","bahamas":"BS","the bahamas":"BS","bahrain":"BH","bangladesh":"BD","barbados":"BB","belarus":"BY","belgium":"BE","belize":"BZ","benin":"BJ","bermuda":"BM","bhutan":"BT","bolivia, plurinational state of":"BO","plurinational state of bolivia":"BO","bolivia":"BO","bosnia and herzegovina":"BA","bosnia & herzegovina":"BA","bosnia":"BA","herzegovina":"BA","botswana":"BW","bouvet island":"BV","brazil":"BR","british indian ocean territory":"IO","brunei darussalam":"BN","brunei":"BN","bulgaria":"BG","burkina faso":"BF","burundi":"BI","cambodia":"KH","cameroon":"CM","canada":"CA","cape verde":"CV","cape verde islands":"CV","cayman islands":"KY","caymans":"KY","central african republic":"CF","c.a.r.":"CF","car":"CF","chad":"TD","chile":"CL","people's republic of china":"CN","republic of china":"TW","p. r. of china":"CN","p. r. china":"CN","p.r. of china":"CN","pr china":"CN","R.O.C.":"TW","ROC":"TW","prc":"CN","china":"CN","christmas island":"CX","cocos (keeling) islands":"CC","cocos islands":"CC","cocos and keeling islands":"CC","cocos & keeling islands":"CC","colombia":"CO","comoros":"KM","congo":"CD","congo, the democratic republic of the":"CD","congo, democratic republic of the":"CD","the democratic republic of the congo":"CD","democratic republic of the congo":"CD","drc":"CD","cook islands":"CK","costa rica":"CR","cote d'ivoire":"CI","cÃ´te d'ivoire":"CI","ivory coast":"CI","croatia":"HR","cuba":"CU","cyprus":"CY","the czech republic":"CZ","czech republic":"CZ","denmark":"DK","djibouti":"DJ","dominica":"DM","dominican republic":"DO","d.r.":"DO","dr":"DO","ecuador":"EC","egypt":"EG","el salvador":"SV","equatorial guinea":"GQ","eritrea":"ER","estonia":"EE","ethiopia":"ET","falkland islands":"FK","falklands":"FK","malvinas":"FK","faroe islands":"FO","faroes":"FO","fiji":"FJ","finland":"FI","france":"FR","french guiana":"GF","french polynesia":"PF","polynesia":"PF","french southern territories":"TF","gabon":"GA","gabonese republic":"GA","gambia":"GM","republic of the gambia":"GM","georgia":"GE","germany":"DE","ghana":"GH","gibraltar":"GI","greece":"GR","greenland":"GL","grenada":"GD","guadeloupe":"GP","guam":"GU","guatemala":"GT","guernsey":"GG","guinea":"GN","guinea-bissau":"GW","republic of guinea-bissau":"GW","guyana":"GY","cooperative republic of guyana":"GY","haiti":"HT","heard island and mcdonald islands":"HM","heard island & mcdonald islands":"HM","heard and mcdonald islands":"HM","heard island":"HM","mcdonald islands":"HM","holy see":"VA","vatican city state":"VA","vatican city":"VA","vatican":"VA","honduras":"HN","hong kong":"HK","hungary":"HU","iceland":"IS","india":"IN","indonesia":"ID","iran, islamic republic of":"IR","islamic republic of iran":"IR","iran":"IR","iraq":"IQ","republic of ireland":"IE","ireland":"IE","Ã©ire":"IE","isle of man":"IM","israel":"IL","italy":"IT","jamaica":"JM","japan":"JP","jersey":"JE","jordan":"JO","kazakhstan":"KZ","kenya":"KE","republic of kenya":"KE","kiribati":"KI","korea, democratic people's republic of":"KP","democratic people's republic of korea":"KP","dprk":"KP","north korea":"KP","korea, republic of":"KR","republic of korea":"KR","south korea":"KR","korea":"KR","kuwait":"KW","kyrgyzstan":"KG","lao people's democratic republic":"LA","laos":"LA","latvia":"LV","lebanon":"LB","lesotho":"LS","liberia":"LR","libyan arab jamahiriya":"LY","libya":"LY","liechtenstein":"LI","lithuania":"LT","luxembourg":"LU","macao":"MO","macedonia, the former yugoslav republic of":"MK","macedonia, former yugoslav republic of":"MK","the former yugoslav republic of macedonia":"MK","former yugoslav republic of macedonia":"MK","f.y.r.o.m.":"MK","fyrom":"MK","macedonia":"MK","madagascar":"MG","malawi":"MW","malaysia":"MY","maldives":"MV","mali":"ML","republic of mali":"ML","malta":"MT","marshall islands":"MH","marshalls":"MH","martinique":"MQ","mauritania":"MR","mauritius":"MU","mayotte":"YT","mexico":"MX","micronesia, federated states of":"FM","federated states of micronesia":"FM","micronesia":"FM","moldova, republic of":"MD","republic of moldova":"MD","moldova":"MD","monaco":"MC","mongolia":"MN","montenegro":"ME","montserrat":"MS","morocco":"MA","mozambique":"MZ","myanmar":"MM","namibia":"NA","nauru":"NR","nepal":"NP","holland":"NL","netherlands antilles":"AN","the netherlands":"NL","netherlands":"NL","new caledonia":"NC","new zealand":"NZ","nicaragua":"NI","niger":"NE","nigeria":"NG","norfolk island":"NF","northern mariana islands":"MP","marianas":"MP","norway":"NO","oman":"OM","pakistan":"PK","palau":"PW","palestinian territory, occupied":"PS","occupied palestinian territory":"PS","palestinian territory":"PS","palestinian authority":"PS","palestine":"PS","panama":"PA","papua new guinea":"PG","png":"PG","paraguay":"PY","peru":"PE","the philippines":"PH","philippines":"PH","pitcairn":"PN","poland":"PL","portugal":"PT","puerto rico":"PR","qatar":"QA","reunion":"RE","rÃ©union":"RE","romania":"RO","russian federation":"RU","russia":"RU","rwanda":"RW","saint barthÃ©lemy":"BL","saint barthelemy":"BL","saint barts":"BL","st. barthÃ©lemy":"BL","st. barthelemy":"BL","st. barts":"BL","st barthÃ©lemy":"BL","st barthelemy":"BL","st barts":"BL","saint helena, ascension and tristan da cunha":"SH","saint helena, ascension & tristan da cunha":"SH","saint helena":"SH","st. helena, ascension and tristan da cunha":"SH","st. helena, ascension & tristan da cunha":"SH","st. helena":"SH","st helena, ascension and tristan da cunha":"SH","st helena, ascension & tristan da cunha":"SH","st helena":"SH","ascension":"SH","tristan da cunha":"SH","saint kitts and nevis":"KN","saint kitts & nevis":"KN","saint kitts":"KN","st. kitts and nevis":"KN","st. kitts & nevis":"KN","st. kitts":"KN","st kitts and nevis":"KN","st kitts & nevis":"KN","st kitts":"KN","nevis":"KN","saint lucia":"LC","st. lucia":"LC","st lucia":"LC","saint martin":"MF","st. martin":"MF","st martin":"MF","saint pierre and miquelon":"PM","saint pierre & miquelon":"PM","saint pierre":"PM","st. pierre and miquelon":"PM","st. pierre & miquelon":"PM","st. pierre":"PM","st pierre and miquelon":"PM","st pierre & miquelon":"PM","st pierre":"PM","miquelon":"PM","saint vincent and the grenadines":"VC","saint vincent & the grenadines":"VC","saint vincent":"VC","st. vincent and the grenadines":"VC","st. vincent & the grenadines":"VC","st. vincent":"VC","st vincent and the grenadines":"VC","st vincent & the grenadines":"VC","st vincent":"VC","the grenadines":"VC","grenadines":"VC","samoa":"WS","san marino":"SM","sao tome and principe":"ST","sao tome & principe":"ST","sao tome":"ST","principe":"ST","saudi arabia":"SA","arabia":"SA","senegal":"SN","sÃ©nÃ©gal":"SN","serbia":"RS","seychelles":"SC","sierra leone":"SL","the republic of singapore":"SG","republic of singapore":"SG","singapore":"SG","slovakia":"SK","slovenia":"SI","solomon islands":"SB","solomons":"SB","somalia":"SO","south africa":"ZA","south georgia and the south sandwich islands":"GS","south georgia & the south sandwich islands":"GS","south georgia":"GS","the south sandwich islands":"GS","south sandwich islands":"GS","spain":"ES","sri lanka":"LK","the sudan":"SD","sudan":"SD","suriname":"SR","svalbard and jan mayen":"SJ","svalbard & jan mayen":"SJ","svalbard":"SJ","jan mayen":"SJ","swaziland":"SZ","sweden":"SE","switzerland":"CH","syrian arab republic":"SY","syria":"SY","taiwan":"TW","tajikistan":"TJ","tanzania, united republic of":"TZ","united republic of tanzania":"TZ","tanzania":"TZ","thailand":"TH","timor-leste":"TL","east timor":"TL","togo":"TG","tokelau":"TK","tonga":"TO","trinidad and tobago":"TT","trinidad & tobago":"TT","trinidad":"TT","tobago":"TT","tunisia":"TN","turkey":"TR","turkmenistan":"TM","turks and caicos islands":"TC","turks & caicos islands":"TC","turks islands":"TC","turk islands":"TC","caicos islands":"TC","caico islands":"TC","tuvalu":"TV","uganda":"UG","ukraine":"UA","united arab emirates":"AE","u.a.e.":"AE","uae":"AE","dubai":"AE","united kingdom":"GB","u.k.":"GB","uk":"GB","great britain":"GB","g.b.":"GB","gb":"GB","england":"GB","scotland":"GB","wales":"GB","united states":"US","united states of america":"US","u.s.a.":"US","usa":"US","united states minor outlying islands":"UM","uruguay":"UY","uzbekistan":"UZ","vanuatu":"VU","venezuela, bolivarian republic of":"VE","bolivarian republic of venezuela":"VE","venezuela":"VE","viet nam":"VN","vietnam":"VN","british virgin islands":"VG","virgin islands, british":"VG","bvis":"VG","b.v.i.":"VG","bvi":"VG","virgin islands, us":"VI","the us virgin islands":"VI","us virgin islands":"VI","virgin islands":"VI","usvi":"VI","wallis and futuna":"WF","wallis & futuna":"WF","wallis":"WF","futuna":"WF","western sahara":"EH","yemen":"YE","zambia":"ZM","zimbabwe":"ZW"};
ilib.data.nativecountries = {"Ø§ÙØºØ§ÙØ³ØªØ§Ù":"AF","Ã¥landsÃ¸erne":"AX","shqipÃ«ri":"AL","algÃ©rie":"DZ","Ø§ÙØ¬Ø²Ø§Ø¦Ø±":"DZ","principat d'andorra":"AD","repÃºblica de angola":"AO","repubilika ya ngola":"AO","ÕÕ¡ÕµÕ¡Õ½Õ¿Õ¡Õ¶":"AM","Ã¶sterreich":"AT","azÉrbaycan":"AZ","Ø§ÙØ¨Ø­Ø±ÙÙ":"BH","à¦¬à¦¾à¦à¦²à¦¾à¦¦à§à¦¶":"BD","à¦à¦£à¦ªà§à¦°à¦à¦¾à¦¤à¦¨à§à¦¤à§à¦°à§ à¦¬à¦¾à¦à¦²à¦¾à¦¦à§à¦¶":"BD","gÃ´noprojatontri bangladesh":"BD","Ð±ÐµÐ»Ð°ÑÑÑÑ":"BY","belgiÃ«":"BE","la belgique":"BE","belgique":"BE","rÃ©publique du bÃ©nin":"BJ","bÃ©nin":"BJ","à½ à½à¾²à½´à½à¼à½¡à½´à½£à¼":"BT","bulivya mamallaqta":"BO","estado plurinacional de bolivia":"BO","wuliwya suyu":"BO","bosna i hercegovina":"BA","Ð±Ð¾ÑÐ½Ð° Ð¸ ÑÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°":"BA","lefatshe la botswana":"BW","bouvetÃ¸ya":"BV","brasil":"BR","negara brunei darussalam":"BN","Ð±ÑÐ»Ð³Ð°ÑÐ¸Ñ":"BG","republika y'u burundi":"BI","rÃ©publique du burundi":"BI","áááááá¶áá¶áá¶ááááááááá»áá¶":"KH","preÄh rÃ©achÃ©anachÃ¢k kÃ¢mpÅ­chÃ©a":"KH","kÃ¢mpÅ­chÃ©a":"KH","cameroun":"CM","cabo verde":"CV","islas de cabo verde":"CV","rÃ©publique centrafricaine":"CF","kÃ¶dÃ¶rÃ¶sÃªse tÃ® bÃªafrÃ®ka":"CF","rÃ©publique du tchad":"TD","tchad":"TD","Ø¬ÙÙÙØ±ÙØ© ØªØ´Ø§Ø¯":"TD","Ç§umhÅ«riyyat tÅ¡Äd":"TD","tÅ¡Äd":"TD","ä¸­åäººæ°å±åå½ä¸­å½":"CN","å±ååçä¸­å":"TW","å°ç£ç":"TW","ä¸­å½":"CN","union des comores":"KM","udzima wa komori":"KM","Ø§ÙØ§ØªØ­Ø§Ø¯ Ø§ÙÙÙØ±Ù":"KM","al-ittiá¸¥Äd al-qumurÄ«/qamarÄ«":"KM","rÃ©publique du congo":"CG","repubilika ya kongo":"CG","republiki ya kongÃ³":"CG","kongo":"CG","kongÃ³":"CG","rÃ©publique dÃ©mocratique du congo":"CD","kÅ«ki 'Äirani":"CK","cote-d'ivoire":"CI","cÃ´te-d'ivoire":"CI","hrvatska":"HR","ÎºÏÏÏÎ¹Î±ÎºÎ® Î´Î·Î¼Î¿ÎºÏÎ±ÏÎ¯Î±":"CY","kypriakÃ­ dimokratÃ­a":"CY","kÄ±brÄ±s cumhuriyeti":"CY","ÄeskÃ¡ republika":"CZ","danmark":"DK","Ø¬ÙÙÙØ±ÙØ© Ø¬ÙØ¨ÙØªÙ":"DJ","jumhÅ«riyyat jÄ«bÅ«tÄ«":"DJ","rÃ©publique de djibouti":"DJ","jamhuuriyadda jabuuti":"DJ","gabuutih ummuuno":"DJ","jÄ«bÅ«tÄ«":"DJ","djibouti":"DJ","jabuuti":"DJ","gabuutih":"DJ","Commonwealth de la Dominique":"DM","Dominique":"DM","repÃºblica dominicana":"DO","ÙØµØ±":"EG","repÃºblica de guinea ecuatorial":"GQ","rÃ©publique de guinÃ©e Ã©quatoriale":"GQ","guinea ecuatorial":"GQ","guinÃ©e Ã©quatoriale":"GQ","ááá¨ á¤á­áµá«":"ER","hagere ertra":"ER","Ø¯ÙÙØ© Ø¥Ø±ØªØ±ÙØ§":"ER","dawlat iritrÄ«ya":"ER","eesti":"EE","á¨á¢áµá®áµá« áá´á«áá á²áá­á«á²á«á áªáá¥áá­":"ET","ye-Ä«tyÅá¹á¹yÄ fÄdÄralÄwÄ« dÄ«mÅkrÄsÄ«yÄwÄ« rÄ«peblÄ«k":"ET","á¨á¢áµá®áµá«":"ET","ye-Ä«tyÅá¹á¹yÄ":"ET","malvinas":"FK","fÃ¦rÃ¸erne":"FO","matanitu ko viti":"FJ","fijÄ« ripablik":"FJ","à¤«à¤¼à¤¿à¤à¥ à¤à¤£à¤°à¤¾à¤à¥à¤¯":"FJ","suomi":"FI","guyane franÃ§aise":"GF","polynÃ©sie franÃ§aise":"PF","terres australes franÃ§aises":"TF","rÃ©publique gabonaise":"GA","á¡áá¥áá áááááá¡":"GE","deutschland":"DE","ÎµÎ»Î»Î¬Î´Î±":"GR","grÃ¸nland":"GL","rÃ©publique de guinÃ©e":"GN","repÃºblica da guinÃ©-bissau":"GW","haÃ¯ti":"HT","ayiti":"HT","santa sede":"VA","cittÃ  del vaticano":"VA","vaticano":"VA","é¦æ¸¯ç":"HK","magyarorszÃ¡g":"HU","Ã­sland":"IS","à¤­à¤¾à¤°à¤¤":"IN","Ø¬ÙÙÙØ±Û Ø§Ø³ÙØ§ÙÛ Ø§ÛØ±Ø§Ù":"IR","Ø§ÛØ±Ø§Ù":"IR","Ø§ÙØ¹Ø±Ø§Ù":"IQ","Ã©ire":"IE","××©×¨××":"IL","italia":"IT","æ¥æ¬":"JP","Ø§ÙØ£Ø±Ø¯Ù":"JO","ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½":"KZ","jamhuri ya kenya":"KE","ribaberiki kiribati":"KI","ì¡°ì  ë¯¼ì£¼ì£¼ì ì¸ë¯¼ ê³µíêµ­":"KP","ë¶í":"KP","ëíë¯¼êµ­":"KR","íêµ­":"KR","Ø§ÙÙÙÙØª":"KW","ÐºÑÑÐ³ÑÐ· ÑÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ":"KG","kÄ±rgÄ±z respublikasÄ±":"KG","ÐºÑÑÐ³ÑÐ·ÑÐºÐ°Ñ ÑÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"KG","kyrgyzskaya respublika":"KG","àºªàº²àºàº²àº¥àº°àºàº°àº¥àº±àº àºàº°àºàº²àºàº´àºàº°à»àº àºàº°àºàº²àºàº»àºàº¥àº²àº§":"LA","sathalanalat paxathipatai paxaxon lao":"LA","latvija":"LV","ÙØ¨ÙØ§Ù":"LB","muso oa lesotho":"LS","ÙÙØ¨ÙØ§":"LY","lietuva":"LT","luxemburg":"LU","macau":"MO","æ¾³é¨":"MO","æ¾³é":"MO","Ð¿Ð¾ÑÐ°Ð½ÐµÑÐ½Ð° ÑÑÐ³Ð¾ÑÐ»Ð¾Ð²ÐµÐ½ÑÐºÐ° ÑÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ° Ð¼Ð°ÐºÐµÐ´Ð¾Ð½Ð¸ÑÐ°":"MK","Ð¼Ð°ÐºÐµÐ´Ð¾Ð½Ð¸ÑÐ°":"MK","repoblikan'i madagasikara":"MG","rÃ©publique de madagascar":"MG","chalo cha malawi":"MW","dziko la malaÅµi":"MW","malaÅµi":"MW","ÞÞ¨ÞÞ¬ÞÞ¨ÞÞ§ÞÞ°ÞÞ­ÞÞ¬ ÞÞªÞÞ°ÞÞ«ÞÞ¨ÞÞ°ÞÞ§":"MV","dhivehi raa'jeyge jumhooriyya":"MV","rÃ©publique du mali":"ML","mali ka fasojamana":"ML","Ø§ÙØ¬ÙÙÙØ±ÙØ© Ø§ÙØ¥Ø³ÙØ§ÙÙØ© Ø§ÙÙÙØ±ÙØªØ§ÙÙØ©":"MR","al-Ç§umhÅ«riyyah al-Ê¾islÄmiyyah al-mÅ«rÄ«tÄniyyah":"MR","rÃ©publique islamique de mauritanie":"MR","republik bu lislaamu bu gÃ nnaar":"MR","republik moris":"MU","rÃ©publique de maurice":"MU","mÃ©xico":"MX","republica moldova":"MD","mongÎ³ol ulus":"MN","Ð¼Ð¾Ð½Ð³Ð¾Ð» ÑÐ»Ñ":"MN","mongol uls":"MN","crna gora":"ME","ÑÑÐ½Ð° Ð³Ð¾ÑÐ°":"ME","ÙØºØ±Ø¨Ù":"MA","repÃºblica de moÃ§ambique":"MZ","moÃ§ambique":"MZ","pyidaunzu thanmÄda myÄma nainngandaw":"MM","burma":"MM","republiek van namibiÃ«":"NA","republik namibia":"NA","namibiÃ«":"NA","ripublik naoero":"NR","à¤¸à¤à¥à¤à¥à¤¯ à¤²à¥à¤à¤¤à¤¾à¤¨à¥à¤¤à¥à¤°à¤¿à¤ à¤à¤£à¤¤à¤¨à¥à¤¤à¥à¤° à¤¨à¥à¤ªà¤¾à¤²":"NP","sanghiya loktÄntrik ganatantra nepÄl":"NP","nepÄl":"NP","nederland":"NL","nouvelle-calÃ©donie":"NC","la calÃ©donie":"NC","calÃ©donie":"NC","aotearoa":"NZ","jamhuriyar nijar":"NE","nijar":"NE","jamhuriyar tarayyar najeriya":"NG","njÃ­ká»tÃ¡ á»chÃ­chÃ¬iwÃº nÃ á»jÃ­rÃ­Ã ":"NG","Ã papá»Ì olÃ³mÃ¬nira iláº¹Ì nÃ Ã¬jÃ­rÃ­Ã ":"NG","nÃ á»jÃ­rÃ­Ã ":"NG","nÃ Ã¬jÃ­rÃ­Ã ":"NG","norge":"NO","Ø³ÙØ·ÙØ© Ø¹ÙØ§Ù":"OM","Ù¾Ø§Ú©Ø³ØªØ§Ù":"PK","beluu Är a belau":"PW","belau":"PW","panamÃ¡":"PA","independen stet bilong papua niugini":"PG","papua niugini":"PG","perÃº":"PE","las filipinas":"PH","filipinas":"PH","polska":"PL","ÙØ·Ø±":"QA","romÃ¢nia":"RO","ÑÑÑÑÐºÐ¸Ð¹ Ð¤ÐµÐ´ÐµÑÐ°ÑÐ¸Ð¸":"RU","ÑÐ¾ÑÑÐ¸Ñ":"RU","repubulika y'u rwanda":"RW","rÃ©publique du rwanda":"RW","saint-barthÃ©lemy":"BL","saint barth":"BL","saint-martin":"MF","sint maarten":"MF","saint-pierre-et-miquelon":"PM","malo sa'oloto tuto'atasi o samoa":"WS","san marino":"SM","sao tome and principe":"ST","sao tome & principe":"ST","sao tome":"ST","principe":"ST","Ø§ÙØ³Ø¹ÙØ¯ÙØ© Ø¬Ø²ÙØ±Ù Ø§ÙØ¹Ø±Ø¨":"SA","arabia":"SA","senegal":"SN","sÃ©nÃ©gal":"SN","serbia":"RS","seychelles":"SC","sierra leone":"SL","æ°å å¡å±åå½":"SG","æ°å å¡ç":"SG","slovensko":"SK","slovenija":"SI","solomon islands":"SB","solomons":"SB","somalia":"SO","suid-afrika":"ZA","espaÃ±a":"ES","sri lanka":"LK","the sudan":"SD","sudan":"SD","suriname":"SR","svalbard and jan mayen":"SJ","svalbard & jan mayen":"SJ","svalbard":"SJ","jan mayen":"SJ","swaziland":"SZ","sverige":"SE","die schweiz":"CH","schweiz":"CH","la suisse":"CH","suisse":"CH","svizzera":"CH","Ø³ÙØ±ÙØ§":"SY","taiwan, province of china":"TW","taiwan":"TW","tajikistan":"TJ","tanzania, united republic of":"TZ","united republic of tanzania":"TZ","tanzania":"TZ","à¸à¸£à¸°à¹à¸à¸¨à¹à¸à¸¢":"TH","timor-leste":"TL","east timor":"TL","togo":"TG","tokelau":"TK","tonga":"TO","trinidad and tobago":"TT","trinidad & tobago":"TT","trinidad":"TT","tobago":"TT","ØªÙÙØ³":"TN","tÃ¼rkiye":"TR","turkmenistan":"TM","tuvalu":"TV","uganda":"UG","ÑÐºÑÐ°ÑÐ½Ð°":"UA","Ø§ÙØ§ÙØ§Ø±Ø§Øª Ø§ÙØ¹Ø±Ø¨ÙØ© Ø§ÙÙØªØ­Ø¯Ø©":"AE","Ø¯Ø¨Ù":"AE","albain":"GB","cymru":"GB","uruguay":"UY","uzbekistan":"UZ","vanuatu":"VU","viá»t nam":"VN","western sahara":"EH","ÙÙÙÙ":"YE","zambia":"ZM","zimbabwe":"ZW"};
ilib.data.ctrynames_en = {"generated":false,"Antigua & Barbuda":"AG","Arabia":"SA","Bosnia & Herzegovina":"BA","BVI":"VG","Cape Verde Islands":"CV","Cocos & Keeling Islands":"CC","Cocos (Keeling) Islands":"CC","Congo, Democratic Republic of the":"CD","Democratic Republic of the Congo":"CD","DPRK":"KP","Dubai":"AE","East Timor":"TL","England":"GB","Falklands":"FK","Heard Island & McDonald Islands":"HM","Occupied Palestinian Territory":"PS","P. R. China":"CN","P. R. of China":"CN","P.R. of China":"CN","Palestinian Territory":"PS","People's Republic of China":"CN","Polynesia":"061","PR china":"CN","PRC":"CN","Republic of China":"TW","Republic of Ireland":"IE","Republic of Singapore":"SG","Saint Barts":"BL","Saint Helena, Ascension & Tristan da Cunha":"SH","Saint Kitts & Nevis":"KN","Saint Pierre & Miquelon":"PM","Saint Vincent & the Grenadines":"VC","Sao Tome & Principe":"ST","Scotland":"GB","Solomons":"SB","South Georgia & the South Sandwich Islands":"GS","St Barthelemy":"BL","St BarthÃ©lemy":"BL","St Barts":"BL","St Helena":"SH","St Helena, Ascension & Tristan da Cunha":"SH","St Helena, Ascension and Tristan da Cunha":"SH","St Kitts":"KN","St Kitts & Nevis":"KN","St Kitts and Nevis":"KN","St Lucia":"LC","St Martin":"MF","St Pierre":"PM","St Pierre & Miquelon":"PM","St Pierre and Miquelon":"PM","St Vincent":"VC","St Vincent & the Grenadines":"VC","St Vincent and the Grenadines":"VC","St. Barts":"BL","St. Helena, Ascension & Tristan da Cunha":"SH","St. Kitts & Nevis":"KN","St. Pierre & Miquelon":"PM","St. Vincent & the Grenadines":"VC","Svalbard & Jan Mayen":"SJ","SÃ©nÃ©gal":"SN","The Bahamas":"BS","The Czech Republic":"CZ","The Grenadines":"VC","The Netherlands":"NL","The Philippines":"PH","The Republic of Singapore":"SG","The South Sandwich Islands":"GS","The Sudan":"SD","The US Virgin Islands":"VI","Trinidad & Tobago":"TT","Turks & Caicos Islands":"TC","Vatican City":"VA","Vatican City State":"VA","Virgin Islands":"VI","Wales":"GB","Wallis & Futuna":"WF","Ãire":"IE","Ascension Island":"AC","Andorra":"AD","United Arab Emirates":"AE","Afghanistan":"AF","Antigua and Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Netherlands Antilles":"AN","Angola":"AO","Antarctica":"AQ","Argentina":"AR","American Samoa":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Ãland Islands":"AX","Azerbaijan":"AZ","Bosnia and Herzegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgium":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","Saint BarthÃ©lemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Caribbean Netherlands":"BQ","Brazil":"BR","Bahamas":"BS","Bhutan":"BT","Bouvet Island":"BV","Botswana":"BW","Belarus":"BY","Belize":"BZ","Canada":"CA","Cocos [Keeling] Islands":"CC","Congo - Kinshasa":"CD","Central African Republic":"CF","Congo - Brazzaville":"CG","Switzerland":"CH","CÃ´te dâIvoire":"CI","Cook Islands":"CK","Chile":"CL","Cameroon":"CM","China":"CN","Colombia":"CO","Clipperton Island":"CP","Costa Rica":"CR","Cuba":"CU","Cape Verde":"CV","CuraÃ§ao":"CW","Christmas Island":"CX","Cyprus":"CY","Czech Republic":"CZ","Germany":"DE","Diego Garcia":"DG","Djibouti":"DJ","Denmark":"DK","Dominica":"DM","Dominican Republic":"DO","Algeria":"DZ","Ceuta and Melilla":"EA","Ecuador":"EC","Estonia":"EE","Egypt":"EG","Western Sahara":"EH","Eritrea":"ER","Spain":"ES","Ethiopia":"ET","European Union":"EU","Finland":"FI","Fiji":"FJ","Falkland Islands":"FK","Micronesia":"FM","Faroe Islands":"FO","France":"FR","Gabon":"GA","United Kingdom":"GB","Grenada":"GD","Georgia":"GE","French Guiana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","Greenland":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Equatorial Guinea":"GQ","Greece":"GR","South Georgia and the South Sandwich Islands":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Hong Kong SAR China":"HK","Heard Island and McDonald Islands":"HM","Honduras":"HN","Croatia":"HR","Haiti":"HT","Hungary":"HU","Canary Islands":"IC","Indonesia":"ID","Ireland":"IE","Israel":"IL","Isle of Man":"IM","India":"IN","British Indian Ocean Territory":"IO","Iraq":"IQ","Iran":"IR","Iceland":"IS","Italy":"IT","Jersey":"JE","Jamaica":"JM","Jordan":"JO","Japan":"JP","Kenya":"KE","Kyrgyzstan":"KG","Cambodia":"KH","Kiribati":"KI","Comoros":"KM","Saint Kitts and Nevis":"KN","North Korea":"KP","South Korea":"KR","Kuwait":"KW","Cayman Islands":"KY","Kazakhstan":"KZ","Laos":"LA","Lebanon":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Lithuania":"LT","Luxembourg":"LU","Latvia":"LV","Libya":"LY","Morocco":"MA","Monaco":"MC","Moldova":"MD","Montenegro":"ME","Saint Martin":"MF","Madagascar":"MG","Marshall Islands":"MH","Macedonia":"MK","Mali":"ML","Myanmar [Burma]":"MM","Mongolia":"MN","Macau SAR China":"MO","Northern Mariana Islands":"MP","Martinique":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldives":"MV","Malawi":"MW","Mexico":"MX","Malaysia":"MY","Mozambique":"MZ","Namibia":"NA","New Caledonia":"NC","Niger":"NE","Norfolk Island":"NF","Nigeria":"NG","Nicaragua":"NI","Netherlands":"NL","Norway":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","New Zealand":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","French Polynesia":"PF","Papua New Guinea":"PG","Philippines":"PH","Pakistan":"PK","Poland":"PL","Saint Pierre and Miquelon":"PM","Pitcairn Islands":"PN","Puerto Rico":"PR","Palestinian Territories":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Outlying Oceania":"QO","RÃ©union":"RE","Romania":"RO","Serbia":"RS","Russia":"RU","Rwanda":"RW","Saudi Arabia":"SA","Solomon Islands":"SB","Seychelles":"SC","Sudan":"SD","Sweden":"SE","Singapore":"SG","Saint Helena":"SH","Slovenia":"SI","Svalbard and Jan Mayen":"SJ","Slovakia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Suriname":"SR","South Sudan":"SS","SÃ£o TomÃ© and PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Syria":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Turks and Caicos Islands":"TC","Chad":"TD","French Southern Territories":"TF","Togo":"TG","Thailand":"TH","Tajikistan":"TJ","Tokelau":"TK","Timor-Leste":"TL","Turkmenistan":"TM","Tunisia":"TN","Tonga":"TO","Turkey":"TR","Trinidad and Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ukraine":"UA","Uganda":"UG","U.S. Minor Outlying Islands":"UM","United States":"US","Uruguay":"UY","Uzbekistan":"UZ","Saint Vincent and the Grenadines":"VC","Venezuela":"VE","British Virgin Islands":"VG","U.S. Virgin Islands":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis and Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","South Africa":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Unknown Region":"ZZ","Asia":"142","Central Asia":"143","Western Asia":"145","Europe":"150","Eastern Europe":"151","Northern Europe":"154","Western Europe":"155","Latin America":"419","World":"001","Africa":"002","North America":"003","South America":"005","Oceania":"009","Western Africa":"011","Central America":"013","Eastern Africa":"014","Northern Africa":"015","Middle Africa":"017","Southern Africa":"018","Americas":"019","Northern America":"021","Caribbean":"029","Eastern Asia":"030","Southern Asia":"034","South-Eastern Asia":"035","Southern Europe":"039","Australasia":"053","Melanesia":"054","Micronesian Region":"057","U.S. Outlying Islands":"UM"};
ilib.data.ctrynames_de = {"generated":false,"albanien":"AL","algerien":"DZ","amerikanisch-samoa":"AS","antigua und barbuda":"AG","argentinien":"AR","armenien":"AM","ascension":"SH","australien":"AU","Ã¶sterreich":"AT","aserbaidschan":"AZ","britische jungferninseln":"VG","bangladesch":"BD","belgien":"BE","bolivien":"BO","bosnien und herzegowina":"BA","botsuana":"BW","brasilien":"BR","britisches territorium im indischen ozean":"IO","bulgarien":"BG","kambodscha":"KH","kamerun":"CM","kap verde":"CV","kaimaninseln":"KY","zentralafrikanische republik":"CF","tschad":"TD","kolumbien":"CO","komoren":"KM","cookinseln":"CK","kroatien":"HR","kuba":"CU","zypern":"CY","tschechische republik":"CZ","cÃ´te dâivoire":"CI","dominikanische republik":"DO","kongo, demokratische volksrepublik":"CD","kongo, demokratische republik":"CD","dÃ¤nemark":"DK","dschibuti":"DJ","osttimor":"TL","Ã¤gypten":"EG","Ã¤quatorialguinea":"GQ","estland":"EE","Ã¤thiopien":"ET","mazedonien, ehemalige jugoslawische republik":"MK","falklandinseln":"FK","fÃ¤rÃ¶er":"FO","mikronesien":"FM","fidschi":"FJ","finnland":"FI","frankreich":"FR","franzÃ¶sisch-guayana":"GF","franzÃ¶sisch-polynesien":"PF","gabun":"GA","deutschland":"DE","griechenland":"GR","grÃ¶nland":"GL","hongkong":"HK","ungarn":"HU","island":"IS","indien":"IN","indonesien":"ID","irak":"IQ","irland":"IE","italien":"IT","jamaika":"JM","jordanien":"JO","kenia":"KE","kirgisistan":"KG","lettland":"LV","libanon":"LB","libyen":"LY","litauen":"LT","luxemburg":"LU","madagaskar":"MG","malediven":"MV","marianen":"MP","marshallinseln":"MH","martinique":"MQ","mauretanien":"MR","mexiko":"MX","moldau":"MD","mongolei":"MN","marokko":"MA","mosambik":"MZ","niederlande":"NL","niederlÃ¤ndische antillen":"AN","neukaledonien":"NC","neuseeland":"NZ","norfolkinseln":"NF","nordkorea":"KP","nÃ¶rdliche marianen":"MP","norwegen":"NO","palÃ¤stinensische autonomiebehÃ¶rde":"PS","papua-neuguinea":"PG","china, volksrepublik":"CN","philippinen":"PH","polen":"PL","katar":"QA","china, republik":"TW","irland, republik":"IE","rumÃ¤nien":"RO","russland":"RU","ruanda":"RW","st. helena":"SH","st. kitts und nevis":"KN","st. lucia":"LC","saint-pierre und miquelon":"PM","saint-vincent":"VC","st. vincent und die grenadinen":"VC","saudi-arabien":"SA","serbien":"RS","seychellen":"SC","singapur":"SG","slowakei":"SK","slowenien":"SI","salomoninseln":"SB","sÃ¼dafrika":"ZA","sÃ¼dkorea":"KR","spanien":"ES","surinam":"SR","swasiland":"SZ","schweden":"SE","schweiz":"CH","syrien":"SY","sÃ£o tomÃ© und prÃ­ncipe":"ST","tadschikistan":"TJ","tansania":"TZ","bahamas":"BS","gambia":"GM","turks- und caicosinseln":"TC","amerikanische jungferninseln":"VI","trinidad und tobago":"TT","tunesien":"TN","tÃ¼rkei":"TR","vae":"AE","vereinigte arabische emirate":"AE","groÃbritannien":"GB","usbekistan":"UZ","vatikanstadt":"VA","wallis und futuna":"WF","jemen":"YE","sambia":"ZM","simbabwe":"ZW","afghanistan":"AF","Ã¥landinseln":"AX","andorra":"AD","angola":"AO","anguilla":"AI","antigua":"AG","arabien":"SA","aruba":"AW","bahrain":"BH","barbados":"BB","barbuda":"AG","belarus":"BY","belize":"BZ","benin":"BJ","bermuda":"BM","bhutan":"BT","bolivarische republik venezuela":"VE","bolivien, plurinationaler staat":"BO","bosnien":"BA","bouvetinsel":"BV","britische territorien im indischen ozean":"IO","brunei":"BN","brunei darussalam":"BN","burkina faso":"BF","burundi":"BI","caicosinseln":"TC","kanada":"CA","chile":"CL","china":"CN","weihnachtsinsel":"CX","kokosinseln (keelinginseln)":"CC","kokos- und keelinginseln":"CC","kokosinseln":"CC","kongo":"CD","costa rica":"CR","demokratische republik kongo":"CD","demokratische volksrepublik korea":"KP","dominica":"DM","kdvr":"KP","dubai":"AE","ecuador":"EC","el salvador":"SV","england":"GB","eritrea":"ER","ehemalige jugoslawische republik mazedonien":"MK","fÃ¶derierte staaten von mikronesien":"FM","franzÃ¶sische sÃ¼d- und antarktisgebiete":"TF","futuna":"WF","georgien":"GE","ghana":"GH","gibraltar":"GI","grenada":"GD","grenadinen":"VC","guadeloupe":"GP","guam":"GU","guatemala":"GT","guernsey":"GG","guinea":"GN","guinea-bissau":"GW","guyana":"GY","haiti":"HT","heard und mcdonaldinseln":"HM","heardinsel":"HM","herzegowina":"BA","holland":"NL","heiliger stuhl":"VA","honduras":"HN","iran":"IR","iran, islamische republik":"IR","islamische republik iran":"IR","isle of man":"IM","israel":"IL","elfenbeinkÃ¼ste":"CI","jan mayen":"SJ","japan":"JP","jersey":"JE","kasachstan":"KZ","kiribati":"KI","korea":"KR","korea, demokatrische volksrepublik":"KP","korea, republik":"KR","kuwait":"KW","laos, demokratische volksrepublik":"LA","laos":"LA","lesotho":"LS","liberia":"LR","libysch-arabische volks-dschamahirija":"LY","liechtenstein":"LI","macau":"MO","mazedonien":"MK","malawi":"MW","malaysia":"MY","mali":"ML","malta":"MT","malwinen":"FK","mauritius":"MU","mayotte":"YT","mcdonaldinseln":"HM","mikronesien, fÃ¶derierte staaten von":"FM","miquelon":"PM","moldau, republik":"MD","monaco":"MC","montenegro":"ME","montserrat":"MS","myanmar":"MM","namibia":"NA","nauru":"NR","nepal":"NP","nevis":"KN","nicaragua":"NI","niger":"NE","nigeria":"NG","palÃ¤stinensische gebiete":"PS","oman":"OM","china, vr":"CN","pakistan":"PK","palau":"PW","palÃ¤stina":"PS","panama":"PA","paraguay":"PY","peru":"PE","pitcairn":"PN","plurinationaler staat bolivien":"BO","polynesien":"PF","portugal":"PT","vrc":"CN","prÃ­ncipe":"ST","puerto rico":"PR","republik korea":"KR","republik moldau":"MD","singapur, republik":"SG","rÃ©union":"RE","russische fÃ¶deration":"RU","st. barthÃ©lemy":"BL","st. barts":"BL","st. helena, ascension und tristan da cunha":"SH","st. kitts":"KN","st. martin":"MF","st. pierre":"PM","st. pierre und miquelon":"PM","st. vincent":"VC","samoa":"WS","san marino":"SM","sÃ£o tomÃ©":"ST","schottland":"GB","senegal":"SN","sierra leone":"SL","salomonen":"SB","somalia":"SO","sÃ¼dgeorgien":"GS","sÃ¼dgeorgien und die sÃ¼dlichen sandwichinseln":"GS","sÃ¼dliche sandwichinseln":"GS","sri lanka":"LK","st. bartholomÃ¤us":"BL","sudan":"SD","svalbard":"SJ","svalbard und jan mayen":"SJ","arabische republik syrien":"SY","taiwan":"TW","tansania, vereinigte republik":"TZ","thailand":"TH","timor-leste":"TL","tobago":"TT","togo":"TG","tokelau":"TK","tonga":"TO","trinidad":"TT","tristan da cunha":"SH","turkmenistan":"TM","turksinseln":"TC","tuvalu":"TV","v.a.e.":"AE","vk":"GB","usa":"US","uganda":"UG","ukraine":"UA","vereinigtes kÃ¶nigreich":"GB","vereinigte republik tansania":"TZ","vereinigte staaten":"US","vereinigte staaten von amerika":"US","uruguay":"UY","vanuatu":"VU","vatikan":"VA","venezuela":"VE","venezuela, bolivarische republik":"VE","vietnam":"VN","jungferninseln":"VI","jungferninseln, britische":"VG","jungferninseln, amerikanische":"VI","wales":"GB","wallis":"WF","westsahara":"EH","Ã©ire":"IE","Ascension":"AC","Andorra":"AD","Vereinigte Arabische Emirate":"AE","Afghanistan":"AF","Antigua und Barbuda":"AG","Anguilla":"AI","Albanien":"AL","Armenien":"AM","NiederlÃ¤ndische Antillen":"AN","Angola":"AO","Antarktis":"AQ","Argentinien":"AR","Amerikanisch-Samoa":"AS","Ãsterreich":"AT","Australien":"AU","Aruba":"AW","Alandinseln":"AX","Aserbaidschan":"AZ","Bosnien und Herzegowina":"BA","Barbados":"BB","Bangladesch":"BD","Belgien":"BE","Burkina Faso":"BF","Bulgarien":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","St. BarthÃ©lemy":"BL","Bermuda":"BM","Brunei Darussalam":"BN","Bolivien":"BO","Karibische Niederlande":"BQ","Brasilien":"BR","Bahamas":"BS","Bhutan":"BT","Bouvetinsel":"BV","Botsuana":"BW","Belarus":"BY","Belize":"BZ","Kanada":"CA","Kokosinseln":"CC","Kongo-Kinshasa":"CD","Zentralafrikanische Republik":"CF","Kongo-Brazzaville":"CG","Schweiz":"CH","CÃ´te dâIvoire":"CI","Cookinseln":"CK","Chile":"CL","Kamerun":"CM","China":"CN","Kolumbien":"CO","Clipperton-Insel":"CP","Costa Rica":"CR","Kuba":"CU","Kap Verde":"CV","CuraÃ§ao":"CW","Weihnachtsinsel":"CX","Zypern":"CY","Tschechische Republik":"CZ","Deutschland":"DE","Diego Garcia":"DG","Dschibuti":"DJ","DÃ¤nemark":"DK","Dominica":"DM","Dominikanische Republik":"DO","Algerien":"DZ","Ceuta und Melilla":"EA","Ecuador":"EC","Estland":"EE","Ãgypten":"EG","Westsahara":"EH","Eritrea":"ER","Spanien":"ES","Ãthiopien":"ET","EuropÃ¤ische Union":"EU","Finnland":"FI","Fidschi":"FJ","Falklandinseln":"FK","Mikronesien":"FM","FÃ¤rÃ¶er":"FO","Frankreich":"FR","Gabun":"GA","Vereinigtes KÃ¶nigreich":"GB","Grenada":"GD","Georgien":"GE","FranzÃ¶sisch-Guayana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","GrÃ¶nland":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Ãquatorialguinea":"GQ","Griechenland":"GR","SÃ¼dgeorgien und die SÃ¼dlichen Sandwichinseln":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Sonderverwaltungszone Hongkong":"HK","Heard- und McDonald-Inseln":"HM","Honduras":"HN","Kroatien":"HR","Haiti":"HT","Ungarn":"HU","Kanarische Inseln":"IC","Indonesien":"ID","Irland":"IE","Israel":"IL","Isle of Man":"IM","Indien":"IN","Britisches Territorium im Indischen Ozean":"IO","Irak":"IQ","Iran":"IR","Island":"IS","Italien":"IT","Jersey":"JE","Jamaika":"JM","Jordanien":"JO","Japan":"JP","Kenia":"KE","Kirgisistan":"KG","Kambodscha":"KH","Kiribati":"KI","Komoren":"KM","St. Kitts und Nevis":"KN","Demokratische Volksrepublik Korea":"KP","Republik Korea":"KR","Kuwait":"KW","Kaimaninseln":"KY","Kasachstan":"KZ","Laos":"LA","Libanon":"LB","St. Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Litauen":"LT","Luxemburg":"LU","Lettland":"LV","Libyen":"LY","Marokko":"MA","Monaco":"MC","Republik Moldau":"MD","Montenegro":"ME","St. Martin":"MF","Madagaskar":"MG","Marshallinseln":"MH","Mazedonien":"MK","Mali":"ML","Myanmar":"MM","Mongolei":"MN","Sonderverwaltungszone Macao":"MO","NÃ¶rdliche Marianen":"MP","Martinique":"MQ","Mauretanien":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Malediven":"MV","Malawi":"MW","Mexiko":"MX","Malaysia":"MY","Mosambik":"MZ","Namibia":"NA","Neukaledonien":"NC","Niger":"NE","Norfolkinsel":"NF","Nigeria":"NG","Nicaragua":"NI","Niederlande":"NL","Norwegen":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Neuseeland":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","FranzÃ¶sisch-Polynesien":"PF","Papua-Neuguinea":"PG","Philippinen":"PH","Pakistan":"PK","Polen":"PL","St. Pierre und Miquelon":"PM","Pitcairninseln":"PN","Puerto Rico":"PR","PalÃ¤stinensische Autonomiegebiete":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Katar":"QA","ÃuÃeres Ozeanien":"QO","RÃ©union":"RE","RumÃ¤nien":"RO","Serbien":"RS","Russische FÃ¶deration":"RU","Ruanda":"RW","Saudi-Arabien":"SA","Salomonen":"SB","Seychellen":"SC","Sudan":"SD","Schweden":"SE","Singapur":"SG","St. Helena":"SH","Slowenien":"SI","Svalbard und Jan Mayen":"SJ","Slowakei":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Suriname":"SR","SÃ¼dsudan":"SS","SÃ£o TomÃ© und PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Syrien":"SY","Swasiland":"SZ","Tristan da Cunha":"TA","Turks- und Caicosinseln":"TC","Tschad":"TD","FranzÃ¶sische SÃ¼d- und Antarktisgebiete":"TF","Togo":"TG","Thailand":"TH","Tadschikistan":"TJ","Tokelau":"TK","Osttimor":"TL","Turkmenistan":"TM","Tunesien":"TN","Tonga":"TO","TÃ¼rkei":"TR","Trinidad und Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tansania":"TZ","Ukraine":"UA","Uganda":"UG","Amerikanisch-Ozeanien":"UM","Vereinigte Staaten":"US","Uruguay":"UY","Usbekistan":"UZ","Vatikanstadt":"VA","St. Vincent und die Grenadinen":"VC","Venezuela":"VE","Britische Jungferninseln":"VG","Amerikanische Jungferninseln":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis und Futuna":"WF","Samoa":"WS","Jemen":"YE","Mayotte":"YT","SÃ¼dafrika":"ZA","Sambia":"ZM","Simbabwe":"ZW","Unbekannte Region":"ZZ","Asien":"142","Zentralasien":"143","Westasien":"145","Europa":"150","Osteuropa":"151","Nordeuropa":"154","Westeuropa":"155","Lateinamerika":"419","Welt":"001","Afrika":"002","Nordamerika":"003","SÃ¼damerika":"005","Ozeanien":"009","Westafrika":"011","Mittelamerika":"013","Ostafrika":"014","Nordafrika":"015","Zentralafrika":"017","SÃ¼dliches Afrika":"018","Amerika":"019","NÃ¶rdliches Amerika":"021","Karibik":"029","Ostasien":"030","SÃ¼dasien":"034","SÃ¼dostasien":"035","SÃ¼deuropa":"039","Australien und Neuseeland":"053","Melanesien":"054","Mikronesisches Inselgebiet":"057","Polynesien":"061"};
ilib.data.ctrynames_fr = {"generated":false,"albanie":"AL","algÃ©rie":"DZ","samoa amÃ©ricaines":"AS","andorre":"AD","antigua-et-barbuda":"AG","argentine":"AR","armÃ©nie":"AM","australie":"AU","autriche":"AT","azerbaÃ¯djan":"AZ","ivb":"VG","bahreÃ¯n":"BH","barbade":"BB","biÃ©lorussie":"BY","belgique":"BE","bÃ©nin":"BJ","bermudes":"BM","bhoutan":"BT","bolivie":"BO","bosnie-herzÃ©govine":"BA","brÃ©sil":"BR","territoire de lâocÃ©an indien britannique":"IO","bulgarie":"BG","cambodge":"KH","cameroun":"CM","cap-vert":"CV","caÃ¯mans":"KY","rÃ©publique dâafrique centrale":"CF","tchad":"TD","chili":"CL","chine":"CN","colombie":"CO","comores":"KM","Ã®les cook":"CK","croatie":"HR","chypre":"CY","rÃ©publique tchÃ¨que":"CZ","cÃ´te dâivoire":"CI","r.d.":"DO","rdc":"CD","rÃ©publique dÃ©mocratique du congo":"CD","danemark":"DK","dominique":"DM","rÃ©publique dominicaine":"DO","timor oriental":"TL","Ã©quateur":"EC","Ã©gypte":"EG","guinÃ©e Ã©quatoriale":"GQ","Ã©rythrÃ©e":"ER","estonie":"EE","Ã©thiopie":"ET","arym":"MK","Ã®les falkland":"FK","falkland":"FK","Ã®les fÃ©roÃ©":"FO","Ã©tats fÃ©dÃ©rÃ©s de micronÃ©sie":"FM","fidji":"FJ","finlande":"FI","ex-rÃ©publique yougoslave de macÃ©doine":"MK","guyane franÃ§aise":"GF","polynÃ©sie franÃ§aise":"PF","gambie":"GM","gÃ©orgie":"GE","allemagne":"DE","grenade":"GD","grÃ¨ce":"GR","groenland":"GL","guadeloupe":"GP","guinÃ©e":"GN","guinÃ©e-bissau":"GW","guyane":"GY","haÃ¯ti":"HT","hongrie":"HU","islande":"IS","inde":"IN","indonÃ©sie":"ID","irak":"IQ","irlande":"IE","israÃ«l":"IL","italie":"IT","jamaÃ¯que":"JM","japon":"JP","jordanie":"JO","koweÃ¯t":"KW","kirghizistan":"KG","lettonie":"LV","liban":"LB","libye":"LY","lituanie":"LT","macao":"MO","malaisie":"MY","malte":"MT","marianne":"MP","Ã®les marshall":"MH","mauritanie":"MR","maurice":"MU","mexique":"MX","micronÃ©sie":"FM","moldavie":"MD","mongolie":"MN","montÃ©nÃ©gro":"ME","maroc":"MA","namibie":"NA","nÃ©pal":"NP","pays-bas":"NL","antilles nÃ©erlandaises":"AN","nouvelle-calÃ©donie":"NC","nouvelle-zÃ©lande":"NZ","Ã®le norfolk":"NF","corÃ©e du nord":"KP","Ã®les marianne du nord":"MP","norvÃ¨ge":"NO","palaos":"PW","autoritÃ© palestinienne":"PS","panamÃ¡":"PA","papouasie-nouvelle-guinÃ©e":"PG","rÃ©publique populaire de chine":"CN","pÃ©rou":"PE","pologne":"PL","porto rico":"PR","rÃ©publique de chine":"TW","rÃ©publique dâirlande":"IE","roumanie":"RO","russie":"RU","sainte-hÃ©lÃ¨ne":"SH","saint-kitts-et-nevis":"KN","sainte-lucie":"LC","saint-vincent":"VC","saint-vincent et les grenadines":"VC","saint-marin":"SM","arabie saoudite":"SA","sÃ©nÃ©gal":"SN","serbie":"RS","singapour":"SG","saint-martin":"MF","slovaquie":"SK","slovÃ©nie":"SI","Ã®les solomon":"SB","somalie":"SO","afrique du sud":"ZA","corÃ©e du sud":"KR","espagne":"ES","ste-lucie":"LC","saint-pierre-et-miquelon":"PM","soudan":"SD","suÃ¨de":"SE","suisse":"CH","syrie":"SY","sao tomÃ©-et-principe":"ST","taÃ¯wan":"TW","tadjikistan":"TJ","tanzanie":"TZ","thaÃ¯lande":"TH","les bahamas":"BS","Ã®les vierges britanniques":"VG","Ã®les turks et caicos":"TC","Ã®les vierges amÃ©ricaines":"VI","trinitÃ©-et-tobago":"TT","tunisie":"TN","turquie":"TR","turkmÃ©nistan":"TM","Ã©au":"AE","ouganda":"UG","Ã©mirats arabes unis":"AE","royaume-uni":"GB","ouzbÃ©kistan":"UZ","vatican":"VA","wallis-et-futuna":"WF","yÃ©men":"YE","zambie":"ZM","afghanistan":"AF","Ã®les aland":"AX","angola":"AO","anguilla":"AI","antigua":"AG","arabie":"SA","aruba":"AW","ascension":"SH","i.v.b.":"VG","bahamas":"BS","bangladesh":"BD","barbuda":"AG","bÃ©larus":"BY","belize":"BZ","bermude":"BM","rÃ©publique bolivarienne du venezuela":"VE","bolivie, Ã©tat plurinational de":"BO","bosnie":"BA","botswana":"BW","Ã®le bouvet":"BV","territoire britannique de lâocÃ©an indien":"IO","brunÃ©i":"BN","brunÃ©i darussalam":"BN","burkina faso":"BF","burundi":"BI","r.c.a.":"CF","Ã®les caicos":"TC","canada":"CA","Ã®les du cap-vert":"CV","rca":"CF","Ã®les caÃ¯mans":"KY","rÃ©publique centrafricaine":"CF","Ã®le christmas":"CX","Ã®les cocos et keeling":"CC","Ã®les cocos (keeling)":"CC","Ã®les cocos":"CC","congo":"CD","congo, rÃ©publique dÃ©mocratique du":"CD","congo, rÃ©publique dÃ©mocratique":"CD","costa rica":"CR","cuba":"CU","rÃ©publique populaire dÃ©mocratique de corÃ©e":"KP","fjibouti":"DJ","rpdc":"KP","rd":"DO","dubaÃ¯":"AE","el salvador":"SV","angleterre":"GB","a.r.y.m.":"MK","malouines":"FK","fÃ©roÃ©":"FO","france":"FR","territoires franÃ§ais de lâantarctique":"TF","futuna":"WF","gabon":"GA","ghana":"GH","gibraltar":"GI","grande-bretagne":"GB","grenadines":"VC","guam":"GU","guatemala":"GT","guernesey":"GG","Ã®les heard et mcdonald":"HM","Ã®le heard":"HM","Ã®le heard et Ã®les mcdonald":"HM","herzÃ©govine":"BA","hollande":"NL","saint-siÃ¨ge":"VA","honduras":"HN","hong kong":"HK","iran":"IR","iran, rÃ©publique islamique":"IR","iraq":"IQ","rÃ©publique islamique dâiran":"IR","Ã®le de man":"IM","jan mayen":"SJ","jersey":"JE","kazakhstan":"KZ","kenya":"KE","kiribati":"KI","corÃ©e":"KR","corÃ©e, rÃ©publique populaire dÃ©mocratique de":"KP","corÃ©e, rÃ©publique de":"KR","rÃ©publique dÃ©mocratique populaire lao":"LA","laos":"LA","lesotho":"LS","libÃ©ria":"LR","jamahiriya arabe libyenne populaire et socialiste":"LY","liechtenstein":"LI","lithuanie":"LT","luxembourg":"LU","macÃ©doine":"MK","macÃ©doine, ex-rÃ©publique yougoslave de":"MK","macÃ©doine, lâex-rÃ©publique yougoslave de":"MK","madagascar":"MG","malawi":"MW","maldives":"MV","mali":"ML","mariannes":"MP","marshalls":"MH","martinique":"MQ","mayotte":"YT","Ã®les mcdonald":"HM","micronÃ©sie, Ã©tats fÃ©dÃ©rÃ©s de":"FM","miquelon":"PM","moldavie, rÃ©publique de":"MD","monaco":"MC","montserrat":"MS","mozambique":"MZ","myanmar":"MM","nauru":"NR","nevis":"KN","nicaragua":"NI","niger":"NE","nigÃ©ria":"NG","Ã®les mariannes du nord":"MP","territoires palestiniens occupÃ©s":"PS","oman":"OM","r. p. chine":"CN","r. p. de chine":"CN","r.p. de chine":"CN","pakistan":"PK","palau":"PW","palestine":"PS","territoires palestiniens":"PS","territoires palestiniens, occupÃ©s":"PS","panama":"PA","paraguay":"PY","philippines":"PH","pitcairn":"PN","Ã©tat plurinational de bolivie":"BO","polynÃ©sie":"PF","portugal":"PT","rp chine":"CN","rpc":"CN","principe":"ST","qatar":"QA","rÃ©publique de corÃ©e":"KR","rÃ©publique de moldavie":"MD","rÃ©publique de singapour":"SG","rÃ©union":"RE","fÃ©dÃ©ration russe":"RU","rwanda":"RW","saint barthÃ©lemy":"BL","saint-barthÃ©lemy":"BL","sainte-hÃ©lÃ¨ne, ascension et tristan da cunha":"SH","saint-kitts":"KN","saint-pierre":"PM","samoa":"WS","sao tomÃ©":"ST","Ã©cosse":"GB","seychelles":"SC","sierra leone":"SL","slovakie":"SK","Ã®les salomon":"SB","salomon":"SB","gÃ©orgie du sud":"GS","gÃ©orgie du sud et Ã®les sandwich du sud":"GS","Ã®les sandwich du sud":"GS","sri lanka":"LK","st. barthÃ©lemy":"BL","st barth":"BL","ste hÃ©lÃ¨ne":"SH","ste hÃ©lÃ¨ne, ascension et tristan da cunha":"SH","st-kitts":"KN","st-kitts-et-nevis":"KN","ste lucie":"LC","st-vincent":"VC","st barthÃ©lemy":"BL","st. barth":"BL","st martin":"MF","suriname":"SR","svalbard":"SJ","svalbard et jan mayen":"SJ","swaziland":"SZ","rÃ©publique arabe syrienne":"SY","taiwan":"TW","tanzanie, rÃ©publique unie":"TZ","lâex-rÃ©publique yougoslave de macÃ©doine":"MK","les grenadines":"VC","les pays-bas":"NL","les philippines":"PH","la rÃ©publique de singapour":"SG","le soudan":"SD","tobago":"TT","togo":"TG","tokelau":"TK","tonga":"TO","trinitÃ©":"TT","tristan da cunha":"SH","Ã®les turks":"TC","tuvalu":"TV","e.a.u.":"AE","r.u.":"GB","Ã©.-u.":"US","eau":"AE","ru":"GB","ukraine":"UA","rÃ©publique unie de tanzanie":"TZ","Ã©tats-unis":"US","Ã®les mineures Ã©loignÃ©es des Ã©tats-unis":"UM","Ã©tats-unis dâamÃ©rique":"US","uruguay":"UY","Ã©-u":"US","iveu":"VI","vanuatu":"VU","citÃ© du vatican":"VA","Ã©tat de la citÃ© du vatican":"VA","venezuela":"VE","venezuela, rÃ©publique bolivarienne du":"VE","viÃªt nam":"VN","vietnam":"VN","Ã®les vierges":"VI","Ã®les vierges, britanniques":"VG","Ã®les vierges, Ã©-u":"VI","pays de galles":"GB","wallis":"WF","sahara occidental":"EH","zimbabwe":"ZW","Ã®les Ã¥land":"AX","Ãle de lâAscension":"AC","Andorre":"AD","Ãmirats arabes unis":"AE","Afghanistan":"AF","Antigua-et-Barbuda":"AG","Anguilla":"AI","Albanie":"AL","ArmÃ©nie":"AM","Antilles nÃ©erlandaises":"AN","Angola":"AO","Antarctique":"AQ","Argentine":"AR","Samoa amÃ©ricaines":"AS","Autriche":"AT","Australie":"AU","Aruba":"AW","Ãles Ãland":"AX","AzerbaÃ¯djan":"AZ","Bosnie-HerzÃ©govine":"BA","Barbade":"BB","Bangladesh":"BD","Belgique":"BE","Burkina Faso":"BF","Bulgarie":"BG","BahreÃ¯n":"BH","Burundi":"BI","BÃ©nin":"BJ","Saint-BarthÃ©lÃ©my":"BL","Bermudes":"BM","BrunÃ©i Darussalam":"BN","Bolivie":"BO","Pays-Bas caribÃ©ens":"BQ","BrÃ©sil":"BR","Bahamas":"BS","Bhoutan":"BT","Ãle Bouvet":"BV","Botswana":"BW","BÃ©larus":"BY","Belize":"BZ","Canada":"CA","Ãles Cocos [Keeling]":"CC","RÃ©publique dÃ©mocratique du Congo":"CD","RÃ©publique centrafricaine":"CF","Congo-Brazzaville":"CG","Suisse":"CH","CÃ´te dâIvoire":"CI","Ãles Cook":"CK","Chili":"CL","Cameroun":"CM","Chine":"CN","Colombie":"CO","Ãle Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","Cap-Vert":"CV","CuraÃ§ao":"CW","Ãle Christmas":"CX","Chypre":"CY","RÃ©publique tchÃ¨que":"CZ","Allemagne":"DE","Diego Garcia":"DG","Djibouti":"DJ","Danemark":"DK","Dominique":"DM","RÃ©publique dominicaine":"DO","AlgÃ©rie":"DZ","Ceuta et Melilla":"EA","Ãquateur":"EC","Estonie":"EE","Ãgypte":"EG","Sahara occidental":"EH","ÃrythrÃ©e":"ER","Espagne":"ES","Ãthiopie":"ET","Union europÃ©enne":"EU","Finlande":"FI","Fidji":"FJ","Ãles Malouines":"FK","Ãtats fÃ©dÃ©rÃ©s de MicronÃ©sie":"FM","Ãles FÃ©roÃ©":"FO","France":"FR","Gabon":"GA","Royaume-Uni":"GB","Grenade":"GD","GÃ©orgie":"GE","Guyane franÃ§aise":"GF","Guernesey":"GG","Ghana":"GH","Gibraltar":"GI","Groenland":"GL","Gambie":"GM","GuinÃ©e":"GN","Guadeloupe":"GP","GuinÃ©e Ã©quatoriale":"GQ","GrÃ¨ce":"GR","GÃ©orgie du Sud et les Ãles Sandwich du Sud":"GS","Guatemala":"GT","Guam":"GU","GuinÃ©e-Bissau":"GW","Guyana":"GY","R.A.S. chinoise de Hong Kong":"HK","Ãles Heard et MacDonald":"HM","Honduras":"HN","Croatie":"HR","HaÃ¯ti":"HT","Hongrie":"HU","Ãles Canaries":"IC","IndonÃ©sie":"ID","Irlande":"IE","IsraÃ«l":"IL","Ãle de Man":"IM","Inde":"IN","Territoire britannique de l'ocÃ©an Indien":"IO","Irak":"IQ","Iran":"IR","Islande":"IS","Italie":"IT","Jersey":"JE","JamaÃ¯que":"JM","Jordanie":"JO","Japon":"JP","Kenya":"KE","Kirghizistan":"KG","Cambodge":"KH","Kiribati":"KI","Comores":"KM","Saint-Kitts-et-Nevis":"KN","CorÃ©e du Nord":"KP","CorÃ©e du Sud":"KR","KoweÃ¯t":"KW","Ãles CaÃ¯mans":"KY","Kazakhstan":"KZ","Laos":"LA","Liban":"LB","Sainte-Lucie":"LC","Liechtenstein":"LI","Sri Lanka":"LK","LibÃ©ria":"LR","Lesotho":"LS","Lituanie":"LT","Luxembourg":"LU","Lettonie":"LV","Libye":"LY","Maroc":"MA","Monaco":"MC","Moldavie":"MD","MontÃ©nÃ©gro":"ME","Saint-Martin [partie franÃ§aise]":"MF","Madagascar":"MG","Ãles Marshall":"MH","MacÃ©doine":"MK","Mali":"ML","Myanmar":"MM","Mongolie":"MN","R.A.S. chinoise de Macao":"MO","Ãles Mariannes du Nord":"MP","Martinique":"MQ","Mauritanie":"MR","Montserrat":"MS","Malte":"MT","Maurice":"MU","Maldives":"MV","Malawi":"MW","Mexique":"MX","Malaisie":"MY","Mozambique":"MZ","Namibie":"NA","Nouvelle-CalÃ©donie":"NC","Niger":"NE","Ãle Norfolk":"NF","NigÃ©ria":"NG","Nicaragua":"NI","Pays-Bas":"NL","NorvÃ¨ge":"NO","NÃ©pal":"NP","Nauru":"NR","Niue":"NU","Nouvelle-ZÃ©lande":"NZ","Oman":"OM","Panama":"PA","PÃ©rou":"PE","PolynÃ©sie franÃ§aise":"PF","Papouasie-Nouvelle-GuinÃ©e":"PG","Philippines":"PH","Pakistan":"PK","Pologne":"PL","Saint-Pierre-et-Miquelon":"PM","Pitcairn":"PN","Porto Rico":"PR","Territoire palestinien":"PS","Portugal":"PT","Palaos":"PW","Paraguay":"PY","Qatar":"QA","rÃ©gions Ã©loignÃ©es de lâOcÃ©anie":"QO","RÃ©union":"RE","Roumanie":"RO","Serbie":"RS","Russie":"RU","Rwanda":"RW","Arabie saoudite":"SA","Ãles Salomon":"SB","Seychelles":"SC","Soudan":"SD","SuÃ¨de":"SE","Singapour":"SG","Sainte-HÃ©lÃ¨ne":"SH","SlovÃ©nie":"SI","Svalbard et Ãle Jan Mayen":"SJ","Slovaquie":"SK","Sierra Leone":"SL","Saint-Marin":"SM","SÃ©nÃ©gal":"SN","Somalie":"SO","Suriname":"SR","Soudan du Sud":"SS","Sao TomÃ©-et-PrÃ­ncipe":"ST","El Salvador":"SV","Saint-Martin [partie nÃ©erlandaise]":"SX","Syrie":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Ãles Turks et CaÃ¯ques":"TC","Tchad":"TD","Terres australes franÃ§aises":"TF","Togo":"TG","ThaÃ¯lande":"TH","Tadjikistan":"TJ","Tokelau":"TK","Timor oriental":"TL","TurkmÃ©nistan":"TM","Tunisie":"TN","Tonga":"TO","Turquie":"TR","TrinitÃ©-et-Tobago":"TT","Tuvalu":"TV","TaÃ¯wan":"TW","Tanzanie":"TZ","Ukraine":"UA","Ouganda":"UG","Ãles Ã©loignÃ©es des Ãtats-Unis":"UM","Ãtats-Unis":"US","Uruguay":"UY","OuzbÃ©kistan":"UZ","Ãtat de la CitÃ© du Vatican":"VA","Saint-Vincent-et-les Grenadines":"VC","Venezuela":"VE","Ãles Vierges britanniques":"VG","Ãles Vierges des Ãtats-Unis":"VI","ViÃªt Nam":"VN","Vanuatu":"VU","Wallis-et-Futuna":"WF","Samoa":"WS","YÃ©men":"YE","Mayotte":"YT","Afrique du Sud":"ZA","Zambie":"ZM","Zimbabwe":"ZW","rÃ©gion indÃ©terminÃ©e":"ZZ","Asie":"142","Asie centrale":"143","Asie occidentale":"145","Europe":"150","Europe orientale":"151","Europe septentrionale":"154","Europe occidentale":"155","AmÃ©rique latine":"419","Monde":"001","Afrique":"002","AmÃ©rique du Nord":"003","AmÃ©rique du Sud":"005","OcÃ©anie":"009","Afrique occidentale":"011","AmÃ©rique centrale":"013","Afrique orientale":"014","Afrique septentrionale":"015","Afrique centrale":"017","Afrique australe":"018","AmÃ©riques":"019","AmÃ©rique septentrionale":"021","CaraÃ¯bes":"029","Asie orientale":"030","Asie du Sud":"034","Asie du Sud-Est":"035","Europe mÃ©ridionale":"039","Australie et Nouvelle-ZÃ©lande":"053","MÃ©lanÃ©sie":"054","rÃ©gion micronÃ©sienne":"057","PolynÃ©sie":"061"};
ilib.data.ctrynames_fr_CA = {"generated":false,"Ãle de l'Ascension":"AC","GÃ©orgie du Sud et les Ã®les Sandwich du Sud":"GS","Sao TomÃ©-et-Principe":"ST"};
ilib.data.ctrynames_es = {"generated":false,"afganistÃ¡n":"AF","argelia":"DZ","samoa americana":"AS","anguila":"AI","antigua y barbuda":"AG","ascensiÃ³n":"SH","azerbaiyÃ¡n":"AZ","islas vÃ­rgenes britÃ¡nicas":"VG","bahrein":"BH","bielorrusia":"BY","bÃ©lgica":"BE","belice":"BZ","benÃ­n":"BJ","bermudas":"BM","butÃ¡n":"BT","bosnia y herzegovina":"BA","botsuana":"BW","brasil":"BR","territorio britÃ¡nico del ocÃ©ano Ã­ndico":"IO","camboya":"KH","camerÃºn":"CM","cabo verde":"CV","caimÃ¡n":"KY","repÃºblica centroafricana":"CF","comoras":"KM","islas cook":"CK","croacia":"HR","chipre":"CY","repÃºblica checa":"CZ","costa de marfil":"CI","repÃºblica dominicana":"DO","rdc":"CD","repÃºblica democrÃ¡tica del congo":"CD","dinamarca":"DK","yibuti":"DJ","timor oriental":"TL","egipto":"EG","guinea ecuatorial":"GQ","etiopÃ­a":"ET","antigua repÃºblica yugoslava de macedonia":"MK","islas malvinas":"FK","malvinas":"FK","islas feroe":"FO","estados federados de micronesia":"FM","fiyi":"FJ","finlandia":"FI","francia":"FR","guayana francesa":"GF","polinesia francesa":"PF","gabÃ³n":"GA","alemania":"DE","grecia":"GR","groenlandia":"GL","granada":"GD","guadalupe":"GP","haitÃ­":"HT","hungrÃ­a":"HU","islandia":"IS","irÃ¡n":"IR","irak":"IQ","irlanda":"IE","italia":"IT","japÃ³n":"JP","jordania":"JO","kenia":"KE","kirguistÃ¡n":"KG","letonia":"LV","lÃ­bano":"LB","libia":"LY","lituania":"LT","luxemburgo":"LU","malasia":"MY","maldivas":"MV","malÃ­":"ML","islas marshall":"MH","martinica":"MQ","mauricio":"MU","mÃ©xico":"MX","moldavia":"MD","mÃ³naco":"MC","marruecos":"MA","paÃ­ses bajos":"NL","antillas holandesas":"AN","nueva caledonia":"NC","nueva zelanda":"NZ","nÃ­ger":"NE","isla norfolk":"NF","corea del norte":"KP","islas marianas del norte":"MP","noruega":"NO","omÃ¡n":"OM","pakistÃ¡n":"PK","palaos":"PW","autoridad palestina":"PS","panamÃ¡":"PA","papua nueva guinea":"PG","repÃºblica popular china":"CN","perÃº":"PE","filipinas":"PH","polonia":"PL","repÃºblica de china":"TW","repÃºblica de irlanda":"IE","rumania":"RO","rusia":"RU","ruanda":"RW","reuniÃ³n":"RE","santa helena":"SH","san cristÃ³bal y nieves":"KN","santa lucÃ­a":"LC","san pedro y miquelÃ³n":"PM","saint-vincent":"VC","san vicente y las granadinas":"VC","arabia saudita":"SA","sierra leona":"SL","singapur":"SG","eslovaquia":"SK","eslovenia":"SI","islas salomÃ³n":"SB","sudÃ¡frica":"ZA","corea del sur":"KR","espaÃ±a":"ES","santa lucia":"LC","sudÃ¡n":"SD","surinam":"SR","swazilandia":"SZ","suecia":"SE","suiza":"CH","siria":"SY","santo tomÃ© y prÃ­ncipe":"ST","taiwÃ¡n":"TW","tayikistÃ¡n":"TJ","tailandia":"TH","las bahamas":"BS","gambia":"GM","trinidad y tobago":"TT","tÃºnez":"TN","turquÃ­a":"TR","turkmenistÃ¡n":"TM","eau":"AE","ucrania":"UA","emiratos Ã¡rabes unidos":"AE","reino unido":"GB","uzbekistÃ¡n":"UZ","ciudad del vaticano":"VA","wallis y futuna":"WF","islas de Ã¥land":"AX","albania":"AL","andorra":"AD","angola":"AO","antigua":"AG","arabia":"SA","argentina":"AR","armenia":"AM","aruba":"AW","australia":"AU","austria":"AT","ivb":"VG","bahamas":"BS","bangladesh":"BD","barbados":"BB","barbuda":"AG","repÃºblica bolivariana de venezuela":"VE","bolivia":"BO","bolivia, estado plurinacional de":"BO","bosnia":"BA","isla bouvet":"BV","brunei":"BN","brunei darussalam":"BN","bulgaria":"BG","burkina faso":"BF","burundi":"BI","rca":"CF","islas caicos":"TC","canadÃ¡":"CA","islas caimÃ¡n":"KY","chad":"TD","chile":"CL","china":"CN","isla christmas":"CX","islas cocos y keeling":"CC","islas cocos":"CC","colombia":"CO","congo":"CD","congo, repÃºblica democrÃ¡tica del":"CD","costa rica":"CR","cuba":"CU","repÃºblica popular democrÃ¡tica de corea":"KP","dominica":"DM","dprk":"KP","rd":"DO","dubai":"AE","ecuador":"EC","el salvador":"SV","inglaterra":"GB","eritrea":"ER","estonia":"EE","feroe":"FO","tierras australes de francia":"TF","futuna":"WF","georgia":"GE","ghana":"GH","gibraltar":"GI","gran bretaÃ±a":"GB","granadinas":"VC","guam":"GU","guatemala":"GT","guernsey":"GG","guinea":"GN","guinea-bissau":"GW","guyana":"GY","islas heard y mcdonald":"HM","isla heard":"HM","herzegovina":"BA","holanda":"NL","santa sede":"VA","honduras":"HN","hong kong":"HK","india":"IN","indonesia":"ID","irÃ¡n, repÃºblica islÃ¡mica de":"IR","repÃºblica islÃ¡mica de irÃ¡n":"IR","isla de man":"IM","israel":"IL","jamaica":"JM","jan mayen":"SJ","jersey":"JE","kazajistÃ¡n":"KZ","kiribati":"KI","corea":"KR","corea, repÃºblica popular democrÃ¡tica de":"KP","corea, repÃºblica de":"KR","kuwait":"KW","repÃºblica democrÃ¡tica popular lao":"LA","laos":"LA","lesoto":"LS","liberia":"LR","jamahiriya Ã¡rabe libia":"LY","liechtenstein":"LI","macao":"MO","macedonia":"MK","macedonia, antigua repÃºblica yugoslava de":"MK","macedonia, la antigua repÃºblica yugoslava de":"MK","madagascar":"MG","malaui":"MW","mali":"ML","malta":"MT","marianas":"MP","marshalls":"MH","mauritania":"MR","mayotte":"YT","islas mcdonald":"HM","micronesia":"FM","micronesia, estados federados de":"FM","miquelÃ³n":"PM","moldovia":"MD","moldovia, repÃºblica de":"MD","mongolia":"MN","montenegro":"ME","montserrat":"MS","mozambique":"MZ","myanmar":"MM","namibia":"NA","nauru":"NR","nepal":"NP","nieves":"KN","nicaragua":"NI","nigeria":"NG","territorios ocupados palestinos":"PS","r. p. china":"CN","palestine":"PS","territorios palestinos":"PS","paraguay":"PY","pitcairn":"PN","estado plurinacional de bolivia":"BO","png":"PG","polinesia":"PF","portugal":"PT","rp china":"CN","r.p.c.":"CN","prÃ­ncipe":"ST","puerto rico":"PR","qatar":"QA","repÃºblica de corea":"KR","repÃºblica de moldovia":"MD","repÃºblica de singapur":"SG","federaciÃ³n rusa":"RU","saint barthÃ©lemy":"BL","san bartolomÃ©":"BL","santa helena, ascensiÃ³n y tristÃ¡n de acuÃ±a":"SH","san cristobal":"KN","san martÃ­n":"MF","san pedro":"PM","san vicente":"VC","samoa":"WS","san marino":"SM","santo tomÃ©":"ST","escocia":"GB","senegal":"SN","serbia":"RS","seychelles":"SC","somalia":"SO","georgias del sur":"GS","islas georgias del sur y sandwich del sur":"GS","islas sandwich del sur":"GS","sri lanka":"LK","st barthÃ©lemy":"BL","st. barthÃ©lemy":"BL","s bartolomÃ©":"BL","sta. elena":"SH","sta elena, ascensiÃ³n y tristÃ¡n de acuÃ±a":"SH","s. cristÃ³bal":"KN","s cristÃ³bal y nieves":"KN","sta lucÃ­a":"LC","s. martÃ­n":"MF","s. vicente":"VC","s vicente y las granadinas":"VC","s. bartolomÃ©":"BL","svalbard":"SJ","svalbard y jan mayen":"SJ","repÃºblica Ã¡rabe siria":"SY","tanzania":"TZ","tanzania, repÃºblica unida de":"TZ","la repÃºblica democrÃ¡tica del congo":"CD","la antigua repÃºblica yugoslava de macedonia":"MK","las granadinas":"VC","islas sÃ¡ndwich del sur":"GS","islas vÃ­rgenes de ee.uu.":"VI","timor-leste":"TL","tobago":"TT","togo":"TG","tokelau":"TK","tonga":"TO","trinidad":"TT","tristÃ¡n de acuÃ±a":"SH","islas turcas y caicos":"TC","islas turcas":"TC","tuvalu":"TV","r.u.":"GB","ee.uu.":"US","uganda":"UG","ru":"GB","repÃºblica unida de tanzania":"TZ","estados unidos":"US","islas ultramarinas de estados unidos":"UM","estados unidos de amÃ©rica":"US","uruguay":"UY","usvi":"VI","vanuatu":"VU","vaticano":"VA","venezuela":"VE","venezuela, repÃºblica bolivariana de":"VE","vietnam":"VN","islas vÃ­rgenes":"VI","islas vÃ­rgenes, ee.uu.":"VI","gales":"GB","wallis":"WF","sahara occidental":"EH","yemen":"YE","zambia":"ZM","zimbabue":"ZW","Ã©ire":"IE","Isla de la AscensiÃ³n":"AC","Andorra":"AD","Emiratos Ãrabes Unidos":"AE","AfganistÃ¡n":"AF","Antigua y Barbuda":"AG","Anguila":"AI","Albania":"AL","Armenia":"AM","Antillas Neerlandesas":"AN","Angola":"AO","AntÃ¡rtida":"AQ","Argentina":"AR","Samoa Americana":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Islas Ãland":"AX","AzerbaiyÃ¡n":"AZ","Bosnia-Herzegovina":"BA","Barbados":"BB","Bangladesh":"BD","BÃ©lgica":"BE","Burkina Faso":"BF","Bulgaria":"BG","BahrÃ©in":"BH","Burundi":"BI","BenÃ­n":"BJ","San BartolomÃ©":"BL","Bermudas":"BM","BrunÃ©i":"BN","Bolivia":"BO","Caribe neerlandÃ©s":"BQ","Brasil":"BR","Bahamas":"BS","ButÃ¡n":"BT","Isla Bouvet":"BV","Botsuana":"BW","Bielorrusia":"BY","Belice":"BZ","CanadÃ¡":"CA","Islas Cocos":"CC","RepÃºblica DemocrÃ¡tica del Congo":"CD","RepÃºblica Centroafricana":"CF","Congo - Brazzaville":"CG","Suiza":"CH","Costa de Marfil":"CI","Islas Cook":"CK","Chile":"CL","CamerÃºn":"CM","China":"CN","Colombia":"CO","Isla Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","Cabo Verde":"CV","Curazao":"CW","Isla Christmas":"CX","Chipre":"CY","RepÃºblica Checa":"CZ","Alemania":"DE","Diego GarcÃ­a":"DG","Yibuti":"DJ","Dinamarca":"DK","Dominica":"DM","RepÃºblica Dominicana":"DO","Argelia":"DZ","Ceuta y Melilla":"EA","Ecuador":"EC","Estonia":"EE","Egipto":"EG","SÃ¡hara Occidental":"EH","Eritrea":"ER","EspaÃ±a":"ES","EtiopÃ­a":"ET","UniÃ³n Europea":"EU","Finlandia":"FI","Fiyi":"FJ","Islas Malvinas":"FK","Micronesia":"FM","Islas Feroe":"FO","Francia":"FR","GabÃ³n":"GA","Reino Unido":"GB","Granada":"GD","Georgia":"GE","Guayana Francesa":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","Groenlandia":"GL","Gambia":"GM","Guinea":"GN","Guadalupe":"GP","Guinea Ecuatorial":"GQ","Grecia":"GR","Islas Georgia del Sur y Sandwich del Sur":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","RegiÃ³n Administrativa Especial de Hong Kong de la RepÃºblica Popular China":"HK","Islas Heard y McDonald":"HM","Honduras":"HN","Croacia":"HR","HaitÃ­":"HT","HungrÃ­a":"HU","Islas Canarias":"IC","Indonesia":"ID","Irlanda":"IE","Israel":"IL","Isla de Man":"IM","India":"IN","Territorio BritÃ¡nico del OcÃ©ano Ãndico":"IO","Iraq":"IQ","IrÃ¡n":"IR","Islandia":"IS","Italia":"IT","Jersey":"JE","Jamaica":"JM","Jordania":"JO","JapÃ³n":"JP","Kenia":"KE","KirguistÃ¡n":"KG","Camboya":"KH","Kiribati":"KI","Comoras":"KM","San CristÃ³bal y Nieves":"KN","Corea del Norte":"KP","Corea del Sur":"KR","Kuwait":"KW","Islas CaimÃ¡n":"KY","KazajistÃ¡n":"KZ","Laos":"LA","LÃ­bano":"LB","Santa LucÃ­a":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesoto":"LS","Lituania":"LT","Luxemburgo":"LU","Letonia":"LV","Libia":"LY","Marruecos":"MA","MÃ³naco":"MC","Moldavia":"MD","Montenegro":"ME","San MartÃ­n":"MF","Madagascar":"MG","Islas Marshall":"MH","Macedonia":"MK","Mali":"ML","Myanmar [Birmania]":"MM","Mongolia":"MN","RegiÃ³n Administrativa Especial de Macao de la RepÃºblica Popular China":"MO","Islas Marianas del Norte":"MP","Martinica":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauricio":"MU","Maldivas":"MV","Malaui":"MW","MÃ©xico":"MX","Malasia":"MY","Mozambique":"MZ","Namibia":"NA","Nueva Caledonia":"NC","NÃ­ger":"NE","Isla Norfolk":"NF","Nigeria":"NG","Nicaragua":"NI","PaÃ­ses Bajos":"NL","Noruega":"NO","Nepal":"NP","Nauru":"NR","Isla Niue":"NU","Nueva Zelanda":"NZ","OmÃ¡n":"OM","PanamÃ¡":"PA","PerÃº":"PE","Polinesia Francesa":"PF","PapÃºa Nueva Guinea":"PG","Filipinas":"PH","PakistÃ¡n":"PK","Polonia":"PL","San Pedro y MiquelÃ³n":"PM","Islas Pitcairn":"PN","Puerto Rico":"PR","Territorios Palestinos":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Territorios alejados de OceanÃ­a":"QO","ReuniÃ³n":"RE","RumanÃ­a":"RO","Serbia":"RS","Rusia":"RU","Ruanda":"RW","Arabia SaudÃ­":"SA","Islas SalomÃ³n":"SB","Seychelles":"SC","SudÃ¡n":"SD","Suecia":"SE","Singapur":"SG","Santa Elena":"SH","Eslovenia":"SI","Svalbard y Jan Mayen":"SJ","Eslovaquia":"SK","Sierra Leona":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Surinam":"SR","SudÃ¡n del Sur":"SS","Santo TomÃ© y PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Siria":"SY","Suazilandia":"SZ","TristÃ¡n da Cunha":"TA","Islas Turcas y Caicos":"TC","Chad":"TD","Territorios Australes Franceses":"TF","Togo":"TG","Tailandia":"TH","TayikistÃ¡n":"TJ","Tokelau":"TK","Timor Oriental":"TL","TurkmenistÃ¡n":"TM","TÃºnez":"TN","Tonga":"TO","TurquÃ­a":"TR","Trinidad y Tobago":"TT","Tuvalu":"TV","TaiwÃ¡n":"TW","Tanzania":"TZ","Ucrania":"UA","Uganda":"UG","Islas menores alejadas de los Estados Unidos":"UM","Estados Unidos":"US","Uruguay":"UY","UzbekistÃ¡n":"UZ","Ciudad del Vaticano":"VA","San Vicente y las Granadinas":"VC","Venezuela":"VE","Islas VÃ­rgenes BritÃ¡nicas":"VG","Islas VÃ­rgenes de los Estados Unidos":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis y Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","SudÃ¡frica":"ZA","Zambia":"ZM","Zimbabue":"ZW","RegiÃ³n desconocida":"ZZ","Asia":"142","Asia central":"143","Asia occidental":"145","Europa":"150","Europa oriental":"151","Europa septentrional":"154","Europa occidental":"155","LatinoamÃ©rica":"419","Mundo":"001","Ãfrica":"002","AmÃ©rica del Norte":"003","SuramÃ©rica":"005","OceanÃ­a":"009","Ãfrica occidental":"011","CentroamÃ©rica":"013","Ãfrica oriental":"014","Ãfrica septentrional":"015","Ãfrica central":"017","Ãfrica meridional":"018","AmÃ©ricas":"019","NorteamÃ©rica":"021","Caribe":"029","Asia oriental":"030","Asia meridional":"034","Sudeste asiÃ¡tico":"035","Europa meridional":"039","Australasia":"053","Melanesia":"054","Micronesia [057]":"057","Polinesia":"061"};
ilib.data.ctrynames_es_ES = {"generated":false,"costa de marfil":"CI"};
ilib.data.ctrynames_id = {"Asia":"142","Asia Tengah":"143","Asia Barat":"145","Eropa":"150","Eropa Timur":"151","Eropa Utara":"154","Eropa Barat":"155","Amerika Latin":"419","Dunia":"001","Afrika":"002","Amerika Utara":"003","Amerika Selatan":"005","Oseania":"009","Afrika Barat":"011","Amerika Tengah":"013","Afrika Timur":"014","Afrika Utara":"015","Afrika Tengah":"017","Afrika Bagian Selatan":"018","Amerika":"019","Amerika Bagian Utara":"021","Kepulauan Karibia":"029","Asia Timur":"030","Asia Selatan":"034","Asia Tenggara":"035","Eropa Selatan":"039","Australasia":"053","Melanesia":"054","Wilayah Mikronesia":"057","Polinesia":"061","Pulau Ascension":"AC","Andora":"AD","Uni Emirat Arab":"AE","Afganistan":"AF","Antigua dan Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Antilla Belanda":"AN","Angola":"AO","Antarktika":"AQ","Argentina":"AR","Samoa Amerika":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Kepulauan Aland":"AX","Azerbaijan":"AZ","Bosnia dan Herzegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgia":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","Saint Barthelemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Karibia Belanda":"BQ","Brasil":"BR","Bahama":"BS","Bhutan":"BT","Pulau Bouvet":"BV","Botswana":"BW","Belarus":"BY","Belize":"BZ","Kanada":"CA","Kepulauan Cocos":"CC","Kongo - Kinshasa":"CD","Republik Afrika Tengah":"CF","Kongo - Brazzaville":"CG","Swiss":"CH","Cote d'Ivoire":"CI","Kepulauan Cook":"CK","Cile":"CL","Kamerun":"CM","China":"CN","Kolombia":"CO","Pulau Clipperton":"CP","Kosta Rika":"CR","Kuba":"CU","Tanjung Verde":"CV","CuraÃ§ao":"CW","Pulau Christmas":"CX","Siprus":"CY","Republik Cheska":"CZ","Jerman":"DE","Diego Garcia":"DG","Jibuti":"DJ","Denmark":"DK","Dominika":"DM","Republik Dominika":"DO","Aljazair":"DZ","Ceuta dan Melilla":"EA","Ekuador":"EC","Estonia":"EE","Mesir":"EG","Sahara Barat":"EH","Eritrea":"ER","Spanyol":"ES","Etiopia":"ET","Uni Eropa":"EU","Finlandia":"FI","Fiji":"FJ","Kepulauan Malvinas":"FK","Mikronesia":"FM","Kepulauan Faroe":"FO","Prancis":"FR","Gabon":"GA","Inggris":"GB","Grenada":"GD","Georgia":"GE","Guyana Prancis":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","Grinlandia":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Guinea Ekuatorial":"GQ","Yunani":"GR","Kepulauan South Sandwich dan South Georgia":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Hong Kong SAR China":"HK","Pulau Heard dan Kepulauan McDonald":"HM","Honduras":"HN","Kroasia":"HR","Haiti":"HT","Hungaria":"HU","Kepulauan Canary":"IC","Indonesia":"ID","Irlandia":"IE","Israel":"IL","Isle of Man":"IM","India":"IN","Wilayah Inggris di Samudra Hindia":"IO","Irak":"IQ","Iran":"IR","Islandia":"IS","Italia":"IT","Jersey":"JE","Jamaika":"JM","Yordania":"JO","Jepang":"JP","Kenya":"KE","Kirgistan":"KG","Kamboja":"KH","Kiribati":"KI","Komoro":"KM","Saint Kitts dan Nevis":"KN","Korea Utara":"KP","Korea Selatan":"KR","Kuwait":"KW","Kepulauan Kayman":"KY","Kazakstan":"KZ","Laos":"LA","Lebanon":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Lituania":"LT","Luksemburg":"LU","Latvia":"LV","Libia":"LY","Maroko":"MA","Monako":"MC","Moldova":"MD","Montenegro":"ME","Saint Martin":"MF","Madagaskar":"MG","Kepulauan Marshall":"MH","Makedonia":"MK","Mali":"ML","Myanmar":"MM","Mongolia":"MN","Makau SAR China":"MO","Kepulauan Mariana Utara":"MP","Martinik":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maladewa":"MV","Malawi":"MW","Meksiko":"MX","Malaysia":"MY","Mozambik":"MZ","Namibia":"NA","Kaledonia Baru":"NC","Niger":"NE","Kepulauan Norfolk":"NF","Nigeria":"NG","Nikaragua":"NI","Belanda":"NL","Norwegia":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Selandia Baru":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Polinesia Prancis":"PF","Papua Nugini":"PG","Filipina":"PH","Pakistan":"PK","Polandia":"PL","Saint Pierre dan Miquelon":"PM","Kepulauan Pitcairn":"PN","Puerto Riko":"PR","Otoritas Palestina":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Oseania Luar":"QO","RÃ©union":"RE","Rumania":"RO","Serbia":"RS","Rusia":"RU","Rwanda":"RW","Arab Saudi":"SA","Kepulauan Solomon":"SB","Seychelles":"SC","Sudan":"SD","Swedia":"SE","Singapura":"SG","Saint Helena":"SH","Slovenia":"SI","Kepulauan Svalbard dan Jan Mayen":"SJ","Slovakia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Suriname":"SR","Sudan Selatan":"SS","Sao Tome dan Principe":"ST","El Salvador":"SV","Sint Maarten":"SX","Suriah":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Kepulauan Turks dan Caicos":"TC","Cad":"TD","Teritori Kutub Selatan Prancis":"TF","Togo":"TG","Thailand":"TH","Tajikistan":"TJ","Tokelau":"TK","Timor Leste":"TL","Turkimenistan":"TM","Tunisia":"TN","Tonga":"TO","Turki":"TR","Trinidad dan Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ukraina":"UA","Uganda":"UG","Kepulauan Terluar A.S.":"UM","Amerika Serikat":"US","Uruguay":"UY","Uzbekistan":"UZ","Vatikan":"VA","Saint Vincent dan Grenadines":"VC","Venezuela":"VE","Kepulauan Virgin Inggris":"VG","Kepulauan Virgin A.S.":"VI","Vietnam":"VN","Vanuatu":"VU","Kepulauan Wallis dan Futuna":"WF","Samoa":"WS","Yaman":"YE","Mayotte":"YT","Afrika Selatan":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Wilayah Tidak Dikenal":"ZZ"};
ilib.data.ctrynames_it = {"generated":false,"samoa americane":"AS","antigua e barbuda":"AG","ascensione":"SH","azerbaigian":"AZ","isole vergini britanniche":"VG","bielorussia":"BY","belgio":"BE","bosnia erzegovina":"BA","brasile":"BR","territori britannici dellâoceano indiano":"IO","cambogia":"KH","camerun":"CM","capo verde":"CV","cayman":"KY","repubblica centrafricana":"CF","ciad":"TD","cile":"CL","cina":"CN","isole cook":"CK","croazia":"HR","cipro":"CY","repubblica ceca":"CZ","costa dâavorio":"CI","rep. dominicana":"DO","repubblica democratica del congo":"CD","danimarca":"DK","gibuti":"DJ","repubblica dominicana":"DO","timor est":"TL","egitto":"EG","guinea equatoriale":"GQ","etiopia":"ET","macedonia":"MK","isole falkland":"FK","falkland":"FK","isole fÃ¦r Ã¸er":"FO","stati federati di micronesia":"FM","finlandia":"FI","repubblica ex jugoslava di macedonia":"MK","francia":"FR","guiana francese":"GF","polinesia francese":"PF","germania":"DE","gibilterra":"GI","grecia":"GR","groenlandia":"GL","guadalupa":"GP","ungheria":"HU","islanda":"IS","irlanda":"IE","israele":"IL","italia":"IT","giamaica":"JM","giappone":"JP","giordania":"JO","kenia":"KE","kirghizistan":"KG","lettonia":"LV","libano":"LB","libia":"LY","liechtenstein":"LI","lituania":"LT","lussemburgo":"LU","macao":"MO","malesia":"MY","maldive":"MV","marianne":"MP","isole marshall":"MH","martinica":"MQ","messico":"MX","moldavia":"MD","principato di monaco":"MC","marocco":"MA","mozambico":"MZ","paesi bassi":"NL","antille olandesi":"AN","nuova caledonia":"NC","nuova zelanda":"NZ","isola norfolk":"NF","corea del nord":"KP","isole marianne settentrionali":"MP","norvegia":"NO","autoritÃ  palestinese":"PS","papua nuova guinea":"PG","repubblica popolare cinese":"CN","perÃ¹":"PE","filippine":"PH","polonia":"PL","portogallo":"PT","porto rico":"PR","repubblica di cona":"TW","ruanda":"RW","santâelena":"SH","saint kitts e nevis":"KN","santa lucia":"LC","saint pierre e miquelon":"PM","saint-vincent":"VC","saint vincent e le grenadines":"VC","arabia saudita":"SA","slovacchia":"SK","isole salomone":"SB","sudafrica":"ZA","corea del sud":"KR","spagna":"ES","st. pierre e miquelon":"PM","svezia":"SE","svizzera":"CH","siria":"SY","sao tome e principe":"ST","tagikistan":"TJ","tailandia":"TH","le bahamas":"BS","isole cayman":"KY","gambia":"GM","isole turks e caicos":"TC","trinidad e tobago":"TT","turchia":"TR","isole vergini statunitensi":"VI","eau":"AE","ucraina":"UA","emirati arabi uniti":"AE","regno unito":"GB","cittÃ  del vaticano":"VA","wallis e futuna":"WF","afghanistan":"AF","isole Ã¥land":"AX","albania":"AL","algeria":"DZ","andorra":"AD","angola":"AO","anguilla":"AI","antigua":"AG","arabia":"SA","argentina":"AR","armenia":"AM","aruba":"AW","australia":"AU","austria":"AT","bahamas":"BS","bahrain":"BH","bangladesh":"BD","barbados":"BB","barbuda":"AG","belize":"BZ","benin":"BJ","bermuda":"BM","bhutan":"BT","repubblica bolivariana del venezuela":"VE","bolivia":"BO","bolivia, stato plurinazionale della":"BO","bosnia":"BA","botswana":"BW","isola bouvet":"BV","territorio britannico dell'oceano indiano":"IO","brunei":"BN","brunei darussalam":"BN","bulgaria":"BG","burkina faso":"BF","burundi":"BI","isole caicos":"TC","canada":"CA","isole di capo verde":"CV","isola christmas":"CX","isole cocos e keeling":"CC","isole cocos":"CC","colombia":"CO","comoros":"KM","congo":"CD","congo, repubblica democratica del":"CD","costa rica":"CR","cuba":"CU","repubblica democratica popolare di corea":"KP","dominica":"DM","dubai":"AE","ecuador":"EC","el salvador":"SV","inghilterra":"GB","eritrea":"ER","estonia":"EE","isole falklands":"FK","falklands":"FK","isole faeroer":"FO","faeroer":"FO","fiji":"FJ","guyana francese":"GF","territori francesi meridionali":"TF","futuna":"WF","gabon":"GA","georgia":"GE","ghana":"GH","gran bretagna":"GB","grenada":"GD","grenadine":"VC","guam":"GU","guatemala":"GT","guernsey":"GG","guinea":"GN","guinea-bissau":"GW","guyana":"GY","haiti":"HT","isole heard e mcdonald":"HM","isola heard":"HM","isola heard ed isole mcdonald":"HM","erzegovina":"BA","olanda":"NL","santa sede":"VA","honduras":"HN","hong kong":"HK","india":"IN","indonesia":"ID","iran":"IR","repubblica islamica dell'iran":"IR","iraq":"IQ","isola di man":"IM","costa d'avorio":"CI","jan mayen":"SJ","jersey":"JE","kazakistan":"KZ","kiribati":"KI","corea":"KR","corea, repubblica democratica popolare di":"KP","corea, repubblica di":"KR","kuwait":"KW","repubblica popolare democratica del laos":"LA","laos":"LA","lesotho":"LS","liberia":"LR","jamahiriya araba di libia":"LY","macedonia, repubblica ex jugoslava di":"MK","madagascar":"MG","malawi":"MW","mali":"ML","malta":"MT","malvine":"FK","marshall":"MH","mauritania":"MR","mauritius":"MU","mayotte":"YT","isole mcdonald":"HM","micronesia":"FM","micronesia, stati federati della":"FM","miquelon":"PM","moldavia, repubblica di":"MD","monaco":"MC","mongolia":"MN","montenegro":"ME","myanmar":"MM","namibia":"NA","nauru":"NR","nepal":"NP","nevis":"KN","nicaragua":"NI","niger":"NE","nigeria":"NG","territori occupati palestinesi":"PS","oman":"OM","r. p. cinese":"CN","pakistan":"PK","palau":"PW","palestina":"PS","territori palestinesi":"PS","panama":"PA","paraguay":"PY","pitcairn":"PN","stato plurinazionale della bolivia":"BO","polinesia":"PF","principe":"ST","qatar":"QA","repubblica di cina":"TW","repubblica della corea":"KR","repubblica della moldavia":"MD","repubblica di singapore ":"SG","riunione":"RE","romania":"RO","russia":"RU","federazione russa":"RU","saint-barthÃ©lemy":"BL","san barth":"BL","sant'elena":"SH","sant'elena, ascensione e tristan da cunha":"SH","saint kitts":"KN","saint-pierre":"PM","saint-pierre e miquelon":"PM","saint vincent":"VC","samoa":"WS","san marino":"SM","sao tome":"ST","scozia":"GB","senegal":"SN","serbia":"RS","seychelles":"SC","sierra leone":"SL","singapore":"SG","slovenia":"SI","salomone":"SB","somalia":"SO","georgia del sud":"GS","georgia del sud e isole sandwich meridionali":"GS","isole sandwich meridionali":"GS","sri lanka":"LK","st. lucia":"LC","st. martin":"MF","saint pierre":"PM","st. vincent":"VC","sudan":"SD","suriname":"SR","svalbard":"SJ","svalbard e jan mayen":"SJ","swaziland":"SZ","repubblica araba di siria":"SY","taiwan":"TW","tanzania":"TZ","tanzania, repubblica unita di":"TZ","le grenadines":"VC","repubblica di singapore":"SG","tobago":"TT","togo":"TG","tokelau":"TK","tonga":"TO","trinidad":"TT","tristan da cunha":"SH","tunisia":"TN","turkmenistan":"TM","isole turks":"TC","tuvalu":"TV","usa":"US","uganda":"UG","repubblica unita di tanzania":"TZ","stati uniti":"US","isole minori esterne degli stati uniti":"UM","stati uniti dâamerica":"US","uruguay":"UY","uzbekistan":"UZ","vanuatu":"VU","vaticano":"VA","venezuela":"VE","venezuela, repubblica bolivariana del":"VE","vietnam":"VN","isole vergini":"VI","galles":"GB","wallis":"WF","sahara occidentale":"EH","yemen":"YE","zambia":"ZM","zimbabwe":"ZW","eire":"IE","Isola di Ascensione":"AC","Andorra":"AD","Emirati Arabi Uniti":"AE","Afghanistan":"AF","Antigua e Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Antille Olandesi":"AN","Angola":"AO","Antartide":"AQ","Argentina":"AR","Samoa Americane":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Isole Aland":"AX","Azerbaigian":"AZ","Bosnia Erzegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgio":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","San Bartolomeo":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Caraibi Olandesi":"BQ","Brasile":"BR","Bahamas":"BS","Bhutan":"BT","Isola Bouvet":"BV","Botswana":"BW","Bielorussia":"BY","Belize":"BZ","Canada":"CA","Isole Cocos":"CC","Congo - Kinshasa":"CD","Repubblica Centrafricana":"CF","Congo":"CG","Svizzera":"CH","Costa dâAvorio":"CI","Isole Cook":"CK","Cile":"CL","Camerun":"CM","Cina":"CN","Colombia":"CO","Isola di Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","Capo Verde":"CV","CuraÃ§ao":"CW","Isola di Christmas":"CX","Cipro":"CY","Repubblica Ceca":"CZ","Germania":"DE","Diego Garcia":"DG","Gibuti":"DJ","Danimarca":"DK","Dominica":"DM","Repubblica Dominicana":"DO","Algeria":"DZ","Ceuta e Melilla":"EA","Ecuador":"EC","Estonia":"EE","Egitto":"EG","Sahara Occidentale":"EH","Eritrea":"ER","Spagna":"ES","Etiopia":"ET","Unione Europea":"EU","Finlandia":"FI","Figi":"FJ","Isole Falkland":"FK","Micronesia":"FM","Isole Faroe":"FO","Francia":"FR","Gabon":"GA","Regno Unito":"GB","Grenada":"GD","Georgia":"GE","Guiana Francese":"GF","Guernsey":"GG","Ghana":"GH","Gibilterra":"GI","Groenlandia":"GL","Gambia":"GM","Guinea":"GN","Guadalupa":"GP","Guinea Equatoriale":"GQ","Grecia":"GR","Georgia del Sud e Isole Sandwich del Sud":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","RAS di Hong Kong":"HK","Isole Heard ed Isole McDonald":"HM","Honduras":"HN","Croazia":"HR","Haiti":"HT","Ungheria":"HU","Isole Canarie":"IC","Indonesia":"ID","Irlanda":"IE","Israele":"IL","Isola di Man":"IM","India":"IN","Territorio Britannico dellâOceano Indiano":"IO","Iraq":"IQ","Iran":"IR","Islanda":"IS","Italia":"IT","Jersey":"JE","Giamaica":"JM","Giordania":"JO","Giappone":"JP","Kenya":"KE","Kirghizistan":"KG","Cambogia":"KH","Kiribati":"KI","Comore":"KM","Saint Kitts e Nevis":"KN","Corea del Nord":"KP","Corea del Sud":"KR","Kuwait":"KW","Isole Cayman":"KY","Kazakistan":"KZ","Laos":"LA","Libano":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Lituania":"LT","Lussemburgo":"LU","Lettonia":"LV","Libia":"LY","Marocco":"MA","Monaco":"MC","Moldavia":"MD","Montenegro":"ME","Saint Martin":"MF","Madagascar":"MG","Isole Marshall":"MH","Repubblica di Macedonia":"MK","Mali":"ML","Myanmar":"MM","Mongolia":"MN","RAS di Macao":"MO","Isole Marianne Settentrionali":"MP","Martinica":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldive":"MV","Malawi":"MW","Messico":"MX","Malesia":"MY","Mozambico":"MZ","Namibia":"NA","Nuova Caledonia":"NC","Niger":"NE","Isola Norfolk":"NF","Nigeria":"NG","Nicaragua":"NI","Paesi Bassi":"NL","Norvegia":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Nuova Zelanda":"NZ","Oman":"OM","Panama":"PA","PerÃ¹":"PE","Polinesia Francese":"PF","Papua Nuova Guinea":"PG","Filippine":"PH","Pakistan":"PK","Polonia":"PL","Saint Pierre e Miquelon":"PM","Pitcairn":"PN","Portorico":"PR","Territori palestinesi":"PS","Portogallo":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Oceania lontana":"QO","RÃ©union":"RE","Romania":"RO","Serbia":"RS","Federazione Russa":"RU","Ruanda":"RW","Arabia Saudita":"SA","Isole Solomon":"SB","Seychelles":"SC","Sudan":"SD","Svezia":"SE","Singapore":"SG","SantâElena":"SH","Slovenia":"SI","Svalbard e Jan Mayen":"SJ","Slovacchia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Suriname":"SR","Sudan del Sud":"SS","Sao TomÃ© e PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Siria":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Isole Turks e Caicos":"TC","Ciad":"TD","Territori australi francesi":"TF","Togo":"TG","Tailandia":"TH","Tagikistan":"TJ","Tokelau":"TK","Timor Est":"TL","Turkmenistan":"TM","Tunisia":"TN","Tonga":"TO","Turchia":"TR","Trinidad e Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ucraina":"UA","Uganda":"UG","Isole periferiche agli USA":"UM","Stati Uniti":"US","Uruguay":"UY","Uzbekistan":"UZ","CittÃ  del Vaticano":"VA","Saint Vincent e Grenadines":"VC","Venezuela":"VE","Isole Vergini Britanniche":"VG","Isole Vergini Americane":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis e Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","Sudafrica":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Regione non valida o sconosciuta":"ZZ","Asia":"142","Asia centrale":"143","Asia occidentale":"145","Europa":"150","Europa orientale":"151","Europa del Nord":"154","Europa occidentale":"155","America Latina":"419","Mondo":"001","Africa":"002","Nord America":"003","America del Sud":"005","Oceania":"009","Africa occidentale":"011","America centrale":"013","Africa orientale":"014","Africa del Nord":"015","Africa centrale":"017","Africa del Sud":"018","Americhe":"019","America del Nord":"021","Caraibi":"029","Asia orientale":"030","Asia del Sud":"034","Asia sudorientale":"035","Europa del Sud":"039","Australasia":"053","Melanesia":"054","Regione Micronesiana":"057","Polinesia":"061"};
ilib.data.ctrynames_ja = {"ã¢ã¸ã¢":"142","ä¸­å¤®ã¢ã¸ã¢":"143","è¥¿ã¢ã¸ã¢":"145","ã¨ã¼ã­ãã":"150","æ±ã¨ã¼ã­ãã":"151","åã¨ã¼ã­ãã":"154","è¥¿ã¨ã¼ã­ãã":"155","ã©ãã³ã¢ã¡ãªã«":"419","ä¸ç":"001","ã¢ããªã«":"002","åã¢ã¡ãªã«å¤§é¸":"003","åã¢ã¡ãªã«":"005","ãªã»ã¢ãã¢":"009","è¥¿ã¢ããªã«":"011","ä¸­å¤®ã¢ã¡ãªã«":"013","æ±ã¢ããªã«":"014","åã¢ããªã«":"015","ä¸­é¨ã¢ããªã«":"017","åé¨ã¢ããªã«":"018","ã¢ã¡ãªã«å¤§é¸":"019","åã¢ã¡ãªã«":"021","ã«ãªã":"029","æ±ã¢ã¸ã¢":"030","åã¢ã¸ã¢":"034","æ±åã¢ã¸ã¢":"035","åã¨ã¼ã­ãã":"039","ãªã¼ã¹ãã©ã©ã·ã¢":"053","ã¡ã©ãã·ã¢":"054","ãã¯ã­ãã·ã¢":"057","ããªãã·ã¢":"061","ã¢ã»ã³ã·ã§ã³å³¶":"AC","ã¢ã³ãã©":"AD","ã¢ã©ãé¦é·å½é£é¦":"AE","ã¢ãã¬ãã¹ã¿ã³":"AF","ã¢ã³ãã£ã°ã¢ã»ãã¼ãã¼ã":"AG","ã¢ã³ã®ã©":"AI","ã¢ã«ããã¢":"AL","ã¢ã«ã¡ãã¢":"AM","ãªã©ã³ãé ã¢ã³ãã£ã«":"AN","ã¢ã³ã´ã©":"AO","åæ¥µ":"AQ","ã¢ã«ã¼ã³ãã³":"AR","ç±³é ãµã¢ã¢":"AS","ãªã¼ã¹ããªã¢":"AT","ãªã¼ã¹ãã©ãªã¢":"AU","ã¢ã«ã":"AW","ãªã¼ã©ã³ãè«¸å³¶":"AX","ã¢ã¼ã«ãã¤ã¸ã£ã³":"AZ","ãã¹ãã¢ã»ãã«ãã§ã´ãã":"BA","ãã«ããã¹":"BB","ãã³ã°ã©ãã·ã¥":"BD","ãã«ã®ã¼":"BE","ãã«ã­ããã¡ã½":"BF","ãã«ã¬ãªã¢":"BG","ãã¼ã¬ã¼ã³":"BH","ãã«ã³ã¸":"BI","ããã³":"BJ","ãµã³ã»ãã«ãã«ãã¼å³¶":"BL","ããã¥ã¼ã":"BM","ãã«ãã¤":"BN","ããªãã¢":"BO","ãªã©ã³ãé ã«ãªã":"BQ","ãã©ã¸ã«":"BR","ããã":"BS","ãã¼ã¿ã³":"BT","ãã¼ãå³¶":"BV","ããã¯ã":"BW","ãã©ã«ã¼ã·":"BY","ããªã¼ãº":"BZ","ã«ãã":"CA","ã³ã³ã¹[ã­ã¼ãªã³ã°]è«¸å³¶":"CC","ã³ã³ã´æ°ä¸»å±åå½[ã­ã³ã·ã£ãµ]":"CD","ä¸­å¤®ã¢ããªã«å±åå½":"CF","ã³ã³ã´å±åå½[ãã©ã¶ãã«]":"CG","ã¹ã¤ã¹":"CH","ã³ã¼ãã¸ãã¯ã¼ã«":"CI","ã¯ãã¯è«¸å³¶":"CK","ããª":"CL","ã«ã¡ã«ã¼ã³":"CM","ä¸­å½":"CN","ã³ã­ã³ãã¢":"CO","ã¯ãªããã¼ãã³å³¶":"CP","ã³ã¹ã¿ãªã«":"CR","ã­ã¥ã¼ã":"CU","ã«ã¼ããã«ã":"CV","ã­ã¥ã©ã½ã¼":"CW","ã¯ãªã¹ãã¹å³¶":"CX","ã­ãã­ã¹":"CY","ãã§ã³å±åå½":"CZ","ãã¤ã":"DE","ãã£ã¨ã´ã¬ã«ã·ã¢å³¶":"DG","ã¸ãã":"DJ","ãã³ãã¼ã¯":"DK","ãããã«å½":"DM","ãããã«å±åå½":"DO","ã¢ã«ã¸ã§ãªã¢":"DZ","ã»ã¦ã¿ã»ã¡ãªãªã£":"EA","ã¨ã¯ã¢ãã«":"EC","ã¨ã¹ããã¢":"EE","ã¨ã¸ãã":"EG","è¥¿ãµãã©":"EH","ã¨ãªããªã¢":"ER","ã¹ãã¤ã³":"ES","ã¨ããªãã¢":"ET","æ¬§å·é£å":"EU","ãã£ã³ã©ã³ã":"FI","ãã£ã¸ã¼":"FJ","ãã©ã¼ã¯ã©ã³ãè«¸å³¶":"FK","ãã¯ã­ãã·ã¢é£é¦":"FM","ãã§ã­ã¼è«¸å³¶":"FO","ãã©ã³ã¹":"FR","ã¬ãã³":"GA","ã¤ã®ãªã¹":"GB","ã°ã¬ãã":"GD","ã°ã«ã¸ã¢":"GE","ä»é ã®ã¢ã":"GF","ã¬ã¼ã³ã¸ã¼":"GG","ã¬ã¼ã":"GH","ã¸ãã©ã«ã¿ã«":"GI","ã°ãªã¼ã³ã©ã³ã":"GL","ã¬ã³ãã¢":"GM","ã®ãã¢":"GN","ã°ã¢ãã«ã¼ã":"GP","èµ¤éã®ãã¢":"GQ","ã®ãªã·ã£":"GR","åã¸ã§ã¼ã¸ã¢å³¶ã»åãµã³ãã¤ããè«¸å³¶":"GS","ã°ã¢ããã©":"GT","ã°ã¢ã ":"GU","ã®ãã¢ããµã¦":"GW","ã¬ã¤ã¢ã":"GY","ä¸­è¯äººæ°å±åå½é¦æ¸¯ç¹å¥è¡æ¿åº":"HK","ãã¼ãå³¶ã»ãã¯ããã«ãè«¸å³¶":"HM","ãã³ã¸ã¥ã©ã¹":"HN","ã¯ã­ã¢ãã¢":"HR","ãã¤ã":"HT","ãã³ã¬ãªã¼":"HU","ã«ããªã¢è«¸å³¶":"IC","ã¤ã³ããã·ã¢":"ID","ã¢ã¤ã«ã©ã³ã":"IE","ã¤ã¹ã©ã¨ã«":"IL","ãã³å³¶":"IM","ã¤ã³ã":"IN","è±é ã¤ã³ãæ´å°å":"IO","ã¤ã©ã¯":"IQ","ã¤ã©ã³":"IR","ã¢ã¤ã¹ã©ã³ã":"IS","ã¤ã¿ãªã¢":"IT","ã¸ã£ã¼ã¸ã¼":"JE","ã¸ã£ãã¤ã«":"JM","ã¨ã«ãã³":"JO","æ¥æ¬":"JP","ã±ãã¢":"KE","ã­ã«ã®ã¹":"KG","ã«ã³ãã¸ã¢":"KH","ã­ãªãã¹":"KI","ã³ã¢ã­":"KM","ã»ã³ãã¯ãªã¹ããã¡ã¼ã»ãã¤ãã¹":"KN","æé®®æ°ä¸»ä¸»ç¾©äººæ°å±åå½":"KP","å¤§éæ°å½":"KR","ã¯ã¦ã§ã¼ã":"KW","ã±ã¤ãã³è«¸å³¶":"KY","ã«ã¶ãã¹ã¿ã³":"KZ","ã©ãªã¹":"LA","ã¬ããã³":"LB","ã»ã³ãã«ã·ã¢":"LC","ãªããã³ã·ã¥ã¿ã¤ã³":"LI","ã¹ãªã©ã³ã«":"LK","ãªããªã¢":"LR","ã¬ã½ã":"LS","ãªãã¢ãã¢":"LT","ã«ã¯ã»ã³ãã«ã°":"LU","ã©ããã¢":"LV","ãªãã¢":"LY","ã¢ã­ãã³":"MA","ã¢ãã³":"MC","ã¢ã«ãã":"MD","ã¢ã³ããã°ã­":"ME","ãµã³ã»ãã«ã¿ã³":"MF","ããã¬ã¹ã«ã«":"MG","ãã¼ã·ã£ã«è«¸å³¶":"MH","ãã±ããã¢":"MK","ããª":"ML","ãã£ã³ãã¼":"MM","ã¢ã³ã´ã«":"MN","ä¸­è¯äººæ°å±åå½ãã«ãªç¹å¥è¡æ¿åº":"MO","åããªã¢ãè«¸å³¶":"MP","ãã«ãã£ãã¼ã¯":"MQ","ã¢ã¼ãªã¿ãã¢":"MR","ã¢ã³ãã»ã©ã":"MS","ãã«ã¿":"MT","ã¢ã¼ãªã·ã£ã¹":"MU","ã¢ã«ã¸ã":"MV","ãã©ã¦ã¤":"MW","ã¡ã­ã·ã³":"MX","ãã¬ã¼ã·ã¢":"MY","ã¢ã¶ã³ãã¼ã¯":"MZ","ãããã¢":"NA","ãã¥ã¼ã«ã¬ããã¢":"NC","ãã¸ã§ã¼ã«":"NE","ãã¼ãã©ã¼ã¯å³¶":"NF","ãã¤ã¸ã§ãªã¢":"NG","ãã«ã©ã°ã¢":"NI","ãªã©ã³ã":"NL","ãã«ã¦ã§ã¼":"NO","ããã¼ã«":"NP","ãã¦ã«":"NR","ãã¦ã¨å³¶":"NU","ãã¥ã¼ã¸ã¼ã©ã³ã":"NZ","ãªãã¼ã³":"OM","ããã":"PA","ãã«ã¼":"PE","ä»é ããªãã·ã¢":"PF","ããã¢ãã¥ã¼ã®ãã¢":"PG","ãã£ãªãã³":"PH","ãã­ã¹ã¿ã³":"PK","ãã¼ã©ã³ã":"PL","ãµã³ãã¨ã¼ã«å³¶ã»ãã¯ã­ã³å³¶":"PM","ããã±ã¢ã³è«¸å³¶":"PN","ãã¨ã«ããªã³":"PR","ãã¬ã¹ãã":"PS","ãã«ãã¬ã«":"PT","ãã©ãª":"PW","ãã©ã°ã¢ã¤":"PY","ã«ã¿ã¼ã«":"QA","ãªã»ã¢ãã¢å¨è¾ºå°å":"QO","ã¬ã¦ããªã³å³¶":"RE","ã«ã¼ããã¢":"RO","ã»ã«ãã¢":"RS","ã­ã·ã¢":"RU","ã«ã¯ã³ã":"RW","ãµã¦ã¸ã¢ã©ãã¢":"SA","ã½ã­ã¢ã³è«¸å³¶":"SB","ã»ã¼ã·ã§ã«":"SC","ã¹ã¼ãã³":"SD","ã¹ã¦ã§ã¼ãã³":"SE","ã·ã³ã¬ãã¼ã«":"SG","ã»ã³ããã¬ã":"SH","ã¹ã­ããã¢":"SI","ã¹ãã¼ã«ãã«è«¸å³¶ã»ã¤ã³ãã¤ã¨ã³å³¶":"SJ","ã¹ã­ãã­ã¢":"SK","ã·ã¨ã©ã¬ãªã":"SL","ãµã³ããªã":"SM","ã»ãã¬ã«":"SN","ã½ããªã¢":"SO","ã¹ãªãã ":"SR","åã¹ã¼ãã³":"SS","ãµã³ãã¡ã»ããªã³ã·ã":"ST","ã¨ã«ãµã«ããã«":"SV","ã·ã³ãã»ãã¼ã«ãã³":"SX","ã·ãªã¢":"SY","ã¹ã¯ã¸ã©ã³ã":"SZ","ããªã¹ã¿ã³ã»ãã»ã¯ã¼ãã£":"TA","ã¿ã¼ã¯ã¹ã»ã«ã¤ã³ã¹è«¸å³¶":"TC","ãã£ã":"TD","ä»é æ¥µåè«¸å³¶":"TF","ãã¼ã´":"TG","ã¿ã¤":"TH","ã¿ã¸ã­ã¹ã¿ã³":"TJ","ãã±ã©ã¦":"TK","æ±ãã£ã¢ã¼ã«":"TL","ãã«ã¯ã¡ãã¹ã¿ã³":"TM","ãã¥ãã¸ã¢":"TN","ãã³ã¬":"TO","ãã«ã³":"TR","ããªããã¼ãã»ããã´":"TT","ããã«":"TV","å°æ¹¾":"TW","ã¿ã³ã¶ãã¢":"TZ","ã¦ã¯ã©ã¤ã":"UA","ã¦ã¬ã³ã":"UG","ç±³é å¤ªå¹³æ´è«¸å³¶":"UM","ã¢ã¡ãªã«":"US","ã¦ã«ã°ã¢ã¤":"UY","ã¦ãºãã­ã¹ã¿ã³":"UZ","ããã«ã³å¸å½":"VA","ã»ã³ããã³ã»ã³ãã»ã°ã¬ããã£ã¼ã³è«¸å³¶":"VC","ãããºã¨ã©":"VE","è±é ã´ã¡ã¼ã¸ã³è«¸å³¶":"VG","ç±³é ã´ã¡ã¼ã¸ã³è«¸å³¶":"VI","ãããã ":"VN","ããã¢ã":"VU","ã¦ã©ãªã¹ã»ããã":"WF","ãµã¢ã¢":"WS","ã¤ã¨ã¡ã³":"YE","ãã¨ããå³¶":"YT","åã¢ããªã«":"ZA","ã¶ã³ãã¢":"ZM","ã¸ã³ããã¨":"ZW","ä¸æãªå°å":"ZZ"};
ilib.data.ctrynames_ko = {"ììì":"142","ì¤ì ììì":"143","ìììì":"145","ì ë½":"150","ëì ë½":"151","ë¶ì ë½":"154","ìì ë½":"155","ë¼í´ ìë©ë¦¬ì¹´":"419","ì¸ê³":"001","ìíë¦¬ì¹´":"002","ë¶ìë©ë¦¬ì¹´":"003","ë¨ìë©ë¦¬ì¹´[ë¨ë¯¸]":"005","ì¤ì¸ìëì":"009","ììíë¦¬ì¹´":"011","ì¤ì ìë©ë¦¬ì¹´":"013","ëë¶ ìíë¦¬ì¹´":"014","ë¶ë¶ ìíë¦¬ì¹´":"015","ì¤ë¶ ìíë¦¬ì¹´":"017","ë¨ë¶ ìíë¦¬ì¹´":"018","ìë©ë¦¬ì¹´ ëë¥":"019","ë¶ë¶ ìë©ë¦¬ì¹´":"021","ì¹´ë¦¬ë¸ í´ ì ë":"029","ëììì":"030","ë¨ììì":"034","ëë¨ ììì":"035","ë¨ì ë½":"039","ì¤ì¤í¸ëë¼ìì":"053","ë©ë¼ë¤ìì":"054","ë¯¸í¬ë¡ë¤ìì ì§ì­":"057","í´ë¦¬ë¤ìì":"061","ì´ì¼ì ì¬":"AC","ìëë¼":"AD","ìëìë¯¸ë¦¬í¸ ì°í©":"AE","ìíê°ëì¤í":"AF","ì¤í°ê° ë°ë¶ë¤":"AG","ìê¸¸ë¼":"AI","ìë°ëì":"AL","ìë¥´ë©ëì":"AM","ë¤ëëëë ¹ ìí¸ë ì¤":"AN","ìê³¨ë¼":"AO","ë¨ê·¹ ëë¥":"AQ","ìë¥´í¨í°ë":"AR","ìë©ë¦¬ì¹¸ ì¬ëª¨ì":"AS","ì¤ì¤í¸ë¦¬ì":"AT","ì¤ì¤í¸ë ì¼ë¦¬ì":"AU","ìë£¨ë°":"AW","ì¬ëë ì ë":"AX","ìì ë¥´ë°ì´ì":"AZ","ë³´ì¤ëì í¤ë¥´ì²´ê³ ë¹ë":"BA","ë°ë² ì´ëì¤":"BB","ë°©ê¸ë¼ë°ì":"BD","ë²¨ê¸°ì":"BE","ë¶ë¥´í¤ëíì":"BF","ë¶ê°ë¦¬ì":"BG","ë°ë ì¸":"BH","ë¶ë£¬ë":"BI","ë² ë":"BJ","ì ë°ë¥´íë¥´ë¯¸":"BL","ë²ë®¤ë¤":"BM","ë¸ë£¨ëì´":"BN","ë³¼ë¦¬ë¹ì":"BO","ë¤ëëëë ¹ ì¹´ë¦¬ë¸":"BQ","ë¸ë¼ì§":"BR","ë°íë§":"BS","ë¶í":"BT","ë¶ë² ":"BV","ë³´ì¸ ìë":"BW","ë²¨ë¼ë£¨ì¤":"BY","ë²¨ë¦¬ì¦":"BZ","ìºëë¤":"CA","ì½ì½ì¤ì ë":"CC","ì½©ê³ -í¨ì¤ì¬":"CD","ì¤ì ìíë¦¬ì¹´ ê³µíêµ­":"CF","ì½©ê³ ":"CG","ì¤ìì¤":"CH","ì½í¸ëë¶ìë¥´":"CI","ì¿¡ì ë":"CK","ì¹ ë ":"CL","ì¹´ë©ë£¬":"CM","ì¤êµ­":"CN","ì½ë¡¬ë¹ì":"CO","í´ë¦½í¼í¼ ì¬":"CP","ì½ì¤íë¦¬ì¹´":"CR","ì¿ ë°":"CU","ê¹ë½ë² ë¥´ë°":"CV","í´ë¼ì":"CW","í¬ë¦¬ì¤ë§ì¤ì¬":"CX","ì¬ì´íë¬ì¤":"CY","ì²´ì½":"CZ","ëì¼":"DE","ëìê³  ê°ë¥´ìì":"DG","ì§ë¶í°":"DJ","ë´ë§í¬":"DK","ëë¯¸ëì¹´":"DM","ëë¯¸ëì¹´ ê³µíêµ­":"DO","ìì ë¦¬":"DZ","ì¸ì°í ë° ë©ë¦¬ì¼":"EA","ìì½°ëë¥´":"EC","ìì¤í ëì":"EE","ì´ì§í¸":"EG","ìì¬íë¼":"EH","ìë¦¬í¸ë¦¬ì":"ER","ì¤íì¸":"ES","ì´ëì¤í¼ì":"ET","ì ë½ ì°í©":"EU","íëë":"FI","í¼ì§":"FJ","í¬í´ëë ì ë":"FK","ë¯¸í¬ë¡ë¤ìì":"FM","íë¡ì ë":"FO","íëì¤":"FR","ê°ë´":"GA","ìêµ­":"GB","ê·¸ë ëë¤":"GD","ê·¸ë£¨ì§ì¼":"GE","íëì¤ë ¹ ê¸°ìë":"GF","ê±´ì§":"GG","ê°ë":"GH","ì§ë¸ë¡¤í°":"GI","ê·¸ë¦°ëë":"GL","ê°ë¹ì":"GM","ê¸°ë":"GN","ê³¼ë¤ë£¨í":"GP","ì ë ê¸°ë":"GQ","ê·¸ë¦¬ì¤":"GR","ì¬ì°ì¤ì¡°ì§ì ì¬ì°ì¤ìëìì¹ ì ë":"GS","ê³¼íë§ë¼":"GT","ê´":"GU","ê¸°ë¤ë¹ì":"GW","ê°ì´ìë":"GY","íì½©, ì¤êµ­ í¹ë³íì êµ¬":"HK","íëì¬-ë§¥ëëëì ë":"HM","ì¨ëë¼ì¤":"HN","í¬ë¡ìí°ì":"HR","ìì´í°":"HT","íê°ë¦¬":"HU","ì¹´ëë¦¬ì ì ë":"IC","ì¸ëë¤ìì":"ID","ìì¼ëë":"IE","ì´ì¤ë¼ì":"IL","ë§¨ ì¬":"IM","ì¸ë":"IN","ìêµ­ë ¹ì¸ëììë¯¼ì§":"IO","ì´ë¼í¬":"IQ","ì´ë":"IR","ìì´ì¬ëë":"IS","ì´íë¦¬ì":"IT","ì ì§":"JE","ìë©ì´ì¹´":"JM","ìë¥´ë¨":"JO","ì¼ë³¸":"JP","ì¼ë":"KE","í¤ë¥´ê¸°ì¤ì¤í":"KG","ìºë³´ëì":"KH","í¤ë¦¬ë°ì":"KI","ì½ëª¨ë¡ì¤":"KM","ì¸ì¸í¸í¬ë¦¬ì¤í í¼ ë¤ë¹ì¤":"KN","ì¡°ì  ë¯¼ì£¼ì£¼ì ì¸ë¯¼ ê³µíêµ­":"KP","ëíë¯¼êµ­":"KR","ì¿ ì¨ì´í¸":"KW","ì¼ì´ë§¨ì ë":"KY","ì¹´ìíì¤í":"KZ","ë¼ì¤ì¤":"LA","ë ë°ë¼":"LB","ì¸ì¸í¸ë£¨ìì":"LC","ë¦¬ííìíì¸":"LI","ì¤ë¦¬ëì¹´":"LK","ë¼ì´ë² ë¦¬ì":"LR","ë ìí ":"LS","ë¦¬í¬ìëì":"LT","ë£©ìë¶ë¥´í¬":"LU","ë¼í¸ë¹ì":"LV","ë¦¬ë¹ì":"LY","ëª¨ë¡ì½":"MA","ëª¨ëì½":"MC","ëª°ëë°":"MD","ëª¬íë¤ê·¸ë¡":"ME","ì ë§ë¥´í±":"MF","ë§ë¤ê°ì¤ì¹´ë¥´":"MG","ë§ì¬ êµ°ë":"MH","ë§ì¼ëëì":"MK","ë§ë¦¬":"ML","ë¯¸ìë§":"MM","ëª½ê³¨":"MN","ë§ì¹´ì¤, ì¤êµ­ í¹ë³íì êµ¬":"MO","ë¶ë§ë¦¬ìëì ë":"MP","ë§í°ëí¬":"MQ","ëª¨ë¦¬íë":"MR","ëª¬í¸ì¸ë¼í¸":"MS","ëª°í":"MT","ëª¨ë¦¬ìì¤":"MU","ëª°ëë¸":"MV","ë§ë¼ì":"MW","ë©ìì½":"MX","ë§ë ì´ìì":"MY","ëª¨ì ë¹í¬":"MZ","ëë¯¸ë¹ì":"NA","ë´ ì¹¼ë ëëì":"NC","ëì ë¥´":"NE","ë¸í½ì¬":"NF","ëì´ì§ë¦¬ì":"NG","ëì¹´ë¼ê³¼":"NI","ë¤ëëë":"NL","ë¸ë¥´ì¨ì´":"NO","ë¤í":"NP","ëì°ë£¨":"NR","ëì°ì":"NU","ë´ì§ëë":"NZ","ì¤ë§":"OM","íëë§":"PA","íë£¨":"PE","íëì¤ë ¹ í´ë¦¬ë¤ìì":"PF","íí¸ìë´ê¸°ë":"PG","íë¦¬í":"PH","íí¤ì¤í":"PK","í´ëë":"PL","ì¸ì¸í¸í¼ìë¥´-ë¯¸ì¼ë¡±":"PM","íì¼ì¸ì¬":"PN","í¸ìë¥´í ë¦¬ì½":"PR","íë ì¤íì¸ ì§êµ¬":"PS","í¬ë¥´í¬ê°":"PT","íë¼ì°":"PW","íë¼ê³¼ì´":"PY","ì¹´íë¥´":"QA","ì¤ì¸ìëì ì¸ê³½":"QO","ë¦¬ì ëì¨":"RE","ë£¨ë§ëì":"RO","ì¸ë¥´ë¹ì":"RS","ë¬ìì":"RU","ë¥´ìë¤":"RW","ì¬ì°ëìë¼ë¹ì":"SA","ìë¡ëª¬ ì ë":"SB","ìì´ì":"SC","ìë¨":"SD","ì¤ì¨ë´":"SE","ì±ê°í¬ë¥´":"SG","ì¸ì¸í¸í¬ë ë":"SH","ì¬ë¡ë² ëì":"SI","ì¤ë°ë°ë¥´ì ë-ìë§ì¬ì¬":"SJ","ì¬ë¡ë°í¤ì":"SK","ììë¼ë¦¬ì¨":"SL","ì°ë§ë¦¬ë¸":"SM","ì¸ë¤ê°":"SN","ìë§ë¦¬ì":"SO","ìë¦¬ë¨":"SR","ë¨ìë¨":"SS","ìí¬ë© íë¦°ìí":"ST","ìì´ë°ëë¥´":"SV","ì í¸ë§ë¥´í´":"SX","ìë¦¬ì":"SY","ì¤ìì§ëë":"SZ","í¸ë¦¬ì¤íë¤ì¿ ë":"TA","í°í¬ì¤ì¼ì´ì»¤ì¤ì ë":"TC","ì°¨ë":"TD","íëì¤ ë¨ë¶ ì§ë°©":"TF","í ê³ ":"TG","íêµ­":"TH","íì§í¤ì¤í":"TJ","í ì¼ë¼ì°":"TK","ëí°ëª¨ë¥´":"TL","í¬ë¥´í¬ë©ëì¤í":"TM","íëì§":"TN","íµê°":"TO","í°í¤":"TR","í¸ë¦¬ëë¤ë í ë°ê³ ":"TT","í¬ë°ë£¨":"TV","ëë§":"TW","íìëì":"TZ","ì°í¬ë¼ì´ë":"UA","ì°ê°ë¤":"UG","ë¯¸êµ­ë ¹ í´ì¸ ì ë":"UM","ë¯¸êµ­":"US","ì°ë£¨ê³¼ì´":"UY","ì°ì¦ë² í¤ì¤í":"UZ","ë°í°ì¹¸":"VA","ì¸ì¸í¸ë¹ì¼í¸ê·¸ë ëë":"VC","ë² ë¤ììë¼":"VE","ìêµ­ë ¹ ë²ì§ ìì¼ëë":"VG","ë¯¸êµ­ë ¹ ë²ì§ ìì¼ëë":"VI","ë² í¸ë¨":"VN","ë°ëìí¬":"VU","ìë¦¬ì¤-í¸í¬ë ì ë":"WF","ì¬ëª¨ì":"WS","ìë©":"YE","ë§ìí°":"YT","ë¨ìíë¦¬ì¹´":"ZA","ì ë¹ì":"ZM","ì§ë°ë¸ì¨":"ZW","ìììê±°ë ì í¨íì§ ìì ì§ì­":"ZZ"};
ilib.data.ctrynames_pt = {"Ãsia":"142","Ãsia Central":"143","Ãsia Ocidental":"145","Europa":"150","Europa Oriental":"151","Europa Setentrional":"154","Europa Ocidental":"155","AmÃ©rica Latina":"419","Mundo":"001","Ãfrica":"002","AmÃ©rica do Norte":"003","AmÃ©rica do Sul":"005","Oceania":"009","Ãfrica Ocidental":"011","AmÃ©rica Central":"013","Ãfrica Oriental":"014","Ãfrica do Norte":"015","Ãfrica Central":"017","Ãfrica Austral":"018","AmÃ©ricas":"019","AmÃ©rica Setentrional":"021","Caribe":"029","Ãsia Oriental":"030","Ãsia do Sul":"034","Ãsia Centro-Oriental":"035","Europa do Sul":"039","AustrÃ¡lia e Nova ZelÃ¢ndia":"053","MelanÃ©sia":"054","RegiÃ£o da MicronÃ©sia":"057","PolinÃ©sia":"061","Ilha de AscensÃ£o":"AC","Andorra":"AD","Emirados Ãrabes Unidos":"AE","AfeganistÃ£o":"AF","AntÃ­gua e Barbuda":"AG","Anguilla":"AI","AlbÃ¢nia":"AL","ArmÃªnia":"AM","Antilhas Holandesas":"AN","Angola":"AO","AntÃ¡rtida":"AQ","Argentina":"AR","Samoa Americana":"AS","Ãustria":"AT","AustrÃ¡lia":"AU","Aruba":"AW","Ilhas Aland":"AX","AzerbaijÃ£o":"AZ","BÃ³snia-Herzegovina":"BA","Barbados":"BB","Bangladesh":"BD","BÃ©lgica":"BE","Burquina Faso":"BF","BulgÃ¡ria":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","SÃ£o Bartolomeu":"BL","Bermudas":"BM","Brunei":"BN","BolÃ­via":"BO","Brasil":"BR","Bahamas":"BS","ButÃ£o":"BT","Ilha Bouvet":"BV","Botsuana":"BW","Belarus":"BY","Belize":"BZ","CanadÃ¡":"CA","Ilhas Coco":"CC","Congo-Kinshasa":"CD","RepÃºblica Centro-Africana":"CF","Congo - Brazzaville":"CG","SuÃ­Ã§a":"CH","Costa do Marfim":"CI","Ilhas Cook":"CK","Chile":"CL","RepÃºblica dos CamarÃµes":"CM","China":"CN","ColÃ´mbia":"CO","Ilha de Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","Cabo Verde":"CV","Ilhas Natal":"CX","Chipre":"CY","RepÃºblica Tcheca":"CZ","Alemanha":"DE","Diego Garcia":"DG","Djibuti":"DJ","Dinamarca":"DK","Dominica":"DM","RepÃºblica Dominicana":"DO","ArgÃ©lia":"DZ","Ceuta e Melilha":"EA","Equador":"EC","EstÃ´nia":"EE","Egito":"EG","Saara Ocidental":"EH","Eritreia":"ER","Espanha":"ES","EtiÃ³pia":"ET","UniÃ£o Europeia":"EU","FinlÃ¢ndia":"FI","Fiji":"FJ","Ilhas Malvinas":"FK","MicronÃ©sia":"FM","Ilhas Faroe":"FO","FranÃ§a":"FR","GabÃ£o":"GA","Reino Unido":"GB","Granada":"GD","GeÃ³rgia":"GE","Guiana Francesa":"GF","Guernsey":"GG","Gana":"GH","Gibraltar":"GI","GroÃªnlandia":"GL","GÃ¢mbia":"GM","GuinÃ©":"GN","Guadalupe":"GP","GuinÃ© Equatorial":"GQ","GrÃ©cia":"GR","GeÃ³rgia do Sul e Ilhas Sandwich do Sul":"GS","Guatemala":"GT","Guam":"GU","GuinÃ© Bissau":"GW","Guiana":"GY","Hong Kong, RAE da China":"HK","Ilha Heard e Ilhas McDonald":"HM","Honduras":"HN","CroÃ¡cia":"HR","Haiti":"HT","Hungria":"HU","Ilhas CanÃ¡rias":"IC","IndonÃ©sia":"ID","Irlanda":"IE","Israel":"IL","Ilha de Man":"IM","Ãndia":"IN","TerritÃ³rio BritÃ¢nico do Oceano Ãndico":"IO","Iraque":"IQ","IrÃ£":"IR","IslÃ¢ndia":"IS","ItÃ¡lia":"IT","Jersey":"JE","Jamaica":"JM","JordÃ¢nia":"JO","JapÃ£o":"JP","QuÃªnia":"KE","QuirguistÃ£o":"KG","Camboja":"KH","Quiribati":"KI","Comores":"KM","SÃ£o CristovÃ£o e Nevis":"KN","Coreia do Norte":"KP","Coreia do Sul":"KR","Kuwait":"KW","Ilhas Caiman":"KY","CasaquistÃ£o":"KZ","Laos":"LA","LÃ­bano":"LB","Santa LÃºcia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","LibÃ©ria":"LR","Lesoto":"LS","LituÃ¢nia":"LT","Luxemburgo":"LU","LetÃ´nia":"LV","LÃ­bia":"LY","Marrocos":"MA","MÃ´naco":"MC","MoldÃ¡via":"MD","Montenegro":"ME","SÃ£o Martinho":"MF","Madagascar":"MG","Ilhas Marshall":"MH","MacedÃ´nia":"MK","Mali":"ML","Mianmar [BirmÃ¢nia]":"MM","MongÃ³lia":"MN","Macau, RAE da China":"MO","Ilhas Marianas do Norte":"MP","Martinica":"MQ","MauritÃ¢nia":"MR","Montserrat":"MS","Malta":"MT","MaurÃ­cio":"MU","Maldivas":"MV","Malawi":"MW","MÃ©xico":"MX","MalÃ¡sia":"MY","MoÃ§ambique":"MZ","NamÃ­bia":"NA","Nova CaledÃ´nia":"NC","NÃ­ger":"NE","Ilha Norfolk":"NF","NigÃ©ria":"NG","NicarÃ¡gua":"NI","Holanda":"NL","Noruega":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Nova ZelÃ¢ndia":"NZ","OmÃ£":"OM","PanamÃ¡":"PA","Peru":"PE","PolinÃ©sia Francesa":"PF","Papua-Nova GuinÃ©":"PG","Filipinas":"PH","PaquistÃ£o":"PK","PolÃ´nia":"PL","Saint Pierre e Miquelon":"PM","Ilhas Pitcairn":"PN","Porto Rico":"PR","TerritÃ³rios palestinos":"PS","Portugal":"PT","Palau":"PW","Paraguai":"PY","Catar":"QA","Oceania Remota":"QO","ReuniÃ£o":"RE","RomÃªnia":"RO","SÃ©rvia":"RS","RÃºssia":"RU","Ruanda":"RW","ArÃ¡bia Saudita":"SA","Ilhas SalomÃ£o":"SB","Seychelles":"SC","SudÃ£o":"SD","SuÃ©cia":"SE","Cingapura":"SG","Santa Helena":"SH","EslovÃªnia":"SI","Svalbard e Jan Mayen":"SJ","EslovÃ¡quia":"SK","Serra Leoa":"SL","San Marino":"SM","Senegal":"SN","SomÃ¡lia":"SO","Suriname":"SR","SudÃ£o do Sul":"SS","SÃ£o TomÃ© e PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","SÃ­ria":"SY","SuazilÃ¢ndia":"SZ","TristÃ£o da Cunha":"TA","Ilhas Turks e Caicos":"TC","Chade":"TD","TerritÃ³rios Franceses do Sul":"TF","Togo":"TG","TailÃ¢ndia":"TH","TadjiquistÃ£o":"TJ","Tokelau":"TK","Timor-Leste":"TL","TurcomenistÃ£o":"TM","TunÃ­sia":"TN","Tonga":"TO","Turquia":"TR","Trinidad e Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","TanzÃ¢nia":"TZ","UcrÃ¢nia":"UA","Uganda":"UG","Ilhas Distantes dos EUA":"UM","Estados Unidos":"US","Uruguai":"UY","UzbequistÃ£o":"UZ","Vaticano":"VA","SÃ£o Vicente e Granadinas":"VC","Venezuela":"VE","Ilhas Virgens BritÃ¢nicas":"VG","Ilhas Virgens dos EUA":"VI","VietnÃ£":"VN","Vanuatu":"VU","Wallis e Futuna":"WF","Samoa":"WS","IÃªmen":"YE","Mayotte":"YT","Ãfrica do Sul":"ZA","ZÃ¢mbia":"ZM","ZimbÃ¡bue":"ZW","RegiÃ£o desconhecida":"ZZ"};
ilib.data.ctrynames_ru = {"ÐÐ·Ð¸Ñ":"142","Ð¡ÑÐµÐ´Ð½ÑÑ ÐÐ·Ð¸Ñ":"143","ÐÐ»Ð¸Ð¶Ð½Ð¸Ð¹ Ð¸ Ð¡ÑÐµÐ´Ð½Ð¸Ð¹ ÐÐ¾ÑÑÐ¾Ðº":"145","ÐÐ²ÑÐ¾Ð¿Ð°":"150","ÐÐ¾ÑÑÐ¾ÑÐ½Ð°Ñ ÐÐ²ÑÐ¾Ð¿Ð°":"151","Ð¡ÐµÐ²ÐµÑÐ½Ð°Ñ ÐÐ²ÑÐ¾Ð¿Ð°":"154","ÐÐ°Ð¿Ð°Ð´Ð½Ð°Ñ ÐÐ²ÑÐ¾Ð¿Ð°":"155","ÐÐ°ÑÐ¸Ð½ÑÐºÐ°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ°":"419","ÐÐ¸Ñ":"001","ÐÑÑÐ¸ÐºÐ°":"002","Ð¡ÐµÐ²ÐµÑÐ½Ð°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ°":"003","Ð®Ð¶Ð½Ð°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ°":"005","ÐÐºÐµÐ°Ð½Ð¸Ñ":"009","ÐÐ°Ð¿Ð°Ð´Ð½Ð°Ñ ÐÑÑÐ¸ÐºÐ°":"011","Ð¦ÐµÐ½ÑÑÐ°Ð»ÑÐ½Ð°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ°":"013","ÐÐ¾ÑÑÐ¾ÑÐ½Ð°Ñ ÐÑÑÐ¸ÐºÐ°":"014","Ð¡ÐµÐ²ÐµÑÐ½Ð°Ñ ÐÑÑÐ¸ÐºÐ°":"015","Ð¦ÐµÐ½ÑÑÐ°Ð»ÑÐ½Ð°Ñ ÐÑÑÐ¸ÐºÐ°":"017","Ð®Ð¶Ð½Ð°Ñ ÐÑÑÐ¸ÐºÐ°":"018","Ð¦ÐµÐ½ÑÑÐ°Ð»ÑÐ½Ð°Ñ Ð¸ Ð®Ð¶Ð½Ð°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ°":"019","Ð¡ÐµÐ²ÐµÑÐ½Ð°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ° - Ð¡Ð¨Ð Ð¸ ÐÐ°Ð½Ð°Ð´Ð°":"021","ÐÐ°ÑÐ¸Ð±Ñ":"029","ÐÐ¾ÑÑÐ¾ÑÐ½Ð°Ñ ÐÐ·Ð¸Ñ":"030","Ð®Ð¶Ð½Ð°Ñ ÐÐ·Ð¸Ñ":"034","Ð®Ð³Ð¾-ÐÐ¾ÑÑÐ¾ÑÐ½Ð°Ñ ÐÐ·Ð¸Ñ":"035","Ð®Ð¶Ð½Ð°Ñ ÐÐ²ÑÐ¾Ð¿Ð°":"039","ÐÐ²ÑÑÑÐ°Ð»Ð°Ð·Ð¸Ñ":"053","ÐÐµÐ»Ð°Ð½ÐµÐ·Ð¸Ñ":"054","ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸Ñ":"057","ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸Ñ":"061","ÐÑÑÑÐ¾Ð² ÐÐ¾Ð·Ð½ÐµÑÐµÐ½Ð¸Ñ":"AC","ÐÐ½Ð´Ð¾ÑÑÐ°":"AD","ÐÐÐ­":"AE","ÐÑÐ³Ð°Ð½Ð¸ÑÑÐ°Ð½":"AF","ÐÐ½ÑÐ¸Ð³ÑÐ° Ð¸ ÐÐ°ÑÐ±ÑÐ´Ð°":"AG","ÐÐ½Ð³Ð¸Ð»ÑÑ":"AI","ÐÐ»Ð±Ð°Ð½Ð¸Ñ":"AL","ÐÑÐ¼ÐµÐ½Ð¸Ñ":"AM","ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´ÑÐºÐ¸Ðµ ÐÐ½ÑÐ¸Ð»ÑÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"AN","ÐÐ½Ð³Ð¾Ð»Ð°":"AO","ÐÐ½ÑÐ°ÑÐºÑÐ¸Ð´Ð°":"AQ","ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°":"AR","ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¾Ðµ Ð¡Ð°Ð¼Ð¾Ð°":"AS","ÐÐ²ÑÑÑÐ¸Ñ":"AT","ÐÐ²ÑÑÑÐ°Ð»Ð¸Ñ":"AU","ÐÑÑÐ±Ð°":"AW","ÐÐ»Ð°Ð½Ð´ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"AX","ÐÐ·ÐµÑÐ±Ð°Ð¹Ð´Ð¶Ð°Ð½":"AZ","ÐÐ¾ÑÐ½Ð¸Ñ Ð¸ ÐÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°":"BA","ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ":"BB","ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ":"BD","ÐÐµÐ»ÑÐ³Ð¸Ñ":"BE","ÐÑÑÐºÐ¸Ð½Ð° Ð¤Ð°ÑÐ¾":"BF","ÐÐ¾Ð»Ð³Ð°ÑÐ¸Ñ":"BG","ÐÐ°ÑÑÐµÐ¹Ð½":"BH","ÐÑÑÑÐ½Ð´Ð¸":"BI","ÐÐµÐ½Ð¸Ð½":"BJ","Ð-Ð² Ð¡Ð². ÐÐ°ÑÑÐ¾Ð»Ð¾Ð¼ÐµÑ":"BL","ÐÐµÑÐ¼ÑÐ´ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"BM","ÐÑÑÐ½ÐµÐ¹ ÐÐ°ÑÑÑÑÐ°Ð»Ð°Ð¼":"BN","ÐÐ¾Ð»Ð¸Ð²Ð¸Ñ":"BO","ÐÐ¾Ð½ÑÐ¹Ñ, Ð¡Ð¸Ð½Ñ-Ð­ÑÑÐ°ÑÐ¸ÑÑ Ð¸ Ð¡Ð°Ð±Ð°":"BQ","ÐÑÐ°Ð·Ð¸Ð»Ð¸Ñ":"BR","ÐÐ°Ð³Ð°Ð¼ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"BS","ÐÑÑÐ°Ð½":"BT","ÐÑÑÑÐ¾Ð² ÐÑÐ²Ðµ":"BV","ÐÐ¾ÑÑÐ²Ð°Ð½Ð°":"BW","ÐÐµÐ»Ð°ÑÑÑÑ":"BY","ÐÐµÐ»Ð¸Ð·":"BZ","ÐÐ°Ð½Ð°Ð´Ð°":"CA","ÐÐ¾ÐºÐ¾ÑÐ¾Ð²ÑÐµ Ð¾-Ð²Ð°":"CC","ÐÐµÐ¼Ð¾ÐºÑÐ°ÑÐ¸ÑÐµÑÐºÐ°Ñ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ° ÐÐ¾Ð½Ð³Ð¾":"CD","Ð¦ÐÐ ":"CF","ÐÐ¾Ð½Ð³Ð¾ - ÐÑÐ°Ð·Ð·Ð°Ð²Ð¸Ð»Ñ":"CG","Ð¨Ð²ÐµÐ¹ÑÐ°ÑÐ¸Ñ":"CH","ÐÐ¾Ñ Ð´âÐÐ²ÑÐ°Ñ":"CI","ÐÑÑÑÐ¾Ð²Ð° ÐÑÐºÐ°":"CK","Ð§Ð¸Ð»Ð¸":"CL","ÐÐ°Ð¼ÐµÑÑÐ½":"CM","ÐÐ¸ÑÐ°Ð¹":"CN","ÐÐ¾Ð»ÑÐ¼Ð±Ð¸Ñ":"CO","ÐÑÑÑÐ¾Ð² ÐÐ»Ð¸Ð¿Ð¿ÐµÑÑÐ¾Ð½":"CP","ÐÐ¾ÑÑÐ°-Ð Ð¸ÐºÐ°":"CR","ÐÑÐ±Ð°":"CU","ÐÑÑÑÐ¾Ð²Ð° ÐÐµÐ»ÐµÐ½Ð¾Ð³Ð¾ ÐÑÑÐ°":"CV","ÐÑÑÐ°ÑÐ°Ð¾":"CW","ÐÑÑÑÐ¾Ð² Ð Ð¾Ð¶Ð´ÐµÑÑÐ²Ð°":"CX","ÐÐ¸Ð¿Ñ":"CY","Ð§ÐµÑÐ¸Ñ":"CZ","ÐÐµÑÐ¼Ð°Ð½Ð¸Ñ":"DE","ÐÐ¸ÐµÐ³Ð¾-ÐÐ°ÑÑÐ¸Ñ":"DG","ÐÐ¶Ð¸Ð±ÑÑÐ¸":"DJ","ÐÐ°Ð½Ð¸Ñ":"DK","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°":"DM","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ÑÐºÐ°Ñ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"DO","ÐÐ»Ð¶Ð¸Ñ":"DZ","Ð¡ÐµÑÑÐ° Ð¸ ÐÐµÐ»Ð¸Ð»ÑÑ":"EA","Ð­ÐºÐ²Ð°Ð´Ð¾Ñ":"EC","Ð­ÑÑÐ¾Ð½Ð¸Ñ":"EE","ÐÐ³Ð¸Ð¿ÐµÑ":"EG","ÐÐ°Ð¿Ð°Ð´Ð½Ð°Ñ Ð¡Ð°ÑÐ°ÑÐ°":"EH","Ð­ÑÐ¸ÑÑÐµÑ":"ER","ÐÑÐ¿Ð°Ð½Ð¸Ñ":"ES","Ð­ÑÐ¸Ð¾Ð¿Ð¸Ñ":"ET","ÐÐ²ÑÐ¾Ð¿ÐµÐ¹ÑÐºÐ¸Ð¹ ÑÐ¾ÑÐ·":"EU","Ð¤Ð¸Ð½Ð»ÑÐ½Ð´Ð¸Ñ":"FI","Ð¤Ð¸Ð´Ð¶Ð¸":"FJ","Ð¤Ð¾Ð»ÐºÐ»ÐµÐ½Ð´ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"FK","Ð¤ÐµÐ´ÐµÑÐ°ÑÐ¸Ð²Ð½ÑÐµ Ð¨ÑÐ°ÑÑ ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸Ð¸":"FM","Ð¤Ð°ÑÐµÑÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"FO","Ð¤ÑÐ°Ð½ÑÐ¸Ñ":"FR","ÐÐ°Ð±Ð¾Ð½":"GA","ÐÐµÐ»Ð¸ÐºÐ¾Ð±ÑÐ¸ÑÐ°Ð½Ð¸Ñ":"GB","ÐÑÐµÐ½Ð°Ð´Ð°":"GD","ÐÑÑÐ·Ð¸Ñ":"GE","Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ°Ñ ÐÐ²Ð¸Ð°Ð½Ð°":"GF","ÐÐµÑÐ½ÑÐ¸":"GG","ÐÐ°Ð½Ð°":"GH","ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ":"GI","ÐÑÐµÐ½Ð»Ð°Ð½Ð´Ð¸Ñ":"GL","ÐÐ°Ð¼Ð±Ð¸Ñ":"GM","ÐÐ²Ð¸Ð½ÐµÑ":"GN","ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿Ð°":"GP","Ð­ÐºÐ²Ð°ÑÐ¾ÑÐ¸Ð°Ð»ÑÐ½Ð°Ñ ÐÐ²Ð¸Ð½ÐµÑ":"GQ","ÐÑÐµÑÐ¸Ñ":"GR","Ð®Ð¶Ð½Ð°Ñ ÐÐ¶Ð¾ÑÐ´Ð¶Ð¸Ñ Ð¸ Ð®Ð¶Ð½ÑÐµ Ð¡Ð°Ð½Ð´Ð²Ð¸ÑÐµÐ²Ñ ÐÑÑÑÐ¾Ð²Ð°":"GS","ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°":"GT","ÐÑÐ°Ð¼":"GU","ÐÐ²Ð¸Ð½ÐµÑ-ÐÐ¸ÑÐ°Ñ":"GW","ÐÐ°Ð¹Ð°Ð½Ð°":"GY","ÐÐ¾Ð½ÐºÐ¾Ð½Ð³ (Ð¾ÑÐ¾Ð±ÑÐ¹ ÑÐ°Ð¹Ð¾Ð½)":"HK","ÐÑÑÑÐ¾Ð²Ð° Ð¥ÐµÑÐ´ Ð¸ ÐÐ°ÐºÐ´Ð¾Ð½Ð°Ð»ÑÐ´":"HM","ÐÐ¾Ð½Ð´ÑÑÐ°Ñ":"HN","Ð¥Ð¾ÑÐ²Ð°ÑÐ¸Ñ":"HR","ÐÐ°Ð¸ÑÐ¸":"HT","ÐÐµÐ½Ð³ÑÐ¸Ñ":"HU","ÐÐ°Ð½Ð°ÑÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"IC","ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸Ñ":"ID","ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ":"IE","ÐÐ·ÑÐ°Ð¸Ð»Ñ":"IL","ÐÑÑÑÐ¾Ð² ÐÑÐ½":"IM","ÐÐ½Ð´Ð¸Ñ":"IN","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ°Ñ ÑÐµÑÑÐ¸ÑÐ¾ÑÐ¸Ñ Ð² ÐÐ½Ð´Ð¸Ð¹ÑÐºÐ¾Ð¼ Ð¾ÐºÐµÐ°Ð½Ðµ":"IO","ÐÑÐ°Ðº":"IQ","ÐÑÐ°Ð½":"IR","ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ":"IS","ÐÑÐ°Ð»Ð¸Ñ":"IT","ÐÐ¶ÐµÑÑÐ¸":"JE","Ð¯Ð¼Ð°Ð¹ÐºÐ°":"JM","ÐÐ¾ÑÐ´Ð°Ð½Ð¸Ñ":"JO","Ð¯Ð¿Ð¾Ð½Ð¸Ñ":"JP","ÐÐµÐ½Ð¸Ñ":"KE","ÐÐ¸ÑÐ³Ð¸Ð·Ð¸Ñ":"KG","ÐÐ°Ð¼Ð±Ð¾Ð´Ð¶Ð°":"KH","ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸":"KI","ÐÐ¾Ð¼Ð¾ÑÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"KM","Ð¡ÐµÐ½Ñ-ÐÐ¸ÑÑÑ Ð¸ ÐÐµÐ²Ð¸Ñ":"KN","Ð¡ÐµÐ²ÐµÑÐ½Ð°Ñ ÐÐ¾ÑÐµÑ":"KP","Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ° ÐÐ¾ÑÐµÑ":"KR","ÐÑÐ²ÐµÐ¹Ñ":"KW","ÐÐ°Ð¹Ð¼Ð°Ð½Ð¾Ð²Ñ Ð¾-Ð²Ð°":"KY","ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½":"KZ","ÐÐ°Ð¾Ñ":"LA","ÐÐ¸Ð²Ð°Ð½":"LB","Ð¡ÐµÐ½Ñ-ÐÑÑÐ¸Ñ":"LC","ÐÐ¸ÑÑÐµÐ½ÑÑÐµÐ¹Ð½":"LI","Ð¨ÑÐ¸-ÐÐ°Ð½ÐºÐ°":"LK","ÐÐ¸Ð±ÐµÑÐ¸Ñ":"LR","ÐÐµÑÐ¾ÑÐ¾":"LS","ÐÐ¸ÑÐ²Ð°":"LT","ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³":"LU","ÐÐ°ÑÐ²Ð¸Ñ":"LV","ÐÐ¸Ð²Ð¸Ñ":"LY","ÐÐ°ÑÐ¾ÐºÐºÐ¾":"MA","ÐÐ¾Ð½Ð°ÐºÐ¾":"MC","ÐÐ¾Ð»Ð´Ð¾Ð²Ð°":"MD","Ð§ÐµÑÐ½Ð¾Ð³Ð¾ÑÐ¸Ñ":"ME","ÐÑÑÑÐ¾Ð² Ð¡Ð²ÑÑÐ¾Ð³Ð¾ ÐÐ°ÑÑÐ¸Ð½Ð°":"MF","ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ":"MG","ÐÐ°ÑÑÐ°Ð»Ð»Ð¾Ð²Ñ Ð¾-Ð²Ð°":"MH","ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸Ñ":"MK","ÐÐ°Ð»Ð¸":"ML","ÐÑÑÐ½Ð¼Ð° [ÐÐ¸ÑÐ¼Ð°]":"MM","ÐÐ¾Ð½Ð³Ð¾Ð»Ð¸Ñ":"MN","ÐÐ°ÐºÐ°Ð¾ (Ð¾ÑÐ¾Ð±ÑÐ¹ ÑÐ°Ð¹Ð¾Ð½)":"MO","Ð¡ÐµÐ²ÐµÑÐ½ÑÐµ ÐÐ°ÑÐ¸Ð°Ð½ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"MP","ÐÐ°ÑÑÐ¸Ð½Ð¸ÐºÐ°":"MQ","ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½Ð¸Ñ":"MR","ÐÐ¾Ð½ÑÑÐµÑÑÐ°Ñ":"MS","ÐÐ°Ð»ÑÑÐ°":"MT","ÐÐ°Ð²ÑÐ¸ÐºÐ¸Ð¹":"MU","ÐÐ°Ð»ÑÐ´Ð¸Ð²ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"MV","ÐÐ°Ð»Ð°Ð²Ð¸":"MW","ÐÐµÐºÑÐ¸ÐºÐ°":"MX","ÐÐ°Ð»Ð°Ð¹Ð·Ð¸Ñ":"MY","ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº":"MZ","ÐÐ°Ð¼Ð¸Ð±Ð¸Ñ":"NA","ÐÐ¾Ð²Ð°Ñ ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸Ñ":"NC","ÐÐ¸Ð³ÐµÑ":"NE","ÐÑÑÑÐ¾Ð² ÐÐ¾ÑÑÐ¾Ð»Ðº":"NF","ÐÐ¸Ð³ÐµÑÐ¸Ñ":"NG","ÐÐ¸ÐºÐ°ÑÐ°Ð³ÑÐ°":"NI","ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´Ñ":"NL","ÐÐ¾ÑÐ²ÐµÐ³Ð¸Ñ":"NO","ÐÐµÐ¿Ð°Ð»":"NP","ÐÐ°ÑÑÑ":"NR","ÐÐ¸ÑÐµ":"NU","ÐÐ¾Ð²Ð°Ñ ÐÐµÐ»Ð°Ð½Ð´Ð¸Ñ":"NZ","ÐÐ¼Ð°Ð½":"OM","ÐÐ°Ð½Ð°Ð¼Ð°":"PA","ÐÐµÑÑ":"PE","Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ°Ñ ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸Ñ":"PF","ÐÐ°Ð¿ÑÐ° â ÐÐ¾Ð²Ð°Ñ ÐÐ²Ð¸Ð½ÐµÑ":"PG","Ð¤Ð¸Ð»Ð¸Ð¿Ð¿Ð¸Ð½Ñ":"PH","ÐÐ°ÐºÐ¸ÑÑÐ°Ð½":"PK","ÐÐ¾Ð»ÑÑÐ°":"PL","Ð¡ÐµÐ½-ÐÑÐµÑ Ð¸ ÐÐ¸ÐºÐµÐ»Ð¾Ð½":"PM","ÐÐ¸ÑÐºÑÑÐ½":"PN","ÐÑÑÑÑÐ¾-Ð Ð¸ÐºÐ¾":"PR","ÐÐ°Ð»ÐµÑÑÐ¸Ð½ÑÐºÐ¸Ðµ ÑÐµÑÑÐ¸ÑÐ¾ÑÐ¸Ð¸":"PS","ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸Ñ":"PT","ÐÐ°Ð»Ð°Ñ":"PW","ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹":"PY","ÐÐ°ÑÐ°Ñ":"QA","ÐÐ½ÐµÑÐ½ÑÑ ÐÐºÐµÐ°Ð½Ð¸Ñ":"QO","Ð ÐµÑÐ½ÑÐ¾Ð½":"RE","Ð ÑÐ¼ÑÐ½Ð¸Ñ":"RO","Ð¡ÐµÑÐ±Ð¸Ñ":"RS","Ð Ð¾ÑÑÐ¸Ñ":"RU","Ð ÑÐ°Ð½Ð´Ð°":"RW","Ð¡Ð°ÑÐ´Ð¾Ð²ÑÐºÐ°Ñ ÐÑÐ°Ð²Ð¸Ñ":"SA","Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½Ð¾Ð²Ñ Ð¾-Ð²Ð°":"SB","Ð¡ÐµÐ¹ÑÐµÐ»ÑÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"SC","Ð¡ÑÐ´Ð°Ð½":"SD","Ð¨Ð²ÐµÑÐ¸Ñ":"SE","Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ":"SG","Ð-Ð² Ð¡Ð². ÐÐ»ÐµÐ½Ñ":"SH","Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸Ñ":"SI","Ð¡Ð²Ð°Ð»ÑÐ±Ð°ÑÐ´ Ð¸ Ð¯Ð½-ÐÐ°Ð¹ÐµÐ½":"SJ","Ð¡Ð»Ð¾Ð²Ð°ÐºÐ¸Ñ":"SK","Ð¡ÑÐµÑÑÐ°-ÐÐµÐ¾Ð½Ðµ":"SL","Ð¡Ð°Ð½-ÐÐ°ÑÐ¸Ð½Ð¾":"SM","Ð¡ÐµÐ½ÐµÐ³Ð°Ð»":"SN","Ð¡Ð¾Ð¼Ð°Ð»Ð¸":"SO","Ð¡ÑÑÐ¸Ð½Ð°Ð¼":"SR","Ð®Ð¶Ð½ÑÐ¹ Ð¡ÑÐ´Ð°Ð½":"SS","Ð¡Ð°Ð½-Ð¢Ð¾Ð¼Ðµ Ð¸ ÐÑÐ¸Ð½ÑÐ¸Ð¿Ð¸":"ST","Ð¡Ð°Ð»ÑÐ²Ð°Ð´Ð¾Ñ":"SV","Ð¡Ð¸Ð½Ñ-ÐÐ°ÑÑÐµÐ½":"SX","Ð¡Ð¸ÑÐ¸Ñ":"SY","Ð¡Ð²Ð°Ð·Ð¸Ð»ÐµÐ½Ð´":"SZ","Ð¢ÑÐ¸ÑÑÐ°Ð½-Ð´Ð°-ÐÑÐ½ÑÑ":"TA","Ð-Ð²Ð° Ð¢ÑÑÐºÑ Ð¸ ÐÐ°Ð¹ÐºÐ¾Ñ":"TC","Ð§Ð°Ð´":"TD","Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ¸Ðµ Ð®Ð¶Ð½ÑÐµ Ð¢ÐµÑÑÐ¸ÑÐ¾ÑÐ¸Ð¸":"TF","Ð¢Ð¾Ð³Ð¾":"TG","Ð¢Ð°Ð¸Ð»Ð°Ð½Ð´":"TH","Ð¢Ð°Ð´Ð¶Ð¸ÐºÐ¸ÑÑÐ°Ð½":"TJ","Ð¢Ð¾ÐºÐµÐ»Ð°Ñ":"TK","Ð¢Ð¸Ð¼Ð¾Ñ-ÐÐµÑÑÐ¸":"TL","Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸ÑÑÐ°Ð½":"TM","Ð¢ÑÐ½Ð¸Ñ":"TN","Ð¢Ð¾Ð½Ð³Ð°":"TO","Ð¢ÑÑÑÐ¸Ñ":"TR","Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¸ Ð¢Ð¾Ð±Ð°Ð³Ð¾":"TT","Ð¢ÑÐ²Ð°Ð»Ñ":"TV","Ð¢Ð°Ð¹Ð²Ð°Ð½Ñ":"TW","Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸Ñ":"TZ","Ð£ÐºÑÐ°Ð¸Ð½Ð°":"UA","Ð£Ð³Ð°Ð½Ð´Ð°":"UG","ÐÐ½ÐµÑÐ½Ð¸Ðµ Ð¼Ð°Ð»ÑÐµ Ð¾ÑÑÑÐ¾Ð²Ð° (Ð¡Ð¨Ð)":"UM","Ð¡Ð¨Ð":"US","Ð£ÑÑÐ³Ð²Ð°Ð¹":"UY","Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½":"UZ","ÐÐ°ÑÐ¸ÐºÐ°Ð½":"VA","Ð¡ÐµÐ½Ñ-ÐÐ¸Ð½ÑÐµÐ½Ñ Ð¸ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ñ":"VC","ÐÐµÐ½ÐµÑÑÑÐ»Ð°":"VE","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ¸Ðµ ÐÐ¸ÑÐ³Ð¸Ð½ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"VG","ÐÐ¸ÑÐ³Ð¸Ð½ÑÐºÐ¸Ðµ Ð¾-Ð²Ð° (Ð¡Ð¨Ð)":"VI","ÐÑÐµÑÐ½Ð°Ð¼":"VN","ÐÐ°Ð½ÑÐ°ÑÑ":"VU","Ð£Ð¾Ð»Ð»Ð¸Ñ Ð¸ Ð¤ÑÑÑÐ½Ð°":"WF","Ð¡Ð°Ð¼Ð¾Ð°":"WS","ÐÐµÐ¼ÐµÐ½":"YE","ÐÐ°Ð¹Ð¾ÑÑÐ°":"YT","Ð®ÐÐ ":"ZA","ÐÐ°Ð¼Ð±Ð¸Ñ":"ZM","ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ":"ZW","ÐÐµÐ¸Ð·Ð²ÐµÑÑÐ½ÑÐ¹ ÑÐµÐ³Ð¸Ð¾Ð½":"ZZ"};
ilib.data.ctrynames_tr = {"Asya":"142","Orta Asya":"143","BatÄ± Asya":"145","Avrupa":"150","DoÄu Avrupa":"151","Kuzey Avrupa":"154","BatÄ± Avrupa":"155","Latin Amerika":"419","DÃ¼nya":"001","Afrika":"002","Kuzey Amerika":"003","GÃ¼ney Amerika":"005","Okyanusya":"009","BatÄ± Afrika":"011","Orta Amerika":"013","DoÄu Afrika":"014","Kuzey Afrika":"015","Orta Afrika":"017","Afrika'nÄ±n GÃ¼neyi":"018","Amerika":"019","Amerika'nÄ±n Kuzeyi":"021","Karayipler":"029","DoÄu Asya":"030","GÃ¼ney Asya":"034","GÃ¼neydoÄu Asya":"035","GÃ¼ney Avrupa":"039","Avustralasya":"053","Melanezya":"054","Mikronezya":"057","Polinezya":"061","Ascension AdasÄ±":"AC","Andorra":"AD","BirleÅik Arap Emirlikleri":"AE","Afganistan":"AF","Antigua ve Barbuda":"AG","Anguilla":"AI","Arnavutluk":"AL","Ermenistan":"AM","Hollanda Antilleri":"AN","Angola":"AO","Antarktika":"AQ","Arjantin":"AR","Amerikan SamoasÄ±":"AS","Avusturya":"AT","Avustralya":"AU","Aruba":"AW","Ãland AdalarÄ±":"AX","Azerbaycan":"AZ","Bosna Hersek":"BA","Barbados":"BB","BangladeÅ":"BD","BelÃ§ika":"BE","Burkina Faso":"BF","Bulgaristan":"BG","Bahreyn":"BH","Burundi":"BI","Benin":"BJ","Saint Barthelemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivya":"BO","Karayip Hollanda":"BQ","Brezilya":"BR","Bahamalar":"BS","Butan":"BT","Bouvet AdasÄ±":"BV","Botsvana":"BW","Beyaz Rusya":"BY","Belize":"BZ","Kanada":"CA","Cocos [Keeling] AdalarÄ±":"CC","Kongo - KinÅasa":"CD","Orta Afrika Cumhuriyeti":"CF","Kongo - Brazavil":"CG","Ä°sviÃ§re":"CH","FildiÅi Sahili":"CI","Cook AdalarÄ±":"CK","Åili":"CL","Kamerun":"CM","Ãin":"CN","Kolombiya":"CO","Clipperton AdasÄ±":"CP","Kosta Rika":"CR","KÃ¼ba":"CU","Cape Verde":"CV","CuraÃ§ao":"CW","Christmas AdasÄ±":"CX","GÃ¼ney KÄ±brÄ±s Rum Kesimi":"CY","Ãek Cumhuriyeti":"CZ","Almanya":"DE","Diego Garcia":"DG","Cibuti":"DJ","Danimarka":"DK","Dominika":"DM","Dominik Cumhuriyeti":"DO","Cezayir":"DZ","Ceuta ve Melilla":"EA","Ekvador":"EC","Estonya":"EE","MÄ±sÄ±r":"EG","BatÄ± Sahara":"EH","Eritre":"ER","Ä°spanya":"ES","Etiyopya":"ET","Avrupa BirliÄi":"EU","Finlandiya":"FI","Fiji":"FJ","Falkland AdalarÄ±":"FK","Mikronezya Federal Eyaletleri":"FM","Faroe AdalarÄ±":"FO","Fransa":"FR","Gabon":"GA","BirleÅik KrallÄ±k":"GB","Grenada":"GD","GÃ¼rcistan":"GE","FransÄ±z GuyanasÄ±":"GF","Guernsey":"GG","Gana":"GH","CebelitarÄ±k":"GI","GrÃ¶nland":"GL","Gambiya":"GM","Gine":"GN","Guadalupe":"GP","Ekvator Ginesi":"GQ","Yunanistan":"GR","GÃ¼ney Georgia ve GÃ¼ney Sandwich AdalarÄ±":"GS","Guatemala":"GT","Guam":"GU","Gine-Bissau":"GW","Guyana":"GY","Ãin Hong Kong ÃYB":"HK","Heard AdasÄ± ve McDonald AdalarÄ±":"HM","Honduras":"HN","HÄ±rvatistan":"HR","Haiti":"HT","Macaristan":"HU","Kanarya AdalarÄ±":"IC","Endonezya":"ID","Ä°rlanda":"IE","Ä°srail":"IL","Man AdasÄ±":"IM","Hindistan":"IN","Ä°ngiliz Hint Okyanusu BÃ¶lgesi":"IO","Irak":"IQ","Ä°ran":"IR","Ä°zlanda":"IS","Ä°talya":"IT","Jersey":"JE","Jamaika":"JM","ÃrdÃ¼n":"JO","Japonya":"JP","Kenya":"KE","KÄ±rgÄ±zistan":"KG","KamboÃ§ya":"KH","Kiribati":"KI","Komorlar":"KM","Saint Kitts ve Nevis":"KN","Kuzey Kore":"KP","GÃ¼ney Kore":"KR","Kuveyt":"KW","Cayman AdalarÄ±":"KY","Kazakistan":"KZ","Laos":"LA","LÃ¼bnan":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberya":"LR","Lesoto":"LS","Litvanya":"LT","LÃ¼ksemburg":"LU","Letonya":"LV","Libya":"LY","Fas":"MA","Monako":"MC","Moldova":"MD","KaradaÄ":"ME","Saint Martin":"MF","Madagaskar":"MG","Marshall AdalarÄ±":"MH","Makedonya":"MK","Mali":"ML","Myanmar [Burma]":"MM","MoÄolistan":"MN","Ãin Makao ÃYB":"MO","Kuzey Mariana AdalarÄ±":"MP","Martinik":"MQ","Moritanya":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldivler":"MV","Malavi":"MW","Meksika":"MX","Malezya":"MY","Mozambik":"MZ","Namibya":"NA","Yeni Kaledonya":"NC","Nijer":"NE","Norfolk AdasÄ±":"NF","Nijerya":"NG","Nikaragua":"NI","Hollanda":"NL","NorveÃ§":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Yeni Zelanda":"NZ","Umman":"OM","Panama":"PA","Peru":"PE","FransÄ±z PolinezyasÄ±":"PF","Papua Yeni Gine":"PG","Filipinler":"PH","Pakistan":"PK","Polonya":"PL","Saint Pierre ve Miquelon":"PM","Pitcairn AdalarÄ±":"PN","Porto Riko":"PR","Filistin BÃ¶lgeleri":"PS","Portekiz":"PT","Palau":"PW","Paraguay":"PY","Katar":"QA","Uzak Okyanusya":"QO","RÃ©union":"RE","Romanya":"RO","SÄ±rbistan":"RS","Rusya":"RU","Ruanda":"RW","Suudi Arabistan":"SA","Solomon AdalarÄ±":"SB","SeyÅeller":"SC","Sudan":"SD","Ä°sveÃ§":"SE","Singapur":"SG","Saint Helena":"SH","Slovenya":"SI","Svalbard ve Jan Mayen AdalarÄ±":"SJ","Slovakya":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somali":"SO","Surinam":"SR","GÃ¼ney Sudan":"SS","SÃ£o TomÃ© ve PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Suriye":"SY","Svaziland":"SZ","Tristan da Cunha":"TA","Turks ve Caicos AdalarÄ±":"TC","Ãad":"TD","FransÄ±z GÃ¼ney BÃ¶lgeleri":"TF","Togo":"TG","Tayland":"TH","Tacikistan":"TJ","Tokelau":"TK","Timor-Leste":"TL","TÃ¼rkmenistan":"TM","Tunus":"TN","Tonga":"TO","TÃ¼rkiye":"TR","Trinidad ve Tobago":"TT","Tuvalu":"TV","Tayvan":"TW","Tanzanya":"TZ","Ukrayna":"UA","Uganda":"UG","ABD DÄ±Å AdalarÄ±":"UM","ABD":"US","Uruguay":"UY","Ãzbekistan":"UZ","Vatikan":"VA","Saint Vincent ve Grenadinler":"VC","Venezuela":"VE","Britanya Virjin AdalarÄ±":"VG","ABD Virjin AdalarÄ±":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis ve Futuna AdalarÄ±":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","GÃ¼ney Afrika":"ZA","Zambiya":"ZM","Zimbabve":"ZW","Bilinmeyen BÃ¶lge":"ZZ"};
ilib.data.ctrynames_vi = {"ChÃ¢u Ã":"142","Trung Ã":"143","TÃ¢y Ã":"145","Ãu ChÃ¢u":"150","ÄÃ´ng Ãu":"151","Miá»n Báº¯c ChÃ¢u Ãu":"154","TÃ¢y Ãu":"155","ChÃ¢u Má»¹ La-tinh":"419","Tháº¿ giá»i":"001","ChÃ¢u Phi":"002","Báº¯c Má»¹":"003","Nam Má»¹":"005","ChÃ¢u Äáº¡i DÆ°Æ¡ng":"009","TÃ¢y Phi":"011","Trung Má»¹":"013","ÄÃ´ng Phi":"014","Báº¯c Phi":"015","Trung Phi":"017","Miá»n Nam ChÃ¢u Phi":"018","ChÃ¢u Má»¹":"019","Miá»n Báº¯c ChÃ¢u Má»¹":"021","Ca-ri-bÃª":"029","ÄÃ´ng Ã":"030","Nam Ã":"034","ÄÃ´ng Nam Ã":"035","Nam Ãu":"039","Ãc vÃ  New Zealand":"053","Melanesia":"054","VÃ¹ng Micronesian":"057","Polynesia":"061","Äáº£o Ascension":"AC","Andorra":"AD","CÃ¡c Tiá»u VÆ°Æ¡ng quá»c A-ráº­p Thá»ng nháº¥t":"AE","Afghanistan":"AF","Antigua vÃ  Barbuda":"AG","Anguilla":"AI","Albani":"AL","Armenia":"AM","TÃ¢y áº¤n HÃ  Lan":"AN","Angola":"AO","Nam Cá»±c":"AQ","Argentina":"AR","Äáº£o Somoa thuá»c Má»¹":"AS","Ão":"AT","Ãc":"AU","Aruba":"AW","Quáº§n Äáº£o Aland":"AX","Azerbaijan":"AZ","BÃ´-xni-a HÃ©c-xÃª-gÃ´-vi-na":"BA","Barbados":"BB","Bangladesh":"BD","Bá»":"BE","Burkina Faso":"BF","Bungari":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","Saint BarthÃ©lemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Bra-xin":"BR","Bahamas":"BS","Bhutan":"BT","Äáº£o Bouvet":"BV","Botswana":"BW","Belarus":"BY","BÃª-li-xÃª":"BZ","Ca-na-Äa":"CA","Quáº§n Äáº£o Cocos":"CC","Congo - Kinshasa":"CD","Cá»ng hÃ²a Trung Phi":"CF","CÃ´ng-gÃ´":"CG","Thá»¥y SÄ©":"CH","Bá» Biá»n NgÃ ":"CI","Quáº§n Äáº£o Cook":"CK","Chile":"CL","Ca-mÆ¡-run":"CM","Trung Quá»c":"CN","Colombia":"CO","Äáº£o Clipperton":"CP","Cá»t-xta Ri-ca":"CR","Cu Ba":"CU","Cape Verde":"CV","CuraÃ§ao":"CW","Äáº£o GiÃ¡ng Sinh":"CX","SÃ­p":"CY","Cá»ng hÃ²a SÃ©c":"CZ","Äá»©c":"DE","Diego Garcia":"DG","Djibouti":"DJ","Äan Máº¡ch":"DK","Dominica":"DM","Cá»ng hÃ²a Dominica":"DO","Algeria":"DZ","Ceuta vÃ  Melilla":"EA","Ecuador":"EC","Estonia":"EE","Ai Cáº­p":"EG","TÃ¢y Sahara":"EH","Eritrea":"ER","TÃ¢y Ban Nha":"ES","Ethiopia":"ET","LiÃªn Minh ChÃ¢u Ãu":"EU","Pháº§n Lan":"FI","Fiji":"FJ","Quáº§n Äáº£o Falkland":"FK","Micronesia":"FM","Quáº§n Äáº£o Faroe":"FO","PhÃ¡p":"FR","Gabon":"GA","VÆ°Æ¡ng quá»c Anh":"GB","Grenada":"GD","Georgia":"GE","Quiana thuá»c PhÃ¡p":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","BÄng Äáº£o":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Guinea XÃ­ch Äáº¡o":"GQ","Hy Láº¡p":"GR","Quáº§n Äáº£o Nam Georgia vÃ  Nam Sandwich":"GS","Goa-tÃª-ma-la":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Äáº·c khu hÃ nh chÃ­nh Há»ng KÃ´ng thuá»c CHND Trung Hoa":"HK","Äáº£o Heard vÃ  Quáº§n Äáº£o McDonald":"HM","HÃ´n-Äu-rÃ¡t":"HN","Croatia":"HR","Haiti":"HT","Hungari":"HU","Quáº§n Äáº£o Canary":"IC","Indonesia":"ID","Ai-len":"IE","Israel":"IL","Äáº£o Man":"IM","áº¤n Äá»":"IN","Thuá»c Äá»a Anh táº¡i áº¤n Äá» DÆ°Æ¡ng":"IO","I-ráº¯c":"IQ","I-ran":"IR","Ai-xÆ¡-len":"IS","Ã":"IT","Jersey":"JE","Jamaica":"JM","Jordan":"JO","Nháº­t Báº£n":"JP","Kenya":"KE","Kyrgyzstan":"KG","Campuchia":"KH","Kiribati":"KI","Comoros":"KM","Saint Kitts vÃ  Nevis":"KN","Báº¯c Triá»u TiÃªn":"KP","HÃ n Quá»c":"KR","CÃ´-oÃ©t":"KW","Quáº§n Äáº£o Cayman":"KY","Kazakhstan":"KZ","LÃ o":"LA","Li-bÄng":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","LIberia":"LR","Lesotho":"LS","Lithuania":"LT","Luxembourg":"LU","Latvia":"LV","Li-bi":"LY","Ma-rá»c":"MA","Monaco":"MC","Moldova":"MD","Montenegro":"ME","Saint Martin":"MF","Madagascar":"MG","Quáº§n Äáº£o Marshall":"MH","Macedonia":"MK","Mali":"ML","Myanmar [Miáº¿n Äiá»n]":"MM","MÃ´ng Cá»":"MN","Äáº·c khu hÃ nh chÃ­nh Macao thuá»c CHND Trung Hoa":"MO","Quáº§n Äáº£o Báº¯c Mariana":"MP","Martinique":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldives":"MV","Malawi":"MW","MÃª-hi-cÃ´":"MX","Malaysia":"MY","Mozambique":"MZ","Namibia":"NA","New Caledonia":"NC","Niger":"NE","Äáº£o Norfolk":"NF","Nigeria":"NG","Nicaragua":"NI","HÃ  Lan":"NL","Na Uy":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","New Zealand":"NZ","Oman":"OM","Pa-na-ma":"PA","Peru":"PE","Polynesia thuá»c PhÃ¡p":"PF","Papua New Guinea":"PG","Philippin":"PH","Pakistan":"PK","Ba Lan":"PL","Saint Pierre vÃ  Miquelon":"PM","Quáº§n Äáº£o Pitcairn":"PN","Puerto Rico":"PR","LÃ£nh thá» Palestine":"PS","Bá» ÄÃ o Nha":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","VÃ¹ng xa xÃ´i thuá»c ChÃ¢u Äáº¡i DÆ°Æ¡ng":"QO","RÃ©union":"RE","Romania":"RO","Serbia":"RS","Nga":"RU","Rwanda":"RW","A-ráº­p XÃª-Ãºt":"SA","Quáº§n Äáº£o Solomon":"SB","Seychelles":"SC","Xu-ÄÄng":"SD","Thá»¥y Äiá»n":"SE","Singapore":"SG","Saint Helena":"SH","Slovenia":"SI","Svalbard vÃ  Jan Mayen":"SJ","Slovakia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somali":"SO","Suriname":"SR","Nam Sudan":"SS","SÃ£o TomÃ© vÃ  PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Syria":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Quáº§n Äáº£o Turk vÃ  Caicos":"TC","Chad":"TD","Thuá»c Äá»a Nam cá»§a PhÃ¡p":"TF","Togo":"TG","ThÃ¡i Lan":"TH","Tajikistan":"TJ","Tokelau":"TK","ÄÃ´ng Ti-mo":"TL","Turkmenistan":"TM","Tuy-ni-di":"TN","Tonga":"TO","Thá» NhÄ© Ká»³":"TR","Trinidad vÃ  Tobago":"TT","Tuvalu":"TV","ÄÃ i Loan":"TW","Tanzania":"TZ","Ukraina":"UA","Uganda":"UG","CÃ¡c Äáº£o nhá» xa trung tÃ¢m thuá»c Má»¹":"UM","Hoa Ká»³":"US","Uruguay":"UY","Uzbekistan":"UZ","Va-ti-cÄng":"VA","Saint Vincent vÃ  Grenadines":"VC","Venezuela":"VE","Quáº§n Äáº£o Virgin thuá»c Anh":"VG","Quáº§n Äáº£o Virgin thuá»c Má»¹":"VI","Viá»t Nam":"VN","Vanuatu":"VU","Wallis vÃ  Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","Nam Phi":"ZA","Zambia":"ZM","Zimbabwe":"ZW","VÃ¹ng ChÆ°a biáº¿t hoáº·c khÃ´ng Há»£p lá»":"ZZ"};
ilib.data.ctrynames_zh = {"generated":false,"é¿å¯æ±":"AF","é¿å°å·´å°¼äº":"AL","é¿å°åå©äº":"DZ","ç¾å±è¨æ©äº":"AS","å®éå°":"AD","å®å¥æ":"AO","å®å­æ":"AI","é¿æ ¹å»·":"AR","äºç¾å°¼äº":"AM","é¿é²å·´":"AW","é¿æ£®æ¾":"SH","é¿æ£®æ¾å²":"AC","æ¾³å¤§å©äº":"AU","å¥¥å°å©":"AT","é¿å¡æç":"AZ","è±å±ç»´å°äº¬ç¾¤å²":"VG","å·´åé©¬":"BS","å·´æ":"BH","å­å æå½":"BD","å·´å·´å¤æ¯":"BB","ç½ä¿ç½æ¯":"BY","æ¯å©æ¶":"BE","ä¼¯å©å¹":"BZ","è´å®":"BJ","ç¾æå¤§":"BM","ä¸ä¸¹":"BT","ç»å©ç»´äº":"BO","åè¨ç¦çº³":"BW","å·´è¥¿":"BR","è±å±å°åº¦æ´é¢å°":"IO","æè±":"BN","æè±è¾¾é²è¨å°å½":"BN","ä¿å å©äº":"BG","å¸åºçº³æ³ç´¢":"BF","ç¼ç¸":"MM","å¸éè¿ª":"BI","æ¬åå¯¨":"KH","åéº¦é":"CM","ä½å¾è§":"CV","å¼æ¼":"KY","ä¸­éå±åå½":"CF","ä¹å¾":"TD","æºå©":"CL","ä¸­å½":"CN","å¥ä¼¦æ¯äº":"CO","ç§æ©ç½":"KM","åºåç¾¤å²":"CK","å¥æ¯è¾¾é»å ":"CR","åç½å°äº":"HR","å¤å·´":"CU","å¡æµ¦è·¯æ¯":"CY","æ·åå±åå½":"CZ","ç§ç¹è¿ªç¦":"CI","å¤ç±³å°¼å å±åå½":"DO","åææ°ä¸»å±åå½":"CD","ä¸¹éº¦":"DK","åå¸æ":"DJ","å¤ç±³å°¼å":"DM","ä¸å¸æ±¶":"TL","åçå¤å°":"EC","åå":"EG","è¨å°ç¦å¤":"SV","èµ¤éå åäº":"GQ","åç«ç¹éäº":"ER","ç±æ²å°¼äº":"EE","åå¡ä¿æ¯äº":"ET","é©¬å¶é¡¿å±åå½ï¼ååæ¯æå¤«ï¼":"MK","ç¦åå°ç¾¤å²":"FK","æ³ç½ç¾¤å²":"FO","å¯åç½å°¼è¥¿äºèé¦":"FM","ææµ":"FJ","è¬å°":"FI","æ³å½":"FR","æ³å±å­äºé£":"GF","æ³å±æ³¢å©å°¼è¥¿äº":"PF","å è¬":"GA","åæ¯äº":"GM","ä¹æ²»äºå·":"GE","å¾·å½":"DE","å çº³":"GH","ç´å¸ç½é":"GI","å¸è":"GR","æ ¼éµå°":"GL","æ ¼æçº³è¾¾":"GD","çå¾·ç½æ®å²":"GP","å³å²":"GU","å±å°é©¬æ":"GT","å åäº":"GN","å åäºæ¯ç»":"GW","å­äºé£":"GY","æµ·å°":"HT","æ´ªé½ææ¯":"HN","é¦æ¸¯":"HK","åçå©":"HU","å°å²":"IS","å°åº¦":"IN","å°åº¦å°¼è¥¿äº":"ID","ä¼æ":"IR","ä¼æå":"IQ","ç±å°å°":"IE","ä»¥è²å":"IL","æå¤§å©":"IT","çä¹°å ":"JM","æ¥æ¬":"JP","çº¦æ¦":"JO","è¯å°¼äº":"KE","åºéå·´æ¯":"KI","ç§å¨ç¹":"KW","åå°åæ¯æ¯å¦":"KG","èæ":"LA","æè±ç»´äº":"LV","é»å·´å«©":"LB","è±ç´¢æ":"LS","å©æ¯éäº":"LR","å©æ¯äº":"LY","åæ¯æ¦å£«ç»":"LI","ç«é¶å®":"LT","å¢æ£®å ¡":"LU","æ¾³é¨":"MO","é©¬è¾¾å æ¯å ":"MG","é©¬æç»´":"MW","é©¬æ¥è¥¿äº":"MY","é©¬å°ä»£å¤«":"MV","é©¬é":"ML","é©¬è³ä»":"MT","é©¬ç»å°ç¾¤å²":"MH","é©¬æå°¼å":"MQ","é©¬æå°¼åå²":"MQ","æ¯éå¡å°¼äº":"MR","æ¯éæ±æ¯":"MU","å¢¨è¥¿å¥":"MX","å¯åç½å°¼è¥¿äº":"FM","æ©å°å¤ç¦":"MD","æ©çº³å¥":"MC","èå¤":"MN","é»å±±":"ME","æ©æ´å¥":"MA","è«æ¡æ¯å":"MZ","çº³ç±³æ¯äº":"NA","çé²":"NR","å°¼æ³å°":"NP","è·å°":"NL","è·å±å®çåæ¯":"AN","æ°åéå¤å°¼äº":"NC","æ°è¥¿å°":"NZ","å°¼å æç":"NI","å°¼æ¥å°":"NE","å°¼æ¥å©äº":"NG","è¯ºç¦åå²":"NF","æé²":"KP","åé©¬éäºçº³ç¾¤å²":"MP","æªå¨":"NO","é¿æ¼":"OM","å·´åºæ¯å¦":"PK","å¸å³":"PW","å·´åæ¯å¦æ°ææåæºæ":"PS","å·´æ¿é©¬":"PA","å·´å¸äºæ°å åäº":"PG","å·´æå­":"PY","ä¸­åäººæ°å±åå½":"CN","ç§é²":"PE","è²å¾å®¾":"PH","ç®ç¹å¯æ©":"PN","æ³¢å°":"PL","è¡èç":"PT","æ³¢å¤é»å":"PR","å¡å¡å°":"QA","å°æ¹¾":"TW","ç±å°å°å±åå½":"IE","ç½é©¬å°¼äº":"RO","ä¿ç½æ¯":"RU","å¢æºè¾¾":"RW","çå°¼æ±ª":"RE","å£æµ·ä¼¦å¨":"SH","å£å¢è¥¿äº":"LC","å£ç®åå°åå¯åéå²":"PM","è¨æ©äº":"WS","å£é©¬åè¯º":"SM","æ²ç¹é¿æä¼¯":"SA","å¡åå å°":"SN","å¡å°ç»´äº":"RS","å¡èå°":"SC","å¡æå©æ":"SL","æ°å å¡":"SG","æ¯æ´ä¼å":"SK","æ¯æ´æå°¼äº":"SI","æç½é¨ç¾¤å²":"SB","ç´¢é©¬é":"SO","åé":"ZA","é©å½":"KR","è¥¿ç­ç":"ES","æ¯éå°å¡":"LK","èä¸¹":"SD","èéå":"SR","æ¯å¨å£«å°":"SZ","çå¸":"SE","çå£«":"CH","åå©äº":"SY","å¡ååæ¯å¦":"TJ","å¦æ¡å°¼äº":"TZ","æ³°å½":"TH","å¼æ¼ç¾¤å²":"KY","ç¾å±ç»´å°äº¬ç¾¤å²":"VI","å¤å¥":"TG","æåå³":"TK","æ±¤å ":"TO","çªå°¼æ¯":"TN","åè³å¶":"TR","ååºæ¼æ¯å¦":"TM","å¾ç¦å¢":"TV","é¿èé":"AE","ä¹å¹²è¾¾":"UG","ä¹åå°":"UA","é¿æä¼¯èåéé¿å½":"AE","è±å½":"GB","ä¹æå­":"UY","ä¹å¹å«åæ¯å¦":"UZ","ç¦åªé¿å¾":"VU","æ¢µèåå":"VA","å§åçæ":"VE","è¶å":"VN","ç¦å©æ¯åå¯å¾çº³ç¾¤å²":"WF","ä¹é¨":"YE","èµæ¯äº":"ZM","æ´¥å·´å¸é¦":"ZW","å¥¥å°ç¾¤å²":"AX","å®æç":"AG","å·´å¸è¾¾":"AG","å§åçæç»å©ç¦å°å±åå½":"VE","å¤æ°æç»å©ç»´äºå½":"BO","æ³¢æ¯å°¼äº":"BA","å¸ç»´å²":"BV","æ±¶è±":"BN","å¯ç§æ¯ç¾¤å²":"TC","å æ¿å¤§":"CA","å£è¯å²":"CX","è¯èååºæç¾¤å²":"CC","è¯èç¾¤å²":"CC","åæ":"CD","æé²æ°ä¸»äººæ°å±åå½":"KP","å¤ç±³å°¼å ":"DM","æ³ç½":"FO","æ³å½åé¨é¢å":"TF","å¯å¾çº³":"WF","æ ¼é²åäº":"GE","å¤§ä¸åé¢ ":"GB","æ ¼æçº³ä¸æ¯":"VC","æ ¹è¥¿å²":"GG","èµ«å¾·å²åéº¦å½å³ç¾¤å²":"HM","èµ«å¾·å²":"HM","é»å¡å¥ç»´é£":"BA","æå»·":"VA","ä¼æå±åå½":"IR","é©¬æ©å²":"IM","è±¡çæµ·å²¸":"CI","æ¬é©¬å»¶":"SJ","åè¨åæ¯å¦":"KZ","å¤§é©æ°å½":"KR","èæäººæ°æ°ä¸»å±åå½":"LA","é¿æä¼¯å©æ¯äºæ°ä¼å½":"LY","é©¬å¶é¡¿":"MK","é©¬å°ç»´çº³æ¯":"FK","é©¬éäºçº³":"MP","é©¬çº¦ç¹":"YT","éº¦å½å³ç¾¤å²":"HM","å¯åé":"PM","æ©å°å¤ç¦å±åå½":"MD","èç¹åæ ¼ç½":"ME","èç¹å¡æç¹":"MS","å°¼ç»´æ¯":"KN","åæé²":"KP","å·´åæ¯å¦":"PS","å·´åæ¯å¦é¢å":"PS","è¢«å é¢çå·´åæ¯å¦é¢å":"PS","æ®æè¥¿æ¯":"ST","æ°å å¡å±åå":"SG","ä¿ç½æ¯èé¦":"RU","å£å·´æ³°åç±³":"BL","å£èµ«åæ¿":"SH","å£èµ«åæ¿ï¼é¿æ£®æ¾å²åç¹éæ¯å¦è¾¾åºå°¼äº":"SH","å£åºè¨":"KN","å£é©¬ä¸":"MF","å£ç®åå°":"PM","å£ææ£®ç¹":"VC","å£å¤ç¾":"ST","åæ ¼é²åäº":"GS","åæ ¼é²åäºååæ¡å¨å¥ç¾¤å²":"GS","åæ¡å¨å¥ç¾¤å²":"GS","æ¯ç¦å°å·´å²":"SJ","æ¯ç¦å°å·´å²åæ¬é©¬å»¶å²":"SJ","é¿æä¼¯åå©äºå±åå½":"SY","å¦æ¡å°¼äºèåå±åå½":"TZ","å¤å·´å¥":"TT","ç¹ç«å°¼è¾¾":"TT","ç¹éæ¯å¦è¾¾åºå°¼äº":"SH","ç¹åæ¯ç¾¤å²":"TC","ç¾å½":"US","ç¾å©ååä¼å½":"US","æ¢µå¸å":"VA","ç¦å©æ¯":"WF","è¥¿æåæ":"EH","é¿æä¼¯åå²":"SA","ä½å¾è§ç¾¤å²":"CV","ç§ç§æ¯(å¥æ)ç¾¤å²":"CC","åæï¼æ°ä¸»å±åå½":"CD","æé²æ°ä¸»ä¸»ä¹äººæ°å±åå½":"KP","è¿ªæ":"AE","è±æ ¼å°":"GB","å·´åæ¯å¦è¢«å é¢å":"PS","æ³¢å©å°¼è¥¿äº":"PF","å£å·´ç¹å²":"BL","èæ ¼å°":"GB","å£å·´å°å¾·åç±³":"BL","åå¾·æ¡å¨å¥ç¾¤å²":"GS","æ¢µèååå½":"VA","ç»´å°äº¬ç¾¤å²":"VI","å¨å°å£«":"GB","äºæ´²":"142","ä¸­äº":"143","è¥¿äº":"145","æ¬§æ´²":"150","ä¸æ¬§":"151","åæ¬§":"154","è¥¿æ¬§":"155","æä¸ç¾æ´²":"419","ä¸ç":"001","éæ´²":"002","åç¾æ´²":"003","åç¾æ´²":"005","å¤§æ´æ´²":"009","è¥¿é":"011","ä¸­ç¾æ´²":"013","ä¸é":"014","åé":"015","ä¸­é":"017","åé¨éæ´²":"018","ç¾æ´²":"019","ç¾æ´²åé¨":"021","å åæ¯å°åº":"029","ä¸äº":"030","åäº":"034","ä¸åäº":"035","åæ¬§":"039","æ¾³å¤§æè¥¿äº":"053","ç¾æå°¼è¥¿äº":"054","å¯åç½å°¼è¥¿äºå°åº":"057","ç»å©å°¼è¥¿äº":"061","å®æçåå·´å¸è¾¾":"AG","è·å±å®çåæ¯ç¾¤å²":"AN","åææ´²":"AQ","æ³¢æ¯å°¼äºåé»å¡å¥ç»´é£":"BA","è·å°å åæ¯":"BQ","å¸ç»´ç¹å²":"BV","ç§ç§æ¯ç¾¤å²":"CC","åæï¼éï¼":"CD","åæï¼å¸ï¼":"CG","åå©çé¡¿å²":"CP","åºæç´¢":"CW","è¿ªæå è¥¿äºå²":"DG","ä¼è¾¾åæ¢å©å©äº":"EA","æ¬§ç":"EU","åä¹æ²»äºå²ååæ¡å¨é½ç¾¤å²":"GS","ä¸­å½é¦æ¸¯ç¹å«è¡æ¿åº":"HK","èµ«å¾·ä¸éº¦ååçº³ç¾¤å²":"HM","å çº³å©ç¾¤å²":"IC","æ¼å²":"IM","æ³½è¥¿å²":"JE","å£åºè¨åå°¼ç»´æ¯":"KN","é»å±±å±åå½":"ME","æ³å±å£é©¬ä¸":"MF","ä¸­å½æ¾³é¨ç¹å«è¡æ¿åº":"MO","èå¡æç¹":"MS","çº½å":"NU","å£ç®åå°åå¯åéç¾¤å²":"PM","ç®ç¹å¯æ©ç¾¤å²":"PN","å¤§æ´æ´²è¾¹è¿ç¾¤å²":"QO","æ¯ç¦å°å·´ç¹åæ¬é©¬å»¶":"SJ","åèä¸¹":"SS","å£å¤ç¾åæ®æè¥¿æ¯":"ST","è·å±å£é©¬ä¸":"SX","ç¹éæ¯å¦-è¾¾åºå°¼äºç¾¤å²":"TA","ç¹åæ¯åå¯ç§æ¯ç¾¤å²":"TC","æ³å±åé¨é¢å":"TF","çªå°¼è¥¿äº":"TN","ç¹ç«å°¼è¾¾åå¤å·´å¥":"TT","ç¾å½è¾¹è¿å°å²":"UM","æ¢µèå":"VA","å£ææ£®ç¹åæ ¼æçº³ä¸æ¯":"VC","è±å±ç»´äº¬ç¾¤å²":"VG","ç¾å±ç»´äº¬ç¾¤å²":"VI","ç¦å©æ¯åå¯å¾çº³":"WF","æªç¥å°åº":"ZZ"};
ilib.data.ctrynames_zh_HK = {"generated":false,"é¿å¯æ±":"AF","é¿ç¾å·´å°¼äº":"AL","é¿ç¾åå©äº":"DZ","ç¾å±¬è©æ©äº":"AS","å®éç¾":"AD","å®å¥æ":"AO","å®å­æ":"AI","å®æçåå·´ä½é":"AG","é¿æ ¹å»·":"AR","äºç¾å°¼äº":"AM","é¿é­¯å·´":"AW","é¿æ£®æ¾":"SH","æ¾³å¤§å©äº":"AU","å¥§å°å©":"AT","é¿å¡æç":"AZ","è±å±¬ç¶­ç¾äº¬ç¾¤å³¶":"VG","å·´åé¦¬":"BS","å·´æ":"BH","å­å æå":"BD","å·´å·´å¤æ¯":"BB","ç½ä¿ç¾æ¯":"BY","æ¯å©æ":"BE","ä¼¯å©è²":"BZ","è²å¯§":"BJ","ç¾æå¤§":"BM","ä¸ä¸¹":"BT","ç»å©ç¶­äº":"BO","æ³¢æ¯å°¼äºåé»å¡å¥ç¶­é£":"BA","åè¨ç¦ç´":"BW","å·´è¥¿":"BR","è±å±¬å°åº¦æ´é å°":"IO","æ±¶è":"BN","æ±¶èéé­¯è©è­å":"BN","ä¿å å©äº":"BG","å¸åºç´æ³ç´¢":"BF","ç·¬ç¸":"MM","å¸éè¿ª":"BI","æ¬åå¯¨":"KH","åéº¥é":"CM","ä½å¾è§":"CV","éæ¼":"KY","ä¸­éå±åå":"CF","ä¹å¾":"TD","æºå©":"CL","ä¸­å":"CN","å¥å«æ¯äº":"CO","ç§æ©ç¾":"KM","åº«åç¾¤å³¶":"CK","å¥æ¯å¤§é»å ":"CR","åç¾å°äº":"HR","å¤å·´":"CU","å¡æµ¦è·¯æ¯":"CY","æ·åå±åå":"CZ","ç§ç¹è¿ªç¦":"CI","å¤ç±³å°¼å å±åå":"CD","åææ°ä¸»å±åå":"CD","ä¸¹éº¥":"DK","åå¸æ":"DJ","å¤ç±³å°¼å":"DM","æ±å¸æ±¶":"TL","åçå¤ç¾":"EC","åå":"EG","è©ç¾ç¦å¤":"SV","èµ¤éå¹¾å§äº":"GQ","åç«ç¹éäº":"ER","ææ²å°¼äº":"EE","è¡£ç´¢æ¯äº":"ET","é¦¬å¶é å±ååï¼ååæ¯æå¤«ï¼":"MK","ç¦åè­ç¾¤å³¶":"FK","æ³ç¾ç¾¤å³¶":"FO","å¯åç¾å°¼è¥¿äºè¯é¦":"FM","ææ¿":"FJ","è¬è­":"FI","æ³å":"FR","æ³å±¬å­äºé£":"GF","æ³å±¬æ³¢å©å°¼è¥¿äº":"PF","å è¬":"GA","å²¡æ¯äº":"GM","å¬æ²»äºå·":"GE","å¾·å":"DE","å ç´":"GH","ç´å¸ç¾é":"GI","å¸è":"GR","æ ¼éµè­":"GL","æ ¼æç´é":"GD","çå¾·ç¾æ®å³¶":"GP","éå³¶":"GU","å±å°é¦¬æ":"GT","ç¿å§äº":"GN","å¹¾å§äºæ¯ç´¹":"GW","å­äºé£":"GY","æµ·å°":"HT","å®é½ææ¯":"HN","é¦æ¸¯":"HK","åçå©":"HU","å°å³¶":"IS","å°åº¦":"IN","å°åº¦å°¼è¥¿äº":"ID","ä¼æ":"IR","ä¼æå":"IQ","æç¾è­":"IE","ä»¥è²å":"IL","ç¾©å¤§å©":"IT","çè²·å ":"JM","æ¥æ¬":"JP","ç´æ¦":"JO","è¯å°¼äº":"KE","åºè£å·´æ¯":"KI","ç§å¨ç¹":"KW","åç¾åæ¯æ¯å¦":"KG","èæ¾":"LA","æè«ç¶­äº":"LV","é»å·´å«©":"LB","èç´¢æ":"LS","å©æ¯éäº":"LR","å©æ¯äº":"LY","åæ¯æ¦å£«ç»":"LI","ç«é¶å®":"LT","ç§æ£®å ¡":"LU","æ¾³é":"MO","é¦¬éå æ¯å ":"MG","é¦¬æç¶­":"MW","é¦¬ä¾è¥¿äº":"MY","é¦¬ç¾å°å¤«":"MV","é¦¬é":"ML","é¦¬è³ä»":"MT","é¦¬ç´¹ç¾ç¾¤å³¶":"MH","é¦¬æå°¼å":"MQ","é¦¬æå°¼åå³¶":"MQ","æ¯éå¡å°¼äº":"MR","æ¯éæ±æ¯":"MU","å¢¨è¥¿å¥":"MX","å¯åç¾å°¼è¥¿äº":"FM","æ©ç¾å¤ç¦":"MD","æ©ç´å¥":"MC","èå¤":"MN","é»å±±":"ME","æ©æ´å¥":"MA","è«æ¡æ¯å":"MZ","ç´ç±³æ¯äº":"NA","çé­¯":"NR","å°¼æ³ç¾":"NP","è·è­":"NL","è·å±¬å®çåæ¯":"AN","æ°åè£å¤å°¼äº":"NC","æ°è¥¿è­":"NZ","å°¼å æç":"NI","å°¼æ¥ç¾":"NE","å°¼æ¥å©äº":"NG","è«¾ç¦åå³¶":"NF","æé®®":"KR","åé¦¬éäºç´ç¾¤å³¶":"MP","æªå¨":"NO","é¿æ¼":"OM","å·´åºæ¯å¦":"PK","å¸å":"PW","å·´åæ¯å¦æ°ææ¬åæ©æ§":"PS","å·´æ¿é¦¬":"PA","å·´å¸äºæ°ç¿å§äº":"PG","å·´æå­":"PY","ä¸­è¯äººæ°å±åå":"CN","ç§é­¯":"PE","è²å¾è³":"PH","ç®ç¹è¯":"PN","æ³¢è­":"PL","è¡èç":"PT","æ³¢å¤é»å":"PR","å¡å¡ç¾":"QA","ä¸­è¯æ°å":"TW","æç¾è­å±åå":"IE","ç¾é¦¬å°¼äº":"RO","ä¿ç¾æ¯":"RU","ç§å®é":"RW","çå°¼æ±ª":"RE","èæµ·å«å¨":"SH","èåºè¨åå°¼ç¶­æ¯":"KN","èç§è¥¿äº":"LC","èç®åç¾åå¯åéå³¶":"PM","èææ£®ç¹åæ ¼æç´ä¸æ¯":"VC","è©æ©äº":"WS","èé¦¬åè«¾":"SM","æ²çå°é¿æä¼¯":"SA","å¡å§å ç¾":"SN","å¡ç¾ç¶­äº":"RS","å¡èç¾":"SC","å¡æå©æ":"SL","æ°å å¡":"SG","æ¯æ´ä¼å":"SK","æ¯æ´æå°¼äº":"SI","æç¾éç¾¤å³¶":"SB","ç´¢é¦¬å©äº":"SO","åé":"ZA","éå":"KR","è¥¿ç­ç":"ES","æ¯éè­å¡":"LK","èä¸¹":"SD","èéå":"SR","æ¯å¨å£«è­":"SZ","çå¸":"SE","çå£«":"CH","æå©äº":"SY","èå¤ç¾åæ®æè¥¿æ¯":"ST","èºç£":"TW","å¡ååæ¯å¦":"TJ","å¦æ¡å°¼äº":"TZ","æ³°å":"TH","éæ¼ç¾¤å³¶":"KY","ç¾å±¬ç¶­ç¾äº¬ç¾¤å³¶":"VI","å¤å¥":"TG","æåå":"TK","æ¹¯å ":"TO","ç¹ç«å°¼éåå¤å·´å¥":"TT","çªå°¼æ¯":"TN","åè³å¶":"TR","ååº«æ¼æ¯å¦":"TM","åç¦ç§":"TV","é¿è¯é":"AE","çå¹²é":"UG","çåè­":"UA","é¿æä¼¯è¯åéé·å":"AE","è±å":"GB","çæå­":"UY","çè²å¥åæ¯å¦":"UZ","ç¦åªé¿å":"VU","æ¢µèå²¡å":"VA","å§å§çæ":"VE","è¶å":"VN","ç¦å©æ¯åå¯åç´ç¾¤å³¶":"WF","ä¹é":"YE","è´æ¯äº":"ZM","æ´¥å·´å¸é":"ZW","å¥§è­ç¾¤å³¶":"AX","å®æç":"AG","é¿æ£®é¬å³¶":"SH","å·´ä½é":"AG","å§å§çæç»å©ç¦ç¾å±åå":"VE","å¤æ°æç»å©ç¶­äºå":"BO","æ³¢æ¯å°¼äº":"BA","å¸ç¶­å³¶":"BV","å±ç§æ¯ç¾¤å³¶":"TC","å æ¿å¤§":"CA","èèªå³¶":"CX","è¯èååºæç¾¤å³¶":"CC","è¯èç¾¤å³¶":"CC","åæ":"CD","å¥æ¯éé»å ":"CR","æé®®æ°ä¸»äººæ°å±åå":"KP","å¤ç±³å°¼å ":"DM","åå¡ä¿æ¯äº":"ET","æ³ç¾":"FO","æ³ååé¨é å":"TF","å¯åç´":"WF","æ ¼é­¯åäº":"GE","å¤§ä¸åé¡":"GB","æ ¼æç´ä¸æ¯":"VC","æ ¹è¥¿å³¶":"GG","å¹¾å§äº":"GN","èµ«å¾·å³¶åéº¥ç¶åç¾¤å³¶":"HM","èµ«å¾·å³¶":"HM","é»å¡å¥ç¶­é£":"BA","æå»·":"VA","æ´ªé½ææ¯":"HN","ä¼æå±åå":"IR","é¦¬æ©å³¶":"IM","æå¤§å©":"IT","è±¡çæµ·å²¸":"CI","æé¦¬å»¶":"SJ","åè©åæ¯å¦":"KZ","åºéå·´æ¯":"KI","å¤§éæ°å":"KR","èæ¾äººæ°æ°ä¸»å±åå":"LA","é¿æä¼¯å©æ¯äºæ°ç¾å":"LY","é¦¬å¶é ":"MK","é¦¬ç¾ä»£å¤«":"MV","é¦¬ç¾ç¶­ç´æ¯":"FK","é¦¬éäºç´":"MP","é¦¬ç´ç¹":"YT","éº¥ç¶åç¾¤å³¶":"HM","å¯åé":"PM","æ©ç¾å¤ç¦å±åå":"MD","èç¹å§æ ¼ç¾":"ME","èç¹å¡æç¹":"MS","å°¼ç¶­æ¯":"KN","æ°åéå¤å°¼äº":"NC","åæé®®":"KP","å·´åæ¯å¦":"PS","å·´åæ¯å¦é å":"PS","è¢«ä½é çå·´åæ¯å¦é å":"PS","å·´å¸äºæ°å¹¾å§äº":"PG","ç®ç¹å±æ©":"PN","æ®æè¥¿æ¯":"ST","æ°å å¡å±åå":"SG","ä¿ç¾æ¯è¯é¦":"RU","ç§æºé":"RW","èå·´æ³°åç±³":"BL","èèµ«åæ¿":"SH","èèµ«åæ¿ï¼é¿æ£®é¬å³¶åç¹éæ¯å¦éåº«å°¼äº":"SH","èåºè¨":"KN","èé¦¬ä¸":"MF","èç®åç¾":"PM","èææ£®ç¹":"VC","èå¤ç¾":"ST","æ²ç¹é¿æä¼¯":"SA","ç´¢é¦¬é":"SO","åæ ¼é­¯åäº":"GS","åæ ¼é­¯åäºååæ¡å¨å¥ç¾¤å³¶":"GS","åæ¡å¨å¥ç¾¤å³¶":"GS","æ¯ç¦ç¾å·´å³¶":"SJ","æ¯ç¦ç¾å·´å³¶åæé¦¬å»¶å³¶":"SJ","æå©äº":"SY","é¿æä¼¯æå©äºå±åå":"SY","å°ç£":"TW","å¦æ¡å°¼äºè¯åå±åå":"TZ","å¤å·´å¥":"TT","ç¹ç«å°¼é":"TT","ç¹éæ¯å¦éåº«å°¼äº":"SH","ç¹åæ¯åå±ç§æ¯ç¾¤å³¶":"TC","ç¹åæ¯ç¾¤å³¶":"TC","ç¾å":"US","æ¢µå¸å²¡":"VA","ç¦å©æ¯":"WF","è¥¿æåæ":"EH"};
ilib.data.ctrynames_zh_TW = {"generated":false,"é¿å¯æ±":"AF","é¿ç¾å·´å°¼äº":"AL","é¿ç¾åå©äº":"DZ","ç¾å±¬è©æ©äº":"AS","å®éç¾":"AD","å®å¥æ":"AO","å®å­æ":"AI","å®æçåå·´ä½é":"AG","é¿æ ¹å»·":"AR","äºç¾å°¼äº":"AM","é¿é­¯å·´":"AW","é¿æ£®æ¾":"SH","æ¾³å¤§å©äº":"AU","å¥§å°å©":"AT","é¿å¡æç":"AZ","è±å±¬ç¶­ç¾äº¬ç¾¤å³¶":"VG","å·´åé¦¬":"BS","å·´æ":"BH","å­å æå":"BD","å·´å·´å¤æ¯":"BB","ç½ä¿ç¾æ¯":"BY","æ¯å©æ":"BE","ä¼¯å©è²":"BZ","è²å¯§":"BJ","ç¾æå¤§":"BM","ä¸ä¸¹":"BT","ç»å©ç¶­äº":"BO","æ³¢æ¯å°¼äºåé»å¡å¥ç¶­é£":"BA","åè¨ç¦ç´":"BW","å·´è¥¿":"BR","è±å±¬å°åº¦æ´é å°":"IO","æ±¶è":"BN","æ±¶èéé­¯è©è­å":"BN","ä¿å å©äº":"BG","å¸åºç´æ³ç´¢":"BF","ç·¬ç¸":"MM","å¸éè¿ª":"BI","æ¬åå¯¨":"KH","åéº¥é":"CM","ä½å¾è§":"CV","éæ¼":"KY","ä¸­éå±åå":"CF","ä¹å¾":"TD","æºå©":"CL","ä¸­å":"CN","å¥å«æ¯äº":"CO","ç§æ©ç¾":"KM","åº«åç¾¤å³¶":"CK","å¥æ¯å¤§é»å ":"CR","åç¾å°äº":"HR","å¤å·´":"CU","å¡æµ¦è·¯æ¯":"CY","æ·åå±åå":"CZ","ç§ç¹è¿ªç¦":"CI","å¤ç±³å°¼å å±åå":"CD","åææ°ä¸»å±åå":"CD","ä¸¹éº¥":"DK","åå¸æ":"DJ","å¤ç±³å°¼å":"DM","æ±å¸æ±¶":"TL","åçå¤ç¾":"EC","åå":"EG","è©ç¾ç¦å¤":"SV","èµ¤éå¹¾å§äº":"GQ","åç«ç¹éäº":"ER","ææ²å°¼äº":"EE","è¡£ç´¢æ¯äº":"ET","é¦¬å¶é å±ååï¼ååæ¯æå¤«ï¼":"MK","ç¦åè­ç¾¤å³¶":"FK","æ³ç¾ç¾¤å³¶":"FO","å¯åç¾å°¼è¥¿äºè¯é¦":"FM","ææ¿":"FJ","è¬è­":"FI","æ³å":"FR","æ³å±¬å­äºé£":"GF","æ³å±¬æ³¢å©å°¼è¥¿äº":"PF","å è¬":"GA","å²¡æ¯äº":"GM","å¬æ²»äºå·":"GE","å¾·å":"DE","å ç´":"GH","ç´å¸ç¾é":"GI","å¸è":"GR","æ ¼éµè­":"GL","æ ¼æç´é":"GD","çå¾·ç¾æ®å³¶":"GP","éå³¶":"GU","å±å°é¦¬æ":"GT","ç¿å§äº":"GN","å¹¾å§äºæ¯ç´¹":"GW","å­äºé£":"GY","æµ·å°":"HT","å®é½ææ¯":"HN","é¦æ¸¯":"HK","åçå©":"HU","å°å³¶":"IS","å°åº¦":"IN","å°åº¦å°¼è¥¿äº":"ID","ä¼æ":"IR","ä¼æå":"IQ","æç¾è­":"IE","ä»¥è²å":"IL","ç¾©å¤§å©":"IT","çè²·å ":"JM","æ¥æ¬":"JP","ç´æ¦":"JO","è¯å°¼äº":"KE","åºè£å·´æ¯":"KI","ç§å¨ç¹":"KW","åç¾åæ¯æ¯å¦":"KG","èæ¾":"LA","æè«ç¶­äº":"LV","é»å·´å«©":"LB","èç´¢æ":"LS","å©æ¯éäº":"LR","å©æ¯äº":"LY","åæ¯æ¦å£«ç»":"LI","ç«é¶å®":"LT","ç§æ£®å ¡":"LU","æ¾³é":"MO","é¦¬éå æ¯å ":"MG","é¦¬æç¶­":"MW","é¦¬ä¾è¥¿äº":"MY","é¦¬ç¾å°å¤«":"MV","é¦¬é":"ML","é¦¬è³ä»":"MT","é¦¬ç´¹ç¾ç¾¤å³¶":"MH","é¦¬æå°¼å":"MQ","é¦¬æå°¼åå³¶":"MQ","æ¯éå¡å°¼äº":"MR","æ¯éæ±æ¯":"MU","å¢¨è¥¿å¥":"MX","å¯åç¾å°¼è¥¿äº":"FM","æ©ç¾å¤ç¦":"MD","æ©ç´å¥":"MC","èå¤":"MN","é»å±±":"ME","æ©æ´å¥":"MA","è«æ¡æ¯å":"MZ","ç´ç±³æ¯äº":"NA","çé­¯":"NR","å°¼æ³ç¾":"NP","è·è­":"NL","è·å±¬å®çåæ¯":"AN","æ°åè£å¤å°¼äº":"NC","æ°è¥¿è­":"NZ","å°¼å æç":"NI","å°¼æ¥ç¾":"NE","å°¼æ¥å©äº":"NG","è«¾ç¦åå³¶":"NF","æé®®":"KR","åé¦¬éäºç´ç¾¤å³¶":"MP","æªå¨":"NO","é¿æ¼":"OM","å·´åºæ¯å¦":"PK","å¸å":"PW","å·´åæ¯å¦æ°ææ¬åæ©æ§":"PS","å·´æ¿é¦¬":"PA","å·´å¸äºæ°ç¿å§äº":"PG","å·´æå­":"PY","ä¸­è¯äººæ°å±åå":"CN","ç§é­¯":"PE","è²å¾è³":"PH","ç®ç¹è¯":"PN","æ³¢è­":"PL","è¡èç":"PT","æ³¢å¤é»å":"PR","å¡å¡ç¾":"QA","ä¸­è¯æ°å":"TW","æç¾è­å±åå":"IE","ç¾é¦¬å°¼äº":"RO","ä¿ç¾æ¯":"RU","ç§å®é":"RW","çå°¼æ±ª":"RE","èæµ·å«å¨":"SH","èåºè¨åå°¼ç¶­æ¯":"KN","èç§è¥¿äº":"LC","èç®åç¾åå¯åéå³¶":"PM","èææ£®ç¹åæ ¼æç´ä¸æ¯":"VC","è©æ©äº":"WS","èé¦¬åè«¾":"SM","æ²çå°é¿æä¼¯":"SA","å¡å§å ç¾":"SN","å¡ç¾ç¶­äº":"RS","å¡èç¾":"SC","å¡æå©æ":"SL","æ°å å¡":"SG","æ¯æ´ä¼å":"SK","æ¯æ´æå°¼äº":"SI","æç¾éç¾¤å³¶":"SB","ç´¢é¦¬å©äº":"SO","åé":"ZA","éå":"KR","è¥¿ç­ç":"ES","æ¯éè­å¡":"LK","èä¸¹":"SD","èéå":"SR","æ¯å¨å£«è­":"SZ","çå¸":"SE","çå£«":"CH","æå©äº":"SY","èå¤ç¾åæ®æè¥¿æ¯":"ST","èºç£":"TW","å¡ååæ¯å¦":"TJ","å¦æ¡å°¼äº":"TZ","æ³°å":"TH","éæ¼ç¾¤å³¶":"KY","ç¾å±¬ç¶­ç¾äº¬ç¾¤å³¶":"VI","å¤å¥":"TG","æåå":"TK","æ¹¯å ":"TO","ç¹ç«å°¼éåå¤å·´å¥":"TT","çªå°¼æ¯":"TN","åè³å¶":"TR","ååº«æ¼æ¯å¦":"TM","åç¦ç§":"TV","é¿è¯é":"AE","çå¹²é":"UG","çåè­":"UA","é¿æä¼¯è¯åéé·å":"AE","è±å":"GB","çæå­":"UY","çè²å¥åæ¯å¦":"UZ","ç¦åªé¿å":"VU","æ¢µèå²¡å":"VA","å§å§çæ":"VE","è¶å":"VN","ç¦å©æ¯åå¯åç´ç¾¤å³¶":"WF","ä¹é":"YE","è´æ¯äº":"ZM","æ´¥å·´å¸é":"ZW","å¥§è­ç¾¤å³¶":"AX","å®æç":"AG","é¿æ£®é¬å³¶":"SH","å·´ä½é":"AG","å§å§çæç»å©ç¦ç¾å±åå":"VE","å¤æ°æç»å©ç¶­äºå":"BO","æ³¢æ¯å°¼äº":"BA","å¸ç¶­å³¶":"BV","å±ç§æ¯ç¾¤å³¶":"TC","å æ¿å¤§":"CA","èèªå³¶":"CX","è¯èååºæç¾¤å³¶":"CC","è¯èç¾¤å³¶":"CC","åæ":"CD","å¥æ¯éé»å ":"CR","æé®®æ°ä¸»äººæ°å±åå":"KP","å¤ç±³å°¼å ":"DM","åå¡ä¿æ¯äº":"ET","æ³ç¾":"FO","æ³ååé¨é å":"TF","å¯åç´":"WF","æ ¼é­¯åäº":"GE","å¤§ä¸åé¡":"GB","æ ¼æç´ä¸æ¯":"VC","æ ¹è¥¿å³¶":"GG","å¹¾å§äº":"GN","èµ«å¾·å³¶åéº¥ç¶åç¾¤å³¶":"HM","èµ«å¾·å³¶":"HM","é»å¡å¥ç¶­é£":"BA","æå»·":"VA","æ´ªé½ææ¯":"HN","ä¼æå±åå":"IR","é¦¬æ©å³¶":"IM","æå¤§å©":"IT","è±¡çæµ·å²¸":"CI","æé¦¬å»¶":"SJ","åè©åæ¯å¦":"KZ","åºéå·´æ¯":"KI","å¤§éæ°å":"KR","èæ¾äººæ°æ°ä¸»å±åå":"LA","é¿æä¼¯å©æ¯äºæ°ç¾å":"LY","é¦¬å¶é ":"MK","é¦¬ç¾ä»£å¤«":"MV","é¦¬ç¾ç¶­ç´æ¯":"FK","é¦¬éäºç´":"MP","é¦¬ç´ç¹":"YT","éº¥ç¶åç¾¤å³¶":"HM","å¯åé":"PM","æ©ç¾å¤ç¦å±åå":"MD","èç¹å§æ ¼ç¾":"ME","èç¹å¡æç¹":"MS","å°¼ç¶­æ¯":"KN","æ°åéå¤å°¼äº":"NC","åæé®®":"KP","å·´åæ¯å¦":"PS","å·´åæ¯å¦é å":"PS","è¢«ä½é çå·´åæ¯å¦é å":"PS","å·´å¸äºæ°å¹¾å§äº":"PG","ç®ç¹å±æ©":"PN","æ®æè¥¿æ¯":"ST","æ°å å¡å±åå":"SG","ä¿ç¾æ¯è¯é¦":"RU","ç§æºé":"RW","èå·´æ³°åç±³":"BL","èèµ«åæ¿":"SH","èèµ«åæ¿ï¼é¿æ£®é¬å³¶åç¹éæ¯å¦éåº«å°¼äº":"SH","èåºè¨":"KN","èé¦¬ä¸":"MF","èç®åç¾":"PM","èææ£®ç¹":"VC","èå¤ç¾":"ST","æ²ç¹é¿æä¼¯":"SA","ç´¢é¦¬é":"SO","åæ ¼é­¯åäº":"GS","åæ ¼é­¯åäºååæ¡å¨å¥ç¾¤å³¶":"GS","åæ¡å¨å¥ç¾¤å³¶":"GS","æ¯ç¦ç¾å·´å³¶":"SJ","æ¯ç¦ç¾å·´å³¶åæé¦¬å»¶å³¶":"SJ","æå©äº":"SY","é¿æä¼¯æå©äºå±åå":"SY","å°ç£":"TW","å¦æ¡å°¼äºè¯åå±åå":"TZ","å¤å·´å¥":"TT","ç¹ç«å°¼é":"TT","ç¹éæ¯å¦éåº«å°¼äº":"SH","ç¹åæ¯åå±ç§æ¯ç¾¤å³¶":"TC","ç¹åæ¯ç¾¤å³¶":"TC","ç¾å":"US","æ¢µå¸å²¡":"VA","ç¦å©æ¯":"WF","è¥¿æåæ":"EH"};
/**
 * addressprs.js - Represent a mailing address
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*globals console RegExp */

/* !depends 
ilibglobal.js 
locale.js 
ctype.isideo.js 
ctype.isascii.js
ctype.isdigit.js
*/

// !data address countries nativecountries ctrynames

/**
 * @constructor
 * @class
 * 
 * Create a new Address instance and parse a physical address.<p>
 * 
 * This function parses a physical address written in a free-form string. 
 * It returns an object with a number of properties from the list below 
 * that it may have extracted from that address.<p>
 * 
 * The following is a list of properties that the algorithm will return:<p>
 * 
 * <ul>
 * <li><i>streetAddress</i>: The street address, including house numbers and all.
 * <li><i>locality</i>: The locality of this address (usually a city or town). 
 * <li><i>region</i>: The region where the locality is located. In the US, this
 * corresponds to states. In other countries, this may be provinces,
 * cantons, prefectures, etc. In some smaller countries, there are no
 * such divisions.
 * <li><i>postalCode</i>: Country-specific code for expediting mail. In the US, 
 * this is the zip code.
 * <li><i>country</i>: The country of the address.
 * <li><i>countryCode</i>: The ISO 3166 2-letter region code for the destination
 * country in this address.
 * </ul> 
 * 
 * The above properties will not necessarily appear in the instance. For 
 * any individual property, if the free-form address does not contain 
 * that property or it cannot be parsed out, the it is left out.<p>
 * 
 * The options parameter may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale or localeSpec to use to parse the address. If not 
 * specified, this function will use the current ilib locale
 * 
 * <li><i>onLoad</i> - a callback function to call when the address info for the
 * locale is fully loaded and the address has been parsed. When the onLoad 
 * option is given, the address object 
 * will attempt to load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * When an address cannot be parsed properly, the entire address will be placed
 * into the streetAddress property.<p>
 * 
 * When the freeformAddress is another ilib.Address, this will act like a copy
 * constructor.<p>
 * 
 * Depends directive: !depends addressprs.js
 * 
 * @dict
 * @param {string|ilib.Address} freeformAddress free-form address to parse, or a
 * javascript object containing the fields
 * @param {Object} options options to the parser
 */
ilib.Address = function (freeformAddress, options) {
	var address;

	if (!freeformAddress) {
		return undefined;
	}

	this.sync = true;
	this.loadParams = {};
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (typeof(options.sync) !== 'undefined') {
			this.sync = (options.sync == true);
		}
		
		if (options.loadParams) {
			this.loadParams = options.loadParams;
		}
	}

	this.locale = this.locale || new ilib.Locale();
	// initialize from an already parsed object
	if (typeof(freeformAddress) === 'object') {
		/**
		 * The street address, including house numbers and all.
		 * @expose
		 * @type {string|undefined} 
		 */
		this.streetAddress = freeformAddress.streetAddress;
		/**
		 * The locality of this address (usually a city or town).
		 * @expose
		 * @type {string|undefined} 
		 */
		this.locality = freeformAddress.locality;
		/**
		 * The region (province, canton, prefecture, state, etc.) where the address is located.
		 * @expose
		 * @type {string|undefined} 
		 */
		this.region = freeformAddress.region;
		/**
		 * Country-specific code for expediting mail. In the US, this is the zip code.
		 * @expose
		 * @type {string|undefined} 
		 */
		this.postalCode = freeformAddress.postalCode;
		/**
		 * The country of the address.
		 * @expose
		 * @type {string|undefined}
		 */
		this.country = freeformAddress.country;
		if (freeformAddress.countryCode) {
			/**
			 * The 2 or 3 letter ISO 3166 region code for the destination country in this address.
			 * @expose
			 * @type {string} 
			 * 
			 */
			this.countryCode = freeformAddress.countryCode;
		}
		if (freeformAddress.format) {
			/**
			 * @protected
			 * @type {string}
			 */
			this.format = freeformAddress.format;
		}
		return this;
	}

	address = freeformAddress.replace(/[ \t\r]+/g, " ").trim();
	address = address.replace(/[\s\n]+$/, "");
	address = address.replace(/^[\s\n]+/, "");
	//console.log("\n\n-------------\nAddress is '" + address + "'");
	
	this.lines = address.split(/[,ï¼\n]/g);
	this.removeEmptyLines(this.lines);
	
	ilib.Address.shared = ilib.Address.shared || {}; 
	if (typeof(ilib.Address.ctry) === 'undefined') {
		ilib.Address.ctry = {}; // make sure not to conflict with the address info
	}
	ilib.CType.isAscii._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {
		ilib.CType.isIdeo._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {
			ilib.CType.isDigit._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {
				if (typeof(ilib.data.nativecountries) === 'undefined') {
					ilib.loadData({
						name: "nativecountries.json", // countries in their own language 
						locale: "-", // only need to load the root file 
						sync: this.sync, 
						loadParams: this.loadParams, 
						callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(nativecountries) {
							ilib.data.nativecountries = nativecountries;
							this._loadCountries(options && options.onLoad);
						})
					});
				} else {
					this._loadCountries(options && options.onLoad);
				}
			}));
		}));
	}));
};

/** @protected */
ilib.Address.prototype = {
	/**
	 * @private
	 */
	_loadCountries: function(onLoad) {
		if (typeof(ilib.data.countries) === 'undefined') {
			ilib.loadData({
				name: "countries.json", // countries in English
				locale: "-", // only need to load the root file
				sync: this.sync, 
				loadParams: this.loadParams, 
				callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(countries) {
					ilib.data.countries = countries;
					this._loadCtrynames(onLoad);
				})
			});
		} else {
			this._loadCtrynames(onLoad);
		}
	},

	/**
	 * @private
	 */
	_loadCtrynames: function(onLoad) {
		ilib.loadData({
			name: "ctrynames.json", 
			object: ilib.Address.ctry, 
			locale: this.locale, 
			sync: this.sync, 
			loadParams: this.loadParams, 
			callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(ctrynames) {
				this._determineDest(ctrynames, onLoad);
			})
		});
	},
	
	/**
	 * @private
	 * @param {Object?} ctrynames
	 */
	_findDest: function (ctrynames) {
		var match;
		
		for (var countryName in ctrynames) {
			if (countryName && countryName !== "generated") {
				// find the longest match in the current table
				// ctrynames contains the country names mapped to region code
				// for efficiency, only test for things longer than the current match
				if (!match || match.text.length < countryName.length) {
					var temp = this._findCountry(countryName);
					if (temp) {
						match = temp;
						this.country = match.text;
						this.countryCode = ctrynames[countryName];
					}
				}
			}
		}
		return match;
	},
	
	/**
	 * @private
	 * @param {Object?} localizedCountries
	 * @param {function(ilib.Address):undefined} callback
	 */
	_determineDest: function (localizedCountries, callback) {
		var match;
		
		/*
		 * First, find the name of the destination country, as that determines how to parse
		 * the rest of the address. For any address, there are three possible ways 
		 * that the name of the country could be written:
		 * 1. In the current language
		 * 2. In its own native language
		 * 3. In English
		 * We'll try all three.
		 */
		var tables = [];
		if (localizedCountries) {
			tables.push(localizedCountries);
		}
		tables.push(ilib.data.nativecountries);
		tables.push(ilib.data.countries);
		
		for (var i = 0; i < tables.length; i++) {
			match = this._findDest(tables[i]);
			
			if (match) {
				this.lines[match.line] = this.lines[match.line].substring(0, match.start) + this.lines[match.line].substring(match.start + match.text.length);

				this._init(callback);
				return;
			}
		}
		
		// no country, so try parsing it as if we were in the same country
		this.country = undefined;
		this.countryCode = this.locale.getRegion();
		this._init(callback);
	},

	/**
	 * @private
	 * @param {function(ilib.Address):undefined} callback
	 */
	_init: function(callback) {
		ilib.loadData({
			object: ilib.Address, 
			locale: new ilib.Locale(this.countryCode), 
			name: "address.json", 
			sync: this.sync, 
			loadParams: this.loadParams,
			callback: /** @type function(Object=):undefined */ ilib.bind(this, function(info) {
				if (!info || ilib.isEmpty(info)) {
					// load the "unknown" locale instead
					ilib.loadData({
						object: ilib.Address, 
						locale: new ilib.Locale("XX"), 
						name: "address.json", 
						sync: this.sync, 
						loadParams: this.loadParams,
						callback: /** @type function(Object=):undefined */ ilib.bind(this, function(info) {
							this.info = info;
							this._parseAddress();
							if (typeof(callback) === 'function') {
								callback(this);
							}	
						})
					});
				} else {
					this.info = info;
					this._parseAddress();
					if (typeof(callback) === 'function') {
						callback(this);
					}
				}
			})
		});
	},

	/**
	 * @private
	 */
	_parseAddress: function() {
		// clean it up first
		var i, 
			asianChars = 0, 
			latinChars = 0,
			startAt,
			infoFields,
			field,
			pattern,
			matchFunction,
			match,
			fieldNumber;
		
		// for locales that support both latin and asian character addresses, 
		// decide if we are parsing an asian or latin script address
		if (this.info && this.info.multiformat) {
			for (var j = 0; j < this.lines.length; j++) {
				var line = this.lines[j];
				// TODO: use a char iterator here
				for (i = 0; i < line.length; i++) {
					if (ilib.CType.isIdeo(line.charAt(i))) {
						asianChars++;
					} else if (ilib.CType.isAscii(line.charAt(i)) && !ilib.CType.isDigit(line.charAt(i))) {
						latinChars++;
					}
				}
			}
			
			this.format = (asianChars >= latinChars) ? "asian" : "latin";
			startAt = this.info.startAt[this.format];
			infoFields = this.info.fields[this.format];
			// console.log("multiformat locale: format is now " + this.format);
		} else {
			startAt = (this.info && this.info.startAt) || "end";
			infoFields = this.info.fields;
		}
		this.compare = (startAt === "end") ? this.endsWith : this.startsWith;
		
		//console.log("this.lines is: " + JSON.stringify(this.lines));
		
		for (i = 0; i < infoFields.length && this.lines.length > 0; i++) {
			/** @type {{name:string, line:string, pattern:(string|Array.<string>), matchGroup:number}} */
			field = infoFields[i];
			this.removeEmptyLines(this.lines);
			//console.log("Searching for field " + field.name);
			if (field.pattern) {
				if (typeof(field.pattern) === 'string') {
					pattern = new RegExp(field.pattern, "img");
					matchFunction = this.matchRegExp;
				} else {
					pattern = field.pattern;
					matchFunction = this.matchPattern;
				}
					
				switch (field.line) {
				case 'startAtFirst':
					for (fieldNumber = 0; fieldNumber < this.lines.length; fieldNumber++) {
						match = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);
						if (match) {
							break;
						}
					}
					break;
				case 'startAtLast':
					for (fieldNumber = this.lines.length-1; fieldNumber >= 0; fieldNumber--) {
						match = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);
						if (match) {
							break;
						}
					}
					break;
				case 'first':
					fieldNumber = 0;
					match = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);
					break;
				case 'last':
				default:
					fieldNumber = this.lines.length - 1;
					match = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);
					break;
				}
				if (match) {
					// console.log("found match for " + field.name + ": " + JSON.stringify(match));
					// console.log("remaining line is " + match.line);
					this.lines[fieldNumber] = match.line;
					this[field.name] = match.match;
				}
			} else {
				// if nothing is given, default to taking the whole field
				this[field.name] = this.lines.splice(fieldNumber,1)[0].trim();
				//console.log("typeof(this[fieldName]) is " + typeof(this[fieldName]) + " and value is " + JSON.stringify(this[fieldName]));
			}
		}
			
		// all the left overs go in the street address field
		this.removeEmptyLines(this.lines);
		if (this.lines.length > 0) {
			//console.log("this.lines is " + JSON.stringify(this.lines) + " and splicing to get streetAddress");
			var joinString = (this.format && this.format === "asian") ? "" : ", ";
			this.streetAddress = this.lines.join(joinString).trim();
		}
		
		this.lines = undefined;
		//console.log("final result is " + JSON.stringify(this));
	},
	
	/**
	 * @protected
	 * Find the named country either at the end or the beginning of the address.
	 */
	_findCountry: function(name) {
		var start = -1, match, line = 0;
		
		if (this.lines.length > 0) {
			start = this.startsWith(this.lines[line], name);
			if (start === -1) {
				line = this.lines.length-1;
				start = this.endsWith(this.lines[line], name);
			}
			if (start !== -1) {
				match = {
					text: this.lines[line].substring(start, start + name.length),
					line: line,
					start: start
				};
			}
		}
		
		return match;
	},
	
	endsWith: function (subject, query) {
		var start = subject.length-query.length,
			i,
			pat;
		//console.log("endsWith: checking " + query + " against " + subject);
		for (i = 0; i < query.length; i++) {
			if (subject.charAt(start+i).toLowerCase() !== query.charAt(i).toLowerCase()) {
				return -1;
			}
		}
		if (start > 0) {
			pat = /\s/;
			if (!pat.test(subject.charAt(start-1))) {
				// make sure if we are not at the beginning of the string, that the match is 
				// not the end of some other word
				return -1;
			}
		}
		return start;
	},
	
	startsWith: function (subject, query) {
		var i;
		// console.log("startsWith: checking " + query + " against " + subject);
		for (i = 0; i < query.length; i++) {
			if (subject.charAt(i).toLowerCase() !== query.charAt(i).toLowerCase()) {
				return -1;
			}
		}
		return 0;
	},
	
	removeEmptyLines: function (arr) {
		var i = 0;
		
		while (i < arr.length) {
			if (arr[i]) {
				arr[i] = arr[i].trim();
				if (arr[i].length === 0) {
					arr.splice(i,1);
				} else {
					i++;
				}
			} else {
				arr.splice(i,1);
			}
		}
	},
	
	matchRegExp: function(address, line, expression, matchGroup, startAt) {
		var lastMatch,
			match,
			ret = {},
			last;
		
		//console.log("searching for regexp " + expression.source + " in line " + line);
		
		match = expression.exec(line);
		if (startAt === 'end') {
			while (match !== null && match.length > 0) {
				//console.log("found matches " + JSON.stringify(match));
				lastMatch = match;
				match = expression.exec(line);
			}
			match = lastMatch;
		}
		
		if (match && match !== null) {
			//console.log("found matches " + JSON.stringify(match));
			matchGroup = matchGroup || 0;
			if (match[matchGroup] !== undefined) {
				ret.match = match[matchGroup].trim();
				last = (startAt === 'end') ? line.lastIndexOf(match[matchGroup]) : line.indexOf(match[matchGroup]); 
				// console.log("last is " + last);
				ret.line = line.slice(0,last);
				if (address.format !== "asian") {
					ret.line += " ";
				}
				ret.line += line.slice(last+match[matchGroup].length);
				ret.line = ret.line.trim();
				//console.log("found match " + ret.match + " from matchgroup " + matchGroup + " and rest of line is " + ret.line);
				return ret;
			}
		//} else {
			//console.log("no match");
		}
		
		return undefined;
	},
	
	matchPattern: function(address, line, pattern, matchGroup) {
		var start,
			j,
			ret = {};
		
		//console.log("searching in line " + line);
		
		// search an array of possible fixed strings
		//console.log("Using fixed set of strings.");
		for (j = 0; j < pattern.length; j++) {
			start = address.compare(line, pattern[j]); 
			if (start !== -1) {
				ret.match = line.substring(start, start+pattern[j].length);
				ret.line = line.substring(0,start).trim();
				//console.log("found match " + ret.match + " and rest of line is " + ret.line);
				return ret;
			}
		}
		
		return undefined;
	}
};
/*
 * addressfmt.js - Format an address
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
ilibglobal.js 
locale.js
addressprs.js
*/

// !data address

/**
 * @constructor
 * @class
 * 
 * Create a new formatter object to format physical addresses in a particular way.
 *
 * The options object may contain the following properties, both of which are optional:
 *
 * <ul>
 * <li><i>locale</i> - the locale to use to format this address. If not specified, it uses the default locale
 * 
 * <li><i>style</i> - the style of this address. The default style for each country usually includes all valid 
 * fields for that country.
 * 
 * <li><i>onLoad</i> - a callback function to call when the address info for the
 * locale is fully loaded and the address has been parsed. When the onLoad 
 * option is given, the address formatter object 
 * will attempt to load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Depends directive: !depends addressfmt.js
 * 
 * @param {Object} options options that configure how this formatter should work
 * Returns a formatter instance that can format multiple addresses.
 */
ilib.AddressFmt = function(options) {
	this.sync = true;
	this.styleName = 'default';
	this.loadParams = {};
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (typeof(options.sync) !== 'undefined') {
			this.sync = (options.sync == true);
		}
		
		if (options.style) {
			this.styleName = options.style;
		}
		
		if (options.loadParams) {
			this.loadParams = options.loadParams;
		}
	}

	// console.log("Creating formatter for region: " + this.locale.region);
	ilib.loadData({
		name: "address.json",
		object: ilib.Address, 
		locale: this.locale,
		sync: this.sync, 
		loadParams: this.loadParams, 
		callback: /** @type function(Object?):undefined */ ilib.bind(this, function(info) {
			if (!info || ilib.isEmpty(info)) {
				// load the "unknown" locale instead
				ilib.loadData({
					name: "address.json",
					object: ilib.Address, 
					locale: new ilib.Locale("XX"),
					sync: this.sync, 
					loadParams: this.loadParams, 
					callback: /** @type function(Object?):undefined */ ilib.bind(this, function(info) {
						this.info = info;
						this._init();
						if (typeof(options.onLoad) === 'function') {
							options.onLoad(this);
						}
					})
				});
			} else {
				this.info = info;
				this._init();
				if (typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			}
		})
	});
};

/**
 * @private
 */
ilib.AddressFmt.prototype._init = function () {
	this.style = this.info && this.info.formats && this.info.formats[this.styleName];
	
	// use generic default -- should not happen, but just in case...
	this.style = this.style || (this.info && this.info.formats["default"]) || "{streetAddress}\n{locality} {region} {postalCode}\n{country}";
};

/**
 * This function formats a physical address (ilib.Address instance) for display. 
 * Whitespace is trimmed from the beginning and end of final resulting string, and 
 * multiple consecutive whitespace characters in the middle of the string are 
 * compressed down to 1 space character.
 * 
 * If the Address instance is for a locale that is different than the locale for this
 * formatter, then a hybrid address is produced. The country name is located in the
 * correct spot for the current formatter's locale, but the rest of the fields are
 * formatted according to the default style of the locale of the actual address.
 * 
 * Example: a mailing address in China, but formatted for the US might produce the words
 * "People's Republic of China" in English at the last line of the address, and the 
 * Chinese-style address will appear in the first line of the address. In the US, the
 * country is on the last line, but in China the country is usually on the first line.
 *
 * @param {ilib.Address} address Address to format
 * @eturns {string} Returns a string containing the formatted address
 */
ilib.AddressFmt.prototype.format = function (address) {
	var ret, template, other, format;
	
	if (!address) {
		return "";
	}
	// console.log("formatting address: " + JSON.stringify(address));
	if (address.countryCode && 
			address.countryCode !== this.locale.region && 
			ilib.Locale._isRegionCode(this.locale.region) && 
			this.locale.region !== "XX") {
		// we are formatting an address that is sent from this country to another country,
		// so only the country should be in this locale, and the rest should be in the other
		// locale
		// console.log("formatting for another locale. Loading in its settings: " + address.countryCode);
		other = new ilib.AddressFmt({
			locale: new ilib.Locale(address.countryCode), 
			style: this.styleName
		});
		return other.format(address);
	}
	
	format = address.format ? this.style[address.format] : this.style;
	// console.log("Using format: " + format);
	// make sure we have a blank string for any missing parts so that
	// those template parts get blanked out
	var params = {
		country: address.country || "",
		region: address.region || "",
		locality: address.locality || "",
		streetAddress: address.streetAddress || "",
		postalCode: address.postalCode || ""
	};
	template = new ilib.String(format);
	ret = template.format(params);
	ret = ret.replace(/[ \t]+/g, ' ');
	return ret.replace(/\n+/g, '\n').trim();
};

/*
 * collate.js - Collation routines
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends locale.js ilibglobal.js

// !data collation

/**
 * @class
 * @constructor
 * 
 * A class that implements a locale-sensitive comparator function 
 * for use with sorting function. The comparator function
 * assumes that the strings it is comparing contain Unicode characters
 * encoded in UTF-16.<p>
 * 
 * Collations usually depend only on the language, because most collation orders 
 * are shared between locales that speak the same language. There are, however, a
 * number of instances where a locale collates differently than other locales
 * that share the same language. There are also a number of instances where a
 * locale collates differently based on the script used. This object can handle
 * these cases automatically if a full locale is specified in the options rather
 * than just a language code.<p>
 * 
 * <h2>Options</h2>
 * 
 * The options parameter can contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - String|Locale. The locale which the comparator function 
 * will collate with. Default: the current iLib locale.
 * 
 * <li><i>sensitivity</i> - String. Sensitivity or strength of collator. This is one of 
 * "primary", "base", "secondary", "accent", "tertiary", "case", "quaternary", or 
 * "variant". Default: "primary"
 *   <ol>
 *   <li>base or primary - Only the primary distinctions between characters are significant.
 *   Another way of saying that is that the collator will be case-, accent-, and 
 *   variation-insensitive, and only distinguish between the base characters
 *   <li>accent or secondary - Both the primary and secondary distinctions between characters
 *   are significant. That is, the collator will be accent- and variation-insensitive
 *   and will distinguish between base characters and character case.
 *   <li>case or tertiary - The primary, secondary, and tertiary distinctions between
 *   characters are all significant. That is, the collator will be 
 *   variation-insensitive, but accent-, case-, and base-character-sensitive. 
 *   <li>variant or quaternary - All distinctions between characters are significant. That is,
 *   the algorithm is base character-, case-, accent-, and variation-sensitive.
 *   </ol>
 *   
 * <li><i>upperFirst</i> - boolean. When collating case-sensitively in a script that
 * has the concept of case, put upper-case
 * characters first, otherwise lower-case will come first. Default: true
 * 
 * <li><i>reverse</i> - boolean. Return the list sorted in reverse order. When the
 * upperFirst option is also set to true, upper-case characters would then come at 
 * the end of the list. Default: false.
 * 
 * <li><i>scriptOrder</i> - string. When collating strings in multiple scripts,
 * this property specifies what order those scripts should be sorted. The default
 * Unicode Collation Algorithm (UCA) already has a default order for scripts, but
 * this can be tailored via this property. The value of this option is a 
 * space-separated list of ISO 15924 scripts codes. If a code is specified in this
 * property, its default data must be included using the JS assembly tool. If the
 * data is not included, the ordering for the script will be ignored. Default:
 * the default order defined by the UCA. 
 * 
 * <li><i>style</i> - The value of the style parameter is dependent on the locale.
 * For some locales, there are different styles of collating strings depending
 * on what kind of strings are being collated or what the preference of the user 
 * is. For example, in German, there is a phonebook order and a dictionary ordering
 * that sort the same array of strings slightly differently.
 * The static method ilib.Collator.getStyles will return a list of styles that ilib
 * currently knows about for any given locale. If the value of the style option is 
 * not recognized for a locale, it will be ignored. Default style is "standard".<p>
 * 
 * <li><i>numeric</i> - Treat the left and right strings as if they started with
 * numbers and sort them numerically rather than lexically.
 * 
 * <li><i>ignorePunctuation</i> - Skip punctuation characters when comparing the
 * strings.
 *  
 * <li>onLoad - a callback function to call when the collator object is fully 
 * loaded. When the onLoad option is given, the collator object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * <h2>Operation</h2>
 * 
 * The Collator constructor returns a collator object tailored with the above 
 * options. The object contains an internal compare() method which compares two 
 * strings according to those options. This can be used directly to compare
 * two strings, but is not useful for passing to the javascript sort function
 * because then it will not have its collation data available. Instead, use the 
 * getComparator() method to retrieve a function that is bound to the collator
 * object. (You could also bind it yourself using ilib.bind()). The bound function 
 * can be used with the standard Javascript array sorting algorithm, or as a 
 * comparator with your own sorting algorithm.<p>
 * 
 * Example using the standard Javascript array sorting call with the bound
 * function:<p>
 * 
 * <code>
 * <pre>
 * var arr = ["Ã¶", "oe", "Ã¼", "o", "a", "ae", "u", "Ã", "Ã¤"];
 * var collator = ilib.Collator({locale: 'de-DE', style: "dictionary"});
 * arr.sort(collator.getComparator());
 * console.log(JSON.stringify(arr));
 * </pre>
 * </code>
 * <p>
 * 
 * Would give the output:<p>
 * 
 * <code>
 * <pre>
 * ["a", "ae", "Ã¤", "o", "oe", "Ã¶", "Ã", "u", "Ã¼"]
 * </pre>
 * </code>
 * 
 * When sorting an array of Javascript objects according to one of the 
 * string properties of the objects, wrap the collator's compare function 
 * in your own comparator function that knows the structure of the objects
 * being sorted:<p>
 * 
 * <code>
 * <pre>
 * var collator = ilib.Collator({locale: 'de-DE'});
 * var myComparator = function (collator) {
 *   var comparator = collator.getComparator();
 *   // left and right are your own objects
 *   return function (left, right) {
 *   	return comparator(left.x.y.textProperty, right.x.y.textProperty);
 *   };
 * };
 * arr.sort(myComparator(collator));
 * </pre>
 * </code>
 * <p>
 * 
 * <h2>Sort Keys</h2>
 * 
 * The collator class also has a method to retrieve the sort key for a
 * string. The sort key is an array of values that represent how each  
 * character in the string should be collated according to the characteristics
 * of the collation algorithm and the given options. Thus, sort keys can be 
 * compared directly value-for-value with other sort keys that were generated 
 * by the same collator, and the resulting ordering is guaranteed to be the 
 * same as if the original strings were compared by the collator.
 * Sort keys generated by different collators are not guaranteed to give
 * any reasonable results when compared together unless the two collators 
 * were constructed with 
 * exactly the same options and therefore end up representing the exact same 
 * collation sequence.<p>
 * 
 * A good rule of thumb is that you would use a sort key if you had 10 or more
 * items to sort or if your array might be resorted arbitrarily. For example, if your 
 * user interface was displaying a table with 100 rows in it, and each row had
 * 4 sortable text columns which could be sorted in acending or descending order,
 * the recommended practice would be to generate a sort key for each of the 4
 * sortable fields in each row and store that in the Javascript representation of the
 * table data. Then, when the user clicks on a column header to resort the
 * table according to that column, the resorting would be relatively quick 
 * because it would only be comparing arrays of values, and not recalculating 
 * the collation values for each character in each string for every comparison.<p>
 * 
 * For tables that are large, it is usually a better idea to do the sorting
 * on the server side, especially if the table is the result of a database
 * query. In this case, the table is usually a view of the cursor of a large
 * results set, and only a few entries are sent to the front end at a time.
 * In order to sort the set efficiently, it should be done on the database
 * level instead.
 * 
 * <h2>Data</h2>
 * 
 * Doing correct collation entails a huge amount of mapping data, much of which is
 * not necessary when collating in one language with one script, which is the most
 * common case. Thus, ilib implements a number of ways to include the data you
 * need or leave out the data you don't need using the JS assembly tool:
 * 
 * <ol>
 * <li>Full multilingual data - if you are sorting multilingual data and need to collate 
 * text written in multiple scripts, you can use the directive "!data collation/ducet" to 
 * load in the full collation data.  This allows the collator to perform the entire 
 * Unicode Collation Algorithm (UCA) based on the Default Unicode Collation Element 
 * Table (DUCET). The data is very large, on the order of multiple megabytes, but 
 * sometimes it is necessary.
 * <li>A few scripts - if you are sorting text written in only a few scripts, you may 
 * want to include only the data for those scripts. Each ISO 15924 script code has its
 * own data available in a separate file, so you can use the data directive to include
 * only the data for the scripts you need. For example, use  
 * "!data collation/Latn" to retrieve the collation information for the Latin script.
 * Because the "ducet" table mentioned in the previous point is a superset of the 
 * tables for all other scripts, you do not need to include explicitly the data for 
 * any particular script when using "ducet". That is, you either include "ducet" or 
 * you include a specific list of scripts.
 * <li>Only one script - if you are sorting text written only in one script, you can
 * either include the data directly as in the previous point, or you can rely on the 
 * locale to include the correct data for you. In this case, you can use the directive
 * "!data collate" to load in the locale's collation data for its most common script.
 * </ol>
 *   
 * With any of the above ways of including the data, the collator will only perform the
 * correct language-sensitive sorting for the given locale. All other scripts will be
 * sorted in the default manner according to the UCA. For example, if you include the
 * "ducet" data and pass in "de-DE" (German for Germany) as the locale spec, then
 * only the Latin script (the default script for German) will be sorted according to
 * German rules. All other scripts in the DUCET, such as Japanese or Arabic, will use 
 * the default UCA collation rules.<p>
 * 
 * If this collator encounters a character for which it has no collation data, it will
 * sort those characters by pure Unicode value after all characters for which it does have
 * collation data. For example, if you only loaded in the German collation data (ie. the
 * data for the Latin script tailored to German) to sort a list of person names, but that
 * list happens to include the names of a few Japanese people written in Japanese 
 * characters, the Japanese names will sort at the end of the list after all German names,
 * and will sort according to the Unicode values of the characters.
 * 
 * @param {Object} options options governing how the resulting comparator 
 * function will operate
 */
ilib.Collator = function(options) {
	var sync = true,
		loadParams = undefined;

	// defaults
	/** @type ilib.Locale */
	this.locale = new ilib.Locale(ilib.getLocale());
	this.caseFirst = "upper";
	this.sensitivity = "case";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		if (options.sensitivity) {
			switch (options.sensitivity) {
				case 'primary':
				case 'base':
					this.sensitivity = "base";
					break;
				case 'secondary':
				case 'accent':
					this.sensitivity = "accent";
					break;
				case 'tertiary':
				case 'case':
					this.sensitivity = "case";
					break;
				case 'quaternary':
				case 'variant':
					this.sensitivity = "variant";
					break;
			}
		}
		if (typeof(options.upperFirst) !== 'undefined') {
			/** @type string */
			this.caseFirst = options.upperFirst ? "upper" : "lower"; 
		}
		
		if (typeof(options.ignorePunctuation) !== 'undefined') {
			/** @type boolean */
			this.ignorePunctuation = options.ignorePunctuation;
		}
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		loadParams = options.loadParams;
	}

	if (typeof(Intl) !== 'undefined' && Intl) {
		// this engine is modern and supports the new Intl object!
		//console.log("implemented natively");
		/** @type {{compare:function(string,string)}} */
		this.collator = new Intl.Collator(this.locale.getSpec(), this);
		
		if (options && typeof(options.onLoad) === 'function') {
			options.onLoad(this);
		}
	} else {
		//console.log("implemented in pure JS");
		if (!ilib.Collator.cache) {
			ilib.Collator.cache = {};
		}

		// else implement in pure Javascript
		ilib.loadData({
			object: ilib.Collator, 
			locale: this.locale, 
			name: "collrules.json", 
			sync: sync, 
			loadParams: loadParams, 
			callback: ilib.bind(this, function (collation) {
				/*
				// TODO: fill in the collator constructor function
				if (!collation) {
					collation = ilib.data.ducet;
					var spec = this.locale.getSpec().replace(/-/g, '_');
					ilib.Collator.cache[spec] = collation;
				}
				console.log("this is " + JSON.stringify(this));
				this._init(collation);
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
				*/
			})
		});
	}
};

ilib.Collator.prototype = {
    /**
     * @private
     */
    init: function(rules) {
    	
    },
    
	/**
	 * Compare two strings together according to the rules of this 
	 * collator instance. Do not use this function directly with 
	 * Array.sort, as it will not have its collation data available
	 * and therefore will not function properly. Use the function
	 * returned by getComparator() instead.
	 * 
	 * @param {string} left the left string to compare
	 * @param {string} right the right string to compare
	 * @return {number} a negative number if left comes before right, a
	 * positive number if right comes before left, and zero if left and 
	 * right are equivalent according to this collator
	 */
	compare: function (left, right) {
		// TODO: fill in the full comparison algorithm here
		// last resort: use the "C" locale
		if (this.collator) {
			// implemented by the core engine
			return this.collator.compare(left, right);
		}
		
		return (left < right) ? -1 : ((left > right) ? 1 : 0);
	},
	
	/**
	 * Return a comparator function that can compare two strings together
	 * according to the rules of this collator instance. The function 
	 * returns a negative number if the left 
	 * string comes before right, a positive number if the right string comes 
	 * before the left, and zero if left and right are equivalent. If the
	 * reverse property was given as true to the collator constructor, this 
	 * function will
	 * switch the sign of those values to cause sorting to happen in the
	 * reverse order.
	 * 
	 * @return {function(...)|undefined} a comparator function that 
	 * can compare two strings together according to the rules of this 
	 * collator instance
	 */
	getComparator: function() {
		// bind the function to this instance so that we have the collation
		// rules available to do the work
		if (this.collator) {
			// implemented by the core engine
			return this.collator.compare;
		}
		
		return /** @type function(string,string):number */ ilib.bind(this, this.compare);
	},
	
	/**
	 * Return a sort key string for the given string. The sort key
	 * string is a list of values that represent each character 
	 * in the original string. The sort key
	 * values for any particular character consists of 3 numbers that
	 * encode the primary, secondary, and tertiary characteristics
	 * of that character. The values of each characteristic are 
	 * modified according to the strength of this collator instance 
	 * to give the correct collation order. The idea is that this
	 * sort key string is directly comparable byte-for-byte to 
	 * other sort key strings generated by this collator without
	 * any further knowledge of the collation rules for the locale.
	 * More formally, if a < b according to the rules of this collation, 
	 * then it is guaranteed that sortkey(a) < sortkey(b) when compared
	 * byte-for-byte. The sort key string can therefore be used
	 * without the collator to sort an array of strings efficiently
	 * because the work of determining the applicability of various
	 * collation rules is done once up-front when generating 
	 * the sort key.<p>
	 * 
	 * The sort key string can be treated as a regular, albeit somewhat
	 * odd-looking, string. That is, it can be pass to regular 
	 * Javascript functions without problems.  
	 * 
	 * @param {string} str the original string to generate the sort key for
	 * @return {string} a sort key string for the given string
	 */
	sortKey: function (str) {
		// TODO: fill in the full sort key algorithm here
		return str;
	}
};

/**
 * Retrieve the list of collation style names that are available for the 
 * given locale. This list varies depending on the locale, and depending
 * on whether or not the data for that locale was assembled into this copy
 * of ilib.
 * 
 * @param {ilib.Locale|string=} locale The locale for which the available
 * styles are being sought
 * @return Array.<string> an array of style names that are available for
 * the given locale
 */
ilib.Collator.getAvailableStyles = function (locale) {
	return [ "standard" ];
};

/**
 * Retrieve the list of ISO 15924 script codes that are available in this
 * copy of ilib. This list varies depending on whether or not the data for 
 * various scripts was assembled into this copy of ilib. If the "ducet"
 * data is assembled into this copy of ilib, this method will report the
 * entire list of scripts as being available. If a collator instance is
 * instantiated with a script code that is not on the list returned by this
 * function, it will be ignored and text in that script will be sorted by
 * numeric Unicode values of the characters.
 * 
 * @return Array.<string> an array of ISO 15924 script codes that are 
 * available
 */
ilib.Collator.getAvailableScripts = function () {
	return [ "Latn" ];
};

ilib.data.norm.ccc = {"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":232,"Ì":220,"Ì":220,"Ì":220,"Ì":220,"Ì":232,"Ì":216,"Ì":220,"Ì":220,"Ì":220,"Ì":220,"Ì ":220,"Ì¡":202,"Ì¢":202,"Ì£":220,"Ì¤":220,"Ì¥":220,"Ì¦":220,"Ì§":202,"Ì¨":202,"Ì©":220,"Ìª":220,"Ì«":220,"Ì¬":220,"Ì­":220,"Ì®":220,"Ì¯":220,"Ì°":220,"Ì±":220,"Ì²":220,"Ì³":220,"Ì´":1,"Ìµ":1,"Ì¶":1,"Ì·":1,"Ì¸":1,"Ì¹":220,"Ìº":220,"Ì»":220,"Ì¼":220,"Ì½":230,"Ì¾":230,"Ì¿":230,"Í":230,"Í":230,"Í":230,"Í":230,"Í":230,"Í":240,"Í":230,"Í":220,"Í":220,"Í":220,"Í":230,"Í":230,"Í":230,"Í":220,"Í":220,"Í":230,"Í":230,"Í":230,"Í":220,"Í":220,"Í":220,"Í":220,"Í":230,"Í":232,"Í":220,"Í":220,"Í":230,"Í":233,"Í":234,"Í":234,"Í":233,"Í ":234,"Í¡":234,"Í¢":233,"Í£":230,"Í¤":230,"Í¥":230,"Í¦":230,"Í§":230,"Í¨":230,"Í©":230,"Íª":230,"Í«":230,"Í¬":230,"Í­":230,"Í®":230,"Í¯":230,"Ò":230,"Ò":230,"Ò":230,"Ò":230,"Ò":230,"Ö":220,"Ö":230,"Ö":230,"Ö":230,"Ö":230,"Ö":220,"Ö":230,"Ö":230,"Ö":230,"Ö":222,"Ö":220,"Ö":230,"Ö":230,"Ö":230,"Ö":230,"Ö ":230,"Ö¡":230,"Ö¢":220,"Ö£":220,"Ö¤":220,"Ö¥":220,"Ö¦":220,"Ö§":220,"Ö¨":230,"Ö©":230,"Öª":220,"Ö«":230,"Ö¬":230,"Ö­":222,"Ö®":228,"Ö¯":230,"Ö°":10,"Ö±":11,"Ö²":12,"Ö³":13,"Ö´":14,"Öµ":15,"Ö¶":16,"Ö·":17,"Ö¸":18,"Ö¹":19,"Öº":19,"Ö»":20,"Ö¼":21,"Ö½":22,"Ö¿":23,"×":24,"×":25,"×":230,"×":220,"×":18,"Ø":230,"Ø":230,"Ø":230,"Ø":230,"Ø":230,"Ø":230,"Ø":230,"Ø":230,"Ø":30,"Ø":31,"Ø":32,"Ù":27,"Ù":28,"Ù":29,"Ù":30,"Ù":31,"Ù":32,"Ù":33,"Ù":34,"Ù":230,"Ù":230,"Ù":220,"Ù":220,"Ù":230,"Ù":230,"Ù":230,"Ù":230,"Ù":230,"Ù":220,"Ù":230,"Ù":230,"Ù":220,"Ù°":35,"Û":230,"Û":230,"Û":230,"Û":230,"Û":230,"Û":230,"Û":230,"Û":230,"Û ":230,"Û¡":230,"Û¢":230,"Û£":220,"Û¤":230,"Û§":230,"Û¨":230,"Ûª":220,"Û«":230,"Û¬":230,"Û­":220,"Ü":36,"Ü°":230,"Ü±":220,"Ü²":230,"Ü³":230,"Ü´":220,"Üµ":230,"Ü¶":230,"Ü·":220,"Ü¸":220,"Ü¹":220,"Üº":230,"Ü»":220,"Ü¼":220,"Ü½":230,"Ü¾":220,"Ü¿":230,"Ý":230,"Ý":230,"Ý":220,"Ý":230,"Ý":220,"Ý":230,"Ý":220,"Ý":230,"Ý":220,"Ý":230,"Ý":230,"ß«":230,"ß¬":230,"ß­":230,"ß®":230,"ß¯":230,"ß°":230,"ß±":230,"ß²":220,"ß³":230,"à ":230,"à ":230,"à ":230,"à ":230,"à ":230,"à ":230,"à ":230,"à ":230,"à ":230,"à  ":230,"à ¡":230,"à ¢":230,"à £":230,"à ¥":230,"à ¦":230,"à §":230,"à ©":230,"à ª":230,"à «":230,"à ¬":230,"à ­":230,"à¡":220,"à¡":220,"à¡":220,"à£¤":230,"à£¥":230,"à£¦":220,"à£§":230,"à£¨":230,"à£©":220,"à£ª":230,"à£«":230,"à£¬":230,"à£­":220,"à£®":220,"à£¯":220,"à£°":27,"à£±":28,"à£²":29,"à£³":230,"à£´":230,"à£µ":230,"à£¶":220,"à£·":230,"à£¸":230,"à£¹":220,"à£º":220,"à£»":230,"à£¼":230,"à£½":230,"à£¾":230,"à¤¼":7,"à¥":9,"à¥":230,"à¥":220,"à¥":230,"à¥":230,"à¦¼":7,"à§":9,"à¨¼":7,"à©":9,"àª¼":7,"à«":9,"à¬¼":7,"à­":9,"à¯":9,"à±":9,"à±":84,"à±":91,"à²¼":7,"à³":9,"àµ":9,"à·":9,"à¸¸":103,"à¸¹":103,"à¸º":9,"à¹":107,"à¹":107,"à¹":107,"à¹":107,"àº¸":118,"àº¹":118,"à»":122,"à»":122,"à»":122,"à»":122,"à¼":220,"à¼":220,"à¼µ":220,"à¼·":220,"à¼¹":216,"à½±":129,"à½²":130,"à½´":132,"à½º":130,"à½»":130,"à½¼":130,"à½½":130,"à¾":130,"à¾":230,"à¾":230,"à¾":9,"à¾":230,"à¾":230,"à¿":220,"á·":7,"á¹":9,"áº":9,"á":220,"á":230,"á":230,"á":230,"á":9,"á´":9,"á":9,"á":230,"á¢©":228,"á¤¹":222,"á¤º":230,"á¤»":220,"á¨":230,"á¨":220,"á© ":9,"á©µ":230,"á©¶":230,"á©·":230,"á©¸":230,"á©¹":230,"á©º":230,"á©»":230,"á©¼":230,"á©¿":220,"á¬´":7,"á­":9,"á­«":230,"á­¬":220,"á­­":230,"á­®":230,"á­¯":230,"á­°":230,"á­±":230,"á­²":230,"á­³":230,"á®ª":9,"á®«":9,"á¯¦":7,"á¯²":9,"á¯³":9,"á°·":7,"á³":230,"á³":230,"á³":230,"á³":1,"á³":220,"á³":220,"á³":220,"á³":220,"á³":220,"á³":230,"á³":230,"á³":220,"á³":220,"á³":220,"á³":220,"á³ ":230,"á³¢":1,"á³£":1,"á³¤":1,"á³¥":1,"á³¦":1,"á³§":1,"á³¨":1,"á³­":220,"á³´":230,"á·":230,"á·":230,"á·":220,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":220,"á·":230,"á·":230,"á·":234,"á·":214,"á·":220,"á·":202,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á· ":230,"á·¡":230,"á·¢":230,"á·£":230,"á·¤":230,"á·¥":230,"á·¦":230,"á·¼":233,"á·½":220,"á·¾":230,"á·¿":220,"â":230,"â":230,"â":1,"â":1,"â":230,"â":230,"â":230,"â":230,"â":1,"â":1,"â":1,"â":230,"â":230,"â¡":230,"â¥":1,"â¦":1,"â§":230,"â¨":220,"â©":230,"âª":1,"â«":1,"â¬":220,"â­":220,"â®":220,"â¯":220,"â°":230,"â³¯":230,"â³°":230,"â³±":230,"âµ¿":9,"â· ":230,"â·¡":230,"â·¢":230,"â·£":230,"â·¤":230,"â·¥":230,"â·¦":230,"â·§":230,"â·¨":230,"â·©":230,"â·ª":230,"â·«":230,"â·¬":230,"â·­":230,"â·®":230,"â·¯":230,"â·°":230,"â·±":230,"â·²":230,"â·³":230,"â·´":230,"â·µ":230,"â·¶":230,"â··":230,"â·¸":230,"â·¹":230,"â·º":230,"â·»":230,"â·¼":230,"â·½":230,"â·¾":230,"â·¿":230,"ãª":218,"ã«":228,"ã¬":232,"ã­":222,"ã®":224,"ã¯":224,"ã":8,"ã":8,"ê¯":230,"ê´":230,"êµ":230,"ê¶":230,"ê·":230,"ê¸":230,"ê¹":230,"êº":230,"ê»":230,"ê¼":230,"ê½":230,"ê":230,"ê°":230,"ê±":230,"ê ":9,"ê£":9,"ê£ ":230,"ê£¡":230,"ê£¢":230,"ê££":230,"ê£¤":230,"ê£¥":230,"ê£¦":230,"ê£§":230,"ê£¨":230,"ê£©":230,"ê£ª":230,"ê£«":230,"ê£¬":230,"ê£­":230,"ê£®":230,"ê£¯":230,"ê£°":230,"ê£±":230,"ê¤«":220,"ê¤¬":220,"ê¤­":220,"ê¥":9,"ê¦³":7,"ê§":9,"êª°":230,"êª²":230,"êª³":230,"êª´":220,"êª·":230,"êª¸":230,"êª¾":230,"êª¿":230,"ê«":230,"ê«¶":9,"ê¯­":9,"ï¬":26,"ï¸ ":230,"ï¸¡":230,"ï¸¢":230,"ï¸£":230,"ï¸¤":230,"ï¸¥":230,"ï¸¦":230,"ð½":220,"ð¨":220,"ð¨":230,"ð¨¸":230,"ð¨¹":1,"ð¨º":220,"ð¨¿":9,"ð":9,"ð¹":9,"ðº":7,"ð":230,"ð":230,"ð":230,"ð³":9,"ð´":9,"ð":9,"ð¶":9,"ð·":7,"ð¥":216,"ð¦":216,"ð§":1,"ð¨":1,"ð©":1,"ð­":226,"ð®":216,"ð¯":216,"ð°":216,"ð±":216,"ð²":216,"ð»":220,"ð¼":220,"ð½":220,"ð¾":220,"ð¿":220,"ð":220,"ð":220,"ð":220,"ð":230,"ð":230,"ð":230,"ð":230,"ð":230,"ð":220,"ð":220,"ðª":230,"ð«":230,"ð¬":230,"ð­":230,"ð":230,"ð":230,"ð":230};
ilib.data.nfd_all = {"Ã":"AÌ","Ã":"AÌ","Ã":"AÌ","Ã":"AÌ","Ã":"AÌ","Ã":"AÌ","Ã":"CÌ§","Ã":"EÌ","Ã":"EÌ","Ã":"EÌ","Ã":"EÌ","Ã":"IÌ","Ã":"IÌ","Ã":"IÌ","Ã":"IÌ","Ã":"NÌ","Ã":"OÌ","Ã":"OÌ","Ã":"OÌ","Ã":"OÌ","Ã":"OÌ","Ã":"UÌ","Ã":"UÌ","Ã":"UÌ","Ã":"UÌ","Ã":"YÌ","Ã ":"aÌ","Ã¡":"aÌ","Ã¢":"aÌ","Ã£":"aÌ","Ã¤":"aÌ","Ã¥":"aÌ","Ã§":"cÌ§","Ã¨":"eÌ","Ã©":"eÌ","Ãª":"eÌ","Ã«":"eÌ","Ã¬":"iÌ","Ã­":"iÌ","Ã®":"iÌ","Ã¯":"iÌ","Ã±":"nÌ","Ã²":"oÌ","Ã³":"oÌ","Ã´":"oÌ","Ãµ":"oÌ","Ã¶":"oÌ","Ã¹":"uÌ","Ãº":"uÌ","Ã»":"uÌ","Ã¼":"uÌ","Ã½":"yÌ","Ã¿":"yÌ","Ä":"AÌ","Ä":"aÌ","Ä":"AÌ","Ä":"aÌ","Ä":"AÌ¨","Ä":"aÌ¨","Ä":"CÌ","Ä":"cÌ","Ä":"CÌ","Ä":"cÌ","Ä":"CÌ","Ä":"cÌ","Ä":"CÌ","Ä":"cÌ","Ä":"DÌ","Ä":"dÌ","Ä":"EÌ","Ä":"eÌ","Ä":"EÌ","Ä":"eÌ","Ä":"EÌ","Ä":"eÌ","Ä":"EÌ¨","Ä":"eÌ¨","Ä":"EÌ","Ä":"eÌ","Ä":"GÌ","Ä":"gÌ","Ä":"GÌ","Ä":"gÌ","Ä ":"GÌ","Ä¡":"gÌ","Ä¢":"GÌ§","Ä£":"gÌ§","Ä¤":"HÌ","Ä¥":"hÌ","Ä¨":"IÌ","Ä©":"iÌ","Äª":"IÌ","Ä«":"iÌ","Ä¬":"IÌ","Ä­":"iÌ","Ä®":"IÌ¨","Ä¯":"iÌ¨","Ä°":"IÌ","Ä´":"JÌ","Äµ":"jÌ","Ä¶":"KÌ§","Ä·":"kÌ§","Ä¹":"LÌ","Äº":"lÌ","Ä»":"LÌ§","Ä¼":"lÌ§","Ä½":"LÌ","Ä¾":"lÌ","Å":"NÌ","Å":"nÌ","Å":"NÌ§","Å":"nÌ§","Å":"NÌ","Å":"nÌ","Å":"OÌ","Å":"oÌ","Å":"OÌ","Å":"oÌ","Å":"OÌ","Å":"oÌ","Å":"RÌ","Å":"rÌ","Å":"RÌ§","Å":"rÌ§","Å":"RÌ","Å":"rÌ","Å":"SÌ","Å":"sÌ","Å":"SÌ","Å":"sÌ","Å":"SÌ§","Å":"sÌ§","Å ":"SÌ","Å¡":"sÌ","Å¢":"TÌ§","Å£":"tÌ§","Å¤":"TÌ","Å¥":"tÌ","Å¨":"UÌ","Å©":"uÌ","Åª":"UÌ","Å«":"uÌ","Å¬":"UÌ","Å­":"uÌ","Å®":"UÌ","Å¯":"uÌ","Å°":"UÌ","Å±":"uÌ","Å²":"UÌ¨","Å³":"uÌ¨","Å´":"WÌ","Åµ":"wÌ","Å¶":"YÌ","Å·":"yÌ","Å¸":"YÌ","Å¹":"ZÌ","Åº":"zÌ","Å»":"ZÌ","Å¼":"zÌ","Å½":"ZÌ","Å¾":"zÌ","Æ ":"OÌ","Æ¡":"oÌ","Æ¯":"UÌ","Æ°":"uÌ","Ç":"AÌ","Ç":"aÌ","Ç":"IÌ","Ç":"iÌ","Ç":"OÌ","Ç":"oÌ","Ç":"UÌ","Ç":"uÌ","Ç":"UÌÌ","Ç":"uÌÌ","Ç":"UÌÌ","Ç":"uÌÌ","Ç":"UÌÌ","Ç":"uÌÌ","Ç":"UÌÌ","Ç":"uÌÌ","Ç":"AÌÌ","Ç":"aÌÌ","Ç ":"AÌÌ","Ç¡":"aÌÌ","Ç¢":"ÃÌ","Ç£":"Ã¦Ì","Ç¦":"GÌ","Ç§":"gÌ","Ç¨":"KÌ","Ç©":"kÌ","Çª":"OÌ¨","Ç«":"oÌ¨","Ç¬":"OÌ¨Ì","Ç­":"oÌ¨Ì","Ç®":"Æ·Ì","Ç¯":"ÊÌ","Ç°":"jÌ","Ç´":"GÌ","Çµ":"gÌ","Ç¸":"NÌ","Ç¹":"nÌ","Çº":"AÌÌ","Ç»":"aÌÌ","Ç¼":"ÃÌ","Ç½":"Ã¦Ì","Ç¾":"ÃÌ","Ç¿":"Ã¸Ì","È":"AÌ","È":"aÌ","È":"AÌ","È":"aÌ","È":"EÌ","È":"eÌ","È":"EÌ","È":"eÌ","È":"IÌ","È":"iÌ","È":"IÌ","È":"iÌ","È":"OÌ","È":"oÌ","È":"OÌ","È":"oÌ","È":"RÌ","È":"rÌ","È":"RÌ","È":"rÌ","È":"UÌ","È":"uÌ","È":"UÌ","È":"uÌ","È":"SÌ¦","È":"sÌ¦","È":"TÌ¦","È":"tÌ¦","È":"HÌ","È":"hÌ","È¦":"AÌ","È§":"aÌ","È¨":"EÌ§","È©":"eÌ§","Èª":"OÌÌ","È«":"oÌÌ","È¬":"OÌÌ","È­":"oÌÌ","È®":"OÌ","È¯":"oÌ","È°":"OÌÌ","È±":"oÌÌ","È²":"YÌ","È³":"yÌ","Í":"Ì","Í":"Ì","Í":"Ì","Í":"ÌÌ","Í´":"Ê¹","Í¾":";","Î":"Â¨Ì","Î":"ÎÌ","Î":"Â·","Î":"ÎÌ","Î":"ÎÌ","Î":"ÎÌ","Î":"ÎÌ","Î":"Î¥Ì","Î":"Î©Ì","Î":"Î¹ÌÌ","Îª":"ÎÌ","Î«":"Î¥Ì","Î¬":"Î±Ì","Î­":"ÎµÌ","Î®":"Î·Ì","Î¯":"Î¹Ì","Î°":"ÏÌÌ","Ï":"Î¹Ì","Ï":"ÏÌ","Ï":"Î¿Ì","Ï":"ÏÌ","Ï":"ÏÌ","Ï":"ÏÌ","Ï":"ÏÌ","Ð":"ÐÌ","Ð":"ÐÌ","Ð":"ÐÌ","Ð":"ÐÌ","Ð":"ÐÌ","Ð":"ÐÌ","Ð":"Ð£Ì","Ð":"ÐÌ","Ð¹":"Ð¸Ì","Ñ":"ÐµÌ","Ñ":"ÐµÌ","Ñ":"Ð³Ì","Ñ":"ÑÌ","Ñ":"ÐºÌ","Ñ":"Ð¸Ì","Ñ":"ÑÌ","Ñ¶":"Ñ´Ì","Ñ·":"ÑµÌ","Ó":"ÐÌ","Ó":"Ð¶Ì","Ó":"ÐÌ","Ó":"Ð°Ì","Ó":"ÐÌ","Ó":"Ð°Ì","Ó":"ÐÌ","Ó":"ÐµÌ","Ó":"ÓÌ","Ó":"ÓÌ","Ó":"ÐÌ","Ó":"Ð¶Ì","Ó":"ÐÌ","Ó":"Ð·Ì","Ó¢":"ÐÌ","Ó£":"Ð¸Ì","Ó¤":"ÐÌ","Ó¥":"Ð¸Ì","Ó¦":"ÐÌ","Ó§":"Ð¾Ì","Óª":"Ó¨Ì","Ó«":"Ó©Ì","Ó¬":"Ð­Ì","Ó­":"ÑÌ","Ó®":"Ð£Ì","Ó¯":"ÑÌ","Ó°":"Ð£Ì","Ó±":"ÑÌ","Ó²":"Ð£Ì","Ó³":"ÑÌ","Ó´":"Ð§Ì","Óµ":"ÑÌ","Ó¸":"Ð«Ì","Ó¹":"ÑÌ","Ø¢":"Ø§Ù","Ø£":"Ø§Ù","Ø¤":"ÙÙ","Ø¥":"Ø§Ù","Ø¦":"ÙÙ","Û":"ÛÙ","Û":"ÛÙ","Û":"ÛÙ","à¤©":"à¤¨à¤¼","à¤±":"à¤°à¤¼","à¤´":"à¤³à¤¼","à¥":"à¤à¤¼","à¥":"à¤à¤¼","à¥":"à¤à¤¼","à¥":"à¤à¤¼","à¥":"à¤¡à¤¼","à¥":"à¤¢à¤¼","à¥":"à¤«à¤¼","à¥":"à¤¯à¤¼","à§":"à§à¦¾","à§":"à§à§","à§":"à¦¡à¦¼","à§":"à¦¢à¦¼","à§":"à¦¯à¦¼","à¨³":"à¨²à¨¼","à¨¶":"à¨¸à¨¼","à©":"à¨à¨¼","à©":"à¨à¨¼","à©":"à¨à¨¼","à©":"à¨«à¨¼","à­":"à­à­","à­":"à­à¬¾","à­":"à­à­","à­":"à¬¡à¬¼","à­":"à¬¢à¬¼","à®":"à®à¯","à¯":"à¯à®¾","à¯":"à¯à®¾","à¯":"à¯à¯","à±":"à±à±","à³":"à²¿à³","à³":"à³à³","à³":"à³à³","à³":"à³à³","à³":"à³à³à³","àµ":"àµà´¾","àµ":"àµà´¾","àµ":"àµàµ","à·":"à·à·","à·":"à·à·","à·":"à·à·à·","à·":"à·à·","à½":"à½à¾·","à½":"à½à¾·","à½":"à½à¾·","à½":"à½à¾·","à½":"à½à¾·","à½©":"à½à¾µ","à½³":"à½±à½²","à½µ":"à½±à½´","à½¶":"à¾²à¾","à½¸":"à¾³à¾","à¾":"à½±à¾","à¾":"à¾à¾·","à¾":"à¾à¾·","à¾¢":"à¾¡à¾·","à¾§":"à¾¦à¾·","à¾¬":"à¾«à¾·","à¾¹":"à¾à¾µ","á¦":"á¥á®","á¬":"á¬á¬µ","á¬":"á¬á¬µ","á¬":"á¬á¬µ","á¬":"á¬á¬µ","á¬":"á¬á¬µ","á¬":"á¬á¬µ","á¬»":"á¬ºá¬µ","á¬½":"á¬¼á¬µ","á­":"á¬¾á¬µ","á­":"á¬¿á¬µ","á­":"á­á¬µ","á¸":"AÌ¥","á¸":"aÌ¥","á¸":"BÌ","á¸":"bÌ","á¸":"BÌ£","á¸":"bÌ£","á¸":"BÌ±","á¸":"bÌ±","á¸":"CÌ§Ì","á¸":"cÌ§Ì","á¸":"DÌ","á¸":"dÌ","á¸":"DÌ£","á¸":"dÌ£","á¸":"DÌ±","á¸":"dÌ±","á¸":"DÌ§","á¸":"dÌ§","á¸":"DÌ­","á¸":"dÌ­","á¸":"EÌÌ","á¸":"eÌÌ","á¸":"EÌÌ","á¸":"eÌÌ","á¸":"EÌ­","á¸":"eÌ­","á¸":"EÌ°","á¸":"eÌ°","á¸":"EÌ§Ì","á¸":"eÌ§Ì","á¸":"FÌ","á¸":"fÌ","á¸ ":"GÌ","á¸¡":"gÌ","á¸¢":"HÌ","á¸£":"hÌ","á¸¤":"HÌ£","á¸¥":"hÌ£","á¸¦":"HÌ","á¸§":"hÌ","á¸¨":"HÌ§","á¸©":"hÌ§","á¸ª":"HÌ®","á¸«":"hÌ®","á¸¬":"IÌ°","á¸­":"iÌ°","á¸®":"IÌÌ","á¸¯":"iÌÌ","á¸°":"KÌ","á¸±":"kÌ","á¸²":"KÌ£","á¸³":"kÌ£","á¸´":"KÌ±","á¸µ":"kÌ±","á¸¶":"LÌ£","á¸·":"lÌ£","á¸¸":"LÌ£Ì","á¸¹":"lÌ£Ì","á¸º":"LÌ±","á¸»":"lÌ±","á¸¼":"LÌ­","á¸½":"lÌ­","á¸¾":"MÌ","á¸¿":"mÌ","á¹":"MÌ","á¹":"mÌ","á¹":"MÌ£","á¹":"mÌ£","á¹":"NÌ","á¹":"nÌ","á¹":"NÌ£","á¹":"nÌ£","á¹":"NÌ±","á¹":"nÌ±","á¹":"NÌ­","á¹":"nÌ­","á¹":"OÌÌ","á¹":"oÌÌ","á¹":"OÌÌ","á¹":"oÌÌ","á¹":"OÌÌ","á¹":"oÌÌ","á¹":"OÌÌ","á¹":"oÌÌ","á¹":"PÌ","á¹":"pÌ","á¹":"PÌ","á¹":"pÌ","á¹":"RÌ","á¹":"rÌ","á¹":"RÌ£","á¹":"rÌ£","á¹":"RÌ£Ì","á¹":"rÌ£Ì","á¹":"RÌ±","á¹":"rÌ±","á¹ ":"SÌ","á¹¡":"sÌ","á¹¢":"SÌ£","á¹£":"sÌ£","á¹¤":"SÌÌ","á¹¥":"sÌÌ","á¹¦":"SÌÌ","á¹§":"sÌÌ","á¹¨":"SÌ£Ì","á¹©":"sÌ£Ì","á¹ª":"TÌ","á¹«":"tÌ","á¹¬":"TÌ£","á¹­":"tÌ£","á¹®":"TÌ±","á¹¯":"tÌ±","á¹°":"TÌ­","á¹±":"tÌ­","á¹²":"UÌ¤","á¹³":"uÌ¤","á¹´":"UÌ°","á¹µ":"uÌ°","á¹¶":"UÌ­","á¹·":"uÌ­","á¹¸":"UÌÌ","á¹¹":"uÌÌ","á¹º":"UÌÌ","á¹»":"uÌÌ","á¹¼":"VÌ","á¹½":"vÌ","á¹¾":"VÌ£","á¹¿":"vÌ£","áº":"WÌ","áº":"wÌ","áº":"WÌ","áº":"wÌ","áº":"WÌ","áº":"wÌ","áº":"WÌ","áº":"wÌ","áº":"WÌ£","áº":"wÌ£","áº":"XÌ","áº":"xÌ","áº":"XÌ","áº":"xÌ","áº":"YÌ","áº":"yÌ","áº":"ZÌ","áº":"zÌ","áº":"ZÌ£","áº":"zÌ£","áº":"ZÌ±","áº":"zÌ±","áº":"hÌ±","áº":"tÌ","áº":"wÌ","áº":"yÌ","áº":"Å¿Ì","áº ":"AÌ£","áº¡":"aÌ£","áº¢":"AÌ","áº£":"aÌ","áº¤":"AÌÌ","áº¥":"aÌÌ","áº¦":"AÌÌ","áº§":"aÌÌ","áº¨":"AÌÌ","áº©":"aÌÌ","áºª":"AÌÌ","áº«":"aÌÌ","áº¬":"AÌ£Ì","áº­":"aÌ£Ì","áº®":"AÌÌ","áº¯":"aÌÌ","áº°":"AÌÌ","áº±":"aÌÌ","áº²":"AÌÌ","áº³":"aÌÌ","áº´":"AÌÌ","áºµ":"aÌÌ","áº¶":"AÌ£Ì","áº·":"aÌ£Ì","áº¸":"EÌ£","áº¹":"eÌ£","áºº":"EÌ","áº»":"eÌ","áº¼":"EÌ","áº½":"eÌ","áº¾":"EÌÌ","áº¿":"eÌÌ","á»":"EÌÌ","á»":"eÌÌ","á»":"EÌÌ","á»":"eÌÌ","á»":"EÌÌ","á»":"eÌÌ","á»":"EÌ£Ì","á»":"eÌ£Ì","á»":"IÌ","á»":"iÌ","á»":"IÌ£","á»":"iÌ£","á»":"OÌ£","á»":"oÌ£","á»":"OÌ","á»":"oÌ","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌ£Ì","á»":"oÌ£Ì","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌÌ","á»":"oÌÌ","á» ":"OÌÌ","á»¡":"oÌÌ","á»¢":"OÌÌ£","á»£":"oÌÌ£","á»¤":"UÌ£","á»¥":"uÌ£","á»¦":"UÌ","á»§":"uÌ","á»¨":"UÌÌ","á»©":"uÌÌ","á»ª":"UÌÌ","á»«":"uÌÌ","á»¬":"UÌÌ","á»­":"uÌÌ","á»®":"UÌÌ","á»¯":"uÌÌ","á»°":"UÌÌ£","á»±":"uÌÌ£","á»²":"YÌ","á»³":"yÌ","á»´":"YÌ£","á»µ":"yÌ£","á»¶":"YÌ","á»·":"yÌ","á»¸":"YÌ","á»¹":"yÌ","á¼":"Î±Ì","á¼":"Î±Ì","á¼":"Î±ÌÌ","á¼":"Î±ÌÌ","á¼":"Î±ÌÌ","á¼":"Î±ÌÌ","á¼":"Î±ÌÍ","á¼":"Î±ÌÍ","á¼":"ÎÌ","á¼":"ÎÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼":"ÎÌÍ","á¼":"ÎÌÍ","á¼":"ÎµÌ","á¼":"ÎµÌ","á¼":"ÎµÌÌ","á¼":"ÎµÌÌ","á¼":"ÎµÌÌ","á¼":"ÎµÌÌ","á¼":"ÎÌ","á¼":"ÎÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼ ":"Î·Ì","á¼¡":"Î·Ì","á¼¢":"Î·ÌÌ","á¼£":"Î·ÌÌ","á¼¤":"Î·ÌÌ","á¼¥":"Î·ÌÌ","á¼¦":"Î·ÌÍ","á¼§":"Î·ÌÍ","á¼¨":"ÎÌ","á¼©":"ÎÌ","á¼ª":"ÎÌÌ","á¼«":"ÎÌÌ","á¼¬":"ÎÌÌ","á¼­":"ÎÌÌ","á¼®":"ÎÌÍ","á¼¯":"ÎÌÍ","á¼°":"Î¹Ì","á¼±":"Î¹Ì","á¼²":"Î¹ÌÌ","á¼³":"Î¹ÌÌ","á¼´":"Î¹ÌÌ","á¼µ":"Î¹ÌÌ","á¼¶":"Î¹ÌÍ","á¼·":"Î¹ÌÍ","á¼¸":"ÎÌ","á¼¹":"ÎÌ","á¼º":"ÎÌÌ","á¼»":"ÎÌÌ","á¼¼":"ÎÌÌ","á¼½":"ÎÌÌ","á¼¾":"ÎÌÍ","á¼¿":"ÎÌÍ","á½":"Î¿Ì","á½":"Î¿Ì","á½":"Î¿ÌÌ","á½":"Î¿ÌÌ","á½":"Î¿ÌÌ","á½":"Î¿ÌÌ","á½":"ÎÌ","á½":"ÎÌ","á½":"ÎÌÌ","á½":"ÎÌÌ","á½":"ÎÌÌ","á½":"ÎÌÌ","á½":"ÏÌ","á½":"ÏÌ","á½":"ÏÌÌ","á½":"ÏÌÌ","á½":"ÏÌÌ","á½":"ÏÌÌ","á½":"ÏÌÍ","á½":"ÏÌÍ","á½":"Î¥Ì","á½":"Î¥ÌÌ","á½":"Î¥ÌÌ","á½":"Î¥ÌÍ","á½ ":"ÏÌ","á½¡":"ÏÌ","á½¢":"ÏÌÌ","á½£":"ÏÌÌ","á½¤":"ÏÌÌ","á½¥":"ÏÌÌ","á½¦":"ÏÌÍ","á½§":"ÏÌÍ","á½¨":"Î©Ì","á½©":"Î©Ì","á½ª":"Î©ÌÌ","á½«":"Î©ÌÌ","á½¬":"Î©ÌÌ","á½­":"Î©ÌÌ","á½®":"Î©ÌÍ","á½¯":"Î©ÌÍ","á½°":"Î±Ì","á½±":"Î±Ì","á½²":"ÎµÌ","á½³":"ÎµÌ","á½´":"Î·Ì","á½µ":"Î·Ì","á½¶":"Î¹Ì","á½·":"Î¹Ì","á½¸":"Î¿Ì","á½¹":"Î¿Ì","á½º":"ÏÌ","á½»":"ÏÌ","á½¼":"ÏÌ","á½½":"ÏÌ","á¾":"Î±ÌÍ","á¾":"Î±ÌÍ","á¾":"Î±ÌÌÍ","á¾":"Î±ÌÌÍ","á¾":"Î±ÌÌÍ","á¾":"Î±ÌÌÍ","á¾":"Î±ÌÍÍ","á¾":"Î±ÌÍÍ","á¾":"ÎÌÍ","á¾":"ÎÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÍÍ","á¾":"ÎÌÍÍ","á¾":"Î·ÌÍ","á¾":"Î·ÌÍ","á¾":"Î·ÌÌÍ","á¾":"Î·ÌÌÍ","á¾":"Î·ÌÌÍ","á¾":"Î·ÌÌÍ","á¾":"Î·ÌÍÍ","á¾":"Î·ÌÍÍ","á¾":"ÎÌÍ","á¾":"ÎÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÍÍ","á¾":"ÎÌÍÍ","á¾ ":"ÏÌÍ","á¾¡":"ÏÌÍ","á¾¢":"ÏÌÌÍ","á¾£":"ÏÌÌÍ","á¾¤":"ÏÌÌÍ","á¾¥":"ÏÌÌÍ","á¾¦":"ÏÌÍÍ","á¾§":"ÏÌÍÍ","á¾¨":"Î©ÌÍ","á¾©":"Î©ÌÍ","á¾ª":"Î©ÌÌÍ","á¾«":"Î©ÌÌÍ","á¾¬":"Î©ÌÌÍ","á¾­":"Î©ÌÌÍ","á¾®":"Î©ÌÍÍ","á¾¯":"Î©ÌÍÍ","á¾°":"Î±Ì","á¾±":"Î±Ì","á¾²":"Î±ÌÍ","á¾³":"Î±Í","á¾´":"Î±ÌÍ","á¾¶":"Î±Í","á¾·":"Î±ÍÍ","á¾¸":"ÎÌ","á¾¹":"ÎÌ","á¾º":"ÎÌ","á¾»":"ÎÌ","á¾¼":"ÎÍ","á¾¾":"Î¹","á¿":"Â¨Í","á¿":"Î·ÌÍ","á¿":"Î·Í","á¿":"Î·ÌÍ","á¿":"Î·Í","á¿":"Î·ÍÍ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"ÎÍ","á¿":"á¾¿Ì","á¿":"á¾¿Ì","á¿":"á¾¿Í","á¿":"Î¹Ì","á¿":"Î¹Ì","á¿":"Î¹ÌÌ","á¿":"Î¹ÌÌ","á¿":"Î¹Í","á¿":"Î¹ÌÍ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"á¿¾Ì","á¿":"á¿¾Ì","á¿":"á¿¾Í","á¿ ":"ÏÌ","á¿¡":"ÏÌ","á¿¢":"ÏÌÌ","á¿£":"ÏÌÌ","á¿¤":"ÏÌ","á¿¥":"ÏÌ","á¿¦":"ÏÍ","á¿§":"ÏÌÍ","á¿¨":"Î¥Ì","á¿©":"Î¥Ì","á¿ª":"Î¥Ì","á¿«":"Î¥Ì","á¿¬":"Î¡Ì","á¿­":"Â¨Ì","á¿®":"Â¨Ì","á¿¯":"`","á¿²":"ÏÌÍ","á¿³":"ÏÍ","á¿´":"ÏÌÍ","á¿¶":"ÏÍ","á¿·":"ÏÍÍ","á¿¸":"ÎÌ","á¿¹":"ÎÌ","á¿º":"Î©Ì","á¿»":"Î©Ì","á¿¼":"Î©Í","á¿½":"Â´","â":"â","â":"â","â¦":"Î©","âª":"K","â«":"AÌ","â":"âÌ¸","â":"âÌ¸","â®":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â¤":"â£Ì¸","â¦":"â¥Ì¸","â":"â¼Ì¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â ":"=Ì¸","â¢":"â¡Ì¸","â­":"âÌ¸","â®":"<Ì¸","â¯":">Ì¸","â°":"â¤Ì¸","â±":"â¥Ì¸","â´":"â²Ì¸","âµ":"â³Ì¸","â¸":"â¶Ì¸","â¹":"â·Ì¸","â":"âºÌ¸","â":"â»Ì¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â¬":"â¢Ì¸","â­":"â¨Ì¸","â®":"â©Ì¸","â¯":"â«Ì¸","â ":"â¼Ì¸","â¡":"â½Ì¸","â¢":"âÌ¸","â£":"âÌ¸","âª":"â²Ì¸","â«":"â³Ì¸","â¬":"â´Ì¸","â­":"âµÌ¸","â©":"ã","âª":"ã","â«":"â«Ì¸","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã ":"ãã","ã¢":"ã¡ã","ã¥":"ã¤ã","ã§":"ã¦ã","ã©":"ã¨ã","ã°":"ã¯ã","ã±":"ã¯ã","ã³":"ã²ã","ã´":"ã²ã","ã¶":"ãµã","ã·":"ãµã","ã¹":"ã¸ã","ãº":"ã¸ã","ã¼":"ã»ã","ã½":"ã»ã","ã":"ãã","ã":"ãã","ã¬":"ã«ã","ã®":"ã­ã","ã°":"ã¯ã","ã²":"ã±ã","ã´":"ã³ã","ã¶":"ãµã","ã¸":"ã·ã","ãº":"ã¹ã","ã¼":"ã»ã","ã¾":"ã½ã","ã":"ã¿ã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã´":"ã¦ã","ã·":"ã¯ã","ã¸":"ã°ã","ã¹":"ã±ã","ãº":"ã²ã","ã¾":"ã½ã","ï¤":"è±","ï¤":"æ´","ï¤":"è»","ï¤":"è³","ï¤":"æ»","ï¤":"ä¸²","ï¤":"å¥","ï¤":"é¾","ï¤":"é¾","ï¤":"å¥","ï¤":"é","ï¤":"å","ï¤":"å¥","ï¤":"æ¶","ï¤":"ç©","ï¤":"ç¾","ï¤":"è¿","ï¤":"èº","ï¤":"è£¸","ï¤":"é","ï¤":"æ¨","ï¤":"æ´","ï¤":"ç","ï¤":"ç","ï¤":"è½","ï¤":"éª","ï¤":"é§±","ï¤":"äº","ï¤":"åµ","ï¤":"æ¬","ï¤":"ç","ï¤":"è­","ï¤ ":"é¸","ï¤¡":"åµ","ï¤¢":"æ¿«","ï¤£":"è","ï¤¤":"è¥¤","ï¤¥":"æ","ï¤¦":"è","ï¤§":"è ","ï¤¨":"å»","ï¤©":"æ","ï¤ª":"æµª","ï¤«":"ç¼","ï¤¬":"é","ï¤­":"ä¾","ï¤®":"å·","ï¤¯":"å","ï¤°":"æ","ï¤±":"æ«","ï¤²":"ç","ï¤³":"ç§","ï¤´":"è","ï¤µ":"è","ï¤¶":"è","ï¤·":"è·¯","ï¤¸":"é²","ï¤¹":"é­¯","ï¤º":"é·º","ï¤»":"ç¢","ï¤¼":"ç¥¿","ï¤½":"ç¶ ","ï¤¾":"è","ï¤¿":"é","ï¥":"é¹¿","ï¥":"è«","ï¥":"å£","ï¥":"å¼","ï¥":"ç± ","ï¥":"è¾","ï¥":"ç¢","ï¥":"ç£","ï¥":"è³","ï¥":"é·","ï¥":"å£","ï¥":"å±¢","ï¥":"æ¨","ï¥":"æ·","ï¥":"æ¼","ï¥":"ç´¯","ï¥":"ç¸·","ï¥":"é","ï¥":"å","ï¥":"è","ï¥":"å","ï¥":"å","ï¥":"ç¨","ï¥":"ç¶¾","ï¥":"è±","ï¥":"éµ","ï¥":"è®","ï¥":"æ","ï¥":"æ¨","ï¥":"è«¾","ï¥":"ä¸¹","ï¥":"å¯§","ï¥ ":"æ","ï¥¡":"ç","ï¥¢":"ç°","ï¥£":"å","ï¥¤":"ç£»","ï¥¥":"ä¾¿","ï¥¦":"å¾©","ï¥§":"ä¸","ï¥¨":"æ³","ï¥©":"æ¸","ï¥ª":"ç´¢","ï¥«":"å","ï¥¬":"å¡","ï¥­":"ç","ï¥®":"è","ï¥¯":"èªª","ï¥°":"æ®º","ï¥±":"è¾°","ï¥²":"æ²","ï¥³":"æ¾","ï¥´":"è¥","ï¥µ":"æ ","ï¥¶":"ç¥","ï¥·":"äº®","ï¥¸":"å©","ï¥¹":"å","ï¥º":"æ¢","ï¥»":"ç³§","ï¥¼":"è¯","ï¥½":"è«","ï¥¾":"é","ï¥¿":"åµ","ï¦":"å","ï¦":"å¥³","ï¦":"å»¬","ï¦":"æ","ï¦":"æ¿¾","ï¦":"ç¤ª","ï¦":"é­","ï¦":"é©ª","ï¦":"éº","ï¦":"é»","ï¦":"å","ï¦":"æ","ï¦":"æ­·","ï¦":"è½¢","ï¦":"å¹´","ï¦":"æ","ï¦":"æ","ï¦":"æ","ï¦":"æ¼£","ï¦":"ç","ï¦":"ç","ï¦":"ç§","ï¦":"ç·´","ï¦":"è¯","ï¦":"è¼¦","ï¦":"è®","ï¦":"é£","ï¦":"é","ï¦":"å","ï¦":"å£","ï¦":"å½","ï¦":"ç","ï¦ ":"è£","ï¦¡":"èªª","ï¦¢":"å»","ï¦£":"å¿µ","ï¦¤":"æ»","ï¦¥":"æ®®","ï¦¦":"ç°¾","ï¦§":"çµ","ï¦¨":"ä»¤","ï¦©":"å¹","ï¦ª":"å¯§","ï¦«":"å¶º","ï¦¬":"æ","ï¦­":"ç²","ï¦®":"ç©","ï¦¯":"ç¾","ï¦°":"è","ï¦±":"é´","ï¦²":"é¶","ï¦³":"é","ï¦´":"é ","ï¦µ":"ä¾","ï¦¶":"ç¦®","ï¦·":"é´","ï¦¸":"é¸","ï¦¹":"æ¡","ï¦º":"äº","ï¦»":"å","ï¦¼":"å¯®","ï¦½":"å°¿","ï¦¾":"æ","ï¦¿":"æ¨","ï§":"ç","ï§":"ç","ï§":"è¼","ï§":"é¼","ï§":"é¾","ï§":"æ","ï§":"é®","ï§":"å","ï§":"æ»","ï§":"æ³","ï§":"æµ","ï§":"æº","ï§":"ç","ï§":"ç","ï§":"ç¡«","ï§":"ç´","ï§":"é¡","ï§":"å­","ï§":"æ®","ï§":"é¸","ï§":"å«","ï§":"å´","ï§":"æ·ª","ï§":"è¼ª","ï§":"å¾","ï§":"æ","ï§":"æ ","ï§":"ç","ï§":"é","ï§":"å©","ï§":"å","ï§":"å±¥","ï§ ":"æ","ï§¡":"æ","ï§¢":"æ¢¨","ï§£":"æ³¥","ï§¤":"ç","ï§¥":"ç¢","ï§¦":"ç½¹","ï§§":"è£","ï§¨":"è£¡","ï§©":"é","ï§ª":"é¢","ï§«":"å¿","ï§¬":"æºº","ï§­":"å","ï§®":"ç","ï§¯":"ç","ï§°":"èº","ï§±":"é£","ï§²":"é±","ï§³":"éº","ï§´":"æ","ï§µ":"æ·","ï§¶":"è¨","ï§·":"ç«","ï§¸":"ç¬ ","ï§¹":"ç²","ï§º":"ç","ï§»":"ç","ï§¼":"è­","ï§½":"ä»","ï§¾":"è¶","ï§¿":"åº","ï¨":"å","ï¨":"åº¦","ï¨":"æ","ï¨":"ç³","ï¨":"å®","ï¨":"æ´","ï¨":"æ´","ï¨":"è¼»","ï¨":"è¡","ï¨":"é","ï¨":"è¦","ï¨":"å»","ï¨":"å","ï¨":"å","ï¨":"å¡","ï¨":"æ´","ï¨":"å","ï¨":"çª","ï¨":"ç","ï¨":"ç¤¼","ï¨":"ç¥","ï¨":"ç¥¥","ï¨":"ç¦","ï¨":"é","ï¨":"ç²¾","ï¨":"ç¾½","ï¨ ":"è","ï¨¢":"è«¸","ï¨¥":"é¸","ï¨¦":"é½","ï¨ª":"é£¯","ï¨«":"é£¼","ï¨¬":"é¤¨","ï¨­":"é¶´","ï¨®":"é","ï¨¯":"é·","ï¨°":"ä¾®","ï¨±":"å§","ï¨²":"å","ï¨³":"å","ï¨´":"å¤","ï¨µ":"å","ï¨¶":"å","ï¨·":"å","ï¨¸":"å¨","ï¨¹":"å¡","ï¨º":"å¢¨","ï¨»":"å±¤","ï¨¼":"å±®","ï¨½":"æ","ï¨¾":"æ¨","ï¨¿":"æ","ï©":"æ²","ï©":"æ","ï©":"æ¢","ï©":"æ","ï©":"æ¢","ï©":"æµ·","ï©":"æ¸","ï©":"æ¼¢","ï©":"ç®","ï©":"ç«","ï©":"ç¢","ï©":"ç¢","ï©":"ç¤¾","ï©":"ç¥","ï©":"ç¥","ï©":"ç¥","ï©":"ç¥","ï©":"ç¥","ï©":"ç¦","ï©":"ç¦","ï©":"ç©","ï©":"çª","ï©":"ç¯","ï©":"ç·´","ï©":"ç¸","ï©":"ç¹","ï©":"ç½²","ï©":"è","ï©":"è­","ï©":"è¹","ï©":"è¹","ï©":"è","ï© ":"è¤","ï©¡":"è¦","ï©¢":"è¬","ï©£":"è¬¹","ï©¤":"è³","ï©¥":"è´","ï©¦":"è¾¶","ï©§":"é¸","ï©¨":"é£","ï©©":"é¿","ï©ª":"é »","ï©«":"æµ","ï©¬":"ð¤®","ï©­":"è","ï©°":"ä¸¦","ï©±":"åµ","ï©²":"å¨","ï©³":"ä¾","ï©´":"å","ï©µ":"å","ï©¶":"å","ï©·":"åº","ï©¸":"å","ï©¹":"å","ï©º":"å","ï©»":"å¢","ï©¼":"å¡","ï©½":"å¢³","ï©¾":"å¥","ï©¿":"å¥","ïª":"å©¢","ïª":"å¬¨","ïª":"å»","ïª":"å»","ïª":"å½©","ïª":"å¾­","ïª":"æ","ïª":"æ","ïª":"æ","ïª":"æ","ïª":"æ ","ïª":"æ²","ïª":"æ´","ïª":"æ","ïª":"æ","ïª":"æ","ïª":"æ","ïª":"æ´","ïª":"æ","ïª":"æ","ïª":"æ","ïª":"æ­¹","ïª":"æ®º","ïª":"æµ","ïª":"æ»","ïª":"æ»","ïª":"æ¼¢","ïª":"ç","ïª":"ç®","ïª":"ç§","ïª":"çµ","ïª":"ç¯","ïª ":"çª","ïª¡":"ç±","ïª¢":"ç","ïª£":"ç»","ïª¤":"ç","ïª¥":"ç","ïª¦":"ç","ïª§":"ç","ïª¨":"ç´","ïª©":"ç","ïªª":"ç","ïª«":"ç£","ïª¬":"çª±","ïª­":"ç¯","ïª®":"ç±»","ïª¯":"çµ","ïª°":"ç·´","ïª±":"ç¼¾","ïª²":"è","ïª³":"è","ïª´":"è¯","ïªµ":"è¹","ïª¶":"è¥","ïª·":"è¦","ïª¸":"è¦","ïª¹":"èª¿","ïªº":"è«¸","ïª»":"è«","ïª¼":"è¬","ïª½":"è«¾","ïª¾":"è«­","ïª¿":"è¬¹","ï«":"è®","ï«":"è´","ï«":"è¼¸","ï«":"é²","ï«":"é","ï«":"é¶","ï«":"é¼","ï«":"é£","ï«":"é","ï«":"é","ï«":"é¿","ï«":"é ","ï«":"é »","ï«":"é¬","ï«":"é¾","ï«":"ð¢¡","ï«":"ð¢¡","ï«":"ð£","ï«":"ã®","ï«":"ä","ï«":"ä¹","ï«":"ð¥","ï«":"ð¥³","ï«":"ð§»","ï«":"é½","ï«":"é¾","ï¬":"×Ö´","ï¬":"×²Ö·","ï¬ª":"×©×","ï¬«":"×©×","ï¬¬":"×©Ö¼×","ï¬­":"×©Ö¼×","ï¬®":"×Ö·","ï¬¯":"×Ö¸","ï¬°":"×Ö¼","ï¬±":"×Ö¼","ï¬²":"×Ö¼","ï¬³":"×Ö¼","ï¬´":"×Ö¼","ï¬µ":"×Ö¼","ï¬¶":"×Ö¼","ï¬¸":"×Ö¼","ï¬¹":"×Ö¼","ï¬º":"×Ö¼","ï¬»":"×Ö¼","ï¬¼":"×Ö¼","ï¬¾":"×Ö¼","ï­":"× Ö¼","ï­":"×¡Ö¼","ï­":"×£Ö¼","ï­":"×¤Ö¼","ï­":"×¦Ö¼","ï­":"×§Ö¼","ï­":"×¨Ö¼","ï­":"×©Ö¼","ï­":"×ªÖ¼","ï­":"×Ö¹","ï­":"×Ö¿","ï­":"×Ö¿","ï­":"×¤Ö¿","ð":"ððº","ð":"ððº","ð«":"ð¥ðº","ð®":"ð±ð§","ð¯":"ð²ð§","ð":"ðð¥","ð":"ðð¥","ð ":"ðð¥ð®","ð¡":"ðð¥ð¯","ð¢":"ðð¥ð°","ð£":"ðð¥ð±","ð¤":"ðð¥ð²","ð»":"ð¹ð¥","ð¼":"ðºð¥","ð½":"ð¹ð¥ð®","ð¾":"ðºð¥ð®","ð¿":"ð¹ð¥ð¯","ð":"ðºð¥ð¯","ð¯ ":"ä¸½","ð¯ ":"ä¸¸","ð¯ ":"ä¹","ð¯ ":"ð ¢","ð¯ ":"ä½ ","ð¯ ":"ä¾®","ð¯ ":"ä¾»","ð¯ ":"å","ð¯ ":"åº","ð¯ ":"å","ð¯ ":"å§","ð¯ ":"å","ð¯ ":"ã","ð¯ ":"ð º","ð¯ ":"å","ð¯ ":"å","ð¯ ":"å¤","ð¯ ":"å·","ð¯ ":"ð ","ð¯ ":"ã¹","ð¯ ":"å§","ð¯ ":"å","ð¯ ":"ð ","ð¯ ":"å","ð¯ ":"å¤","ð¯ ":"ä»","ð¯ ":"å¬","ð¯ ":"åµ","ð¯ ":"ð©","ð¯ ":"åµ","ð¯ ":"å","ð¯ ":"ã","ð¯  ":"å»","ð¯ ¡":"å","ð¯ ¢":"å²","ð¯ £":"å·","ð¯ ¤":"ã","ð¯ ¥":"å","ð¯ ¦":"å","ð¯ §":"å¤","ð¯ ¨":"åº","ð¯ ©":"å","ð¯ ª":"å","ð¯ «":"å","ð¯ ¬":"å","ð¯ ­":"å","ð¯ ®":"å","ð¯ ¯":"å³","ð¯ °":"å½","ð¯ ±":"å¿","ð¯ ²":"å¿","ð¯ ³":"å¿","ð¯ ´":"ð ¨¬","ð¯ µ":"ç°","ð¯ ¶":"å","ð¯ ·":"å","ð¯ ¸":"ð ­£","ð¯ ¹":"å«","ð¯ º":"å±","ð¯ »":"å","ð¯ ¼":"å","ð¯ ½":"å¸","ð¯ ¾":"å","ð¯ ¿":"å¨","ð¯¡":"å¢","ð¯¡":"å¶","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å£","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å«","ð¯¡":"å³","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å´","ð¯¡":"å","ð¯¡":"å£®","ð¯¡":"å","ð¯¡":"å´","ð¯¡":"å ","ð¯¡":"å","ð¯¡":"å ²","ð¯¡":"å ±","ð¯¡":"å¢¬","ð¯¡":"ð¡¤","ð¯¡":"å£²","ð¯¡":"å£·","ð¯¡":"å¤","ð¯¡":"å¤","ð¯¡":"å¤¢","ð¯¡":"å¥¢","ð¯¡ ":"ð¡¨","ð¯¡¡":"ð¡ª","ð¯¡¢":"å§¬","ð¯¡£":"å¨","ð¯¡¤":"å¨§","ð¯¡¥":"å§","ð¯¡¦":"å©¦","ð¯¡§":"ã®","ð¯¡¨":"ã¼","ð¯¡©":"å¬","ð¯¡ª":"å¬¾","ð¯¡«":"å¬¾","ð¯¡¬":"ð¡§","ð¯¡­":"å¯","ð¯¡®":"å¯","ð¯¡¯":"å¯§","ð¯¡°":"å¯³","ð¯¡±":"ð¡¬","ð¯¡²":"å¯¿","ð¯¡³":"å°","ð¯¡´":"å½","ð¯¡µ":"å°¢","ð¯¡¶":"ã","ð¯¡·":"å± ","ð¯¡¸":"å±®","ð¯¡¹":"å³","ð¯¡º":"å²","ð¯¡»":"ð¡·¤","ð¯¡¼":"åµ","ð¯¡½":"ð¡·¦","ð¯¡¾":"åµ®","ð¯¡¿":"åµ«","ð¯¢":"åµ¼","ð¯¢":"å·¡","ð¯¢":"å·¢","ð¯¢":"ã ¯","ð¯¢":"å·½","ð¯¢":"å¸¨","ð¯¢":"å¸½","ð¯¢":"å¹©","ð¯¢":"ã¡¢","ð¯¢":"ð¢","ð¯¢":"ã¡¼","ð¯¢":"åº°","ð¯¢":"åº³","ð¯¢":"åº¶","ð¯¢":"å»","ð¯¢":"ðª","ð¯¢":"å»¾","ð¯¢":"ð¢±","ð¯¢":"ð¢±","ð¯¢":"è","ð¯¢":"å¼¢","ð¯¢":"å¼¢","ð¯¢":"ã£","ð¯¢":"ð£¸","ð¯¢":"ð¦","ð¯¢":"å½¢","ð¯¢":"å½«","ð¯¢":"ã££","ð¯¢":"å¾","ð¯¢":"å¿","ð¯¢":"å¿","ð¯¢":"å¿¹","ð¯¢ ":"æ","ð¯¢¡":"ã¤º","ð¯¢¢":"ã¤","ð¯¢£":"æ","ð¯¢¤":"ð¢","ð¯¢¥":"æ","ð¯¢¦":"æ","ð¯¢§":"æ","ð¯¢¨":"æ","ð¯¢©":"æ","ð¯¢ª":"æº","ð¯¢«":"æ","ð¯¢¬":"æ²","ð¯¢­":"æ¤","ð¯¢®":"æ¯","ð¯¢¯":"æ","ð¯¢°":"æ²","ð¯¢±":"æ¶","ð¯¢²":"æ","ð¯¢³":"æ","ð¯¢´":"æ","ð¯¢µ":"æ±","ð¯¢¶":"æ","ð¯¢·":"æ","ð¯¢¸":"ð¢¬","ð¯¢¹":"æ½","ð¯¢º":"æ¼","ð¯¢»":"æ¨","ð¯¢¼":"æ","ð¯¢½":"æ¤","ð¯¢¾":"ð¢¯±","ð¯¢¿":"æ¢","ð¯£":"æ","ð¯£":"æ©","ð¯£":"ã¨®","ð¯£":"æ©","ð¯£":"æ¾","ð¯£":"æ","ð¯£":"æ·","ð¯£":"ã©¬","ð¯£":"æ","ð¯£":"æ¬","ð¯£":"ð£","ð¯£":"æ£","ð¯£":"æ¸","ð¯£":"æ","ð¯£":"ã¬","ð¯£":"æ","ð¯£":"ã¬","ð¯£":"ã«¤","ð¯£":"å","ð¯£":"å","ð¯£":"æ","ð¯£":"æ","ð¯£":"è­","ð¯£":"ä","ð¯£":"æ","ð¯£":"æ","ð¯£":"æ¡","ð¯£":"æ","ð¯£":"æ","ð¯£":"ð£","ð¯£":"ã­","ð¯£":"æº","ð¯£ ":"æ","ð¯£¡":"æ¡","ð¯£¢":"æ¢","ð¯££":"ð£­","ð¯£¤":"æ¢","ð¯£¥":"æ ","ð¯£¦":"æ¤","ð¯£§":"ã®","ð¯£¨":"æ¥","ð¯£©":"æ¦£","ð¯£ª":"æ§ª","ð¯£«":"æª¨","ð¯£¬":"ð££","ð¯£­":"æ«","ð¯£®":"ã°","ð¯£¯":"æ¬¡","ð¯£°":"ð£¢§","ð¯£±":"æ­","ð¯£²":"ã±","ð¯£³":"æ­²","ð¯£´":"æ®","ð¯£µ":"æ®º","ð¯£¶":"æ®»","ð¯£·":"ð£ª","ð¯£¸":"ð¡´","ð¯£¹":"ð£«º","ð¯£º":"æ±","ð¯£»":"ð£²¼","ð¯£¼":"æ²¿","ð¯£½":"æ³","ð¯£¾":"æ±§","ð¯£¿":"æ´","ð¯¤":"æ´¾","ð¯¤":"æµ·","ð¯¤":"æµ","ð¯¤":"æµ©","ð¯¤":"æµ¸","ð¯¤":"æ¶","ð¯¤":"ð£´","ð¯¤":"æ´´","ð¯¤":"æ¸¯","ð¯¤":"æ¹®","ð¯¤":"ã´³","ð¯¤":"æ»","ð¯¤":"æ»","ð¯¤":"ð£»","ð¯¤":"æ·¹","ð¯¤":"æ½®","ð¯¤":"ð£½","ð¯¤":"ð£¾","ð¯¤":"æ¿","ð¯¤":"ç¹","ð¯¤":"ç","ð¯¤":"ç","ð¯¤":"ã¶","ð¯¤":"ç","ð¯¤":"ç½","ð¯¤":"ç·","ð¯¤":"ç­","ð¯¤":"ð ¥","ð¯¤":"ç","ð¯¤":"ð¤£","ð¯¤":"ç","ð¯¤":"ð¤«","ð¯¤ ":"ç¨","ð¯¤¡":"çµ","ð¯¤¢":"ç","ð¯¤£":"ð¤","ð¯¤¤":"ç","ð¯¤¥":"ç","ð¯¤¦":"ð¤µ","ð¯¤§":"ð¤ ","ð¯¤¨":"çº","ð¯¤©":"ç","ð¯¤ª":"ãº¬","ð¯¤«":"ç¥","ð¯¤¬":"ãº¸","ð¯¤­":"ãº¸","ð¯¤®":"ç","ð¯¤¯":"ç","ð¯¤°":"ç±","ð¯¤±":"ç","ð¯¤²":"ç","ð¯¤³":"ã¼","ð¯¤´":"ç¤","ð¯¤µ":"ð¤°¶","ð¯¤¶":"ç¾","ð¯¤·":"ð¤²","ð¯¤¸":"ç°","ð¯¤¹":"ð¢","ð¯¤º":"ç","ð¯¤»":"ð¤¾¡","ð¯¤¼":"ð¤¾¸","ð¯¤½":"ð¥","ð¯¤¾":"ã¿¼","ð¯¤¿":"ä","ð¯¥":"ç´","ð¯¥":"ð¥³","ð¯¥":"ð¥²","ð¯¥":"ð¥","ð¯¥":"ð¥³","ð¯¥":"ç","ð¯¥":"ç","ð¯¥":"ç","ð¯¥":"ç","ð¯¥":"ä¹","ð¯¥":"ç","ð¯¥":"ä","ð¯¥":"ä","ð¯¥":"ð¥","ð¯¥":"ç¡","ð¯¥":"ç¢","ð¯¥":"ç£","ð¯¥":"ä£","ð¯¥":"ð¥¦","ð¯¥":"ç¥","ð¯¥":"ð¥","ð¯¥":"ð¥","ð¯¥":"ç¦","ð¯¥":"ç§«","ð¯¥":"ä¯","ð¯¥":"ç©","ð¯¥":"ç©","ð¯¥":"ç©","ð¯¥":"ð¥¥¼","ð¯¥":"ð¥ª§","ð¯¥":"ð¥ª§","ð¯¥":"ç«®","ð¯¥ ":"ä","ð¯¥¡":"ð¥®«","ð¯¥¢":"ç¯","ð¯¥£":"ç¯","ð¯¥¤":"ä§","ð¯¥¥":"ð¥²","ð¯¥¦":"ç³","ð¯¥§":"ä ","ð¯¥¨":"ç³¨","ð¯¥©":"ç³£","ð¯¥ª":"ç´","ð¯¥«":"ð¥¾","ð¯¥¬":"çµ£","ð¯¥­":"ä","ð¯¥®":"ç·","ð¯¥¯":"ç¸","ð¯¥°":"ç¹","ð¯¥±":"ä´","ð¯¥²":"ð¦¨","ð¯¥³":"ð¦","ð¯¥´":"ä","ð¯¥µ":"ð¦","ð¯¥¶":"ç½º","ð¯¥·":"ð¦¾","ð¯¥¸":"ç¾","ð¯¥¹":"ç¿º","ð¯¥º":"è","ð¯¥»":"ð¦","ð¯¥¼":"ð¦£","ð¯¥½":"è ","ð¯¥¾":"ð¦¨","ð¯¥¿":"è°","ð¯¦":"ð£","ð¯¦":"ä","ð¯¦":"è²","ð¯¦":"è","ð¯¦":"ä","ð¯¦":"è¾","ð¯¦":"åªµ","ð¯¦":"ð¦§","ð¯¦":"ð¦µ","ð¯¦":"ð£","ð¯¦":"ð£","ð¯¦":"è","ð¯¦":"è","ð¯¦":"è¾","ð¯¦":"ä«","ð¯¦":"è","ð¯¦":"è","ð¯¦":"è","ð¯¦":"å³","ð¯¦":"è±","ð¯¦":"è³","ð¯¦":"è½","ð¯¦":"è¦","ð¯¦":"ð¦¬¼","ð¯¦":"è¥","ð¯¦":"è","ð¯¦":"è£","ð¯¦":"è­","ð¯¦":"è£","ð¯¦":"è½","ð¯¦":"è§","ð¯¦":"è","ð¯¦ ":"è","ð¯¦¡":"è","ð¯¦¢":"è","ð¯¦£":"è","ð¯¦¤":"ð¦°¶","ð¯¦¥":"ð¦µ«","ð¯¦¦":"ð¦³","ð¯¦§":"ä«","ð¯¦¨":"è±","ð¯¦©":"è³","ð¯¦ª":"è","ð¯¦«":"ð§","ð¯¦¬":"è¤","ð¯¦­":"ð¦¼¬","ð¯¦®":"ä","ð¯¦¯":"ä¡","ð¯¦°":"ð¦¾±","ð¯¦±":"ð§","ð¯¦²":"ä«","ð¯¦³":"è","ð¯¦´":"è","ð¯¦µ":"è§","ð¯¦¶":"è©","ð¯¦·":"è©","ð¯¦¸":"è","ð¯¦¹":"è","ð¯¦º":"è¢","ð¯¦»":"è¹","ð¯¦¼":"è¨","ð¯¦½":"è«","ð¯¦¾":"è","ð¯¦¿":"ä","ð¯§":"è¡","ð¯§":"è ","ð¯§":"ä¹","ð¯§":"è¡ ","ð¯§":"è¡£","ð¯§":"ð§§","ð¯§":"è£","ð¯§":"è£","ð¯§":"äµ","ð¯§":"è£º","ð¯§":"ã»","ð¯§":"ð§¢®","ð¯§":"ð§¥¦","ð¯§":"ä¾","ð¯§":"ä","ð¯§":"èª ","ð¯§":"è«­","ð¯§":"è®","ð¯§":"è±","ð¯§":"ð§²¨","ð¯§":"è²«","ð¯§":"è³","ð¯§":"è´","ð¯§":"èµ·","ð¯§":"ð§¼¯","ð¯§":"ð  ","ð¯§":"è·","ð¯§":"è¶¼","ð¯§":"è·°","ð¯§":"ð £","ð¯§":"è»","ð¯§":"è¼¸","ð¯§ ":"ð¨","ð¯§¡":"ð¨­","ð¯§¢":"é","ð¯§£":"é±","ð¯§¤":"é","ð¯§¥":"ð¨®","ð¯§¦":"é","ð¯§§":"é¸","ð¯§¨":"é","ð¯§©":"é","ð¯§ª":"é¼","ð¯§«":"é¹","ð¯§¬":"é","ð¯§­":"ð¨¯º","ð¯§®":"é","ð¯§¯":"ä¦","ð¯§°":"é·","ð¯§±":"ð¨µ·","ð¯§²":"ä§¦","ð¯§³":"é","ð¯§´":"å¶²","ð¯§µ":"é£","ð¯§¶":"ð©","ð¯§·":"ð©","ð¯§¸":"ä©®","ð¯§¹":"ä©¶","ð¯§º":"é ","ð¯§»":"ð©","ð¯§¼":"äª²","ð¯§½":"ð©","ð¯§¾":"é ","ð¯§¿":"é ","ð¯¨":"é ©","ð¯¨":"ð©¶","ð¯¨":"é£¢","ð¯¨":"ä¬³","ð¯¨":"é¤©","ð¯¨":"é¦§","ð¯¨":"é§","ð¯¨":"é§¾","ð¯¨":"ä¯","ð¯¨":"ð©¬°","ð¯¨":"é¬","ð¯¨":"é±","ð¯¨":"é³½","ð¯¨":"ä³","ð¯¨":"ä³­","ð¯¨":"éµ§","ð¯¨":"ðª","ð¯¨":"ä³¸","ð¯¨":"ðª","ð¯¨":"ðª","ð¯¨":"ðª","ð¯¨":"éº»","ð¯¨":"äµ","ð¯¨":"é»¹","ð¯¨":"é»¾","ð¯¨":"é¼","ð¯¨":"é¼","ð¯¨":"é¼","ð¯¨":"é¼»","ð¯¨":"ðª"};
/*
 * all.js - include file for normalization data for a particular script
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */
// !depends util/utils.js 
// !data norm.ccc nfd/all
ilib.data.norm.nfd = ilib.merge(ilib.data.norm.nfd || {}, ilib.data.nfd_all);
ilib.data.nfd_all = undefined;
ilib.data.nfc_all = {"AÌ":"Ã","AÌ":"Ã","AÌ":"Ã","AÌ":"Ã","AÌ":"Ã","AÌ":"Ã","CÌ§":"Ã","EÌ":"Ã","EÌ":"Ã","EÌ":"Ã","EÌ":"Ã","IÌ":"Ã","IÌ":"Ã","IÌ":"Ã","IÌ":"Ã","NÌ":"Ã","OÌ":"Ã","OÌ":"Ã","OÌ":"Ã","OÌ":"Ã","OÌ":"Ã","UÌ":"Ã","UÌ":"Ã","UÌ":"Ã","UÌ":"Ã","YÌ":"Ã","aÌ":"Ã ","aÌ":"Ã¡","aÌ":"Ã¢","aÌ":"Ã£","aÌ":"Ã¤","aÌ":"Ã¥","cÌ§":"Ã§","eÌ":"Ã¨","eÌ":"Ã©","eÌ":"Ãª","eÌ":"Ã«","iÌ":"Ã¬","iÌ":"Ã­","iÌ":"Ã®","iÌ":"Ã¯","nÌ":"Ã±","oÌ":"Ã²","oÌ":"Ã³","oÌ":"Ã´","oÌ":"Ãµ","oÌ":"Ã¶","uÌ":"Ã¹","uÌ":"Ãº","uÌ":"Ã»","uÌ":"Ã¼","yÌ":"Ã½","yÌ":"Ã¿","AÌ":"Ä","aÌ":"Ä","AÌ":"Ä","aÌ":"Ä","AÌ¨":"Ä","aÌ¨":"Ä","CÌ":"Ä","cÌ":"Ä","CÌ":"Ä","cÌ":"Ä","CÌ":"Ä","cÌ":"Ä","CÌ":"Ä","cÌ":"Ä","DÌ":"Ä","dÌ":"Ä","EÌ":"Ä","eÌ":"Ä","EÌ":"Ä","eÌ":"Ä","EÌ":"Ä","eÌ":"Ä","EÌ¨":"Ä","eÌ¨":"Ä","EÌ":"Ä","eÌ":"Ä","GÌ":"Ä","gÌ":"Ä","GÌ":"Ä","gÌ":"Ä","GÌ":"Ä ","gÌ":"Ä¡","GÌ§":"Ä¢","gÌ§":"Ä£","HÌ":"Ä¤","hÌ":"Ä¥","IÌ":"Ä¨","iÌ":"Ä©","IÌ":"Äª","iÌ":"Ä«","IÌ":"Ä¬","iÌ":"Ä­","IÌ¨":"Ä®","iÌ¨":"Ä¯","IÌ":"Ä°","JÌ":"Ä´","jÌ":"Äµ","KÌ§":"Ä¶","kÌ§":"Ä·","LÌ":"Ä¹","lÌ":"Äº","LÌ§":"Ä»","lÌ§":"Ä¼","LÌ":"Ä½","lÌ":"Ä¾","NÌ":"Å","nÌ":"Å","NÌ§":"Å","nÌ§":"Å","NÌ":"Å","nÌ":"Å","OÌ":"Å","oÌ":"Å","OÌ":"Å","oÌ":"Å","OÌ":"Å","oÌ":"Å","RÌ":"Å","rÌ":"Å","RÌ§":"Å","rÌ§":"Å","RÌ":"Å","rÌ":"Å","SÌ":"Å","sÌ":"Å","SÌ":"Å","sÌ":"Å","SÌ§":"Å","sÌ§":"Å","SÌ":"Å ","sÌ":"Å¡","TÌ§":"Å¢","tÌ§":"Å£","TÌ":"Å¤","tÌ":"Å¥","UÌ":"Å¨","uÌ":"Å©","UÌ":"Åª","uÌ":"Å«","UÌ":"Å¬","uÌ":"Å­","UÌ":"Å®","uÌ":"Å¯","UÌ":"Å°","uÌ":"Å±","UÌ¨":"Å²","uÌ¨":"Å³","WÌ":"Å´","wÌ":"Åµ","YÌ":"Å¶","yÌ":"Å·","YÌ":"Å¸","ZÌ":"Å¹","zÌ":"Åº","ZÌ":"Å»","zÌ":"Å¼","ZÌ":"Å½","zÌ":"Å¾","OÌ":"Æ ","oÌ":"Æ¡","UÌ":"Æ¯","uÌ":"Æ°","AÌ":"Ç","aÌ":"Ç","IÌ":"Ç","iÌ":"Ç","OÌ":"Ç","oÌ":"Ç","UÌ":"Ç","uÌ":"Ç","ÃÌ":"Ç","Ã¼Ì":"Ç","ÃÌ":"Ç","Ã¼Ì":"Ç","ÃÌ":"Ç","Ã¼Ì":"Ç","ÃÌ":"Ç","Ã¼Ì":"Ç","ÃÌ":"Ç","Ã¤Ì":"Ç","È¦Ì":"Ç ","È§Ì":"Ç¡","ÃÌ":"Ç¢","Ã¦Ì":"Ç£","GÌ":"Ç¦","gÌ":"Ç§","KÌ":"Ç¨","kÌ":"Ç©","OÌ¨":"Çª","oÌ¨":"Ç«","ÇªÌ":"Ç¬","Ç«Ì":"Ç­","Æ·Ì":"Ç®","ÊÌ":"Ç¯","jÌ":"Ç°","GÌ":"Ç´","gÌ":"Çµ","NÌ":"Ç¸","nÌ":"Ç¹","ÃÌ":"Çº","Ã¥Ì":"Ç»","ÃÌ":"Ç¼","Ã¦Ì":"Ç½","ÃÌ":"Ç¾","Ã¸Ì":"Ç¿","AÌ":"È","aÌ":"È","AÌ":"È","aÌ":"È","EÌ":"È","eÌ":"È","EÌ":"È","eÌ":"È","IÌ":"È","iÌ":"È","IÌ":"È","iÌ":"È","OÌ":"È","oÌ":"È","OÌ":"È","oÌ":"È","RÌ":"È","rÌ":"È","RÌ":"È","rÌ":"È","UÌ":"È","uÌ":"È","UÌ":"È","uÌ":"È","SÌ¦":"È","sÌ¦":"È","TÌ¦":"È","tÌ¦":"È","HÌ":"È","hÌ":"È","AÌ":"È¦","aÌ":"È§","EÌ§":"È¨","eÌ§":"È©","ÃÌ":"Èª","Ã¶Ì":"È«","ÃÌ":"È¬","ÃµÌ":"È­","OÌ":"È®","oÌ":"È¯","È®Ì":"È°","È¯Ì":"È±","YÌ":"È²","yÌ":"È³","Â¨Ì":"Î","ÎÌ":"Î","ÎÌ":"Î","ÎÌ":"Î","ÎÌ":"Î","ÎÌ":"Î","Î¥Ì":"Î","Î©Ì":"Î","ÏÌ":"Î","ÎÌ":"Îª","Î¥Ì":"Î«","Î±Ì":"Î¬","ÎµÌ":"Î­","Î·Ì":"Î®","Î¹Ì":"Î¯","ÏÌ":"Î°","Î¹Ì":"Ï","ÏÌ":"Ï","Î¿Ì":"Ï","ÏÌ":"Ï","ÏÌ":"Ï","ÏÌ":"Ï","ÏÌ":"Ï","ÐÌ":"Ð","ÐÌ":"Ð","ÐÌ":"Ð","ÐÌ":"Ð","ÐÌ":"Ð","ÐÌ":"Ð","Ð£Ì":"Ð","ÐÌ":"Ð","Ð¸Ì":"Ð¹","ÐµÌ":"Ñ","ÐµÌ":"Ñ","Ð³Ì":"Ñ","ÑÌ":"Ñ","ÐºÌ":"Ñ","Ð¸Ì":"Ñ","ÑÌ":"Ñ","Ñ´Ì":"Ñ¶","ÑµÌ":"Ñ·","ÐÌ":"Ó","Ð¶Ì":"Ó","ÐÌ":"Ó","Ð°Ì":"Ó","ÐÌ":"Ó","Ð°Ì":"Ó","ÐÌ":"Ó","ÐµÌ":"Ó","ÓÌ":"Ó","ÓÌ":"Ó","ÐÌ":"Ó","Ð¶Ì":"Ó","ÐÌ":"Ó","Ð·Ì":"Ó","ÐÌ":"Ó¢","Ð¸Ì":"Ó£","ÐÌ":"Ó¤","Ð¸Ì":"Ó¥","ÐÌ":"Ó¦","Ð¾Ì":"Ó§","Ó¨Ì":"Óª","Ó©Ì":"Ó«","Ð­Ì":"Ó¬","ÑÌ":"Ó­","Ð£Ì":"Ó®","ÑÌ":"Ó¯","Ð£Ì":"Ó°","ÑÌ":"Ó±","Ð£Ì":"Ó²","ÑÌ":"Ó³","Ð§Ì":"Ó´","ÑÌ":"Óµ","Ð«Ì":"Ó¸","ÑÌ":"Ó¹","Ø§Ù":"Ø¢","Ø§Ù":"Ø£","ÙÙ":"Ø¤","Ø§Ù":"Ø¥","ÙÙ":"Ø¦","ÛÙ":"Û","ÛÙ":"Û","ÛÙ":"Û","à¤¨à¤¼":"à¤©","à¤°à¤¼":"à¤±","à¤³à¤¼":"à¤´","à§à¦¾":"à§","à§à§":"à§","à­à­":"à­","à­à¬¾":"à­","à­à­":"à­","à®à¯":"à®","à¯à®¾":"à¯","à¯à®¾":"à¯","à¯à¯":"à¯","à±à±":"à±","à²¿à³":"à³","à³à³":"à³","à³à³":"à³","à³à³":"à³","à³à³":"à³","àµà´¾":"àµ","àµà´¾":"àµ","àµàµ":"àµ","à·à·":"à·","à·à·":"à·","à·à·":"à·","à·à·":"à·","á¥á®":"á¦","á¬á¬µ":"á¬","á¬á¬µ":"á¬","á¬á¬µ":"á¬","á¬á¬µ":"á¬","á¬á¬µ":"á¬","á¬á¬µ":"á¬","á¬ºá¬µ":"á¬»","á¬¼á¬µ":"á¬½","á¬¾á¬µ":"á­","á¬¿á¬µ":"á­","á­á¬µ":"á­","AÌ¥":"á¸","aÌ¥":"á¸","BÌ":"á¸","bÌ":"á¸","BÌ£":"á¸","bÌ£":"á¸","BÌ±":"á¸","bÌ±":"á¸","ÃÌ":"á¸","Ã§Ì":"á¸","DÌ":"á¸","dÌ":"á¸","DÌ£":"á¸","dÌ£":"á¸","DÌ±":"á¸","dÌ±":"á¸","DÌ§":"á¸","dÌ§":"á¸","DÌ­":"á¸","dÌ­":"á¸","ÄÌ":"á¸","ÄÌ":"á¸","ÄÌ":"á¸","ÄÌ":"á¸","EÌ­":"á¸","eÌ­":"á¸","EÌ°":"á¸","eÌ°":"á¸","È¨Ì":"á¸","È©Ì":"á¸","FÌ":"á¸","fÌ":"á¸","GÌ":"á¸ ","gÌ":"á¸¡","HÌ":"á¸¢","hÌ":"á¸£","HÌ£":"á¸¤","hÌ£":"á¸¥","HÌ":"á¸¦","hÌ":"á¸§","HÌ§":"á¸¨","hÌ§":"á¸©","HÌ®":"á¸ª","hÌ®":"á¸«","IÌ°":"á¸¬","iÌ°":"á¸­","ÃÌ":"á¸®","Ã¯Ì":"á¸¯","KÌ":"á¸°","kÌ":"á¸±","KÌ£":"á¸²","kÌ£":"á¸³","KÌ±":"á¸´","kÌ±":"á¸µ","LÌ£":"á¸¶","lÌ£":"á¸·","á¸¶Ì":"á¸¸","á¸·Ì":"á¸¹","LÌ±":"á¸º","lÌ±":"á¸»","LÌ­":"á¸¼","lÌ­":"á¸½","MÌ":"á¸¾","mÌ":"á¸¿","MÌ":"á¹","mÌ":"á¹","MÌ£":"á¹","mÌ£":"á¹","NÌ":"á¹","nÌ":"á¹","NÌ£":"á¹","nÌ£":"á¹","NÌ±":"á¹","nÌ±":"á¹","NÌ­":"á¹","nÌ­":"á¹","ÃÌ":"á¹","ÃµÌ":"á¹","ÃÌ":"á¹","ÃµÌ":"á¹","ÅÌ":"á¹","ÅÌ":"á¹","ÅÌ":"á¹","ÅÌ":"á¹","PÌ":"á¹","pÌ":"á¹","PÌ":"á¹","pÌ":"á¹","RÌ":"á¹","rÌ":"á¹","RÌ£":"á¹","rÌ£":"á¹","á¹Ì":"á¹","á¹Ì":"á¹","RÌ±":"á¹","rÌ±":"á¹","SÌ":"á¹ ","sÌ":"á¹¡","SÌ£":"á¹¢","sÌ£":"á¹£","ÅÌ":"á¹¤","ÅÌ":"á¹¥","Å Ì":"á¹¦","Å¡Ì":"á¹§","á¹¢Ì":"á¹¨","á¹£Ì":"á¹©","TÌ":"á¹ª","tÌ":"á¹«","TÌ£":"á¹¬","tÌ£":"á¹­","TÌ±":"á¹®","tÌ±":"á¹¯","TÌ­":"á¹°","tÌ­":"á¹±","UÌ¤":"á¹²","uÌ¤":"á¹³","UÌ°":"á¹´","uÌ°":"á¹µ","UÌ­":"á¹¶","uÌ­":"á¹·","Å¨Ì":"á¹¸","Å©Ì":"á¹¹","ÅªÌ":"á¹º","Å«Ì":"á¹»","VÌ":"á¹¼","vÌ":"á¹½","VÌ£":"á¹¾","vÌ£":"á¹¿","WÌ":"áº","wÌ":"áº","WÌ":"áº","wÌ":"áº","WÌ":"áº","wÌ":"áº","WÌ":"áº","wÌ":"áº","WÌ£":"áº","wÌ£":"áº","XÌ":"áº","xÌ":"áº","XÌ":"áº","xÌ":"áº","YÌ":"áº","yÌ":"áº","ZÌ":"áº","zÌ":"áº","ZÌ£":"áº","zÌ£":"áº","ZÌ±":"áº","zÌ±":"áº","hÌ±":"áº","tÌ":"áº","wÌ":"áº","yÌ":"áº","Å¿Ì":"áº","AÌ£":"áº ","aÌ£":"áº¡","AÌ":"áº¢","aÌ":"áº£","ÃÌ":"áº¤","Ã¢Ì":"áº¥","ÃÌ":"áº¦","Ã¢Ì":"áº§","ÃÌ":"áº¨","Ã¢Ì":"áº©","ÃÌ":"áºª","Ã¢Ì":"áº«","áº Ì":"áº¬","áº¡Ì":"áº­","ÄÌ":"áº®","ÄÌ":"áº¯","ÄÌ":"áº°","ÄÌ":"áº±","ÄÌ":"áº²","ÄÌ":"áº³","ÄÌ":"áº´","ÄÌ":"áºµ","áº Ì":"áº¶","áº¡Ì":"áº·","EÌ£":"áº¸","eÌ£":"áº¹","EÌ":"áºº","eÌ":"áº»","EÌ":"áº¼","eÌ":"áº½","ÃÌ":"áº¾","ÃªÌ":"áº¿","ÃÌ":"á»","ÃªÌ":"á»","ÃÌ":"á»","ÃªÌ":"á»","ÃÌ":"á»","ÃªÌ":"á»","áº¸Ì":"á»","áº¹Ì":"á»","IÌ":"á»","iÌ":"á»","IÌ£":"á»","iÌ£":"á»","OÌ£":"á»","oÌ£":"á»","OÌ":"á»","oÌ":"á»","ÃÌ":"á»","Ã´Ì":"á»","ÃÌ":"á»","Ã´Ì":"á»","ÃÌ":"á»","Ã´Ì":"á»","ÃÌ":"á»","Ã´Ì":"á»","á»Ì":"á»","á»Ì":"á»","Æ Ì":"á»","Æ¡Ì":"á»","Æ Ì":"á»","Æ¡Ì":"á»","Æ Ì":"á»","Æ¡Ì":"á»","Æ Ì":"á» ","Æ¡Ì":"á»¡","Æ Ì£":"á»¢","Æ¡Ì£":"á»£","UÌ£":"á»¤","uÌ£":"á»¥","UÌ":"á»¦","uÌ":"á»§","Æ¯Ì":"á»¨","Æ°Ì":"á»©","Æ¯Ì":"á»ª","Æ°Ì":"á»«","Æ¯Ì":"á»¬","Æ°Ì":"á»­","Æ¯Ì":"á»®","Æ°Ì":"á»¯","Æ¯Ì£":"á»°","Æ°Ì£":"á»±","YÌ":"á»²","yÌ":"á»³","YÌ£":"á»´","yÌ£":"á»µ","YÌ":"á»¶","yÌ":"á»·","YÌ":"á»¸","yÌ":"á»¹","Î±Ì":"á¼","Î±Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Í":"á¼","á¼Í":"á¼","ÎÌ":"á¼","ÎÌ":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Í":"á¼","á¼Í":"á¼","ÎµÌ":"á¼","ÎµÌ":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","ÎÌ":"á¼","ÎÌ":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","Î·Ì":"á¼ ","Î·Ì":"á¼¡","á¼ Ì":"á¼¢","á¼¡Ì":"á¼£","á¼ Ì":"á¼¤","á¼¡Ì":"á¼¥","á¼ Í":"á¼¦","á¼¡Í":"á¼§","ÎÌ":"á¼¨","ÎÌ":"á¼©","á¼¨Ì":"á¼ª","á¼©Ì":"á¼«","á¼¨Ì":"á¼¬","á¼©Ì":"á¼­","á¼¨Í":"á¼®","á¼©Í":"á¼¯","Î¹Ì":"á¼°","Î¹Ì":"á¼±","á¼°Ì":"á¼²","á¼±Ì":"á¼³","á¼°Ì":"á¼´","á¼±Ì":"á¼µ","á¼°Í":"á¼¶","á¼±Í":"á¼·","ÎÌ":"á¼¸","ÎÌ":"á¼¹","á¼¸Ì":"á¼º","á¼¹Ì":"á¼»","á¼¸Ì":"á¼¼","á¼¹Ì":"á¼½","á¼¸Í":"á¼¾","á¼¹Í":"á¼¿","Î¿Ì":"á½","Î¿Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","ÎÌ":"á½","ÎÌ":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","ÏÌ":"á½","ÏÌ":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Í":"á½","á½Í":"á½","Î¥Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Í":"á½","ÏÌ":"á½ ","ÏÌ":"á½¡","á½ Ì":"á½¢","á½¡Ì":"á½£","á½ Ì":"á½¤","á½¡Ì":"á½¥","á½ Í":"á½¦","á½¡Í":"á½§","Î©Ì":"á½¨","Î©Ì":"á½©","á½¨Ì":"á½ª","á½©Ì":"á½«","á½¨Ì":"á½¬","á½©Ì":"á½­","á½¨Í":"á½®","á½©Í":"á½¯","Î±Ì":"á½°","ÎµÌ":"á½²","Î·Ì":"á½´","Î¹Ì":"á½¶","Î¿Ì":"á½¸","ÏÌ":"á½º","ÏÌ":"á½¼","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼ Í":"á¾","á¼¡Í":"á¾","á¼¢Í":"á¾","á¼£Í":"á¾","á¼¤Í":"á¾","á¼¥Í":"á¾","á¼¦Í":"á¾","á¼§Í":"á¾","á¼¨Í":"á¾","á¼©Í":"á¾","á¼ªÍ":"á¾","á¼«Í":"á¾","á¼¬Í":"á¾","á¼­Í":"á¾","á¼®Í":"á¾","á¼¯Í":"á¾","á½ Í":"á¾ ","á½¡Í":"á¾¡","á½¢Í":"á¾¢","á½£Í":"á¾£","á½¤Í":"á¾¤","á½¥Í":"á¾¥","á½¦Í":"á¾¦","á½§Í":"á¾§","á½¨Í":"á¾¨","á½©Í":"á¾©","á½ªÍ":"á¾ª","á½«Í":"á¾«","á½¬Í":"á¾¬","á½­Í":"á¾­","á½®Í":"á¾®","á½¯Í":"á¾¯","Î±Ì":"á¾°","Î±Ì":"á¾±","á½°Í":"á¾²","Î±Í":"á¾³","Î¬Í":"á¾´","Î±Í":"á¾¶","á¾¶Í":"á¾·","ÎÌ":"á¾¸","ÎÌ":"á¾¹","ÎÌ":"á¾º","ÎÍ":"á¾¼","Â¨Í":"á¿","á½´Í":"á¿","Î·Í":"á¿","Î®Í":"á¿","Î·Í":"á¿","á¿Í":"á¿","ÎÌ":"á¿","ÎÌ":"á¿","ÎÍ":"á¿","á¾¿Ì":"á¿","á¾¿Ì":"á¿","á¾¿Í":"á¿","Î¹Ì":"á¿","Î¹Ì":"á¿","ÏÌ":"á¿","Î¹Í":"á¿","ÏÍ":"á¿","ÎÌ":"á¿","ÎÌ":"á¿","ÎÌ":"á¿","á¿¾Ì":"á¿","á¿¾Ì":"á¿","á¿¾Í":"á¿","ÏÌ":"á¿ ","ÏÌ":"á¿¡","ÏÌ":"á¿¢","ÏÌ":"á¿¤","ÏÌ":"á¿¥","ÏÍ":"á¿¦","ÏÍ":"á¿§","Î¥Ì":"á¿¨","Î¥Ì":"á¿©","Î¥Ì":"á¿ª","Î¡Ì":"á¿¬","Â¨Ì":"á¿­","á½¼Í":"á¿²","ÏÍ":"á¿³","ÏÍ":"á¿´","ÏÍ":"á¿¶","á¿¶Í":"á¿·","ÎÌ":"á¿¸","Î©Ì":"á¿º","Î©Í":"á¿¼","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â®","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","â£Ì¸":"â¤","â¥Ì¸":"â¦","â¼Ì¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","=Ì¸":"â ","â¡Ì¸":"â¢","âÌ¸":"â­","<Ì¸":"â®",">Ì¸":"â¯","â¤Ì¸":"â°","â¥Ì¸":"â±","â²Ì¸":"â´","â³Ì¸":"âµ","â¶Ì¸":"â¸","â·Ì¸":"â¹","âºÌ¸":"â","â»Ì¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","â¢Ì¸":"â¬","â¨Ì¸":"â­","â©Ì¸":"â®","â«Ì¸":"â¯","â¼Ì¸":"â ","â½Ì¸":"â¡","âÌ¸":"â¢","âÌ¸":"â£","â²Ì¸":"âª","â³Ì¸":"â«","â´Ì¸":"â¬","âµÌ¸":"â­","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã ","ã¡ã":"ã¢","ã¤ã":"ã¥","ã¦ã":"ã§","ã¨ã":"ã©","ã¯ã":"ã°","ã¯ã":"ã±","ã²ã":"ã³","ã²ã":"ã´","ãµã":"ã¶","ãµã":"ã·","ã¸ã":"ã¹","ã¸ã":"ãº","ã»ã":"ã¼","ã»ã":"ã½","ãã":"ã","ãã":"ã","ã«ã":"ã¬","ã­ã":"ã®","ã¯ã":"ã°","ã±ã":"ã²","ã³ã":"ã´","ãµã":"ã¶","ã·ã":"ã¸","ã¹ã":"ãº","ã»ã":"ã¼","ã½ã":"ã¾","ã¿ã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ã¦ã":"ã´","ã¯ã":"ã·","ã°ã":"ã¸","ã±ã":"ã¹","ã²ã":"ãº","ã½ã":"ã¾","ððº":"ð","ððº":"ð","ð¥ðº":"ð«","ð±ð§":"ð®","ð²ð§":"ð¯"};
/*
 * all.js - include file for normalization data for a particular script
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */
// !depends util/utils.js 
// !depends nfd/all.js
// !data norm.ccc nfc/all
ilib.data.norm.nfc = ilib.merge(ilib.data.norm.nfc || {}, ilib.data.nfc_all);
ilib.data.nfc_all = undefined;
ilib.data.nfkd_all = {"Â ":" ","Â¨":" Ì","Âª":"a","Â¯":" Ì","Â²":"2","Â³":"3","Â´":" Ì","Âµ":"Î¼","Â¸":" Ì§","Â¹":"1","Âº":"o","Â¼":"1â4","Â½":"1â2","Â¾":"3â4","Ä²":"IJ","Ä³":"ij","Ä¿":"LÂ·","Å":"lÂ·","Å":"Ê¼n","Å¿":"s","Ç":"DZÌ","Ç":"DzÌ","Ç":"dzÌ","Ç":"LJ","Ç":"Lj","Ç":"lj","Ç":"NJ","Ç":"Nj","Ç":"nj","Ç±":"DZ","Ç²":"Dz","Ç³":"dz","Ê°":"h","Ê±":"É¦","Ê²":"j","Ê³":"r","Ê´":"É¹","Êµ":"É»","Ê¶":"Ê","Ê·":"w","Ê¸":"y","Ë":" Ì","Ë":" Ì","Ë":" Ì","Ë":" Ì¨","Ë":" Ì","Ë":" Ì","Ë ":"É£","Ë¡":"l","Ë¢":"s","Ë£":"x","Ë¤":"Ê","Íº":" Í","Î":" Ì","Ï":"Î²","Ï":"Î¸","Ï":"Î¥","Ï":"Ï","Ï":"Ï","Ï°":"Îº","Ï±":"Ï","Ï²":"Ï","Ï´":"Î","Ïµ":"Îµ","Ï¹":"Î£","Ö":"Õ¥Ö","Ùµ":"Ø§Ù´","Ù¶":"ÙÙ´","Ù·":"ÛÙ´","Ù¸":"ÙÙ´","à¸³":"à¹à¸²","àº³":"à»àº²","à»":"àº«àº","à»":"àº«àº¡","à¼":"à¼","à½·":"à¾²à½±à¾","à½¹":"à¾³à½±à¾","á¼":"á","á´¬":"A","á´­":"Ã","á´®":"B","á´°":"D","á´±":"E","á´²":"Æ","á´³":"G","á´´":"H","á´µ":"I","á´¶":"J","á´·":"K","á´¸":"L","á´¹":"M","á´º":"N","á´¼":"O","á´½":"È¢","á´¾":"P","á´¿":"R","áµ":"T","áµ":"U","áµ":"W","áµ":"a","áµ":"É","áµ":"É","áµ":"á´","áµ":"b","áµ":"d","áµ":"e","áµ":"É","áµ":"É","áµ":"É","áµ":"g","áµ":"k","áµ":"m","áµ":"Å","áµ":"o","áµ":"É","áµ":"á´","áµ":"á´","áµ":"p","áµ":"t","áµ":"u","áµ":"á´","áµ":"É¯","áµ":"v","áµ":"á´¥","áµ":"Î²","áµ":"Î³","áµ":"Î´","áµ ":"Ï","áµ¡":"Ï","áµ¢":"i","áµ£":"r","áµ¤":"u","áµ¥":"v","áµ¦":"Î²","áµ§":"Î³","áµ¨":"Ï","áµ©":"Ï","áµª":"Ï","áµ¸":"Ð½","á¶":"É","á¶":"c","á¶":"É","á¶":"Ã°","á¶":"É","á¶ ":"f","á¶¡":"É","á¶¢":"É¡","á¶£":"É¥","á¶¤":"É¨","á¶¥":"É©","á¶¦":"Éª","á¶§":"áµ»","á¶¨":"Ê","á¶©":"É­","á¶ª":"á¶","á¶«":"Ê","á¶¬":"É±","á¶­":"É°","á¶®":"É²","á¶¯":"É³","á¶°":"É´","á¶±":"Éµ","á¶²":"É¸","á¶³":"Ê","á¶´":"Ê","á¶µ":"Æ«","á¶¶":"Ê","á¶·":"Ê","á¶¸":"á´","á¶¹":"Ê","á¶º":"Ê","á¶»":"z","á¶¼":"Ê","á¶½":"Ê","á¶¾":"Ê","á¶¿":"Î¸","áº":"aÊ¾","á¾½":" Ì","á¾¿":" Ì","á¿":" Í","á¿¾":" Ì","â":" ","â":" ","â":" ","â":" ","â":" ","â":" ","â":" ","â":" ","â":" ","â":"â","â":" Ì³","â¤":".","â¥":"..","â¦":"...","â¯":" ","â³":"â²â²","â´":"â²â²â²","â¶":"âµâµ","â·":"âµâµâµ","â¼":"!!","â¾":" Ì","â":"??","â":"?!","â":"!?","â":"â²â²â²â²","â":" ","â°":"0","â±":"i","â´":"4","âµ":"5","â¶":"6","â·":"7","â¸":"8","â¹":"9","âº":"+","â»":"â","â¼":"=","â½":"(","â¾":")","â¿":"n","â":"0","â":"1","â":"2","â":"3","â":"4","â":"5","â":"6","â":"7","â":"8","â":"9","â":"+","â":"â","â":"=","â":"(","â":")","â":"a","â":"e","â":"o","â":"x","â":"É","â":"h","â":"k","â":"l","â":"m","â":"n","â":"p","â":"s","â":"t","â¨":"Rs","â":"a/c","â":"a/s","â":"C","â":"Â°C","â":"c/o","â":"c/u","â":"Æ","â":"Â°F","â":"g","â":"H","â":"H","â":"H","â":"h","â":"Ä§","â":"I","â":"I","â":"L","â":"l","â":"N","â":"No","â":"P","â":"Q","â":"R","â":"R","â":"R","â ":"SM","â¡":"TEL","â¢":"TM","â¤":"Z","â¨":"Z","â¬":"B","â­":"C","â¯":"e","â°":"E","â±":"F","â³":"M","â´":"o","âµ":"×","â¶":"×","â·":"×","â¸":"×","â¹":"i","â»":"FAX","â¼":"Ï","â½":"Î³","â¾":"Î","â¿":"Î ","â":"â","â":"D","â":"d","â":"e","â":"i","â":"j","â":"1â7","â":"1â9","â":"1â10","â":"1â3","â":"2â3","â":"1â5","â":"2â5","â":"3â5","â":"4â5","â":"1â6","â":"5â6","â":"1â8","â":"3â8","â":"5â8","â":"7â8","â":"1â","â ":"I","â¡":"II","â¢":"III","â£":"IV","â¤":"V","â¥":"VI","â¦":"VII","â§":"VIII","â¨":"IX","â©":"X","âª":"XI","â«":"XII","â¬":"L","â­":"C","â®":"D","â¯":"M","â°":"i","â±":"ii","â²":"iii","â³":"iv","â´":"v","âµ":"vi","â¶":"vii","â·":"viii","â¸":"ix","â¹":"x","âº":"xi","â»":"xii","â¼":"l","â½":"c","â¾":"d","â¿":"m","â":"0â3","â¬":"â«â«","â­":"â«â«â«","â¯":"â®â®","â°":"â®â®â®","â ":"1","â¡":"2","â¢":"3","â£":"4","â¤":"5","â¥":"6","â¦":"7","â§":"8","â¨":"9","â©":"10","âª":"11","â«":"12","â¬":"13","â­":"14","â®":"15","â¯":"16","â°":"17","â±":"18","â²":"19","â³":"20","â´":"(1)","âµ":"(2)","â¶":"(3)","â·":"(4)","â¸":"(5)","â¹":"(6)","âº":"(7)","â»":"(8)","â¼":"(9)","â½":"(10)","â¾":"(11)","â¿":"(12)","â":"(13)","â":"(14)","â":"(15)","â":"(16)","â":"(17)","â":"(18)","â":"(19)","â":"(20)","â":"1.","â":"2.","â":"3.","â":"4.","â":"5.","â":"6.","â":"7.","â":"8.","â":"9.","â":"10.","â":"11.","â":"12.","â":"13.","â":"14.","â":"15.","â":"16.","â":"17.","â":"18.","â":"19.","â":"20.","â":"(a)","â":"(b)","â":"(c)","â":"(d)","â ":"(e)","â¡":"(f)","â¢":"(g)","â£":"(h)","â¤":"(i)","â¥":"(j)","â¦":"(k)","â§":"(l)","â¨":"(m)","â©":"(n)","âª":"(o)","â«":"(p)","â¬":"(q)","â­":"(r)","â®":"(s)","â¯":"(t)","â°":"(u)","â±":"(v)","â²":"(w)","â³":"(x)","â´":"(y)","âµ":"(z)","â¶":"A","â·":"B","â¸":"C","â¹":"D","âº":"E","â»":"F","â¼":"G","â½":"H","â¾":"I","â¿":"J","â":"K","â":"L","â":"M","â":"N","â":"O","â":"P","â":"Q","â":"R","â":"S","â":"T","â":"U","â":"V","â":"W","â":"X","â":"Y","â":"Z","â":"a","â":"b","â":"c","â":"d","â":"e","â":"f","â":"g","â":"h","â":"i","â":"j","â":"k","â":"l","â":"m","â":"n","â":"o","â":"p","â ":"q","â¡":"r","â¢":"s","â£":"t","â¤":"u","â¥":"v","â¦":"w","â§":"x","â¨":"y","â©":"z","âª":"0","â¨":"â«â«â«â«","â©´":"::=","â©µ":"==","â©¶":"===","â±¼":"j","â±½":"V","âµ¯":"âµ¡","âº":"æ¯","â»³":"é¾","â¼":"ä¸","â¼":"ä¸¨","â¼":"ä¸¶","â¼":"ä¸¿","â¼":"ä¹","â¼":"äº","â¼":"äº","â¼":"äº ","â¼":"äºº","â¼":"å¿","â¼":"å¥","â¼":"å«","â¼":"å","â¼":"å","â¼":"å«","â¼":"å ","â¼":"åµ","â¼":"å","â¼":"å","â¼":"å¹","â¼":"å","â¼":"å","â¼":"å¸","â¼":"å","â¼":"å","â¼":"å©","â¼":"å","â¼":"å¶","â¼":"å","â¼":"å£","â¼":"å","â¼":"å","â¼ ":"å£«","â¼¡":"å¤","â¼¢":"å¤","â¼£":"å¤","â¼¤":"å¤§","â¼¥":"å¥³","â¼¦":"å­","â¼§":"å®","â¼¨":"å¯¸","â¼©":"å°","â¼ª":"å°¢","â¼«":"å°¸","â¼¬":"å±®","â¼­":"å±±","â¼®":"å·","â¼¯":"å·¥","â¼°":"å·±","â¼±":"å·¾","â¼²":"å¹²","â¼³":"å¹º","â¼´":"å¹¿","â¼µ":"å»´","â¼¶":"å»¾","â¼·":"å¼","â¼¸":"å¼","â¼¹":"å½","â¼º":"å½¡","â¼»":"å½³","â¼¼":"å¿","â¼½":"æ","â¼¾":"æ¶","â¼¿":"æ","â½":"æ¯","â½":"æ´","â½":"æ","â½":"æ","â½":"æ¤","â½":"æ¹","â½":"æ ","â½":"æ¥","â½":"æ°","â½":"æ","â½":"æ¨","â½":"æ¬ ","â½":"æ­¢","â½":"æ­¹","â½":"æ®³","â½":"æ¯","â½":"æ¯","â½":"æ¯","â½":"æ°","â½":"æ°","â½":"æ°´","â½":"ç«","â½":"çª","â½":"ç¶","â½":"ç»","â½":"ç¿","â½":"ç","â½":"ç","â½":"ç","â½":"ç¬","â½":"ç","â½":"ç","â½ ":"ç","â½¡":"ç¦","â½¢":"ç","â½£":"ç","â½¤":"ç¨","â½¥":"ç°","â½¦":"ç","â½§":"ç","â½¨":"ç¶","â½©":"ç½","â½ª":"ç®","â½«":"ç¿","â½¬":"ç®","â½­":"ç","â½®":"ç¢","â½¯":"ç³","â½°":"ç¤º","â½±":"ç¦¸","â½²":"ç¦¾","â½³":"ç©´","â½´":"ç«","â½µ":"ç«¹","â½¶":"ç±³","â½·":"ç³¸","â½¸":"ç¼¶","â½¹":"ç½","â½º":"ç¾","â½»":"ç¾½","â½¼":"è","â½½":"è","â½¾":"è","â½¿":"è³","â¾":"è¿","â¾":"è","â¾":"è£","â¾":"èª","â¾":"è³","â¾":"è¼","â¾":"è","â¾":"è","â¾":"è","â¾":"è®","â¾":"è²","â¾":"è¸","â¾":"è","â¾":"è«","â¾":"è¡","â¾":"è¡","â¾":"è¡£","â¾":"è¥¾","â¾":"è¦","â¾":"è§","â¾":"è¨","â¾":"è°·","â¾":"è±","â¾":"è±","â¾":"è±¸","â¾":"è²","â¾":"èµ¤","â¾":"èµ°","â¾":"è¶³","â¾":"èº«","â¾":"è»","â¾":"è¾","â¾ ":"è¾°","â¾¡":"è¾µ","â¾¢":"é","â¾£":"é","â¾¤":"é","â¾¥":"é","â¾¦":"é","â¾§":"é·","â¾¨":"é","â¾©":"é","â¾ª":"é¶","â¾«":"é¹","â¾¬":"é¨","â¾­":"é","â¾®":"é","â¾¯":"é¢","â¾°":"é©","â¾±":"é","â¾²":"é­","â¾³":"é³","â¾´":"é ","â¾µ":"é¢¨","â¾¶":"é£","â¾·":"é£","â¾¸":"é¦","â¾¹":"é¦","â¾º":"é¦¬","â¾»":"éª¨","â¾¼":"é«","â¾½":"é«","â¾¾":"é¬¥","â¾¿":"é¬¯","â¿":"é¬²","â¿":"é¬¼","â¿":"é­","â¿":"é³¥","â¿":"é¹µ","â¿":"é¹¿","â¿":"éº¥","â¿":"éº»","â¿":"é»","â¿":"é»","â¿":"é»","â¿":"é»¹","â¿":"é»½","â¿":"é¼","â¿":"é¼","â¿":"é¼ ","â¿":"é¼»","â¿":"é½","â¿":"é½","â¿":"é¾","â¿":"é¾","â¿":"é¾ ","ã":" ","ã¶":"ã","ã¸":"å","ã¹":"å","ãº":"å","ã":" ã","ã":" ã","ã":"ãã","ã¿":"ã³ã","ã±":"á","ã²":"á","ã³":"áª","ã´":"á","ãµ":"á¬","ã¶":"á­","ã·":"á","ã¸":"á","ã¹":"á","ãº":"á°","ã»":"á±","ã¼":"á²","ã½":"á³","ã¾":"á´","ã¿":"áµ","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á¡","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á¡","ã":"á¢","ã":"á£","ã":"á¤","ã":"á¥","ã":"á¦","ã":"á§","ã":"á¨","ã":"á©","ã":"áª","ã":"á«","ã":"á¬","ã":"á­","ã":"á®","ã":"á¯","ã":"á°","ã":"á±","ã ":"á²","ã¡":"á³","ã¢":"á´","ã£":"áµ","ã¤":"á ","ã¥":"á","ã¦":"á","ã§":"á","ã¨":"á","ã©":"á","ãª":"á","ã«":"á","ã¬":"á","ã­":"á","ã®":"á","ã¯":"á","ã°":"á","ã±":"á","ã²":"á","ã³":"á ","ã´":"á¢","ãµ":"á£","ã¶":"á§","ã·":"á©","ã¸":"á«","ã¹":"á¬","ãº":"á­","ã»":"á®","ã¼":"á¯","ã½":"á²","ã¾":"á¶","ã¿":"á","ã":"á","ã":"á","ã":"á±","ã":"á²","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á¡","ã":"ä¸","ã":"äº","ã":"ä¸","ã":"å","ã":"ä¸","ã":"ä¸­","ã":"ä¸","ã":"ç²","ã":"ä¹","ã":"ä¸","ã":"ä¸","ã":"å¤©","ã":"å°","ã":"äºº","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá®)","ã":"(áá©áá¥á«)","ã":"(áá©áá®)","ã ":"(ä¸)","ã¡":"(äº)","ã¢":"(ä¸)","ã£":"(å)","ã¤":"(äº)","ã¥":"(å­)","ã¦":"(ä¸)","ã§":"(å«)","ã¨":"(ä¹)","ã©":"(å)","ãª":"(æ)","ã«":"(ç«)","ã¬":"(æ°´)","ã­":"(æ¨)","ã®":"(é)","ã¯":"(å)","ã°":"(æ¥)","ã±":"(æ ª)","ã²":"(æ)","ã³":"(ç¤¾)","ã´":"(å)","ãµ":"(ç¹)","ã¶":"(è²¡)","ã·":"(ç¥)","ã¸":"(å´)","ã¹":"(ä»£)","ãº":"(å¼)","ã»":"(å­¦)","ã¼":"(ç£)","ã½":"(ä¼)","ã¾":"(è³)","ã¿":"(å)","ã":"(ç¥­)","ã":"(ä¼)","ã":"(èª)","ã":"(è³)","ã":"å","ã":"å¹¼","ã":"æ","ã":"ç®","ã":"PTE","ã":"21","ã":"22","ã":"23","ã":"24","ã":"25","ã":"26","ã":"27","ã":"28","ã":"29","ã":"30","ã":"31","ã":"32","ã":"33","ã":"34","ã":"35","ã ":"á","ã¡":"á","ã¢":"á","ã£":"á","ã¤":"á","ã¥":"á","ã¦":"á","ã§":"á","ã¨":"á","ã©":"á","ãª":"á","ã«":"á","ã¬":"á","ã­":"á","ã®":"áá¡","ã¯":"áá¡","ã°":"áá¡","ã±":"áá¡","ã²":"áá¡","ã³":"áá¡","ã´":"áá¡","ãµ":"áá¡","ã¶":"áá¡","ã·":"áá¡","ã¸":"áá¡","ã¹":"áá¡","ãº":"áá¡","ã»":"áá¡","ã¼":"áá¡á·áá©","ã½":"áá®áá´","ã¾":"áá®","ã":"ä¸","ã":"äº","ã":"ä¸","ã":"å","ã":"äº","ã":"å­","ã":"ä¸","ã":"å«","ã":"ä¹","ã":"å","ã":"æ","ã":"ç«","ã":"æ°´","ã":"æ¨","ã":"é","ã":"å","ã":"æ¥","ã":"æ ª","ã":"æ","ã":"ç¤¾","ã":"å","ã":"ç¹","ã":"è²¡","ã":"ç¥","ã":"å´","ã":"ç§","ã":"ç·","ã":"å¥³","ã":"é©","ã":"åª","ã":"å°","ã":"æ³¨","ã ":"é ","ã¡":"ä¼","ã¢":"å","ã£":"æ­£","ã¤":"ä¸","ã¥":"ä¸­","ã¦":"ä¸","ã§":"å·¦","ã¨":"å³","ã©":"å»","ãª":"å®","ã«":"å­¦","ã¬":"ç£","ã­":"ä¼","ã®":"è³","ã¯":"å","ã°":"å¤","ã±":"36","ã²":"37","ã³":"38","ã´":"39","ãµ":"40","ã¶":"41","ã·":"42","ã¸":"43","ã¹":"44","ãº":"45","ã»":"46","ã¼":"47","ã½":"48","ã¾":"49","ã¿":"50","ã":"1æ","ã":"2æ","ã":"3æ","ã":"4æ","ã":"5æ","ã":"6æ","ã":"7æ","ã":"8æ","ã":"9æ","ã":"10æ","ã":"11æ","ã":"12æ","ã":"Hg","ã":"erg","ã":"eV","ã":"LTD","ã":"ã¢","ã":"ã¤","ã":"ã¦","ã":"ã¨","ã":"ãª","ã":"ã«","ã":"ã­","ã":"ã¯","ã":"ã±","ã":"ã³","ã":"ãµ","ã":"ã·","ã":"ã¹","ã":"ã»","ã":"ã½","ã":"ã¿","ã ":"ã","ã¡":"ã","ã¢":"ã","ã£":"ã","ã¤":"ã","ã¥":"ã","ã¦":"ã","ã§":"ã","ã¨":"ã","ã©":"ã","ãª":"ã","ã«":"ã","ã¬":"ã","ã­":"ã","ã®":"ã","ã¯":"ã","ã°":"ã ","ã±":"ã¡","ã²":"ã¢","ã³":"ã¤","ã´":"ã¦","ãµ":"ã¨","ã¶":"ã©","ã·":"ãª","ã¸":"ã«","ã¹":"ã¬","ãº":"ã­","ã»":"ã¯","ã¼":"ã°","ã½":"ã±","ã¾":"ã²","ã":"ã¢ããã¼ã","ã":"ã¢ã«ãã¡","ã":"ã¢ã³ããã¢","ã":"ã¢ã¼ã«","ã":"ã¤ãã³ã¯ã","ã":"ã¤ã³ã","ã":"ã¦ã©ã³","ã":"ã¨ã¹ã¯ã¼ãã","ã":"ã¨ã¼ã«ã¼","ã":"ãªã³ã¹","ã":"ãªã¼ã ","ã":"ã«ã¤ãª","ã":"ã«ã©ãã","ã":"ã«ã­ãªã¼","ã":"ã«ãã­ã³","ã":"ã«ãã³ã","ã":"ã­ãã«ã","ã":"ã­ããã¼","ã":"ã­ã¥ãªã¼","ã":"ã­ãã«ã¿ãã¼","ã":"ã­ã­","ã":"ã­ã­ã¯ãã©ã ","ã":"ã­ã­ã¡ã¼ãã«","ã":"ã­ã­ã¯ãã","ã":"ã¯ãã©ã ","ã":"ã¯ãã©ã ãã³","ã":"ã¯ã«ã»ãã¤ã­","ã":"ã¯ã­ã¼ã","ã":"ã±ã¼ã¹","ã":"ã³ã«ã","ã":"ã³ã¼ãã","ã":"ãµã¤ã¯ã«","ã ":"ãµã³ãã¼ã ","ã¡":"ã·ãªã³ã¯ã","ã¢":"ã»ã³ã","ã£":"ã»ã³ã","ã¤":"ã¿ãã¼ã¹","ã¥":"ããã·","ã¦":"ããã«","ã§":"ãã³","ã¨":"ãã","ã©":"ããã","ãª":"ãã¤ã","ã«":"ããã¼ã»ã³ã","ã¬":"ããã¼ã","ã­":"ããã¼ã¬ã«","ã®":"ããã¢ã¹ãã«","ã¯":"ããã¯ã«","ã°":"ããã³","ã±":"ããã«","ã²":"ãã¡ã©ããã","ã³":"ãã£ã¼ã","ã´":"ãããã·ã§ã«","ãµ":"ãã©ã³","ã¶":"ãã¯ã¿ã¼ã«","ã·":"ããã½","ã¸":"ãããã","ã¹":"ãã«ã","ãº":"ããã³ã¹","ã»":"ããã¼ã·ã","ã¼":"ããã¼ã¿","ã½":"ããã¤ã³ã","ã¾":"ããã«ã","ã¿":"ãã³","ã":"ããã³ãã","ã":"ãã¼ã«","ã":"ãã¼ã³","ã":"ãã¤ã¯ã­","ã":"ãã¤ã«","ã":"ããã","ã":"ãã«ã¯","ã":"ãã³ã·ã§ã³","ã":"ãã¯ã­ã³","ã":"ããª","ã":"ããªããã¼ã«","ã":"ã¡ã«ã","ã":"ã¡ã«ããã³","ã":"ã¡ã¼ãã«","ã":"ã¤ã¼ãã","ã":"ã¤ã¼ã«","ã":"ã¦ã¢ã³","ã":"ãªããã«","ã":"ãªã©","ã":"ã«ããã¼","ã":"ã«ã¼ããã«","ã":"ã¬ã ","ã":"ã¬ã³ãã±ãã³","ã":"ã¯ãã","ã":"0ç¹","ã":"1ç¹","ã":"2ç¹","ã":"3ç¹","ã":"4ç¹","ã":"5ç¹","ã":"6ç¹","ã":"7ç¹","ã ":"8ç¹","ã¡":"9ç¹","ã¢":"10ç¹","ã£":"11ç¹","ã¤":"12ç¹","ã¥":"13ç¹","ã¦":"14ç¹","ã§":"15ç¹","ã¨":"16ç¹","ã©":"17ç¹","ãª":"18ç¹","ã«":"19ç¹","ã¬":"20ç¹","ã­":"21ç¹","ã®":"22ç¹","ã¯":"23ç¹","ã°":"24ç¹","ã±":"hPa","ã²":"da","ã³":"AU","ã´":"bar","ãµ":"oV","ã¶":"pc","ã·":"dm","ã¸":"dm2","ã¹":"dm3","ãº":"IU","ã»":"å¹³æ","ã¼":"æ­å","ã½":"å¤§æ­£","ã¾":"ææ²»","ã¿":"æ ªå¼ä¼ç¤¾","ã":"pA","ã":"nA","ã":"Î¼A","ã":"mA","ã":"kA","ã":"KB","ã":"MB","ã":"GB","ã":"cal","ã":"kcal","ã":"pF","ã":"nF","ã":"Î¼F","ã":"Î¼g","ã":"mg","ã":"kg","ã":"Hz","ã":"kHz","ã":"MHz","ã":"GHz","ã":"THz","ã":"Î¼l","ã":"ml","ã":"dl","ã":"kl","ã":"fm","ã":"nm","ã":"Î¼m","ã":"mm","ã":"cm","ã":"km","ã":"mm2","ã ":"cm2","ã¡":"m2","ã¢":"km2","ã£":"mm3","ã¤":"cm3","ã¥":"m3","ã¦":"km3","ã§":"mâs","ã¨":"mâs2","ã©":"Pa","ãª":"kPa","ã«":"MPa","ã¬":"GPa","ã­":"rad","ã®":"radâs","ã¯":"radâs2","ã°":"ps","ã±":"ns","ã²":"Î¼s","ã³":"ms","ã´":"pV","ãµ":"nV","ã¶":"Î¼V","ã·":"mV","ã¸":"kV","ã¹":"MV","ãº":"pW","ã»":"nW","ã¼":"Î¼W","ã½":"mW","ã¾":"kW","ã¿":"MW","ã":"kÎ©","ã":"MÎ©","ã":"a.m.","ã":"Bq","ã":"cc","ã":"cd","ã":"Câkg","ã":"Co.","ã":"dB","ã":"Gy","ã":"ha","ã":"HP","ã":"in","ã":"KK","ã":"KM","ã":"kt","ã":"lm","ã":"ln","ã":"log","ã":"lx","ã":"mb","ã":"mil","ã":"mol","ã":"PH","ã":"p.m.","ã":"PPM","ã":"PR","ã":"sr","ã":"Sv","ã":"Wb","ã":"Vâm","ã":"Aâm","ã ":"1æ¥","ã¡":"2æ¥","ã¢":"3æ¥","ã£":"4æ¥","ã¤":"5æ¥","ã¥":"6æ¥","ã¦":"7æ¥","ã§":"8æ¥","ã¨":"9æ¥","ã©":"10æ¥","ãª":"11æ¥","ã«":"12æ¥","ã¬":"13æ¥","ã­":"14æ¥","ã®":"15æ¥","ã¯":"16æ¥","ã°":"17æ¥","ã±":"18æ¥","ã²":"19æ¥","ã³":"20æ¥","ã´":"21æ¥","ãµ":"22æ¥","ã¶":"23æ¥","ã·":"24æ¥","ã¸":"25æ¥","ã¹":"26æ¥","ãº":"27æ¥","ã»":"28æ¥","ã¼":"29æ¥","ã½":"30æ¥","ã¾":"31æ¥","ã¿":"gal","ê°":"ê¯","ê¸":"Ä¦","ê¹":"Å","ï¬":"ff","ï¬":"fi","ï¬":"fl","ï¬":"ffi","ï¬":"ffl","ï¬":"st","ï¬":"st","ï¬":"Õ´Õ¶","ï¬":"Õ´Õ¥","ï¬":"Õ´Õ«","ï¬":"Õ¾Õ¶","ï¬":"Õ´Õ­","ï¬ ":"×¢","ï¬¡":"×","ï¬¢":"×","ï¬£":"×","ï¬¤":"×","ï¬¥":"×","ï¬¦":"×","ï¬§":"×¨","ï¬¨":"×ª","ï¬©":"+","ï­":"××","ï­":"Ù±","ï­":"Ù±","ï­":"Ù»","ï­":"Ù»","ï­":"Ù»","ï­":"Ù»","ï­":"Ù¾","ï­":"Ù¾","ï­":"Ù¾","ï­":"Ù¾","ï­":"Ú","ï­":"Ú","ï­":"Ú","ï­":"Ú","ï­":"Ùº","ï­":"Ùº","ï­ ":"Ùº","ï­¡":"Ùº","ï­¢":"Ù¿","ï­£":"Ù¿","ï­¤":"Ù¿","ï­¥":"Ù¿","ï­¦":"Ù¹","ï­§":"Ù¹","ï­¨":"Ù¹","ï­©":"Ù¹","ï­ª":"Ú¤","ï­«":"Ú¤","ï­¬":"Ú¤","ï­­":"Ú¤","ï­®":"Ú¦","ï­¯":"Ú¦","ï­°":"Ú¦","ï­±":"Ú¦","ï­²":"Ú","ï­³":"Ú","ï­´":"Ú","ï­µ":"Ú","ï­¶":"Ú","ï­·":"Ú","ï­¸":"Ú","ï­¹":"Ú","ï­º":"Ú","ï­»":"Ú","ï­¼":"Ú","ï­½":"Ú","ï­¾":"Ú","ï­¿":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú©","ï®":"Ú©","ï®":"Ú©","ï®":"Ú©","ï®":"Ú¯","ï®":"Ú¯","ï®":"Ú¯","ï®":"Ú¯","ï®":"Ú³","ï®":"Ú³","ï®":"Ú³","ï®":"Ú³","ï®":"Ú±","ï®":"Ú±","ï®":"Ú±","ï®":"Ú±","ï®":"Úº","ï®":"Úº","ï® ":"Ú»","ï®¡":"Ú»","ï®¢":"Ú»","ï®£":"Ú»","ï®¤":"ÛÙ","ï®¥":"ÛÙ","ï®¦":"Û","ï®§":"Û","ï®¨":"Û","ï®©":"Û","ï®ª":"Ú¾","ï®«":"Ú¾","ï®¬":"Ú¾","ï®­":"Ú¾","ï®®":"Û","ï®¯":"Û","ï®°":"ÛÙ","ï®±":"ÛÙ","ï¯":"Ú­","ï¯":"Ú­","ï¯":"Ú­","ï¯":"Ú­","ï¯":"Û","ï¯":"Û","ï¯":"Û","ï¯":"Û","ï¯":"Û","ï¯":"Û","ï¯":"ÛÙ´","ï¯":"Û","ï¯":"Û","ï¯ ":"Û","ï¯¡":"Û","ï¯¢":"Û","ï¯£":"Û","ï¯¤":"Û","ï¯¥":"Û","ï¯¦":"Û","ï¯§":"Û","ï¯¨":"Ù","ï¯©":"Ù","ï¯ª":"ÙÙØ§","ï¯«":"ÙÙØ§","ï¯¬":"ÙÙÛ","ï¯­":"ÙÙÛ","ï¯®":"ÙÙÙ","ï¯¯":"ÙÙÙ","ï¯°":"ÙÙÛ","ï¯±":"ÙÙÛ","ï¯²":"ÙÙÛ","ï¯³":"ÙÙÛ","ï¯´":"ÙÙÛ","ï¯µ":"ÙÙÛ","ï¯¶":"ÙÙÛ","ï¯·":"ÙÙÛ","ï¯¸":"ÙÙÛ","ï¯¹":"ÙÙÙ","ï¯º":"ÙÙÙ","ï¯»":"ÙÙÙ","ï¯¼":"Û","ï¯½":"Û","ï¯¾":"Û","ï¯¿":"Û","ï°":"ÙÙØ¬","ï°":"ÙÙØ­","ï°":"ÙÙÙ","ï°":"ÙÙÙ","ï°":"ÙÙÙ","ï°":"Ø¨Ø¬","ï°":"Ø¨Ø­","ï°":"Ø¨Ø®","ï°":"Ø¨Ù","ï°":"Ø¨Ù","ï°":"Ø¨Ù","ï°":"ØªØ¬","ï°":"ØªØ­","ï°":"ØªØ®","ï°":"ØªÙ","ï°":"ØªÙ","ï°":"ØªÙ","ï°":"Ø«Ø¬","ï°":"Ø«Ù","ï°":"Ø«Ù","ï°":"Ø«Ù","ï°":"Ø¬Ø­","ï°":"Ø¬Ù","ï°":"Ø­Ø¬","ï°":"Ø­Ù","ï°":"Ø®Ø¬","ï°":"Ø®Ø­","ï°":"Ø®Ù","ï°":"Ø³Ø¬","ï°":"Ø³Ø­","ï°":"Ø³Ø®","ï°":"Ø³Ù","ï° ":"ØµØ­","ï°¡":"ØµÙ","ï°¢":"Ø¶Ø¬","ï°£":"Ø¶Ø­","ï°¤":"Ø¶Ø®","ï°¥":"Ø¶Ù","ï°¦":"Ø·Ø­","ï°§":"Ø·Ù","ï°¨":"Ø¸Ù","ï°©":"Ø¹Ø¬","ï°ª":"Ø¹Ù","ï°«":"ØºØ¬","ï°¬":"ØºÙ","ï°­":"ÙØ¬","ï°®":"ÙØ­","ï°¯":"ÙØ®","ï°°":"ÙÙ","ï°±":"ÙÙ","ï°²":"ÙÙ","ï°³":"ÙØ­","ï°´":"ÙÙ","ï°µ":"ÙÙ","ï°¶":"ÙÙ","ï°·":"ÙØ§","ï°¸":"ÙØ¬","ï°¹":"ÙØ­","ï°º":"ÙØ®","ï°»":"ÙÙ","ï°¼":"ÙÙ","ï°½":"ÙÙ","ï°¾":"ÙÙ","ï°¿":"ÙØ¬","ï±":"ÙØ­","ï±":"ÙØ®","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙØ¬","ï±":"ÙØ­","ï±":"ÙØ®","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙØ¬","ï±":"ÙØ­","ï±":"ÙØ®","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙØ¬","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙØ¬","ï±":"ÙØ­","ï±":"ÙØ®","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"Ø°Ù°","ï±":"Ø±Ù°","ï±":"ÙÙ°","ï±":" ÙÙ","ï±":" ÙÙ","ï± ":" ÙÙ","ï±¡":" ÙÙ","ï±¢":" ÙÙ","ï±£":" ÙÙ°","ï±¤":"ÙÙØ±","ï±¥":"ÙÙØ²","ï±¦":"ÙÙÙ","ï±§":"ÙÙÙ","ï±¨":"ÙÙÙ","ï±©":"ÙÙÙ","ï±ª":"Ø¨Ø±","ï±«":"Ø¨Ø²","ï±¬":"Ø¨Ù","ï±­":"Ø¨Ù","ï±®":"Ø¨Ù","ï±¯":"Ø¨Ù","ï±°":"ØªØ±","ï±±":"ØªØ²","ï±²":"ØªÙ","ï±³":"ØªÙ","ï±´":"ØªÙ","ï±µ":"ØªÙ","ï±¶":"Ø«Ø±","ï±·":"Ø«Ø²","ï±¸":"Ø«Ù","ï±¹":"Ø«Ù","ï±º":"Ø«Ù","ï±»":"Ø«Ù","ï±¼":"ÙÙ","ï±½":"ÙÙ","ï±¾":"ÙÙ","ï±¿":"ÙÙ","ï²":"ÙØ§","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙØ§","ï²":"ÙÙ","ï²":"ÙØ±","ï²":"ÙØ²","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ°","ï²":"ÙØ±","ï²":"ÙØ²","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙØ¬","ï²":"ÙÙØ­","ï²":"ÙÙØ®","ï²":"ÙÙÙ","ï²":"ÙÙÙ","ï²":"Ø¨Ø¬","ï²":"Ø¨Ø­","ï²":"Ø¨Ø®","ï²":"Ø¨Ù","ï² ":"Ø¨Ù","ï²¡":"ØªØ¬","ï²¢":"ØªØ­","ï²£":"ØªØ®","ï²¤":"ØªÙ","ï²¥":"ØªÙ","ï²¦":"Ø«Ù","ï²§":"Ø¬Ø­","ï²¨":"Ø¬Ù","ï²©":"Ø­Ø¬","ï²ª":"Ø­Ù","ï²«":"Ø®Ø¬","ï²¬":"Ø®Ù","ï²­":"Ø³Ø¬","ï²®":"Ø³Ø­","ï²¯":"Ø³Ø®","ï²°":"Ø³Ù","ï²±":"ØµØ­","ï²²":"ØµØ®","ï²³":"ØµÙ","ï²´":"Ø¶Ø¬","ï²µ":"Ø¶Ø­","ï²¶":"Ø¶Ø®","ï²·":"Ø¶Ù","ï²¸":"Ø·Ø­","ï²¹":"Ø¸Ù","ï²º":"Ø¹Ø¬","ï²»":"Ø¹Ù","ï²¼":"ØºØ¬","ï²½":"ØºÙ","ï²¾":"ÙØ¬","ï²¿":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙØ­","ï³":"ÙÙ","ï³":"ÙØ¬","ï³":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙÙ","ï³":"ÙØ¬","ï³":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙÙ","ï³":"ÙØ¬","ï³":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙØ¬","ï³":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙÙ","ï³":"ÙØ¬","ï³":"ÙÙ","ï³":"ÙÙ°","ï³":"ÙØ¬","ï³":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙÙ","ï³":"ÙÙÙ","ï³ ":"ÙÙÙ","ï³¡":"Ø¨Ù","ï³¢":"Ø¨Ù","ï³£":"ØªÙ","ï³¤":"ØªÙ","ï³¥":"Ø«Ù","ï³¦":"Ø«Ù","ï³§":"Ø³Ù","ï³¨":"Ø³Ù","ï³©":"Ø´Ù","ï³ª":"Ø´Ù","ï³«":"ÙÙ","ï³¬":"ÙÙ","ï³­":"ÙÙ","ï³®":"ÙÙ","ï³¯":"ÙÙ","ï³°":"ÙÙ","ï³±":"ÙÙ","ï³²":"ÙÙÙ","ï³³":"ÙÙÙ","ï³´":"ÙÙÙ","ï³µ":"Ø·Ù","ï³¶":"Ø·Ù","ï³·":"Ø¹Ù","ï³¸":"Ø¹Ù","ï³¹":"ØºÙ","ï³º":"ØºÙ","ï³»":"Ø³Ù","ï³¼":"Ø³Ù","ï³½":"Ø´Ù","ï³¾":"Ø´Ù","ï³¿":"Ø­Ù","ï´":"Ø­Ù","ï´":"Ø¬Ù","ï´":"Ø¬Ù","ï´":"Ø®Ù","ï´":"Ø®Ù","ï´":"ØµÙ","ï´":"ØµÙ","ï´":"Ø¶Ù","ï´":"Ø¶Ù","ï´":"Ø´Ø¬","ï´":"Ø´Ø­","ï´":"Ø´Ø®","ï´":"Ø´Ù","ï´":"Ø´Ø±","ï´":"Ø³Ø±","ï´":"ØµØ±","ï´":"Ø¶Ø±","ï´":"Ø·Ù","ï´":"Ø·Ù","ï´":"Ø¹Ù","ï´":"Ø¹Ù","ï´":"ØºÙ","ï´":"ØºÙ","ï´":"Ø³Ù","ï´":"Ø³Ù","ï´":"Ø´Ù","ï´":"Ø´Ù","ï´":"Ø­Ù","ï´":"Ø­Ù","ï´":"Ø¬Ù","ï´":"Ø¬Ù","ï´":"Ø®Ù","ï´ ":"Ø®Ù","ï´¡":"ØµÙ","ï´¢":"ØµÙ","ï´£":"Ø¶Ù","ï´¤":"Ø¶Ù","ï´¥":"Ø´Ø¬","ï´¦":"Ø´Ø­","ï´§":"Ø´Ø®","ï´¨":"Ø´Ù","ï´©":"Ø´Ø±","ï´ª":"Ø³Ø±","ï´«":"ØµØ±","ï´¬":"Ø¶Ø±","ï´­":"Ø´Ø¬","ï´®":"Ø´Ø­","ï´¯":"Ø´Ø®","ï´°":"Ø´Ù","ï´±":"Ø³Ù","ï´²":"Ø´Ù","ï´³":"Ø·Ù","ï´´":"Ø³Ø¬","ï´µ":"Ø³Ø­","ï´¶":"Ø³Ø®","ï´·":"Ø´Ø¬","ï´¸":"Ø´Ø­","ï´¹":"Ø´Ø®","ï´º":"Ø·Ù","ï´»":"Ø¸Ù","ï´¼":"Ø§Ù","ï´½":"Ø§Ù","ïµ":"ØªØ¬Ù","ïµ":"ØªØ­Ø¬","ïµ":"ØªØ­Ø¬","ïµ":"ØªØ­Ù","ïµ":"ØªØ®Ù","ïµ":"ØªÙØ¬","ïµ":"ØªÙØ­","ïµ":"ØªÙØ®","ïµ":"Ø¬ÙØ­","ïµ":"Ø¬ÙØ­","ïµ":"Ø­ÙÙ","ïµ":"Ø­ÙÙ","ïµ":"Ø³Ø­Ø¬","ïµ":"Ø³Ø¬Ø­","ïµ":"Ø³Ø¬Ù","ïµ":"Ø³ÙØ­","ïµ ":"Ø³ÙØ­","ïµ¡":"Ø³ÙØ¬","ïµ¢":"Ø³ÙÙ","ïµ£":"Ø³ÙÙ","ïµ¤":"ØµØ­Ø­","ïµ¥":"ØµØ­Ø­","ïµ¦":"ØµÙÙ","ïµ§":"Ø´Ø­Ù","ïµ¨":"Ø´Ø­Ù","ïµ©":"Ø´Ø¬Ù","ïµª":"Ø´ÙØ®","ïµ«":"Ø´ÙØ®","ïµ¬":"Ø´ÙÙ","ïµ­":"Ø´ÙÙ","ïµ®":"Ø¶Ø­Ù","ïµ¯":"Ø¶Ø®Ù","ïµ°":"Ø¶Ø®Ù","ïµ±":"Ø·ÙØ­","ïµ²":"Ø·ÙØ­","ïµ³":"Ø·ÙÙ","ïµ´":"Ø·ÙÙ","ïµµ":"Ø¹Ø¬Ù","ïµ¶":"Ø¹ÙÙ","ïµ·":"Ø¹ÙÙ","ïµ¸":"Ø¹ÙÙ","ïµ¹":"ØºÙÙ","ïµº":"ØºÙÙ","ïµ»":"ØºÙÙ","ïµ¼":"ÙØ®Ù","ïµ½":"ÙØ®Ù","ïµ¾":"ÙÙØ­","ïµ¿":"ÙÙÙ","ï¶":"ÙØ­Ù","ï¶":"ÙØ­Ù","ï¶":"ÙØ­Ù","ï¶":"ÙØ¬Ø¬","ï¶":"ÙØ¬Ø¬","ï¶":"ÙØ®Ù","ï¶":"ÙØ®Ù","ï¶":"ÙÙØ­","ï¶":"ÙÙØ­","ï¶":"ÙØ­Ø¬","ï¶":"ÙØ­Ù","ï¶":"ÙØ­Ù","ï¶":"ÙØ¬Ø­","ï¶":"ÙØ¬Ù","ï¶":"ÙØ®Ø¬","ï¶":"ÙØ®Ù","ï¶":"ÙØ¬Ø®","ï¶":"ÙÙØ¬","ï¶":"ÙÙÙ","ï¶":"ÙØ­Ù","ï¶":"ÙØ­Ù","ï¶":"ÙØ¬Ù","ï¶":"ÙØ¬Ù","ï¶":"ÙØ¬Ù","ï¶":"ÙÙÙ","ï¶":"ÙÙÙ","ï¶":"ÙÙÙ","ï¶":"ÙÙÙ","ï¶":"Ø¨Ø®Ù","ï¶":"ØªØ¬Ù","ï¶ ":"ØªØ¬Ù","ï¶¡":"ØªØ®Ù","ï¶¢":"ØªØ®Ù","ï¶£":"ØªÙÙ","ï¶¤":"ØªÙÙ","ï¶¥":"Ø¬ÙÙ","ï¶¦":"Ø¬Ø­Ù","ï¶§":"Ø¬ÙÙ","ï¶¨":"Ø³Ø®Ù","ï¶©":"ØµØ­Ù","ï¶ª":"Ø´Ø­Ù","ï¶«":"Ø¶Ø­Ù","ï¶¬":"ÙØ¬Ù","ï¶­":"ÙÙÙ","ï¶®":"ÙØ­Ù","ï¶¯":"ÙØ¬Ù","ï¶°":"ÙÙÙ","ï¶±":"ÙÙÙ","ï¶²":"ÙÙÙ","ï¶³":"ÙØ­Ù","ï¶´":"ÙÙØ­","ï¶µ":"ÙØ­Ù","ï¶¶":"Ø¹ÙÙ","ï¶·":"ÙÙÙ","ï¶¸":"ÙØ¬Ø­","ï¶¹":"ÙØ®Ù","ï¶º":"ÙØ¬Ù","ï¶»":"ÙÙÙ","ï¶¼":"ÙØ¬Ù","ï¶½":"ÙØ¬Ø­","ï¶¾":"Ø¬Ø­Ù","ï¶¿":"Ø­Ø¬Ù","ï·":"ÙØ¬Ù","ï·":"ÙÙÙ","ï·":"Ø¨Ø­Ù","ï·":"ÙÙÙ","ï·":"Ø¹Ø¬Ù","ï·":"ØµÙÙ","ï·":"Ø³Ø®Ù","ï·":"ÙØ¬Ù","ï·°":"ØµÙÛ","ï·±":"ÙÙÛ","ï·²":"Ø§ÙÙÙ","ï·³":"Ø§ÙØ¨Ø±","ï·´":"ÙØ­ÙØ¯","ï·µ":"ØµÙØ¹Ù","ï·¶":"Ø±Ø³ÙÙ","ï··":"Ø¹ÙÙÙ","ï·¸":"ÙØ³ÙÙ","ï·¹":"ØµÙÙ","ï·º":"ØµÙÙ Ø§ÙÙÙ Ø¹ÙÙÙ ÙØ³ÙÙ","ï·»":"Ø¬Ù Ø¬ÙØ§ÙÙ","ï·¼":"Ø±ÛØ§Ù","ï¸":",","ï¸":"ã","ï¸":"ã","ï¸":":","ï¸":";","ï¸":"!","ï¸":"?","ï¸":"ã","ï¸":"ã","ï¸":"...","ï¸°":"..","ï¸±":"â","ï¸²":"â","ï¸³":"_","ï¸´":"_","ï¸µ":"(","ï¸¶":")","ï¸·":"{","ï¸¸":"}","ï¸¹":"ã","ï¸º":"ã","ï¸»":"ã","ï¸¼":"ã","ï¸½":"ã","ï¸¾":"ã","ï¸¿":"ã","ï¹":"ã","ï¹":"ã","ï¹":"ã","ï¹":"ã","ï¹":"ã","ï¹":"[","ï¹":"]","ï¹":" Ì","ï¹":" Ì","ï¹":" Ì","ï¹":" Ì","ï¹":"_","ï¹":"_","ï¹":"_","ï¹":",","ï¹":"ã","ï¹":".","ï¹":";","ï¹":":","ï¹":"?","ï¹":"!","ï¹":"â","ï¹":"(","ï¹":")","ï¹":"{","ï¹":"}","ï¹":"ã","ï¹":"ã","ï¹":"#","ï¹ ":"&","ï¹¡":"*","ï¹¢":"+","ï¹£":"-","ï¹¤":"<","ï¹¥":">","ï¹¦":"=","ï¹¨":"\\","ï¹©":"$","ï¹ª":"%","ï¹«":"@","ï¹°":" Ù","ï¹±":"ÙÙ","ï¹²":" Ù","ï¹´":" Ù","ï¹¶":" Ù","ï¹·":"ÙÙ","ï¹¸":" Ù","ï¹¹":"ÙÙ","ï¹º":" Ù","ï¹»":"ÙÙ","ï¹¼":" Ù","ï¹½":"ÙÙ","ï¹¾":" Ù","ï¹¿":"ÙÙ","ïº":"Ø¡","ïº":"Ø§Ù","ïº":"Ø§Ù","ïº":"Ø§Ù","ïº":"Ø§Ù","ïº":"ÙÙ","ïº":"ÙÙ","ïº":"Ø§Ù","ïº":"Ø§Ù","ïº":"ÙÙ","ïº":"ÙÙ","ïº":"ÙÙ","ïº":"ÙÙ","ïº":"Ø§","ïº":"Ø§","ïº":"Ø¨","ïº":"Ø¨","ïº":"Ø¨","ïº":"Ø¨","ïº":"Ø©","ïº":"Ø©","ïº":"Øª","ïº":"Øª","ïº":"Øª","ïº":"Øª","ïº":"Ø«","ïº":"Ø«","ïº":"Ø«","ïº":"Ø«","ïº":"Ø¬","ïº":"Ø¬","ïº":"Ø¬","ïº ":"Ø¬","ïº¡":"Ø­","ïº¢":"Ø­","ïº£":"Ø­","ïº¤":"Ø­","ïº¥":"Ø®","ïº¦":"Ø®","ïº§":"Ø®","ïº¨":"Ø®","ïº©":"Ø¯","ïºª":"Ø¯","ïº«":"Ø°","ïº¬":"Ø°","ïº­":"Ø±","ïº®":"Ø±","ïº¯":"Ø²","ïº°":"Ø²","ïº±":"Ø³","ïº²":"Ø³","ïº³":"Ø³","ïº´":"Ø³","ïºµ":"Ø´","ïº¶":"Ø´","ïº·":"Ø´","ïº¸":"Ø´","ïº¹":"Øµ","ïºº":"Øµ","ïº»":"Øµ","ïº¼":"Øµ","ïº½":"Ø¶","ïº¾":"Ø¶","ïº¿":"Ø¶","ï»":"Ø¶","ï»":"Ø·","ï»":"Ø·","ï»":"Ø·","ï»":"Ø·","ï»":"Ø¸","ï»":"Ø¸","ï»":"Ø¸","ï»":"Ø¸","ï»":"Ø¹","ï»":"Ø¹","ï»":"Ø¹","ï»":"Ø¹","ï»":"Øº","ï»":"Øº","ï»":"Øº","ï»":"Øº","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï» ":"Ù","ï»¡":"Ù","ï»¢":"Ù","ï»£":"Ù","ï»¤":"Ù","ï»¥":"Ù","ï»¦":"Ù","ï»§":"Ù","ï»¨":"Ù","ï»©":"Ù","ï»ª":"Ù","ï»«":"Ù","ï»¬":"Ù","ï»­":"Ù","ï»®":"Ù","ï»¯":"Ù","ï»°":"Ù","ï»±":"Ù","ï»²":"Ù","ï»³":"Ù","ï»´":"Ù","ï»µ":"ÙØ§Ù","ï»¶":"ÙØ§Ù","ï»·":"ÙØ§Ù","ï»¸":"ÙØ§Ù","ï»¹":"ÙØ§Ù","ï»º":"ÙØ§Ù","ï»»":"ÙØ§","ï»¼":"ÙØ§","ï¼":"!","ï¼":"\"","ï¼":"#","ï¼":"$","ï¼":"%","ï¼":"&","ï¼":"'","ï¼":"(","ï¼":")","ï¼":"*","ï¼":"+","ï¼":",","ï¼":"-","ï¼":".","ï¼":"/","ï¼":"0","ï¼":"1","ï¼":"2","ï¼":"3","ï¼":"4","ï¼":"5","ï¼":"6","ï¼":"7","ï¼":"8","ï¼":"9","ï¼":":","ï¼":";","ï¼":"<","ï¼":"=","ï¼":">","ï¼":"?","ï¼ ":"@","ï¼¡":"A","ï¼¢":"B","ï¼£":"C","ï¼¤":"D","ï¼¥":"E","ï¼¦":"F","ï¼§":"G","ï¼¨":"H","ï¼©":"I","ï¼ª":"J","ï¼«":"K","ï¼¬":"L","ï¼­":"M","ï¼®":"N","ï¼¯":"O","ï¼°":"P","ï¼±":"Q","ï¼²":"R","ï¼³":"S","ï¼´":"T","ï¼µ":"U","ï¼¶":"V","ï¼·":"W","ï¼¸":"X","ï¼¹":"Y","ï¼º":"Z","ï¼»":"[","ï¼¼":"\\","ï¼½":"]","ï¼¾":"^","ï¼¿":"_","ï½":"`","ï½":"a","ï½":"b","ï½":"c","ï½":"d","ï½":"e","ï½":"f","ï½":"g","ï½":"h","ï½":"i","ï½":"j","ï½":"k","ï½":"l","ï½":"m","ï½":"n","ï½":"o","ï½":"p","ï½":"q","ï½":"r","ï½":"s","ï½":"t","ï½":"u","ï½":"v","ï½":"w","ï½":"x","ï½":"y","ï½":"z","ï½":"{","ï½":"|","ï½":"}","ï½":"~","ï½":"â¦","ï½ ":"â¦","ï½¡":"ã","ï½¢":"ã","ï½£":"ã","ï½¤":"ã","ï½¥":"ã»","ï½¦":"ã²","ï½§":"ã¡","ï½¨":"ã£","ï½©":"ã¥","ï½ª":"ã§","ï½«":"ã©","ï½¬":"ã£","ï½­":"ã¥","ï½®":"ã§","ï½¯":"ã","ï½°":"ã¼","ï½±":"ã¢","ï½²":"ã¤","ï½³":"ã¦","ï½´":"ã¨","ï½µ":"ãª","ï½¶":"ã«","ï½·":"ã­","ï½¸":"ã¯","ï½¹":"ã±","ï½º":"ã³","ï½»":"ãµ","ï½¼":"ã·","ï½½":"ã¹","ï½¾":"ã»","ï½¿":"ã½","ï¾":"ã¿","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã ","ï¾":"ã¡","ï¾":"ã¢","ï¾":"ã¤","ï¾":"ã¦","ï¾":"ã¨","ï¾":"ã©","ï¾":"ãª","ï¾":"ã«","ï¾":"ã¬","ï¾":"ã­","ï¾":"ã¯","ï¾":"ã³","ï¾":"ã","ï¾":"ã","ï¾ ":"á ","ï¾¡":"á","ï¾¢":"á","ï¾£":"áª","ï¾¤":"á","ï¾¥":"á¬","ï¾¦":"á­","ï¾§":"á","ï¾¨":"á","ï¾©":"á","ï¾ª":"á°","ï¾«":"á±","ï¾¬":"á²","ï¾­":"á³","ï¾®":"á´","ï¾¯":"áµ","ï¾°":"á","ï¾±":"á","ï¾²":"á","ï¾³":"á","ï¾´":"á¡","ï¾µ":"á","ï¾¶":"á","ï¾·":"á","ï¾¸":"á","ï¾¹":"á","ï¾º":"á","ï¾»":"á","ï¾¼":"á","ï¾½":"á","ï¾¾":"á","ï¿":"á¡","ï¿":"á¢","ï¿":"á£","ï¿":"á¤","ï¿":"á¥","ï¿":"á¦","ï¿":"á§","ï¿":"á¨","ï¿":"á©","ï¿":"áª","ï¿":"á«","ï¿":"á¬","ï¿":"á­","ï¿":"á®","ï¿":"á¯","ï¿":"á°","ï¿":"á±","ï¿":"á²","ï¿":"á³","ï¿":"á´","ï¿":"áµ","ï¿ ":"Â¢","ï¿¡":"Â£","ï¿¢":"Â¬","ï¿£":" Ì","ï¿¤":"Â¦","ï¿¥":"Â¥","ï¿¦":"â©","ï¿¨":"â","ï¿©":"â","ï¿ª":"â","ï¿«":"â","ï¿¬":"â","ï¿­":"â ","ï¿®":"â","ð":"A","ð":"B","ð":"C","ð":"D","ð":"E","ð":"F","ð":"G","ð":"H","ð":"I","ð":"J","ð":"K","ð":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð ":"g","ð¡":"h","ð¢":"i","ð£":"j","ð¤":"k","ð¥":"l","ð¦":"m","ð§":"n","ð¨":"o","ð©":"p","ðª":"q","ð«":"r","ð¬":"s","ð­":"t","ð®":"u","ð¯":"v","ð°":"w","ð±":"x","ð²":"y","ð³":"z","ð´":"A","ðµ":"B","ð¶":"C","ð·":"D","ð¸":"E","ð¹":"F","ðº":"G","ð»":"H","ð¼":"I","ð½":"J","ð¾":"K","ð¿":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"o","ð":"p","ð":"q","ð":"r","ð ":"s","ð¡":"t","ð¢":"u","ð£":"v","ð¤":"w","ð¥":"x","ð¦":"y","ð§":"z","ð¨":"A","ð©":"B","ðª":"C","ð«":"D","ð¬":"E","ð­":"F","ð®":"G","ð¯":"H","ð°":"I","ð±":"J","ð²":"K","ð³":"L","ð´":"M","ðµ":"N","ð¶":"O","ð·":"P","ð¸":"Q","ð¹":"R","ðº":"S","ð»":"T","ð¼":"U","ð½":"V","ð¾":"W","ð¿":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"o","ð":"p","ð":"q","ð":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð":"A","ð":"C","ð":"D","ð¢":"G","ð¥":"J","ð¦":"K","ð©":"N","ðª":"O","ð«":"P","ð¬":"Q","ð®":"S","ð¯":"T","ð°":"U","ð±":"V","ð²":"W","ð³":"X","ð´":"Y","ðµ":"Z","ð¶":"a","ð·":"b","ð¸":"c","ð¹":"d","ð»":"f","ð½":"h","ð¾":"i","ð¿":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"p","ð":"q","ð":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð":"A","ð":"B","ð":"C","ð":"D","ð":"E","ð":"F","ð":"G","ð":"H","ð":"I","ð":"J","ð":"K","ð":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð ":"Q","ð¡":"R","ð¢":"S","ð£":"T","ð¤":"U","ð¥":"V","ð¦":"W","ð§":"X","ð¨":"Y","ð©":"Z","ðª":"a","ð«":"b","ð¬":"c","ð­":"d","ð®":"e","ð¯":"f","ð°":"g","ð±":"h","ð²":"i","ð³":"j","ð´":"k","ðµ":"l","ð¶":"m","ð·":"n","ð¸":"o","ð¹":"p","ðº":"q","ð»":"r","ð¼":"s","ð½":"t","ð¾":"u","ð¿":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð":"A","ð":"B","ð":"D","ð":"E","ð":"F","ð":"G","ð":"J","ð":"K","ð":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð":"Q","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"a","ð":"b","ð ":"c","ð¡":"d","ð¢":"e","ð£":"f","ð¤":"g","ð¥":"h","ð¦":"i","ð§":"j","ð¨":"k","ð©":"l","ðª":"m","ð«":"n","ð¬":"o","ð­":"p","ð®":"q","ð¯":"r","ð°":"s","ð±":"t","ð²":"u","ð³":"v","ð´":"w","ðµ":"x","ð¶":"y","ð·":"z","ð¸":"A","ð¹":"B","ð»":"D","ð¼":"E","ð½":"F","ð¾":"G","ð":"I","ð":"J","ð":"K","ð":"L","ð":"M","ð":"O","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð ":"o","ð¡":"p","ð¢":"q","ð£":"r","ð¤":"s","ð¥":"t","ð¦":"u","ð§":"v","ð¨":"w","ð©":"x","ðª":"y","ð«":"z","ð¬":"A","ð­":"B","ð®":"C","ð¯":"D","ð°":"E","ð±":"F","ð²":"G","ð³":"H","ð´":"I","ðµ":"J","ð¶":"K","ð·":"L","ð¸":"M","ð¹":"N","ðº":"O","ð»":"P","ð¼":"Q","ð½":"R","ð¾":"S","ð¿":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"o","ð":"p","ð":"q","ð":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð ":"A","ð¡":"B","ð¢":"C","ð£":"D","ð¤":"E","ð¥":"F","ð¦":"G","ð§":"H","ð¨":"I","ð©":"J","ðª":"K","ð«":"L","ð¬":"M","ð­":"N","ð®":"O","ð¯":"P","ð°":"Q","ð±":"R","ð²":"S","ð³":"T","ð´":"U","ðµ":"V","ð¶":"W","ð·":"X","ð¸":"Y","ð¹":"Z","ðº":"a","ð»":"b","ð¼":"c","ð½":"d","ð¾":"e","ð¿":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"o","ð":"p","ð":"q","ð":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð":"A","ð":"B","ð":"C","ð":"D","ð":"E","ð":"F","ð":"G","ð":"H","ð":"I","ð":"J","ð":"K","ð":"L","ð ":"M","ð¡":"N","ð¢":"O","ð£":"P","ð¤":"Q","ð¥":"R","ð¦":"S","ð§":"T","ð¨":"U","ð©":"V","ðª":"W","ð«":"X","ð¬":"Y","ð­":"Z","ð®":"a","ð¯":"b","ð°":"c","ð±":"d","ð²":"e","ð³":"f","ð´":"g","ðµ":"h","ð¶":"i","ð·":"j","ð¸":"k","ð¹":"l","ðº":"m","ð»":"n","ð¼":"o","ð½":"p","ð¾":"q","ð¿":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð":"A","ð":"B","ð":"C","ð":"D","ð":"E","ð":"F","ð":"G","ð":"H","ð":"I","ð":"J","ð":"K","ð":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð ":"Y","ð¡":"Z","ð¢":"a","ð£":"b","ð¤":"c","ð¥":"d","ð¦":"e","ð§":"f","ð¨":"g","ð©":"h","ðª":"i","ð«":"j","ð¬":"k","ð­":"l","ð®":"m","ð¯":"n","ð°":"o","ð±":"p","ð²":"q","ð³":"r","ð´":"s","ðµ":"t","ð¶":"u","ð·":"v","ð¸":"w","ð¹":"x","ðº":"y","ð»":"z","ð¼":"A","ð½":"B","ð¾":"C","ð¿":"D","ð":"E","ð":"F","ð":"G","ð":"H","ð":"I","ð":"J","ð":"K","ð":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð ":"k","ð¡":"l","ð¢":"m","ð£":"n","ð¤":"o","ð¥":"p","ð¦":"q","ð§":"r","ð¨":"s","ð©":"t","ðª":"u","ð«":"v","ð¬":"w","ð­":"x","ð®":"y","ð¯":"z","ð°":"A","ð±":"B","ð²":"C","ð³":"D","ð´":"E","ðµ":"F","ð¶":"G","ð·":"H","ð¸":"I","ð¹":"J","ðº":"K","ð»":"L","ð¼":"M","ð½":"N","ð¾":"O","ð¿":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"o","ð":"p","ð":"q","ð":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð ":"w","ð¡":"x","ð¢":"y","ð£":"z","ð¤":"Ä±","ð¥":"È·","ð¨":"Î","ð©":"Î","ðª":"Î","ð«":"Î","ð¬":"Î","ð­":"Î","ð®":"Î","ð¯":"Î","ð°":"Î","ð±":"Î","ð²":"Î","ð³":"Î","ð´":"Î","ðµ":"Î","ð¶":"Î","ð·":"Î ","ð¸":"Î¡","ð¹":"Î","ðº":"Î£","ð»":"Î¤","ð¼":"Î¥","ð½":"Î¦","ð¾":"Î§","ð¿":"Î¨","ð":"Î©","ð":"â","ð":"Î±","ð":"Î²","ð":"Î³","ð":"Î´","ð":"Îµ","ð":"Î¶","ð":"Î·","ð":"Î¸","ð":"Î¹","ð":"Îº","ð":"Î»","ð":"Î¼","ð":"Î½","ð":"Î¾","ð":"Î¿","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"â","ð":"Îµ","ð":"Î¸","ð":"Îº","ð":"Ï","ð ":"Ï","ð¡":"Ï","ð¢":"Î","ð£":"Î","ð¤":"Î","ð¥":"Î","ð¦":"Î","ð§":"Î","ð¨":"Î","ð©":"Î","ðª":"Î","ð«":"Î","ð¬":"Î","ð­":"Î","ð®":"Î","ð¯":"Î","ð°":"Î","ð±":"Î ","ð²":"Î¡","ð³":"Î","ð´":"Î£","ðµ":"Î¤","ð¶":"Î¥","ð·":"Î¦","ð¸":"Î§","ð¹":"Î¨","ðº":"Î©","ð»":"â","ð¼":"Î±","ð½":"Î²","ð¾":"Î³","ð¿":"Î´","ð":"Îµ","ð":"Î¶","ð":"Î·","ð":"Î¸","ð":"Î¹","ð":"Îº","ð":"Î»","ð":"Î¼","ð":"Î½","ð":"Î¾","ð":"Î¿","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"â","ð":"Îµ","ð":"Î¸","ð":"Îº","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð ":"Î","ð¡":"Î","ð¢":"Î","ð£":"Î","ð¤":"Î","ð¥":"Î","ð¦":"Î","ð§":"Î","ð¨":"Î","ð©":"Î","ðª":"Î","ð«":"Î ","ð¬":"Î¡","ð­":"Î","ð®":"Î£","ð¯":"Î¤","ð°":"Î¥","ð±":"Î¦","ð²":"Î§","ð³":"Î¨","ð´":"Î©","ðµ":"â","ð¶":"Î±","ð·":"Î²","ð¸":"Î³","ð¹":"Î´","ðº":"Îµ","ð»":"Î¶","ð¼":"Î·","ð½":"Î¸","ð¾":"Î¹","ð¿":"Îº","ð":"Î»","ð":"Î¼","ð":"Î½","ð":"Î¾","ð":"Î¿","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"â","ð":"Îµ","ð":"Î¸","ð":"Îº","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð ":"Î","ð¡":"Î","ð¢":"Î","ð£":"Î","ð¤":"Î","ð¥":"Î ","ð¦":"Î¡","ð§":"Î","ð¨":"Î£","ð©":"Î¤","ðª":"Î¥","ð«":"Î¦","ð¬":"Î§","ð­":"Î¨","ð®":"Î©","ð¯":"â","ð°":"Î±","ð±":"Î²","ð²":"Î³","ð³":"Î´","ð´":"Îµ","ðµ":"Î¶","ð¶":"Î·","ð·":"Î¸","ð¸":"Î¹","ð¹":"Îº","ðº":"Î»","ð»":"Î¼","ð¼":"Î½","ð½":"Î¾","ð¾":"Î¿","ð¿":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"â","ð":"Îµ","ð":"Î¸","ð":"Îº","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î ","ð ":"Î¡","ð¡":"Î","ð¢":"Î£","ð£":"Î¤","ð¤":"Î¥","ð¥":"Î¦","ð¦":"Î§","ð§":"Î¨","ð¨":"Î©","ð©":"â","ðª":"Î±","ð«":"Î²","ð¬":"Î³","ð­":"Î´","ð®":"Îµ","ð¯":"Î¶","ð°":"Î·","ð±":"Î¸","ð²":"Î¹","ð³":"Îº","ð´":"Î»","ðµ":"Î¼","ð¶":"Î½","ð·":"Î¾","ð¸":"Î¿","ð¹":"Ï","ðº":"Ï","ð»":"Ï","ð¼":"Ï","ð½":"Ï","ð¾":"Ï","ð¿":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"â","ð":"Îµ","ð":"Î¸","ð":"Îº","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"0","ð":"1","ð":"2","ð":"3","ð":"4","ð":"5","ð":"6","ð":"7","ð":"8","ð":"9","ð":"0","ð":"1","ð":"2","ð":"3","ð":"4","ð":"5","ð":"6","ð":"7","ð ":"8","ð¡":"9","ð¢":"0","ð£":"1","ð¤":"2","ð¥":"3","ð¦":"4","ð§":"5","ð¨":"6","ð©":"7","ðª":"8","ð«":"9","ð¬":"0","ð­":"1","ð®":"2","ð¯":"3","ð°":"4","ð±":"5","ð²":"6","ð³":"7","ð´":"8","ðµ":"9","ð¶":"0","ð·":"1","ð¸":"2","ð¹":"3","ðº":"4","ð»":"5","ð¼":"6","ð½":"7","ð¾":"8","ð¿":"9","ð¸":"Ø§","ð¸":"Ø¨","ð¸":"Ø¬","ð¸":"Ø¯","ð¸":"Ù","ð¸":"Ø²","ð¸":"Ø­","ð¸":"Ø·","ð¸":"Ù","ð¸":"Ù","ð¸":"Ù","ð¸":"Ù","ð¸":"Ù","ð¸":"Ø³","ð¸":"Ø¹","ð¸":"Ù","ð¸":"Øµ","ð¸":"Ù","ð¸":"Ø±","ð¸":"Ø´","ð¸":"Øª","ð¸":"Ø«","ð¸":"Ø®","ð¸":"Ø°","ð¸":"Ø¶","ð¸":"Ø¸","ð¸":"Øº","ð¸":"Ù®","ð¸":"Úº","ð¸":"Ú¡","ð¸":"Ù¯","ð¸¡":"Ø¨","ð¸¢":"Ø¬","ð¸¤":"Ù","ð¸§":"Ø­","ð¸©":"Ù","ð¸ª":"Ù","ð¸«":"Ù","ð¸¬":"Ù","ð¸­":"Ù","ð¸®":"Ø³","ð¸¯":"Ø¹","ð¸°":"Ù","ð¸±":"Øµ","ð¸²":"Ù","ð¸´":"Ø´","ð¸µ":"Øª","ð¸¶":"Ø«","ð¸·":"Ø®","ð¸¹":"Ø¶","ð¸»":"Øº","ð¹":"Ø¬","ð¹":"Ø­","ð¹":"Ù","ð¹":"Ù","ð¹":"Ù","ð¹":"Ø³","ð¹":"Ø¹","ð¹":"Øµ","ð¹":"Ù","ð¹":"Ø´","ð¹":"Ø®","ð¹":"Ø¶","ð¹":"Øº","ð¹":"Úº","ð¹":"Ù¯","ð¹¡":"Ø¨","ð¹¢":"Ø¬","ð¹¤":"Ù","ð¹§":"Ø­","ð¹¨":"Ø·","ð¹©":"Ù","ð¹ª":"Ù","ð¹¬":"Ù","ð¹­":"Ù","ð¹®":"Ø³","ð¹¯":"Ø¹","ð¹°":"Ù","ð¹±":"Øµ","ð¹²":"Ù","ð¹´":"Ø´","ð¹µ":"Øª","ð¹¶":"Ø«","ð¹·":"Ø®","ð¹¹":"Ø¶","ð¹º":"Ø¸","ð¹»":"Øº","ð¹¼":"Ù®","ð¹¾":"Ú¡","ðº":"Ø§","ðº":"Ø¨","ðº":"Ø¬","ðº":"Ø¯","ðº":"Ù","ðº":"Ù","ðº":"Ø²","ðº":"Ø­","ðº":"Ø·","ðº":"Ù","ðº":"Ù","ðº":"Ù","ðº":"Ù","ðº":"Ø³","ðº":"Ø¹","ðº":"Ù","ðº":"Øµ","ðº":"Ù","ðº":"Ø±","ðº":"Ø´","ðº":"Øª","ðº":"Ø«","ðº":"Ø®","ðº":"Ø°","ðº":"Ø¶","ðº":"Ø¸","ðº":"Øº","ðº¡":"Ø¨","ðº¢":"Ø¬","ðº£":"Ø¯","ðº¥":"Ù","ðº¦":"Ø²","ðº§":"Ø­","ðº¨":"Ø·","ðº©":"Ù","ðº«":"Ù","ðº¬":"Ù","ðº­":"Ù","ðº®":"Ø³","ðº¯":"Ø¹","ðº°":"Ù","ðº±":"Øµ","ðº²":"Ù","ðº³":"Ø±","ðº´":"Ø´","ðºµ":"Øª","ðº¶":"Ø«","ðº·":"Ø®","ðº¸":"Ø°","ðº¹":"Ø¶","ðºº":"Ø¸","ðº»":"Øº","ð":"0.","ð":"0,","ð":"1,","ð":"2,","ð":"3,","ð":"4,","ð":"5,","ð":"6,","ð":"7,","ð":"8,","ð":"9,","ð":"(A)","ð":"(B)","ð":"(C)","ð":"(D)","ð":"(E)","ð":"(F)","ð":"(G)","ð":"(H)","ð":"(I)","ð":"(J)","ð":"(K)","ð":"(L)","ð":"(M)","ð":"(N)","ð":"(O)","ð":"(P)","ð ":"(Q)","ð¡":"(R)","ð¢":"(S)","ð£":"(T)","ð¤":"(U)","ð¥":"(V)","ð¦":"(W)","ð§":"(X)","ð¨":"(Y)","ð©":"(Z)","ðª":"ãSã","ð«":"C","ð¬":"R","ð­":"CD","ð®":"WZ","ð°":"A","ð±":"B","ð²":"C","ð³":"D","ð´":"E","ðµ":"F","ð¶":"G","ð·":"H","ð¸":"I","ð¹":"J","ðº":"K","ð»":"L","ð¼":"M","ð½":"N","ð¾":"O","ð¿":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"HV","ð":"MV","ð":"SD","ð":"SS","ð":"PPV","ð":"WC","ðª":"MC","ð«":"MD","ð":"DJ","ð":"ã»ã","ð":"ã³ã³","ð":"ãµ","ð":"æ","ð":"å­","ð":"å","ð":"ãã","ð":"äº","ð":"å¤","ð":"è§£","ð":"å¤©","ð":"äº¤","ð":"æ ","ð":"ç¡","ð":"æ","ð":"å","ð":"å¾","ð":"å","ð":"æ°","ð ":"å","ð¡":"çµ","ð¢":"ç","ð£":"è²©","ð¤":"å£°","ð¥":"å¹","ð¦":"æ¼","ð§":"æ","ð¨":"æ","ð©":"ä¸","ðª":"ä¸","ð«":"é","ð¬":"å·¦","ð­":"ä¸­","ð®":"å³","ð¯":"æ","ð°":"èµ°","ð±":"æ","ð²":"ç¦","ð³":"ç©º","ð´":"å","ðµ":"æº","ð¶":"æ","ð·":"æ","ð¸":"ç³","ð¹":"å²","ðº":"å¶","ð":"ãæ¬ã","ð":"ãä¸ã","ð":"ãäºã","ð":"ãå®ã","ð":"ãç¹ã","ð":"ãæã","ð":"ãçã","ð":"ãåã","ð":"ãæã","ð":"å¾","ð":"å¯"};
/*
 * all.js - include file for normalization data for a particular script
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */
// !depends util/utils.js 
// !depends nfd/all.js
// !data norm.ccc nfkd/all
ilib.data.norm.nfkd = ilib.merge(ilib.data.norm.nfkd || {}, ilib.data.nfkd_all);
ilib.data.nfkd_all = undefined;
/*
 * all.js - include file for normalization data for a particular script
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */
// !depends util/utils.js 
// !depends nfd/all.js nfc/all.js nfkd/all.js
// !data norm.ccc

ilib.data.likelylocales = {"aa":"aa-Latn-ET","ab":"ab-Cyrl-GE","ady":"ady-Cyrl-RU","af":"af-Latn-ZA","agq":"agq-Latn-CM","ak":"ak-Latn-GH","am":"am-Ethi-ET","ar":"ar-Arab-EG","as":"as-Beng-IN","asa":"asa-Latn-TZ","ast":"ast-Latn-ES","av":"av-Cyrl-RU","ay":"ay-Latn-BO","az":"az-Latn-AZ","az-Arab":"az-Arab-IR","az-IR":"az-Arab-IR","ba":"ba-Cyrl-RU","bas":"bas-Latn-CM","be":"be-Cyrl-BY","bem":"bem-Latn-ZM","bez":"bez-Latn-TZ","bg":"bg-Cyrl-BG","bi":"bi-Latn-VU","bm":"bm-Latn-ML","bn":"bn-Beng-BD","bo":"bo-Tibt-CN","br":"br-Latn-FR","brx":"brx-Deva-IN","bs":"bs-Latn-BA","byn":"byn-Ethi-ER","ca":"ca-Latn-ES","cch":"cch-Latn-NG","ce":"ce-Cyrl-RU","ceb":"ceb-Latn-PH","cgg":"cgg-Latn-UG","ch":"ch-Latn-GU","chk":"chk-Latn-FM","chr":"chr-Cher-US","ckb":"ckb-Arab-IQ","cs":"cs-Latn-CZ","csb":"csb-Latn-PL","cy":"cy-Latn-GB","da":"da-Latn-DK","dav":"dav-Latn-KE","de":"de-Latn-DE","dje":"dje-Latn-NE","dua":"dua-Latn-CM","dv":"dv-Thaa-MV","dyo":"dyo-Latn-SN","dz":"dz-Tibt-BT","ebu":"ebu-Latn-KE","ee":"ee-Latn-GH","efi":"efi-Latn-NG","el":"el-Grek-GR","en":"en-Latn-US","eo":"eo-Latn-001","es":"es-Latn-ES","et":"et-Latn-EE","eu":"eu-Latn-ES","ewo":"ewo-Latn-CM","fa":"fa-Arab-IR","ff":"ff-Latn-SN","fi":"fi-Latn-FI","fil":"fil-Latn-PH","fj":"fj-Latn-FJ","fo":"fo-Latn-FO","fr":"fr-Latn-FR","fur":"fur-Latn-IT","fy":"fy-Latn-NL","ga":"ga-Latn-IE","gaa":"gaa-Latn-GH","gag":"gag-Latn-MD","gd":"gd-Latn-GB","gil":"gil-Latn-KI","gl":"gl-Latn-ES","gn":"gn-Latn-PY","gsw":"gsw-Latn-CH","gu":"gu-Gujr-IN","guz":"guz-Latn-KE","gv":"gv-Latn-GB","gv-Latn":"gv-Latn-IM","ha":"ha-Latn-NG","haw":"haw-Latn-US","he":"he-Hebr-IL","hi":"hi-Deva-IN","hil":"hil-Latn-PH","ho":"ho-Latn-PG","hr":"hr-Latn-HR","ht":"ht-Latn-HT","hu":"hu-Latn-HU","hy":"hy-Armn-AM","ia":"ia-Latn-001","id":"id-Latn-ID","ig":"ig-Latn-NG","ii":"ii-Yiii-CN","ilo":"ilo-Latn-PH","inh":"inh-Cyrl-RU","is":"is-Latn-IS","it":"it-Latn-IT","ja":"ja-Jpan-JP","jgo":"jgo-Latn-CM","jmc":"jmc-Latn-TZ","jv":"jv-Latn-ID","ka":"ka-Geor-GE","kab":"kab-Latn-DZ","kaj":"kaj-Latn-NG","kam":"kam-Latn-KE","kbd":"kbd-Cyrl-RU","kcg":"kcg-Latn-NG","kde":"kde-Latn-TZ","kea":"kea-Latn-CV","kg":"kg-Latn-CD","kha":"kha-Latn-IN","khq":"khq-Latn-ML","ki":"ki-Latn-KE","kj":"kj-Latn-NA","kk":"kk-Cyrl-KZ","kkj":"kkj-Latn-CM","kl":"kl-Latn-GL","kln":"kln-Latn-KE","km":"km-Khmr-KH","kn":"kn-Knda-IN","ko":"ko-Kore-KR","koi":"koi-Cyrl-RU","kok":"kok-Deva-IN","kos":"kos-Latn-FM","kpe":"kpe-Latn-LR","kpv":"kpv-Cyrl-RU","krc":"krc-Cyrl-RU","ks":"ks-Arab-IN","ksb":"ksb-Latn-TZ","ksf":"ksf-Latn-CM","ksh":"ksh-Latn-DE","ku":"ku-Latn-TR","ku-Arab":"ku-Arab-IQ","ku-IQ":"ku-Arab-IQ","kum":"kum-Cyrl-RU","kv":"kv-Cyrl-RU","kw":"kw-Latn-GB","ky":"ky-Cyrl-KG","la":"la-Latn-VA","lag":"lag-Latn-TZ","lah":"lah-Arab-PK","lb":"lb-Latn-LU","lbe":"lbe-Cyrl-RU","lez":"lez-Cyrl-RU","lg":"lg-Latn-UG","ln":"ln-Latn-CD","lo":"lo-Laoo-LA","lt":"lt-Latn-LT","lu":"lu-Latn-CD","lua":"lua-Latn-CD","luo":"luo-Latn-KE","luy":"luy-Latn-KE","lv":"lv-Latn-LV","mai":"mai-Deva-IN","mas":"mas-Latn-KE","mdf":"mdf-Cyrl-RU","mdh":"mdh-Latn-PH","mer":"mer-Latn-KE","mfe":"mfe-Latn-MU","mg":"mg-Latn-MG","mgh":"mgh-Latn-MZ","mgo":"mgo-Latn-CM","mh":"mh-Latn-MH","mi":"mi-Latn-NZ","mk":"mk-Cyrl-MK","ml":"ml-Mlym-IN","mn":"mn-Cyrl-MN","mn-CN":"mn-Mong-CN","mn-Mong":"mn-Mong-CN","mr":"mr-Deva-IN","ms":"ms-Latn-MY","mt":"mt-Latn-MT","mua":"mua-Latn-CM","my":"my-Mymr-MM","myv":"myv-Cyrl-RU","na":"na-Latn-NR","naq":"naq-Latn-NA","nb":"nb-Latn-NO","nd":"nd-Latn-ZW","nds":"nds-Latn-DE","ne":"ne-Deva-NP","niu":"niu-Latn-NU","nl":"nl-Latn-NL","nmg":"nmg-Latn-CM","nn":"nn-Latn-NO","nnh":"nnh-Latn-CM","nr":"nr-Latn-ZA","nso":"nso-Latn-ZA","nus":"nus-Latn-SD","ny":"ny-Latn-MW","nyn":"nyn-Latn-UG","oc":"oc-Latn-FR","om":"om-Latn-ET","or":"or-Orya-IN","os":"os-Cyrl-GE","pa":"pa-Guru-IN","pa-Arab":"pa-Arab-PK","pa-PK":"pa-Arab-PK","pag":"pag-Latn-PH","pap":"pap-Latn-AN","pau":"pau-Latn-PW","pl":"pl-Latn-PL","pon":"pon-Latn-FM","ps":"ps-Arab-AF","pt":"pt-Latn-BR","qu":"qu-Latn-PE","rm":"rm-Latn-CH","rn":"rn-Latn-BI","ro":"ro-Latn-RO","rof":"rof-Latn-TZ","ru":"ru-Cyrl-RU","rw":"rw-Latn-RW","rwk":"rwk-Latn-TZ","sa":"sa-Deva-IN","sah":"sah-Cyrl-RU","saq":"saq-Latn-KE","sat":"sat-Latn-IN","sbp":"sbp-Latn-TZ","sd":"sd-Arab-IN","se":"se-Latn-NO","seh":"seh-Latn-MZ","ses":"ses-Latn-ML","sg":"sg-Latn-CF","shi":"shi-Tfng-MA","shi-MA":"shi-Latn-MA","si":"si-Sinh-LK","sid":"sid-Latn-ET","sk":"sk-Latn-SK","sl":"sl-Latn-SI","sm":"sm-Latn-WS","sn":"sn-Latn-ZW","so":"so-Latn-SO","sq":"sq-Latn-AL","sr":"sr-Cyrl-RS","sr-ME":"sr-Latn-ME","ss":"ss-Latn-ZA","ssy":"ssy-Latn-ER","st":"st-Latn-ZA","su":"su-Latn-ID","sv":"sv-Latn-SE","sw":"sw-Latn-TZ","swc":"swc-Latn-CD","ta":"ta-Taml-IN","te":"te-Telu-IN","teo":"teo-Latn-UG","tet":"tet-Latn-TL","tg":"tg-Cyrl-TJ","th":"th-Thai-TH","ti":"ti-Ethi-ET","tig":"tig-Ethi-ER","tk":"tk-Latn-TM","tkl":"tkl-Latn-TK","tl":"tl-Latn-PH","tn":"tn-Latn-ZA","to":"to-Latn-TO","tpi":"tpi-Latn-PG","tr":"tr-Latn-TR","trv":"trv-Latn-TW","ts":"ts-Latn-ZA","tsg":"tsg-Latn-PH","tt":"tt-Cyrl-RU","tvl":"tvl-Latn-TV","twq":"twq-Latn-NE","ty":"ty-Latn-PF","tyv":"tyv-Cyrl-RU","tzm":"tzm-Latn-MA","udm":"udm-Cyrl-RU","ug":"ug-Arab-CN","uk":"uk-Cyrl-UA","uli":"uli-Latn-FM","und":"en-Latn-US","AD":"ca-Latn-AD","AE":"ar-Arab-AE","AF":"fa-Arab-AF","AL":"sq-Latn-AL","AM":"hy-Armn-AM","AN":"pap-Latn-AN","AO":"pt-Latn-AO","AR":"es-Latn-AR","Arab":"ar-Arab-EG","Arab-CN":"ug-Arab-CN","Arab-IN":"ur-Arab-IN","Arab-NG":"ha-Arab-NG","Arab-PK":"ur-Arab-PK","Armi":"arc-Armi-IR","Armn":"hy-Armn-AM","AS":"sm-Latn-AS","AT":"de-Latn-AT","Avst":"ae-Avst-IR","AW":"nl-Latn-AW","AX":"sv-Latn-AX","AZ":"az-Latn-AZ","BA":"bs-Latn-BA","Bali":"ban-Bali-ID","Bamu":"bax-Bamu-CM","Batk":"bbc-Batk-ID","BD":"bn-Beng-BD","BE":"nl-Latn-BE","Beng":"bn-Beng-BD","BF":"fr-Latn-BF","BG":"bg-Cyrl-BG","BH":"ar-Arab-BH","BI":"rn-Latn-BI","BJ":"fr-Latn-BJ","BL":"fr-Latn-BL","BN":"ms-Latn-BN","BO":"es-Latn-BO","Bopo":"zh-Bopo-TW","BR":"pt-Latn-BR","Brah":"pra-Brah-IN","Brai":"und-Brai-FR","BT":"dz-Tibt-BT","Bugi":"bug-Bugi-ID","Buhd":"bku-Buhd-PH","BY":"be-Cyrl-BY","Cakm":"ccp-Cakm-BD","Cans":"cr-Cans-CA","Cari":"xcr-Cari-TR","CD":"sw-Latn-CD","CF":"fr-Latn-CF","CG":"fr-Latn-CG","CH":"de-Latn-CH","Cham":"cjm-Cham-VN","Cher":"chr-Cher-US","CI":"fr-Latn-CI","CL":"es-Latn-CL","CM":"fr-Latn-CM","CN":"zh-Hans-CN","CO":"es-Latn-CO","Copt":"cop-Copt-EG","CP":"fr-Latn-CP","Cprt":"grc-Cprt-CY","CR":"es-Latn-CR","CU":"es-Latn-CU","CV":"pt-Latn-CV","CY":"el-Grek-CY","Cyrl":"ru-Cyrl-RU","Cyrl-BA":"sr-Cyrl-BA","Cyrl-GE":"ab-Cyrl-GE","CZ":"cs-Latn-CZ","DE":"de-Latn-DE","Deva":"hi-Deva-IN","DJ":"aa-Latn-DJ","DK":"da-Latn-DK","DO":"es-Latn-DO","DZ":"ar-Arab-DZ","EA":"es-Latn-EA","EC":"es-Latn-EC","EE":"et-Latn-EE","EG":"ar-Arab-EG","Egyp":"egy-Egyp-EG","EH":"ar-Arab-EH","ER":"ti-Ethi-ER","ES":"es-Latn-ES","Ethi":"am-Ethi-ET","FI":"fi-Latn-FI","FM":"chk-Latn-FM","FO":"fo-Latn-FO","FR":"fr-Latn-FR","GA":"fr-Latn-GA","GE":"ka-Geor-GE","Geor":"ka-Geor-GE","GF":"fr-Latn-GF","GH":"ak-Latn-GH","GL":"kl-Latn-GL","Glag":"cu-Glag-BG","GN":"fr-Latn-GN","Goth":"got-Goth-UA","GP":"fr-Latn-GP","GQ":"es-Latn-GQ","GR":"el-Grek-GR","Grek":"el-Grek-GR","GT":"es-Latn-GT","Gujr":"gu-Gujr-IN","Guru":"pa-Guru-IN","GW":"pt-Latn-GW","Hang":"ko-Hang-KR","Hani":"zh-Hans-CN","Hano":"hnn-Hano-PH","Hans":"zh-Hans-CN","Hant":"zh-Hant-TW","Hebr":"he-Hebr-IL","Hira":"ja-Hira-JP","HK":"zh-Hant-HK","HN":"es-Latn-HN","HR":"hr-Latn-HR","HT":"ht-Latn-HT","HU":"hu-Latn-HU","IC":"es-Latn-IC","ID":"id-Latn-ID","IL":"he-Hebr-IL","IN":"hi-Deva-IN","IQ":"ar-Arab-IQ","IR":"fa-Arab-IR","IS":"is-Latn-IS","IT":"it-Latn-IT","Ital":"ett-Ital-IT","Java":"jv-Java-ID","JO":"ar-Arab-JO","JP":"ja-Jpan-JP","Jpan":"ja-Jpan-JP","Kali":"eky-Kali-MM","Kana":"ja-Kana-JP","KG":"ky-Cyrl-KG","KH":"km-Khmr-KH","Khar":"pra-Khar-PK","Khmr":"km-Khmr-KH","KM":"ar-Arab-KM","Knda":"kn-Knda-IN","Kore":"ko-Kore-KR","KP":"ko-Kore-KP","KR":"ko-Kore-KR","Kthi":"bh-Kthi-IN","KW":"ar-Arab-KW","KZ":"ru-Cyrl-KZ","LA":"lo-Laoo-LA","Lana":"nod-Lana-TH","Laoo":"lo-Laoo-LA","Latn-CN":"za-Latn-CN","Latn-CY":"tr-Latn-CY","Latn-DZ":"fr-Latn-DZ","Latn-ER":"aa-Latn-ER","Latn-KM":"fr-Latn-KM","Latn-MA":"fr-Latn-MA","Latn-MK":"sq-Latn-MK","Latn-MR":"fr-Latn-MR","Latn-SY":"fr-Latn-SY","Latn-TN":"fr-Latn-TN","LB":"ar-Arab-LB","Lepc":"lep-Lepc-IN","LI":"de-Latn-LI","Limb":"lif-Limb-IN","Linb":"grc-Linb-GR","Lisu":"lis-Lisu-CN","LK":"si-Sinh-LK","LS":"st-Latn-LS","LT":"lt-Latn-LT","LU":"fr-Latn-LU","LV":"lv-Latn-LV","LY":"ar-Arab-LY","Lyci":"xlc-Lyci-TR","Lydi":"xld-Lydi-TR","MA":"ar-Arab-MA","Mand":"myz-Mand-IR","MC":"fr-Latn-MC","MD":"ro-Latn-MD","ME":"sr-Latn-ME","Merc":"xmr-Merc-SD","Mero":"xmr-Mero-SD","MF":"fr-Latn-MF","MG":"mg-Latn-MG","MK":"mk-Cyrl-MK","ML":"bm-Latn-ML","Mlym":"ml-Mlym-IN","MM":"my-Mymr-MM","MN":"mn-Cyrl-MN","MO":"zh-Hant-MO","Mong":"mn-Mong-CN","MQ":"fr-Latn-MQ","MR":"ar-Arab-MR","MT":"mt-Latn-MT","Mtei":"mni-Mtei-IN","MU":"mfe-Latn-MU","MV":"dv-Thaa-MV","MX":"es-Latn-MX","MY":"ms-Latn-MY","Mymr":"my-Mymr-MM","MZ":"pt-Latn-MZ","NA":"kj-Latn-NA","NC":"fr-Latn-NC","NE":"ha-Latn-NE","NI":"es-Latn-NI","Nkoo":"man-Nkoo-GN","NL":"nl-Latn-NL","NO":"nb-Latn-NO","NP":"ne-Deva-NP","Ogam":"sga-Ogam-IE","Olck":"sat-Olck-IN","OM":"ar-Arab-OM","Orkh":"otk-Orkh-MN","Orya":"or-Orya-IN","Osma":"so-Osma-SO","PA":"es-Latn-PA","PE":"es-Latn-PE","PF":"fr-Latn-PF","PG":"tpi-Latn-PG","PH":"fil-Latn-PH","Phag":"lzh-Phag-CN","Phli":"pal-Phli-IR","Phnx":"phn-Phnx-LB","PK":"ur-Arab-PK","PL":"pl-Latn-PL","Plrd":"hmd-Plrd-CN","PM":"fr-Latn-PM","PR":"es-Latn-PR","Prti":"xpr-Prti-IR","PS":"ar-Arab-PS","PT":"pt-Latn-PT","PW":"pau-Latn-PW","PY":"gn-Latn-PY","QA":"ar-Arab-QA","RE":"fr-Latn-RE","Rjng":"rej-Rjng-ID","RO":"ro-Latn-RO","RS":"sr-Cyrl-RS","RU":"ru-Cyrl-RU","Runr":"non-Runr-SE","RW":"rw-Latn-RW","SA":"ar-Arab-SA","Samr":"smp-Samr-IL","Sarb":"xsa-Sarb-YE","Saur":"saz-Saur-IN","SC":"fr-Latn-SC","SD":"ar-Arab-SD","SE":"sv-Latn-SE","Shaw":"en-Shaw-GB","Shrd":"sa-Shrd-IN","SI":"sl-Latn-SI","Sinh":"si-Sinh-LK","SJ":"nb-Latn-SJ","SK":"sk-Latn-SK","SM":"it-Latn-SM","SN":"fr-Latn-SN","SO":"so-Latn-SO","Sora":"srb-Sora-IN","SR":"nl-Latn-SR","ST":"pt-Latn-ST","Sund":"su-Sund-ID","SV":"es-Latn-SV","SY":"ar-Arab-SY","Sylo":"syl-Sylo-BD","Syrc":"syr-Syrc-SY","Tagb":"tbw-Tagb-PH","Takr":"doi-Takr-IN","Tale":"tdd-Tale-CN","Talu":"khb-Talu-CN","Taml":"ta-Taml-IN","Tavt":"blt-Tavt-VN","TD":"fr-Latn-TD","Telu":"te-Telu-IN","Tfng":"shi-Tfng-TN","TG":"fr-Latn-TG","Tglg":"fil-Tglg-PH","TH":"th-Thai-TH","Thaa":"dv-Thaa-MV","Thai":"th-Thai-TH","Tibt":"bo-Tibt-CN","TJ":"tg-Cyrl-TJ","TK":"tkl-Latn-TK","TL":"pt-Latn-TL","TM":"tk-Latn-TM","TN":"ar-Arab-TN","TO":"to-Latn-TO","TR":"tr-Latn-TR","TV":"tvl-Latn-TV","TW":"zh-Hant-TW","TZ":"sw-Latn-TZ","UA":"uk-Cyrl-UA","UG":"sw-Latn-UG","Ugar":"uga-Ugar-SY","UY":"es-Latn-UY","UZ":"uz-Cyrl-UZ","VA":"la-Latn-VA","Vaii":"vai-Vaii-LR","VE":"es-Latn-VE","VN":"vi-Latn-VN","VU":"bi-Latn-VU","WF":"fr-Latn-WF","WS":"sm-Latn-WS","Xpeo":"peo-Xpeo-IR","Xsux":"akk-Xsux-IQ","YE":"ar-Arab-YE","Yiii":"ii-Yiii-CN","YT":"fr-Latn-YT","ur":"ur-Arab-PK","uz":"uz-Cyrl-UZ","uz-AF":"uz-Arab-AF","uz-Arab":"uz-Arab-AF","vai":"vai-Vaii-LR","ve":"ve-Latn-ZA","vi":"vi-Latn-VN","vo":"vo-Latn-001","vun":"vun-Latn-TZ","wae":"wae-Latn-CH","wal":"wal-Ethi-ET","war":"war-Latn-PH","wo":"wo-Latn-SN","xh":"xh-Latn-ZA","xog":"xog-Latn-UG","yap":"yap-Latn-FM","yav":"yav-Latn-CM","yi":"yi-Hebr-IL","yo":"yo-Latn-NG","za":"za-Latn-CN","zh":"zh-Hans-CN","zh-Hani":"zh-Hans-CN","zh-Hant":"zh-Hant-TW","zh-HK":"zh-Hant-HK","zh-MO":"zh-Hant-MO","zh-TW":"zh-Hant-TW","zu":"zu-Latn-ZA"};
/*
 * localematch.js - Locale matcher definition
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js
// !data likelylocales

/**
 * @class
 * Create a new locale matcher instance. This is used
 * to see which locales can be matched with each other in
 * various ways.<p>
 * 
 * The options object may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - the locale to match
 * 
 * <li><i>onLoad</i> - a callback function to call when the locale matcher object is fully 
 * loaded. When the onLoad option is given, the locale matcher object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Depends directive: !depends localematch.js
 * 
 * @constructor
 * @param {Object} options parameters to initialize this matcher 
 */
ilib.LocaleMatcher = function(options) {
	var sync = true,
	    loadParams = undefined;
	
	this.locale = new ilib.Locale();
	
	if (options) {
		if (typeof(options.locale) !== 'undefined') {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			loadParams = options.loadParams;
		}
	}

	if (!ilib.LocaleMatcher.cache) {
		ilib.LocaleMatcher.cache = {};
	}

	if (!ilib.data.likelylocales) {
		ilib.loadData({
			object: ilib.LocaleMatcher, 
			locale: "-", 
			name: "likelylocales.json", 
			sync: sync, 
			loadParams: loadParams, 
			callback: ilib.bind(this, function (info) {
				if (!info) {
					info = {};
					var spec = this.locale.getSpec().replace(/-/g, "_");
					ilib.LocaleMatcher.cache[spec] = info;
				}
				this.info = info;
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			})
		});
	} else {
		this.info = ilib.data.likelylocales;
	}
};


ilib.LocaleMatcher.prototype = {
	/**
	 * Return the locale used to construct this instance. 
	 * @return {ilib.Locale|undefined} the locale for this matcher
	 */
	getLocale: function() {
		return this.locale;
	},
	
	/**
	 * Return an ilib.Locale instance that is fully specified based on partial information
	 * given to the constructor of this locale matcher instance. For example, if the locale
	 * spec given to this locale matcher instance is simply "ru" (for the Russian language), 
	 * then it will fill in the missing region and script tags and return a locale with 
	 * the specifier "ru-Cyrl-RU". (ie. Russian language, Cyrillic, Russian Federation).
	 * Any one or two of the language, script, or region parts may be left unspecified,
	 * and the other one or two parts will be filled in automatically. If this
	 * class has no information about the given locale, then the locale of this
	 * locale matcher instance is returned unchanged.
	 * 
	 * @returns {ilib.Locale} the most likely completion of the partial locale given
	 * to the constructor of this locale matcher instance
	 */
	getLikelyLocale: function () {
		if (typeof(this.info[this.locale.getSpec()]) === 'undefined') {
			return this.locale;
		}
		
		return new ilib.Locale(this.info[this.locale.getSpec()]);
	}
};


/*
 * normstring.js - ilib normalized string subclass definition
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends strings.js

/**
 * @class
 * Create a new normalized string instance. This string inherits from 
 * the ilib.String class, and adds the normalize method. It can be
 * used anywhere that a normal Javascript string is used. <p>
 * 
 * Depends directive: !depends normstring.js
 * 
 * @constructor
 * @param {string|ilib.String=} str initialize this instance with this string 
 */
ilib.NormString = function (str) {
	ilib.NormString.baseConstructor.call(this, str);
	
};
ilib.NormString.prototype = new ilib.String();
ilib.NormString.prototype.constructor = ilib.NormString;
ilib.NormString.baseConstructor = ilib.String;
ilib.NormString.superClass = ilib.String.prototype;


/**
 * Initialize the normalized string routines statically. This
 * is intended to be called in a dynamic-load version of ilib
 * to load the data need to normalize strings before any instances
 * of ilib.NormString are created.<p>
 * 
 * The options parameter may contain any of the following properties:
 * 
 * <ul>
 * <li><i>form</i> - {string} the normalization form to load
 * <li><i>script</i> - {string} load the normalization for this script. If the 
 * script is given as "all" then the normalization data for all scripts
 * is loaded at the same time
 * <li><i>sync</i> - {boolean} whether to load the files synchronously or not
 * <li><i>loadParams</i> - {Object} parameters to the loader function
 * <li><i>onLoad</i> - {function()} a function to call when the 
 * files are done being loaded
 * </ul>
 * 
 * @param {Object} options an object containing properties that govern 
 * how to initialize the data
 */
ilib.NormString.init = function(options) {
	if (!ilib._load || typeof(ilib._load) !== 'function') {
		// can't do anything
		return;
	}
	var form = "nfkc";
	var script = "all";
	var sync = true;
	var onLoad = undefined;
	var loadParams = undefined;
	if (options) {
		form = options.form || "nfkc";
		script = options.script || "all";
		sync = typeof(options.sync) !== 'undefined' ? options.sync : true;
		onLoad = typeof(options.onLoad) === 'function' ? options.onLoad : undefined;
		if (options.loadParams) {
			loadParams = options.loadParams;
		}
	}
	var formDependencies = {
		"nfd": ["nfd"],
		"nfc": ["nfc", "nfd"],
		"nfkd": ["nfkd", "nfd"],
		"nfkc": ["nfkd", "nfd", "nfc"]
	};
	var files = ["norm.ccc.json"];
	var forms = formDependencies[form];
	for (var f in forms) {
		files.push(forms[f] + "/" + script + ".json");
	}
	
	ilib._load(files, sync, loadParams, function(arr) {
		ilib.data.norm.ccc = arr[0];
		for (var i = 1; i < arr.length; i++) {
			if (typeof(arr[i]) !== 'undefined') {
				ilib.data.norm[forms[i-1]] = arr[i];
			}
		}
		
		if (onLoad) {
			onLoad(arr);
		}
	});
};

/**
 * @private
 * @static
 * 
 * Return true if the given character is a leading Jamo (Choseong) character.
 * 
 * @param {number} n code point to check
 * @return {boolean} true if the character is a leading Jamo character, 
 * false otherwise
 */
ilib.NormString._isJamoL = function (n) {
	return (n >= 0x1100 && n <= 0x1112);
};

/**
 * @private
 * @static
 * 
 * Return true if the given character is a vowel Jamo (Jungseong) character.
 * 
 * @param {number} n code point to check
 * @return {boolean} true if the character is a vowel Jamo character, 
 * false otherwise
 */
ilib.NormString._isJamoV = function (n) {
	return (n >= 0x1161 && n <= 0x1175);
};

/**
 * @private
 * @static
 * 
 * Return true if the given character is a trailing Jamo (Jongseong) character.
 * 
 * @param {number} n code point to check
 * @return {boolean} true if the character is a trailing Jamo character, 
 * false otherwise
 */
ilib.NormString._isJamoT = function (n) {
	return (n >= 0x11A8 && n <= 0x11C2);
};

/**
 * @private
 * @static
 * 
 * Return true if the given character is a precomposed Hangul character.
 * 
 * @param {number} n code point to check
 * @return {boolean} true if the character is a precomposed Hangul character, 
 * false otherwise
 */
ilib.NormString._isHangul = function (n) {
	return (n >= 0xAC00 && n <= 0xD7A3);
};

/**
 * @private
 * @static
 *
 * Algorithmically decompose a precomposed Korean syllabic Hangul 
 * character into its individual combining Jamo characters. The given 
 * character must be in the range of Hangul characters U+AC00 to U+D7A3.
 * 
 * @param {number} cp code point of a Korean Hangul character to decompose
 * @return {string} the decomposed string of Jamo characters
 */
ilib.NormString._decomposeHangul = function (cp) {
	var sindex = cp - 0xAC00;
	var result = String.fromCharCode(0x1100 + sindex / 588) + 
			String.fromCharCode(0x1161 + (sindex % 588) / 28);
	var t = sindex % 28;
	if (t !== 0) {
		result += String.fromCharCode(0x11A7 + t);
	}
	return result;
};

/**
 * @private
 * @static
 *
 * Algorithmically compose an L and a V combining Jamo characters into
 * a precomposed Korean syllabic Hangul character. Both should already
 * be in the proper ranges for L and V characters. 
 * 
 * @param {number} lead the code point of the lead Jamo character to compose
 * @param {number} trail the code point of the trailing Jamo character to compose
 * @return {string} the composed Hangul character
 */
ilib.NormString._composeJamoLV = function (lead, trail) {
	var lindex = lead - 0x1100;
	var vindex = trail - 0x1161;
	return ilib.String.fromCodePoint(0xAC00 + (lindex * 21 + vindex) * 28);
};

/**
 * @private
 * @static
 *
 * Algorithmically compose a Hangul LV and a combining Jamo T character 
 * into a precomposed Korean syllabic Hangul character. 
 * 
 * @param {number} lead the code point of the lead Hangul character to compose
 * @param {number} trail the code point of the trailing Jamo T character to compose
 * @return {string} the composed Hangul character
 */
ilib.NormString._composeJamoLVT = function (lead, trail) {
	return ilib.String.fromCodePoint(lead + (trail - 0x11A7));
};

/**
 * @private
 * @static
 * 
 * Expand one character according to the given canonical and 
 * compatibility mappings.
 * @param {string} ch character to map
 * @param {Object} canon the canonical mappings to apply
 * @param {Object=} compat the compatibility mappings to apply, or undefined
 * if only the canonical mappings are needed
 * @return {string} the mapped character
 */
ilib.NormString._expand = function (ch, canon, compat) {
	var i, 
		expansion = "",
		n = ch.charCodeAt(0);
	if (ilib.NormString._isHangul(n)) {
		expansion = ilib.NormString._decomposeHangul(n);
	} else {
		var result = canon[ch];
		if (!result && compat) {
			result = compat[ch];
		}
		if (result && result !== ch) {
			for (i = 0; i < result.length; i++) {
				expansion += ilib.NormString._expand(result[i], canon, compat);
			}
		} else {
			expansion = ch;
		}
	}
	return expansion;
};

/**
 * @private
 * @static
 * 
 * Compose one character out of a leading character and a 
 * trailing character. If the characters are Korean Jamo, they
 * will be composed algorithmically. If they are any other
 * characters, they will be looked up in the nfc tables.
 
 * @param {string} lead leading character to compose
 * @param {string} trail the trailing character to compose
 * @return {string} the fully composed character, or undefined if
 * there is no composition for those two characters
 */
ilib.NormString._compose = function (lead, trail) {
	var first = lead.charCodeAt(0);
	var last = trail.charCodeAt(0);
	if (ilib.NormString._isHangul(first) && ilib.NormString._isJamoT(last)) {
		return ilib.NormString._composeJamoLVT(first, last);
	} else if (ilib.NormString._isJamoL(first) && ilib.NormString._isJamoV(last)) {
		return ilib.NormString._composeJamoLV(first, last);
	}

	var c = lead + trail;
	return (ilib.data.norm.nfc && ilib.data.norm.nfc[c]);
};

	
/**
 * Perform the Unicode Normalization Algorithm upon the string and return 
 * the resulting new string. The current string is not modified.
 * 
 * <h2>Forms</h2>
 * 
 * The forms of possible normalizations are defined by the <a 
 * href="http://www.unicode.org/reports/tr15/">Unicode Standard
 * Annex (UAX) 15</a>. The form parameter is a string that may have one 
 * of the following values:
 * 
 * <ul>
 * <li>nfd - Canonical decomposition. This decomposes characters into
 * their exactly equivalent forms. For example, "&uuml;" would decompose
 * into a "u" followed by the combining diaeresis character. 
 * <li>nfc - Canonical decomposition followed by canonical composition.
 * This decomposes and then recomposes character into their shortest
 * exactly equivalent forms by recomposing as many combining characters
 * as possible. For example, "&uuml;" followed by a combining 
 * macron character would decompose into a "u" followed by the combining 
 * macron characters the combining diaeresis character, and then be recomposed into
 * the u with macron and diaeresis "&#x1E7B;" character. The reason that
 * the "nfc" form decomposes and then recomposes is that combining characters
 * have a specific order under the Unicode Normalization Algorithm, and
 * partly composed characters such as the "&uuml;" followed by combining
 * marks may change the order of the combining marks when decomposed and
 * recomposed.
 * <li>nfkd - Compatibility decomposition. This decomposes characters
 * into compatible forms that may not be exactly equivalent semantically,
 * as well as performing canonical decomposition as well.
 * For example, the "&oelig;" ligature character decomposes to the two
 * characters "oe" because they are compatible even though they are not 
 * exactly the same semantically. 
 * <li>nfkc - Compatibility decomposition followed by canonical composition.
 * This decomposes characters into compatible forms, then recomposes
 * characters using the canonical composition. That is, it breaks down
 * characters into the compatible forms, and then recombines all combining
 * marks it can with their base characters. For example, the character
 * "&#x01FD;" would be normalized to "a&eacute;" by first decomposing
 * the character into "a" followed by "e" followed by the combining acute accent
 * combining mark, and then recomposed to an "a" followed by the "e"
 * with acute accent.
 * </ul>
 * 
 * <h2>Operation</h2>
 * 
 * Two strings a and b can be said to be canonically equivalent if 
 * normalize(a) = normalize(b)
 * under the nfc normalization form. Two strings can be said to be compatible if
 * normalize(a) = normalize(b) under the nfkc normalization form.<p>
 * 
 * The canonical normalization is often used to see if strings are 
 * equivalent to each other, and thus is useful when implementing parsing 
 * algorithms or exact matching algorithms. It can also be used to ensure
 * that any string output produces a predictable sequence of characters.<p>
 * 
 * Compatibility normalization 
 * does not always preserve the semantic meaning of all the characters, 
 * although this is sometimes the behaviour that you are after. It is useful, 
 * for example, when doing searches of user-input against text in documents 
 * where the matches are supposed to "fuzzy". In this case, both the query
 * string and the document string would be mapped to their compatibility 
 * normalized forms, and then compared.<p>
 * 
 * Compatibility normalization also does not guarantee round-trip conversion
 * to and from legacy character sets as the normalization is "lossy". It is 
 * akin to doing a lower- or upper-case conversion on text -- after casing,
 * you cannot tell what case each character is in the original string. It is 
 * good for matching and searching, but it rarely good for output because some 
 * distinctions or meanings in the original text have been lost.<p>
 * 
 * Note that W3C normalization for HTML also escapes and unescapes
 * HTML character entities such as "&amp;uuml;" for u with diaeresis. This
 * method does not do such escaping or unescaping. If normalization is required
 * for HTML strings with entities, unescaping should be performed on the string 
 * prior to calling this method.<p>
 * 
 * <h2>Data</h2>
 * 
 * Normalization requires a fair amount of mapping data, much of which you may 
 * not need for the characters expected in your texts. It is possible to assemble
 * a copy of ilib that saves space by only including normalization data for 
 * those scripts that you expect to encounter in your data.<p>
 * 
 * The normalization data is organized by normalization form and within there
 * by script. To include the normalization data for a particular script with
 * a particular normalization form, use the directive:
 * 
 * <pre><code>
 * !depends &lt;form&gt;/&lt;script&gt;.js
 * </code></pre>
 * 
 * Where &lt;form&gt is the normalization form ("nfd", "nfc", "nfkd", or "nfkc"), and
 * &lt;script&gt; is the ISO 15924 code for the script you would like to
 * support. Example: to load in the NFC data for Cyrillic, you would use:
 * 
 * <pre><code>
 * !depends nfc/Cyrl.js
 * </code></pre>
 * 
 * Note that because certain normalization forms include others in their algorithm, 
 * their data also depends on the data for the other forms. For example, if you 
 * include the "nfc" data for a script, you will automatically get the "nfd" data 
 * for that same script as well because the NFC algorithm does NFD normalization 
 * first. Here are the dependencies:<p>
 * 
 * <ul>
 * <li>NFD -> no dependencies
 * <li>NFC -> NFD
 * <li>NFKD -> NFD
 * <li>NFKC -> NFKD, NFD, NFC
 * </ul>
 * 
 * A special value for the script dependency is "all" which will cause the data for 
 * all scripts
 * to be loaded for that normalization form. This would be useful if you know that
 * you are going to normalize a lot of multilingual text or cannot predict which scripts
 * will appear in the input. Because the NFKC form depends on all others, you can 
 * get all of the data for all forms automatically by depending on "nfkc/all.js".
 * Note that the normalization data for practically all script automatically depend
 * on data for the Common script (code "Zyyy") which contains all of the characters
 * that are commonly used in many different scripts. Examples of characters in the
 * Common script are the ASCII punctuation characters, or the ASCII Arabic 
 * numerals "0" through "9".<p>
 * 
 * By default, none of the data for normalization is automatically 
 * included in the preassembled iliball.js file. 
 * If you would like to normalize strings, you must assemble
 * your own copy of ilib and explicitly include the normalization data
 * for those scripts as per the instructions above. This normalization method will 
 * produce output, even without the normalization data. However, the output will be 
 * simply the same thing as its input for all scripts 
 * except Korean Hangul and Jamo, which are decomposed and recomposed 
 * algorithmically and therefore do not rely on data.<p>
 * 
 * If characters are encountered for which there are no normalization data, they
 * will be passed through to the output string unmodified.
 * 
 * @param {string} form The normalization form requested
 * @return {ilib.String} a new instance of an ilib.String that has been normalized
 * according to the requested form. The current instance is not modified.
 */
ilib.NormString.prototype.normalize = function (form) {
	var i;
	
	if (typeof(form) !== 'string' || this.str.length === 0) {
		return new ilib.String(this.str);
	}
	
	var nfc = false,
		nfkd = false;
	
	switch (form) {
	default:
		break;
		
	case "nfc":
		nfc = true;
		break;
		
	case "nfkd":
		nfkd = true;
		break;
		
	case "nfkc":
		nfkd = true;
		nfc = true;
		break;
	}

	// decompose
	var decomp = "";
	
	if (nfkd) {
		var ch, it = this.charIterator();
		while (it.hasNext()) {
			ch = it.next();
			decomp += ilib.NormString._expand(ch, ilib.data.norm.nfd, ilib.data.norm.nfkd);
		}
	} else {
		var ch, it = this.charIterator();
		while (it.hasNext()) {
			ch = it.next();
			decomp += ilib.NormString._expand(ch, ilib.data.norm.nfd);
		}
	}

	// now put the combining marks in a fixed order by 
	// sorting on the combining class
	function compareByCCC(left, right) {
		return ilib.data.norm.ccc[left] - ilib.data.norm.ccc[right]; 
	}
	
	function ccc(c) {
		return ilib.data.norm.ccc[c] || 0;
	}
		
	var dstr = new ilib.String(decomp);
	var it = dstr.charIterator();
	var cpArray = [];

	// easier to deal with as an array of chars
	while (it.hasNext()) {
		cpArray.push(it.next());
	}
	
	i = 0;
	while (i < cpArray.length) {
		if (typeof(ilib.data.norm.ccc[cpArray[i]]) !== 'undefined' && ilib.data.norm.ccc[cpArray[i]] !== 0) {
			// found a non-starter... rearrange all the non-starters until the next starter
			var end = i+1;
			while (end < cpArray.length &&
					typeof(ilib.data.norm.ccc[cpArray[end]]) !== 'undefined' && 
					ilib.data.norm.ccc[cpArray[end]] !== 0) {
				end++;
			}
			
			// simple sort of the non-starter chars
			if (end - i > 1) {
				cpArray = cpArray.slice(0,i).concat(cpArray.slice(i, end).sort(compareByCCC), cpArray.slice(end));
			}
		}
		i++;
	}
	
	if (nfc) {
		i = 0;
		while (i < cpArray.length) {
			if (typeof(ilib.data.norm.ccc[cpArray[i]]) === 'undefined' || ilib.data.norm.ccc[cpArray[i]] === 0) {
				// found a starter... find all the non-starters until the next starter. Must include
				// the next starter because under some odd circumstances, two starters sometimes recompose 
				// together to form another character
				var end = i+1;
				var notdone = true;
				while (end < cpArray.length && notdone) {
					if (typeof(ilib.data.norm.ccc[cpArray[end]]) !== 'undefined' && 
						ilib.data.norm.ccc[cpArray[end]] !== 0) {
						if (ccc(cpArray[end-1]) < ccc(cpArray[end])) { 
							// not blocked 
							var testChar = ilib.NormString._compose(cpArray[i], cpArray[end]);
							if (typeof(testChar) !== 'undefined') {
								cpArray[i] = testChar;
								
								// delete the combining char
								cpArray.splice(end,1);	
								
								// restart the iteration, just in case there is more to recompose with the new char
								end = i;
							}
						}
						end++;
					} else {
						// found the next starter. See if this can be composed with the previous starter
						var testChar = ilib.NormString._compose(cpArray[i], cpArray[end]);
						if (ccc(cpArray[end-1]) === 0 && typeof(testChar) !== 'undefined') { 
							// not blocked and there is a mapping 
							cpArray[i] = testChar;
							
							// delete the combining char
							cpArray.splice(end,1);
							
							// restart the iteration, just in case there is more to recompose with the new char
							end = i+1;
						} else {
							// finished iterating 
							notdone = false;
						}
					}
				}
			}
			i++;
		}
	}
	
	return new ilib.String(cpArray.length > 0 ? cpArray.join("") : "");
};
	

/*
 * casemapper.js - define upper- and lower-case mapper
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends locale.js util/utils.js

/**
 * @class
 * Create a new string mapper instance that maps strings to upper or
 * lower case. This mapping will work for any string as characters 
 * that have no case will be returned unchanged.<p>
 * 
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when loading the mapper. Some maps are 
 * locale-dependent, and this locale selects the right one. Default if this is
 * not specified is the current locale.
 * 
 * <li><i>direction</i> - "toupper" for upper-casing, or "tolower" for lower-casing.
 * Default if not specified is "toupper".
 * </ul>
 * 
 * Depends directive: !depends casemapper.js
 * 
 * @constructor
 * @param {Object=} options options to initialize this mapper 
 */
ilib.CaseMapper = function (options) {
	this.up = true;
	this.locale = new ilib.Locale();
	
	if (options) {
		if (typeof(options.locale) !== 'undefined') {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		this.up = (!options.direction || options.direction === "toupper");
	}

	this.charMapper = function(string) {
		var input;
		if (!string) {
			return string;
		}
		if (typeof(string) === 'string') {
			input = new ilib.String(string);
		} else {
			input = string.toString();
		}
		var ret = "";
		var it = input.charIterator();
		var c;
		
		while (it.hasNext()) {
			c = it.next();
			if (this.mapData[c]) {
				ret += this.mapData[c];
			} else {
				ret += this.up ? c.toUpperCase() : c.toLowerCase();
			}
		}
		
		return ret;
	};
	
	switch (this.locale.getLanguage()) {
		case "az":
		case "tr":
		case "crh":
		case "kk":
		case "krc":
		case "tt":
			this.mapData = this.up ?  {
				"i": "Ä°",
				"Ä±": "I"
			} : {
				"Ä°": "i",
				"I": "Ä±"
			};
			this.mapper = this.charMapper;
			break;
		case "fr":
			if (this.up && this.locale.getRegion() !== "CA") {
				this.mapData = {
					'Ã ': 'A',
					'Ã¡': 'A',
					'Ã¢': 'A',
					'Ã£': 'A',
					'Ã¤': 'A',
					'Ã§': 'C',
					'Ã¨': 'E',
					'Ã©': 'E',
					'Ãª': 'E',
					'Ã«': 'E',
					'Ã¬': 'I',
					'Ã­': 'I',
					'Ã®': 'I',
					'Ã¯': 'I',
					'Ã±': 'N',
					'Ã²': 'O',
					'Ã³': 'O',
					'Ã´': 'O',
					'Ã¶': 'O',
					'Ã¹': 'U',
					'Ãº': 'U',
					'Ã»': 'U',
					'Ã¼': 'U'
				};
				this.mapper = this.charMapper;
			}
			break;
		case "el":
			if (this.up) {
				this.mapData = {
					'Î': 'Î',
					'Î¬': 'Î',
					'Î­': 'Î',
					'Î®': 'Î',
					'Î¯': 'Î',
					'Î°': 'Î¥',
					'Ï': 'Î',
					'Ï': 'Î¥',
					'Ï': 'Î',
					'Ï': 'Î¥',
					'Ï': 'Î©'	
				};
				this.mapper = this.charMapper;
			}
			break;
		case "abq":
		case "ady":
		case "av":
		case "ce":
		case "dar":
		case "inh":
		case "kbd":
		case "lbe":
		case "lez":
		case "tab":
		case "ru":
			if (!this.up) {
				this.mapData = {
					'Ó': 'Ó'	
				};
				this.mapper = this.charMapper;
			}
			break;
	}
	
	if (!this.mapper) {
		this.mapper = function(string) {
			return this.up ? string.toUpperCase() : string.toLowerCase();
		};
	}
};

ilib.CaseMapper.prototype = {
	/**
	 * Return the locale that this mapper was constructed with. 
	 * @returns {ilib.Locale} the locale that this mapper was constructed with
	 */
	getLocale: function () {
		return this.locale;
	},
		
	/**
	 * Map a string to lower case in a locale-sensitive manner.
	 * 
	 * @param {string|undefined} string
	 * @return {string|undefined}
	 */
	map: function (string) {
		return this.mapper(string);
	}
};
/**
 * @license
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * ilib-full-inc.js - metafile that includes all other js files
 */

/* !depends
ilibglobal.js
daterangefmt.js
date.js
calendar/hebrewdate.js
calendar/hebrew.js
calendar/islamic.js
calendar/islamicdate.js
calendar/julian.js
calendar/juliandate.js
calendar/gregorian.js
calendar/gregoriandate.js
calendar/thaisolar.js
calendar/thaisolardate.js
numprs.js
numfmt.js
julianday.js
datefmt.js
calendar.js
util/utils.js
locale.js
strings.js
durfmt.js
resources.js
ctype.js
localeinfo.js
daterangefmt.js
ctype.isalnum.js
ctype.isalpha.js
ctype.isascii.js
ctype.isblank.js
ctype.iscntrl.js
ctype.isdigit.js
ctype.isgraph.js
ctype.isideo.js
ctype.islower.js
ctype.isprint.js
ctype.ispunct.js
ctype.isspace.js
ctype.isupper.js
ctype.isxdigit.js
ctype.isscript.js
scriptinfo.js
nameprs.js
namefmt.js
addressprs.js
addressfmt.js
collate.js
nfkc/all.js
localematch.js
normstring.js
maps/casemapper.js
*/
